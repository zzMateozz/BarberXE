{"version":3,"sources":["../../src/naming-strategy/DefaultNamingStrategy.ts"],"names":[],"mappings":"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","file":"DefaultNamingStrategy.js","sourcesContent":["import { NamingStrategyInterface } from \"./NamingStrategyInterface\"\r\nimport { RandomGenerator } from \"../util/RandomGenerator\"\r\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\"\r\nimport { Table } from \"../schema-builder/table/Table\"\r\n\r\n/**\r\n * Naming strategy that is used by default.\r\n */\r\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\r\n    protected getTableName(tableOrName: Table | string): string {\r\n        if (typeof tableOrName !== \"string\") {\r\n            tableOrName = tableOrName.name\r\n        }\r\n\r\n        return tableOrName.split(\".\").pop()!\r\n    }\r\n    /**\r\n     * Normalizes table name.\r\n     *\r\n     * @param targetName Name of the target entity that can be used to generate a table name.\r\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\r\n     */\r\n    tableName(\r\n        targetName: string,\r\n        userSpecifiedName: string | undefined,\r\n    ): string {\r\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName)\r\n    }\r\n\r\n    /**\r\n     * Creates a table name for a junction table of a closure table.\r\n     *\r\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\r\n     */\r\n    closureJunctionTableName(originalClosureTableName: string): string {\r\n        return originalClosureTableName + \"_closure\"\r\n    }\r\n\r\n    columnName(\r\n        propertyName: string,\r\n        customName: string,\r\n        embeddedPrefixes: string[],\r\n    ): string {\r\n        const name = customName || propertyName\r\n\r\n        if (embeddedPrefixes.length)\r\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name)\r\n\r\n        return name\r\n    }\r\n\r\n    relationName(propertyName: string): string {\r\n        return propertyName\r\n    }\r\n\r\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string {\r\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\r\n        const clonedColumnNames = [...columnNames]\r\n        clonedColumnNames.sort()\r\n        const tableName = this.getTableName(tableOrName)\r\n        const replacedTableName = tableName.replace(\".\", \"_\")\r\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\r\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27)\r\n    }\r\n\r\n    uniqueConstraintName(\r\n        tableOrName: Table | string,\r\n        columnNames: string[],\r\n    ): string {\r\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\r\n        const clonedColumnNames = [...columnNames]\r\n        clonedColumnNames.sort()\r\n        const tableName = this.getTableName(tableOrName)\r\n        const replacedTableName = tableName.replace(\".\", \"_\")\r\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\r\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27)\r\n    }\r\n\r\n    relationConstraintName(\r\n        tableOrName: Table | string,\r\n        columnNames: string[],\r\n        where?: string,\r\n    ): string {\r\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\r\n        const clonedColumnNames = [...columnNames]\r\n        clonedColumnNames.sort()\r\n        const tableName = this.getTableName(tableOrName)\r\n        const replacedTableName = tableName.replace(\".\", \"_\")\r\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\r\n        if (where) key += `_${where}`\r\n\r\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26)\r\n    }\r\n\r\n    defaultConstraintName(\r\n        tableOrName: Table | string,\r\n        columnName: string,\r\n    ): string {\r\n        const tableName = this.getTableName(tableOrName)\r\n        const replacedTableName = tableName.replace(\".\", \"_\")\r\n        const key = `${replacedTableName}_${columnName}`\r\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27)\r\n    }\r\n\r\n    foreignKeyName(\r\n        tableOrName: Table | string,\r\n        columnNames: string[],\r\n        _referencedTablePath?: string,\r\n        _referencedColumnNames?: string[],\r\n    ): string {\r\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\r\n        const clonedColumnNames = [...columnNames]\r\n        clonedColumnNames.sort()\r\n        const tableName = this.getTableName(tableOrName)\r\n        const replacedTableName = tableName.replace(\".\", \"_\")\r\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\r\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27)\r\n    }\r\n\r\n    indexName(\r\n        tableOrName: Table | string,\r\n        columnNames: string[],\r\n        where?: string,\r\n    ): string {\r\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\r\n        const clonedColumnNames = [...columnNames]\r\n        clonedColumnNames.sort()\r\n        const tableName = this.getTableName(tableOrName)\r\n        const replacedTableName = tableName.replace(\".\", \"_\")\r\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\r\n        if (where) key += `_${where}`\r\n\r\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26)\r\n    }\r\n\r\n    checkConstraintName(\r\n        tableOrName: Table | string,\r\n        expression: string,\r\n        isEnum?: boolean,\r\n    ): string {\r\n        const tableName = this.getTableName(tableOrName)\r\n        const replacedTableName = tableName.replace(\".\", \"_\")\r\n        const key = `${replacedTableName}_${expression}`\r\n        const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26)\r\n        return isEnum ? `${name}_ENUM` : name\r\n    }\r\n\r\n    exclusionConstraintName(\r\n        tableOrName: Table | string,\r\n        expression: string,\r\n    ): string {\r\n        const tableName = this.getTableName(tableOrName)\r\n        const replacedTableName = tableName.replace(\".\", \"_\")\r\n        const key = `${replacedTableName}_${expression}`\r\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26)\r\n    }\r\n\r\n    joinColumnName(relationName: string, referencedColumnName: string): string {\r\n        return camelCase(relationName + \"_\" + referencedColumnName)\r\n    }\r\n\r\n    joinTableName(\r\n        firstTableName: string,\r\n        secondTableName: string,\r\n        firstPropertyName: string,\r\n        secondPropertyName: string,\r\n    ): string {\r\n        return snakeCase(\r\n            firstTableName +\r\n                \"_\" +\r\n                firstPropertyName.replace(/\\./gi, \"_\") +\r\n                \"_\" +\r\n                secondTableName,\r\n        )\r\n    }\r\n\r\n    joinTableColumnDuplicationPrefix(\r\n        columnName: string,\r\n        index: number,\r\n    ): string {\r\n        return columnName + \"_\" + index\r\n    }\r\n\r\n    joinTableColumnName(\r\n        tableName: string,\r\n        propertyName: string,\r\n        columnName?: string,\r\n    ): string {\r\n        return camelCase(\r\n            tableName + \"_\" + (columnName ? columnName : propertyName),\r\n        )\r\n    }\r\n\r\n    joinTableInverseColumnName(\r\n        tableName: string,\r\n        propertyName: string,\r\n        columnName?: string,\r\n    ): string {\r\n        return this.joinTableColumnName(tableName, propertyName, columnName)\r\n    }\r\n\r\n    /**\r\n     * Adds globally set prefix to the table name.\r\n     * This method is executed no matter if prefix was set or not.\r\n     * Table name is either user's given table name, either name generated from entity target.\r\n     * Note that table name comes here already normalized by #tableName method.\r\n     */\r\n    prefixTableName(prefix: string, tableName: string): string {\r\n        return prefix + tableName\r\n    }\r\n\r\n    nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" }\r\n    materializedPathColumnName = \"mpath\"\r\n}\r\n"],"sourceRoot":".."}
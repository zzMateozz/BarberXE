{"version":3,"sources":["../../src/commands/QueryCommand.ts"],"names":[],"mappings":";;;;AAAA,0DAAwB;AACxB,wDAAuB;AACvB,8DAA6B;AAG7B,6DAAyD;AAEzD,iDAA6C;AAE7C;;GAEG;AACH,MAAa,YAAY;IAAzB;QACI,YAAO,GAAG,eAAe,CAAA;QACzB,aAAQ,GACJ,kHAAkH,CAAA;IAgE1H,CAAC;IA9DG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI;aACN,UAAU,CAAC,OAAO,EAAE;YACjB,QAAQ,EAAE,sBAAsB;YAChC,IAAI,EAAE,QAAQ;SACjB,CAAC;aACD,MAAM,CAAC,YAAY,EAAE;YAClB,KAAK,EAAE,GAAG;YACV,QAAQ,EACJ,6DAA6D;YACjE,YAAY,EAAE,IAAI;SACrB,CAAC,CAAA;IACV,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI,WAAW,GAA4B,SAAS,CAAA;QACpD,IAAI,UAAU,GAA2B,SAAS,CAAA;QAClD,IAAI,CAAC;YACD,UAAU,GAAG,MAAM,2BAAY,CAAC,cAAc,CAC1C,cAAI,CAAC,OAAO,CAAC,iBAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,UAAoB,CAAC,CACzD,CAAA;YACD,UAAU,CAAC,UAAU,CAAC;gBAClB,WAAW,EAAE,KAAK;gBAClB,aAAa,EAAE,KAAK;gBACpB,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,KAAK;aACjB,CAAC,CAAA;YACF,MAAM,UAAU,CAAC,UAAU,EAAE,CAAA;YAE7B,mDAAmD;YACnD,WAAW,GAAG,UAAU,CAAC,iBAAiB,EAAE,CAAA;YAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,KAAe,CAAA;YAClC,OAAO,CAAC,GAAG,CACP,eAAI,CAAC,KAAK,CAAA,iBAAiB,GAAG,6BAAa,CAAC,YAAY,CAAC,KAAK,CAAC,CAClE,CAAA;YACD,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;YAElD,IAAI,OAAO,WAAW,KAAK,WAAW,EAAE,CAAC;gBACrC,OAAO,CAAC,GAAG,CACP,eAAI,CAAC,KAAK,CAAA,kDAAkD,CAC/D,CAAA;YACL,CAAC;iBAAM,CAAC;gBACJ,OAAO,CAAC,GAAG,CAAC,eAAI,CAAC,KAAK,CAAA,mCAAmC,CAAC,CAAA;gBAC1D,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE;oBACrB,WAAW,EAAE,QAAQ;oBACrB,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,IAAI;iBACd,CAAC,CAAA;YACN,CAAC;YAED,MAAM,WAAW,CAAC,OAAO,EAAE,CAAA;YAC3B,MAAM,UAAU,CAAC,OAAO,EAAE,CAAA;QAC9B,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,6BAAa,CAAC,SAAS,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAA;YAE7D,IAAI,WAAW;gBAAE,MAAO,WAA2B,CAAC,OAAO,EAAE,CAAA;YAC7D,IAAI,UAAU,IAAI,UAAU,CAAC,aAAa;gBACtC,MAAM,UAAU,CAAC,OAAO,EAAE,CAAA;YAE9B,iBAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACnB,CAAC;IACL,CAAC;CACJ;AAnED,oCAmEC","file":"QueryCommand.js","sourcesContent":["import ansi from \"ansis\"\r\nimport path from \"path\"\r\nimport process from \"process\"\r\nimport yargs from \"yargs\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { CommandUtils } from \"./CommandUtils\"\r\n\r\n/**\r\n * Executes an SQL query on the given dataSource.\r\n */\r\nexport class QueryCommand implements yargs.CommandModule {\r\n    command = \"query [query]\"\r\n    describe =\r\n        \"Executes given SQL query on a default dataSource. Specify connection name to run query on a specific dataSource.\"\r\n\r\n    builder(args: yargs.Argv) {\r\n        return args\r\n            .positional(\"query\", {\r\n                describe: \"The SQL Query to run\",\r\n                type: \"string\",\r\n            })\r\n            .option(\"dataSource\", {\r\n                alias: \"d\",\r\n                describe:\r\n                    \"Path to the file where your DataSource instance is defined.\",\r\n                demandOption: true,\r\n            })\r\n    }\r\n\r\n    async handler(args: yargs.Arguments) {\r\n        let queryRunner: QueryRunner | undefined = undefined\r\n        let dataSource: DataSource | undefined = undefined\r\n        try {\r\n            dataSource = await CommandUtils.loadDataSource(\r\n                path.resolve(process.cwd(), args.dataSource as string),\r\n            )\r\n            dataSource.setOptions({\r\n                synchronize: false,\r\n                migrationsRun: false,\r\n                dropSchema: false,\r\n                logging: false,\r\n            })\r\n            await dataSource.initialize()\r\n\r\n            // create a query runner and execute query using it\r\n            queryRunner = dataSource.createQueryRunner()\r\n            const query = args.query as string\r\n            console.log(\r\n                ansi.green`Running query: ` + PlatformTools.highlightSql(query),\r\n            )\r\n            const queryResult = await queryRunner.query(query)\r\n\r\n            if (typeof queryResult === \"undefined\") {\r\n                console.log(\r\n                    ansi.green`Query has been executed. No result was returned.`,\r\n                )\r\n            } else {\r\n                console.log(ansi.green`Query has been executed. Result: `)\r\n                console.dir(queryResult, {\r\n                    breakLength: Infinity,\r\n                    compact: false,\r\n                    depth: null,\r\n                })\r\n            }\r\n\r\n            await queryRunner.release()\r\n            await dataSource.destroy()\r\n        } catch (err) {\r\n            PlatformTools.logCmdErr(\"Error during query execution:\", err)\r\n\r\n            if (queryRunner) await (queryRunner as QueryRunner).release()\r\n            if (dataSource && dataSource.isInitialized)\r\n                await dataSource.destroy()\r\n\r\n            process.exit(1)\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
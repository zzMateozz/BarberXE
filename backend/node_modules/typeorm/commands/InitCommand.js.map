{"version":3,"sources":["../../src/commands/InitCommand.ts"],"names":[],"mappings":"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","file":"InitCommand.js","sourcesContent":["import ansi from \"ansis\"\r\nimport { exec } from \"child_process\"\r\nimport path from \"path\"\r\nimport yargs from \"yargs\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport { CommandUtils } from \"./CommandUtils\"\r\n\r\n/**\r\n * Generates a new project with TypeORM.\r\n */\r\nexport class InitCommand implements yargs.CommandModule {\r\n    command = \"init\"\r\n    describe =\r\n        \"Generates initial TypeORM project structure. \" +\r\n        \"If name specified then creates files inside directory called as name. \" +\r\n        \"If its not specified then creates files inside current directory.\"\r\n\r\n    builder(args: yargs.Argv) {\r\n        return args\r\n            .option(\"n\", {\r\n                alias: \"name\",\r\n                describe: \"Name of the project directory.\",\r\n            })\r\n            .option(\"db\", {\r\n                alias: \"database\",\r\n                describe: \"Database type you'll use in your project.\",\r\n            })\r\n            .option(\"express\", {\r\n                describe:\r\n                    \"Indicates if express server sample code should be included in the project. False by default.\",\r\n            })\r\n            .option(\"docker\", {\r\n                describe:\r\n                    \"Set to true if docker-compose must be generated as well. False by default.\",\r\n            })\r\n            .option(\"pm\", {\r\n                alias: \"manager\",\r\n                choices: [\"npm\", \"yarn\"],\r\n                default: \"npm\",\r\n                describe: \"Install packages, expected values are npm or yarn.\",\r\n            })\r\n            .option(\"ms\", {\r\n                alias: \"module\",\r\n                choices: [\"commonjs\", \"esm\"],\r\n                default: \"commonjs\",\r\n                describe:\r\n                    \"Module system to use for project, expected values are commonjs or esm.\",\r\n            })\r\n    }\r\n\r\n    async handler(args: yargs.Arguments) {\r\n        try {\r\n            const database: string = (args.database as any) || \"postgres\"\r\n            const isExpress = args.express !== undefined ? true : false\r\n            const isDocker = args.docker !== undefined ? true : false\r\n            const basePath = process.cwd() + (args.name ? \"/\" + args.name : \"\")\r\n            const projectName = args.name\r\n                ? path.basename(args.name as any)\r\n                : undefined\r\n            const installNpm = args.pm === \"yarn\" ? false : true\r\n            const projectIsEsm = args.ms === \"esm\"\r\n            await CommandUtils.createFile(\r\n                basePath + \"/package.json\",\r\n                InitCommand.getPackageJsonTemplate(projectName, projectIsEsm),\r\n                false,\r\n            )\r\n            if (isDocker)\r\n                await CommandUtils.createFile(\r\n                    basePath + \"/docker-compose.yml\",\r\n                    InitCommand.getDockerComposeTemplate(database),\r\n                    false,\r\n                )\r\n            await CommandUtils.createFile(\r\n                basePath + \"/.gitignore\",\r\n                InitCommand.getGitIgnoreFile(),\r\n            )\r\n            await CommandUtils.createFile(\r\n                basePath + \"/README.md\",\r\n                InitCommand.getReadmeTemplate({ docker: isDocker }),\r\n                false,\r\n            )\r\n            await CommandUtils.createFile(\r\n                basePath + \"/tsconfig.json\",\r\n                InitCommand.getTsConfigTemplate(projectIsEsm),\r\n            )\r\n            await CommandUtils.createFile(\r\n                basePath + \"/src/entity/User.ts\",\r\n                InitCommand.getUserEntityTemplate(database),\r\n            )\r\n            await CommandUtils.createFile(\r\n                basePath + \"/src/data-source.ts\",\r\n                InitCommand.getAppDataSourceTemplate(projectIsEsm, database),\r\n            )\r\n            await CommandUtils.createFile(\r\n                basePath + \"/src/index.ts\",\r\n                InitCommand.getAppIndexTemplate(isExpress, projectIsEsm),\r\n            )\r\n            await CommandUtils.createDirectories(basePath + \"/src/migration\")\r\n\r\n            // generate extra files for express application\r\n            if (isExpress) {\r\n                await CommandUtils.createFile(\r\n                    basePath + \"/src/routes.ts\",\r\n                    InitCommand.getRoutesTemplate(projectIsEsm),\r\n                )\r\n                await CommandUtils.createFile(\r\n                    basePath + \"/src/controller/UserController.ts\",\r\n                    InitCommand.getControllerTemplate(projectIsEsm),\r\n                )\r\n            }\r\n\r\n            const packageJsonContents = await CommandUtils.readFile(\r\n                basePath + \"/package.json\",\r\n            )\r\n            await CommandUtils.createFile(\r\n                basePath + \"/package.json\",\r\n                InitCommand.appendPackageJson(\r\n                    packageJsonContents,\r\n                    database,\r\n                    isExpress,\r\n                    projectIsEsm,\r\n                ),\r\n            )\r\n\r\n            if (args.name) {\r\n                console.log(\r\n                    ansi.green`Project created inside ${ansi.blue(\r\n                        basePath,\r\n                    )} directory.`,\r\n                )\r\n            } else {\r\n                console.log(\r\n                    ansi.green`Project created inside current directory.`,\r\n                )\r\n            }\r\n\r\n            console.log(ansi.green`Please wait, installing dependencies...`)\r\n            if (args.pm && installNpm) {\r\n                await InitCommand.executeCommand(\"npm install\", basePath)\r\n            } else {\r\n                await InitCommand.executeCommand(\"yarn install\", basePath)\r\n            }\r\n\r\n            console.log(ansi.green`Done! Start playing with a new project!`)\r\n        } catch (err) {\r\n            PlatformTools.logCmdErr(\"Error during project initialization:\", err)\r\n            process.exit(1)\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected static executeCommand(command: string, cwd: string) {\r\n        return new Promise<string>((ok, fail) => {\r\n            exec(command, { cwd }, (error: any, stdout: any, stderr: any) => {\r\n                if (stdout) return ok(stdout)\r\n                if (stderr) return fail(stderr)\r\n                if (error) return fail(error)\r\n                ok(\"\")\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the ormconfig file.\r\n     */\r\n    protected static getAppDataSourceTemplate(\r\n        isEsm: boolean,\r\n        database: string,\r\n    ): string {\r\n        let dbSettings = \"\"\r\n        switch (database) {\r\n            case \"mysql\":\r\n                dbSettings = `type: \"mysql\",\r\n    host: \"localhost\",\r\n    port: 3306,\r\n    username: \"test\",\r\n    password: \"test\",\r\n    database: \"test\",`\r\n                break\r\n            case \"mariadb\":\r\n                dbSettings = `type: \"mariadb\",\r\n    host: \"localhost\",\r\n    port: 3306,\r\n    username: \"test\",\r\n    password: \"test\",\r\n    database: \"test\",`\r\n                break\r\n            case \"sqlite\":\r\n                dbSettings = `type: \"sqlite\",\r\n    database: \"database.sqlite\",`\r\n                break\r\n            case \"better-sqlite3\":\r\n                dbSettings = `type: \"better-sqlite3\",\r\n    database: \"database.sqlite\",`\r\n                break\r\n            case \"postgres\":\r\n                dbSettings = `type: \"postgres\",\r\n    host: \"localhost\",\r\n    port: 5432,\r\n    username: \"test\",\r\n    password: \"test\",\r\n    database: \"test\",`\r\n                break\r\n            case \"cockroachdb\":\r\n                dbSettings = `type: \"cockroachdb\",\r\n    host: \"localhost\",\r\n    port: 26257,\r\n    username: \"root\",\r\n    password: \"\",\r\n    database: \"defaultdb\",`\r\n                break\r\n            case \"mssql\":\r\n                dbSettings = `type: \"mssql\",\r\n    host: \"localhost\",\r\n    username: \"sa\",\r\n    password: \"Admin12345\",\r\n    database: \"tempdb\",`\r\n                break\r\n            case \"oracle\":\r\n                dbSettings = `type: \"oracle\",\r\nhost: \"localhost\",\r\nusername: \"system\",\r\npassword: \"oracle\",\r\nport: 1521,\r\nsid: \"xe.oracle.docker\",`\r\n                break\r\n            case \"mongodb\":\r\n                dbSettings = `type: \"mongodb\",\r\n    database: \"test\",`\r\n                break\r\n            case \"spanner\":\r\n                dbSettings = `type: \"spanner\",\r\n    projectId: \"test\",\r\n    instanceId: \"test\",\r\n    databaseId: \"test\",`\r\n                break\r\n        }\r\n        return `import \"reflect-metadata\"\r\nimport { DataSource } from \"typeorm\"\r\nimport { User } from \"./entity/User${isEsm ? \".js\" : \"\"}\"\r\n\r\nexport const AppDataSource = new DataSource({\r\n    ${dbSettings}\r\n    synchronize: true,\r\n    logging: false,\r\n    entities: [User],\r\n    migrations: [],\r\n    subscribers: [],\r\n})\r\n`\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the ormconfig file.\r\n     */\r\n    protected static getTsConfigTemplate(esmModule: boolean): string {\r\n        if (esmModule)\r\n            return JSON.stringify(\r\n                {\r\n                    compilerOptions: {\r\n                        lib: [\"es2021\"],\r\n                        target: \"es2021\",\r\n                        module: \"es2022\",\r\n                        moduleResolution: \"node\",\r\n                        allowSyntheticDefaultImports: true,\r\n                        outDir: \"./build\",\r\n                        emitDecoratorMetadata: true,\r\n                        experimentalDecorators: true,\r\n                        sourceMap: true,\r\n                    },\r\n                },\r\n                undefined,\r\n                3,\r\n            )\r\n        else\r\n            return JSON.stringify(\r\n                {\r\n                    compilerOptions: {\r\n                        lib: [\"es5\", \"es6\"],\r\n                        target: \"es5\",\r\n                        module: \"commonjs\",\r\n                        moduleResolution: \"node\",\r\n                        outDir: \"./build\",\r\n                        emitDecoratorMetadata: true,\r\n                        experimentalDecorators: true,\r\n                        sourceMap: true,\r\n                    },\r\n                },\r\n                undefined,\r\n                3,\r\n            )\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the .gitignore file.\r\n     */\r\n    protected static getGitIgnoreFile(): string {\r\n        return `.idea/\r\n.vscode/\r\nnode_modules/\r\nbuild/\r\ntmp/\r\ntemp/`\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the user entity.\r\n     */\r\n    protected static getUserEntityTemplate(database: string): string {\r\n        return `import { Entity, ${\r\n            database === \"mongodb\"\r\n                ? \"ObjectIdColumn, ObjectId\"\r\n                : \"PrimaryGeneratedColumn\"\r\n        }, Column } from \"typeorm\"\r\n\r\n@Entity()\r\nexport class User {\r\n\r\n    ${\r\n        database === \"mongodb\"\r\n            ? \"@ObjectIdColumn()\"\r\n            : \"@PrimaryGeneratedColumn()\"\r\n    }\r\n    id: ${database === \"mongodb\" ? \"ObjectId\" : \"number\"}\r\n\r\n    @Column()\r\n    firstName: string\r\n\r\n    @Column()\r\n    lastName: string\r\n\r\n    @Column()\r\n    age: number\r\n\r\n}\r\n`\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the route file (used when express is enabled).\r\n     */\r\n    protected static getRoutesTemplate(isEsm: boolean): string {\r\n        return `import { UserController } from \"./controller/UserController${\r\n            isEsm ? \".js\" : \"\"\r\n        }\"\r\n\r\nexport const Routes = [{\r\n    method: \"get\",\r\n    route: \"/users\",\r\n    controller: UserController,\r\n    action: \"all\"\r\n}, {\r\n    method: \"get\",\r\n    route: \"/users/:id\",\r\n    controller: UserController,\r\n    action: \"one\"\r\n}, {\r\n    method: \"post\",\r\n    route: \"/users\",\r\n    controller: UserController,\r\n    action: \"save\"\r\n}, {\r\n    method: \"delete\",\r\n    route: \"/users/:id\",\r\n    controller: UserController,\r\n    action: \"remove\"\r\n}]`\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the user controller file (used when express is enabled).\r\n     */\r\n    protected static getControllerTemplate(isEsm: boolean): string {\r\n        return `import { AppDataSource } from \"../data-source${\r\n            isEsm ? \".js\" : \"\"\r\n        }\"\r\nimport { NextFunction, Request, Response } from \"express\"\r\nimport { User } from \"../entity/User${isEsm ? \".js\" : \"\"}\"\r\n\r\nexport class UserController {\r\n\r\n    private userRepository = AppDataSource.getRepository(User)\r\n\r\n    async all(request: Request, response: Response, next: NextFunction) {\r\n        return this.userRepository.find()\r\n    }\r\n\r\n    async one(request: Request, response: Response, next: NextFunction) {\r\n        const id = parseInt(request.params.id)\r\n\r\n\r\n        const user = await this.userRepository.findOne({\r\n            where: { id }\r\n        })\r\n\r\n        if (!user) {\r\n            return \"unregistered user\"\r\n        }\r\n        return user\r\n    }\r\n\r\n    async save(request: Request, response: Response, next: NextFunction) {\r\n        const { firstName, lastName, age } = request.body;\r\n\r\n        const user = Object.assign(new User(), {\r\n            firstName,\r\n            lastName,\r\n            age\r\n        })\r\n\r\n        return this.userRepository.save(user)\r\n    }\r\n\r\n    async remove(request: Request, response: Response, next: NextFunction) {\r\n        const id = parseInt(request.params.id)\r\n\r\n        let userToRemove = await this.userRepository.findOneBy({ id })\r\n\r\n        if (!userToRemove) {\r\n            return \"this user not exist\"\r\n        }\r\n\r\n        await this.userRepository.remove(userToRemove)\r\n\r\n        return \"user has been removed\"\r\n    }\r\n\r\n}`\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the main (index) application file.\r\n     */\r\n    protected static getAppIndexTemplate(\r\n        express: boolean,\r\n        isEsm: boolean,\r\n    ): string {\r\n        if (express) {\r\n            return `import ${!isEsm ? \"* as \" : \"\"}express from \"express\"\r\nimport ${!isEsm ? \"* as \" : \"\"}bodyParser from \"body-parser\"\r\nimport { Request, Response } from \"express\"\r\nimport { AppDataSource } from \"./data-source${isEsm ? \".js\" : \"\"}\"\r\nimport { Routes } from \"./routes${isEsm ? \".js\" : \"\"}\"\r\nimport { User } from \"./entity/User${isEsm ? \".js\" : \"\"}\"\r\n\r\nAppDataSource.initialize().then(async () => {\r\n\r\n    // create express app\r\n    const app = express()\r\n    app.use(bodyParser.json())\r\n\r\n    // register express routes from defined application routes\r\n    Routes.forEach(route => {\r\n        (app as any)[route.method](route.route, (req: Request, res: Response, next: Function) => {\r\n            const result = (new (route.controller as any))[route.action](req, res, next)\r\n            if (result instanceof Promise) {\r\n                result.then(result => result !== null && result !== undefined ? res.send(result) : undefined)\r\n\r\n            } else if (result !== null && result !== undefined) {\r\n                res.json(result)\r\n            }\r\n        })\r\n    })\r\n\r\n    // setup express app here\r\n    // ...\r\n\r\n    // start express server\r\n    app.listen(3000)\r\n\r\n    // insert new users for test\r\n    await AppDataSource.manager.save(\r\n        AppDataSource.manager.create(User, {\r\n            firstName: \"Timber\",\r\n            lastName: \"Saw\",\r\n            age: 27\r\n        })\r\n    )\r\n\r\n    await AppDataSource.manager.save(\r\n        AppDataSource.manager.create(User, {\r\n            firstName: \"Phantom\",\r\n            lastName: \"Assassin\",\r\n            age: 24\r\n        })\r\n    )\r\n\r\n    console.log(\"Express server has started on port 3000. Open http://localhost:3000/users to see results\")\r\n\r\n}).catch(error => console.log(error))\r\n`\r\n        } else {\r\n            return `import { AppDataSource } from \"./data-source${\r\n                isEsm ? \".js\" : \"\"\r\n            }\"\r\nimport { User } from \"./entity/User${isEsm ? \".js\" : \"\"}\"\r\n\r\nAppDataSource.initialize().then(async () => {\r\n\r\n    console.log(\"Inserting a new user into the database...\")\r\n    const user = new User()\r\n    user.firstName = \"Timber\"\r\n    user.lastName = \"Saw\"\r\n    user.age = 25\r\n    await AppDataSource.manager.save(user)\r\n    console.log(\"Saved a new user with id: \" + user.id)\r\n\r\n    console.log(\"Loading users from the database...\")\r\n    const users = await AppDataSource.manager.find(User)\r\n    console.log(\"Loaded users: \", users)\r\n\r\n    console.log(\"Here you can setup and run express / fastify / any other framework.\")\r\n\r\n}).catch(error => console.log(error))\r\n`\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the new package.json file.\r\n     */\r\n    protected static getPackageJsonTemplate(\r\n        projectName?: string,\r\n        projectIsEsm?: boolean,\r\n    ): string {\r\n        return JSON.stringify(\r\n            {\r\n                name: projectName || \"typeorm-sample\",\r\n                version: \"0.0.1\",\r\n                description: \"Awesome project developed with TypeORM.\",\r\n                type: projectIsEsm ? \"module\" : \"commonjs\",\r\n                devDependencies: {},\r\n                dependencies: {},\r\n                scripts: {},\r\n            },\r\n            undefined,\r\n            3,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the new docker-compose.yml file.\r\n     */\r\n    protected static getDockerComposeTemplate(database: string): string {\r\n        switch (database) {\r\n            case \"mysql\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  mysql:\r\n    image: \"mysql:8.0.30\"\r\n    ports:\r\n      - \"3306:3306\"\r\n    environment:\r\n      MYSQL_ROOT_PASSWORD: \"admin\"\r\n      MYSQL_USER: \"test\"\r\n      MYSQL_PASSWORD: \"test\"\r\n      MYSQL_DATABASE: \"test\"\r\n\r\n`\r\n            case \"mariadb\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  mariadb:\r\n    image: \"mariadb:10.8.4\"\r\n    ports:\r\n      - \"3306:3306\"\r\n    environment:\r\n      MYSQL_ROOT_PASSWORD: \"admin\"\r\n      MYSQL_USER: \"test\"\r\n      MYSQL_PASSWORD: \"test\"\r\n      MYSQL_DATABASE: \"test\"\r\n\r\n`\r\n            case \"postgres\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  postgres:\r\n    image: \"postgres:14.5\"\r\n    ports:\r\n      - \"5432:5432\"\r\n    environment:\r\n      POSTGRES_USER: \"test\"\r\n      POSTGRES_PASSWORD: \"test\"\r\n      POSTGRES_DB: \"test\"\r\n\r\n`\r\n            case \"cockroachdb\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  cockroachdb:\r\n    image: \"cockroachdb/cockroach:v22.1.6\"\r\n    command: start --insecure\r\n    ports:\r\n      - \"26257:26257\"\r\n\r\n`\r\n            case \"sqlite\":\r\n            case \"better-sqlite3\":\r\n                return `version: '3'\r\nservices:\r\n`\r\n            case \"oracle\":\r\n                throw new TypeORMError(\r\n                    `You cannot initialize a project with docker for Oracle driver yet.`,\r\n                ) // todo: implement for oracle as well\r\n\r\n            case \"mssql\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  mssql:\r\n    image: \"microsoft/mssql-server-linux:rc2\"\r\n    ports:\r\n      - \"1433:1433\"\r\n    environment:\r\n      SA_PASSWORD: \"Admin12345\"\r\n      ACCEPT_EULA: \"Y\"\r\n\r\n`\r\n            case \"mongodb\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  mongodb:\r\n    image: \"mongo:5.0.12\"\r\n    container_name: \"typeorm-mongodb\"\r\n    ports:\r\n      - \"27017:27017\"\r\n\r\n`\r\n            case \"spanner\":\r\n                return `version: '3'\r\nservices:\r\n\r\n  spanner:\r\n    image: gcr.io/cloud-spanner-emulator/emulator:1.4.1\r\n    ports:\r\n      - \"9010:9010\"\r\n      - \"9020:9020\"\r\n\r\n`\r\n        }\r\n        return \"\"\r\n    }\r\n\r\n    /**\r\n     * Gets contents of the new readme.md file.\r\n     */\r\n    protected static getReadmeTemplate(options: { docker: boolean }): string {\r\n        let template = `# Awesome Project Build with TypeORM\r\n\r\nSteps to run this project:\r\n\r\n1. Run \\`npm i\\` command\r\n`\r\n\r\n        if (options.docker) {\r\n            template += `2. Run \\`docker-compose up\\` command\r\n`\r\n        } else {\r\n            template += `2. Setup database settings inside \\`data-source.ts\\` file\r\n`\r\n        }\r\n\r\n        template += `3. Run \\`npm start\\` command\r\n`\r\n        return template\r\n    }\r\n\r\n    /**\r\n     * Appends to a given package.json template everything needed.\r\n     */\r\n    protected static appendPackageJson(\r\n        packageJsonContents: string,\r\n        database: string,\r\n        express: boolean,\r\n        projectIsEsm: boolean /*, docker: boolean*/,\r\n    ): string {\r\n        const packageJson = JSON.parse(packageJsonContents)\r\n\r\n        if (!packageJson.devDependencies) packageJson.devDependencies = {}\r\n        Object.assign(packageJson.devDependencies, {\r\n            \"ts-node\": \"10.9.1\",\r\n            \"@types/node\": \"^16.11.10\",\r\n            typescript: \"4.5.2\",\r\n        })\r\n\r\n        if (!packageJson.dependencies) packageJson.dependencies = {}\r\n        Object.assign(packageJson.dependencies, {\r\n            typeorm:\r\n                require(\"../package.json\").version !== \"0.0.0\"\r\n                    ? require(\"../package.json\").version // install version from package.json if present\r\n                    : require(\"../package.json\").installFrom, // else use custom source\r\n            \"reflect-metadata\": \"^0.1.13\",\r\n        })\r\n\r\n        switch (database) {\r\n            case \"mysql\":\r\n            case \"mariadb\":\r\n                packageJson.dependencies[\"mysql\"] = \"^2.14.1\"\r\n                break\r\n            case \"postgres\":\r\n            case \"cockroachdb\":\r\n                packageJson.dependencies[\"pg\"] = \"^8.4.0\"\r\n                break\r\n            case \"sqlite\":\r\n                packageJson.dependencies[\"sqlite3\"] = \"^5.0.2\"\r\n                break\r\n            case \"better-sqlite3\":\r\n                packageJson.dependencies[\"better-sqlite3\"] = \"^8.0.0\"\r\n                break\r\n            case \"oracle\":\r\n                packageJson.dependencies[\"oracledb\"] = \"^5.1.0\"\r\n                break\r\n            case \"mssql\":\r\n                packageJson.dependencies[\"mssql\"] = \"^9.1.1\"\r\n                break\r\n            case \"mongodb\":\r\n                packageJson.dependencies[\"mongodb\"] = \"^5.2.0\"\r\n                break\r\n            case \"spanner\":\r\n                packageJson.dependencies[\"@google-cloud/spanner\"] = \"^5.18.0\"\r\n                break\r\n        }\r\n\r\n        if (express) {\r\n            packageJson.dependencies[\"express\"] = \"^4.17.2\"\r\n            packageJson.dependencies[\"body-parser\"] = \"^1.19.1\"\r\n        }\r\n\r\n        if (!packageJson.scripts) packageJson.scripts = {}\r\n\r\n        if (projectIsEsm)\r\n            Object.assign(packageJson.scripts, {\r\n                start: /*(docker ? \"docker-compose up && \" : \"\") + */ \"node --loader ts-node/esm src/index.ts\",\r\n                typeorm: \"typeorm-ts-node-esm\",\r\n            })\r\n        else\r\n            Object.assign(packageJson.scripts, {\r\n                start: /*(docker ? \"docker-compose up && \" : \"\") + */ \"ts-node src/index.ts\",\r\n                typeorm: \"typeorm-ts-node-commonjs\",\r\n            })\r\n\r\n        return JSON.stringify(packageJson, undefined, 3)\r\n    }\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../../src/commands/SchemaLogCommand.ts"],"names":[],"mappings":";;;;AAAA,0DAAwB;AACxB,wDAAuB;AACvB,8DAA6B;AAG7B,6DAAyD;AACzD,iDAA6C;AAE7C;;GAEG;AACH,MAAa,gBAAgB;IAA7B;QACI,YAAO,GAAG,YAAY,CAAA;QACtB,aAAQ,GACJ,sGAAsG;YACtG,+DAA+D,CAAA;IAkEvE,CAAC;IAhEG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;YAC7B,KAAK,EAAE,GAAG;YACV,QAAQ,EACJ,6DAA6D;YACjE,YAAY,EAAE,IAAI;SACrB,CAAC,CAAA;IACN,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI,UAAU,GAA2B,SAAS,CAAA;QAClD,IAAI,CAAC;YACD,UAAU,GAAG,MAAM,2BAAY,CAAC,cAAc,CAC1C,cAAI,CAAC,OAAO,CAAC,iBAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,UAAoB,CAAC,CACzD,CAAA;YACD,UAAU,CAAC,UAAU,CAAC;gBAClB,WAAW,EAAE,KAAK;gBAClB,aAAa,EAAE,KAAK;gBACpB,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,KAAK;aACjB,CAAC,CAAA;YACF,MAAM,UAAU,CAAC,UAAU,EAAE,CAAA;YAE7B,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,MAAM;iBACtC,mBAAmB,EAAE;iBACrB,GAAG,EAAE,CAAA;YAEV,IAAI,WAAW,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACrC,OAAO,CAAC,GAAG,CACP,eAAI,CAAC,MAAM,CAAA,4FAA4F,CAC1G,CAAA;YACL,CAAC;iBAAM,CAAC;gBACJ,MAAM,aAAa,GAAG,EAAE,CAAC,QAAQ,CAC7B,EAAE,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,MAAM,EAChD,GAAG,CACN,CAAA;gBACD,OAAO,CAAC,GAAG,CAAC,eAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAA;gBACvC,OAAO,CAAC,GAAG,CACP,eAAI,CAAC,MAAM;qBACN,IAAI,CAAA,iEAAiE,eAAI,CAAC,KAAK,CAChF,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,CAC1C,IAAI,CACR,CAAA;gBACD,OAAO,CAAC,GAAG,CAAC,eAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAA;gBAEvC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;oBACtC,IAAI,SAAS,GAAG,OAAO,CAAC,KAAK,CAAA;oBAC7B,SAAS,GAAG,SAAS,CAAC,IAAI,EAAE,CAAA;oBAC5B,SAAS,GAAG,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC;wBAC/B,CAAC,CAAC,SAAS;wBACX,CAAC,CAAC,SAAS,GAAG,GAAG,CAAA;oBACrB,OAAO,CAAC,GAAG,CAAC,6BAAa,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAA;gBACtD,CAAC,CAAC,CAAA;YACN,CAAC;YACD,MAAM,UAAU,CAAC,OAAO,EAAE,CAAA;QAC9B,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,IAAI,UAAU;gBACV,6BAAa,CAAC,SAAS,CACnB,sCAAsC,EACtC,GAAG,CACN,CAAA;YACL,iBAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACnB,CAAC;IACL,CAAC;CACJ;AAtED,4CAsEC","file":"SchemaLogCommand.js","sourcesContent":["import ansi from \"ansis\"\r\nimport path from \"path\"\r\nimport process from \"process\"\r\nimport yargs from \"yargs\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport { CommandUtils } from \"./CommandUtils\"\r\n\r\n/**\r\n * Shows sql to be executed by schema:sync command.\r\n */\r\nexport class SchemaLogCommand implements yargs.CommandModule {\r\n    command = \"schema:log\"\r\n    describe =\r\n        \"Shows sql to be executed by schema:sync command. It shows sql log only for your default dataSource. \" +\r\n        \"To run update queries on a concrete connection use -c option.\"\r\n\r\n    builder(args: yargs.Argv) {\r\n        return args.option(\"dataSource\", {\r\n            alias: \"d\",\r\n            describe:\r\n                \"Path to the file where your DataSource instance is defined.\",\r\n            demandOption: true,\r\n        })\r\n    }\r\n\r\n    async handler(args: yargs.Arguments) {\r\n        let dataSource: DataSource | undefined = undefined\r\n        try {\r\n            dataSource = await CommandUtils.loadDataSource(\r\n                path.resolve(process.cwd(), args.dataSource as string),\r\n            )\r\n            dataSource.setOptions({\r\n                synchronize: false,\r\n                migrationsRun: false,\r\n                dropSchema: false,\r\n                logging: false,\r\n            })\r\n            await dataSource.initialize()\r\n\r\n            const sqlInMemory = await dataSource.driver\r\n                .createSchemaBuilder()\r\n                .log()\r\n\r\n            if (sqlInMemory.upQueries.length === 0) {\r\n                console.log(\r\n                    ansi.yellow`Your schema is up to date - there are no queries to be executed by schema synchronization.`,\r\n                )\r\n            } else {\r\n                const lineSeparator = \"\".padStart(\r\n                    63 + String(sqlInMemory.upQueries.length).length,\r\n                    \"-\",\r\n                )\r\n                console.log(ansi.yellow(lineSeparator))\r\n                console.log(\r\n                    ansi.yellow\r\n                        .bold`-- Schema synchronization will execute following sql queries (${ansi.white(\r\n                        sqlInMemory.upQueries.length.toString(),\r\n                    )}):`,\r\n                )\r\n                console.log(ansi.yellow(lineSeparator))\r\n\r\n                sqlInMemory.upQueries.forEach((upQuery) => {\r\n                    let sqlString = upQuery.query\r\n                    sqlString = sqlString.trim()\r\n                    sqlString = sqlString.endsWith(\";\")\r\n                        ? sqlString\r\n                        : sqlString + \";\"\r\n                    console.log(PlatformTools.highlightSql(sqlString))\r\n                })\r\n            }\r\n            await dataSource.destroy()\r\n        } catch (err) {\r\n            if (dataSource)\r\n                PlatformTools.logCmdErr(\r\n                    \"Error during schema synchronization:\",\r\n                    err,\r\n                )\r\n            process.exit(1)\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
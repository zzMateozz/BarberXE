{"version":3,"sources":["../../src/commands/SubscriberCreateCommand.ts"],"names":[],"mappings":";;;;AAAA,0DAAwB;AACxB,wDAAuB;AAEvB,6DAAyD;AACzD,iDAA6C;AAE7C;;GAEG;AACH,MAAa,uBAAuB;IAApC;QACI,YAAO,GAAG,0BAA0B,CAAA;QACpC,aAAQ,GAAG,6BAA6B,CAAA;IAiD5C,CAAC;IA/CG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YAC3B,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,6BAA6B;YACvC,YAAY,EAAE,IAAI;SACrB,CAAC,CAAA;IACN,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI,CAAC;YACD,MAAM,QAAQ,GAAI,IAAI,CAAC,IAAe,CAAC,UAAU,CAAC,GAAG,CAAC;gBAClD,CAAC,CAAE,IAAI,CAAC,IAAe;gBACvB,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAc,CAAC,CAAA;YACtD,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;YACxC,MAAM,WAAW,GAAG,uBAAuB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;YACjE,MAAM,UAAU,GAAG,MAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAA;YAClE,IAAI,UAAU,EAAE,CAAC;gBACb,MAAM,IAAI,KAAK,CAAC,SAAS,QAAQ,qBAAqB,CAAC,CAAA;YAC3D,CAAC;YACD,MAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,EAAE,WAAW,CAAC,CAAA;YAC5D,OAAO,CAAC,GAAG,CACP,eAAI,CAAC,KAAK,CACN,cAAc,eAAI,CAAC,IAAI,CAAA,GAAG,QAAQ,KAAK,iCAAiC,CAC3E,CACJ,CAAA;QACL,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,6BAAa,CAAC,SAAS,CAAC,mCAAmC,EAAE,KAAK,CAAC,CAAA;YACnE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACnB,CAAC;IACL,CAAC;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACO,MAAM,CAAC,WAAW,CAAC,IAAY;QACrC,OAAO;;;eAGA,IAAI;;;CAGlB,CAAA;IACG,CAAC;CACJ;AAnDD,0DAmDC","file":"SubscriberCreateCommand.js","sourcesContent":["import ansi from \"ansis\"\r\nimport path from \"path\"\r\nimport yargs from \"yargs\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport { CommandUtils } from \"./CommandUtils\"\r\n\r\n/**\r\n * Generates a new subscriber.\r\n */\r\nexport class SubscriberCreateCommand implements yargs.CommandModule {\r\n    command = \"subscriber:create <path>\"\r\n    describe = \"Generates a new subscriber.\"\r\n\r\n    builder(args: yargs.Argv) {\r\n        return args.positional(\"path\", {\r\n            type: \"string\",\r\n            describe: \"Path of the subscriber file\",\r\n            demandOption: true,\r\n        })\r\n    }\r\n\r\n    async handler(args: yargs.Arguments) {\r\n        try {\r\n            const fullPath = (args.path as string).startsWith(\"/\")\r\n                ? (args.path as string)\r\n                : path.resolve(process.cwd(), args.path as string)\r\n            const filename = path.basename(fullPath)\r\n            const fileContent = SubscriberCreateCommand.getTemplate(filename)\r\n            const fileExists = await CommandUtils.fileExists(fullPath + \".ts\")\r\n            if (fileExists) {\r\n                throw new Error(`File \"${fullPath}.ts\" already exists`)\r\n            }\r\n            await CommandUtils.createFile(fullPath + \".ts\", fileContent)\r\n            console.log(\r\n                ansi.green(\r\n                    `Subscriber ${ansi.blue`${fullPath}.ts`} has been created successfully.`,\r\n                ),\r\n            )\r\n        } catch (error) {\r\n            PlatformTools.logCmdErr(\"Error during subscriber creation:\", error)\r\n            process.exit(1)\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets contents of the entity file.\r\n     */\r\n    protected static getTemplate(name: string): string {\r\n        return `import { EventSubscriber, EntitySubscriberInterface } from \"typeorm\"\r\n\r\n@EventSubscriber()\r\nexport class ${name} implements EntitySubscriberInterface {\r\n\r\n}\r\n`\r\n    }\r\n}\r\n"],"sourceRoot":".."}
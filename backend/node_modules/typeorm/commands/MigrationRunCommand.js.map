{"version":3,"sources":["../../src/commands/MigrationRunCommand.ts"],"names":[],"mappings":";;;;AAAA,wDAAuB;AACvB,yDAAkC;AAElC,6DAAyD;AAEzD,iDAA6C;AAE7C;;GAEG;AACH,MAAa,mBAAmB;IAAhC;QACI,YAAO,GAAG,eAAe,CAAA;QACzB,aAAQ,GAAG,8BAA8B,CAAA;IA6E7C,CAAC;IA3EG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI;aACN,MAAM,CAAC,YAAY,EAAE;YAClB,KAAK,EAAE,GAAG;YACV,QAAQ,EACJ,6DAA6D;YACjE,YAAY,EAAE,IAAI;SACrB,CAAC;aACD,MAAM,CAAC,aAAa,EAAE;YACnB,KAAK,EAAE,GAAG;YACV,OAAO,EAAE,SAAS;YAClB,QAAQ,EACJ,uFAAuF;SAC9F,CAAC;aACD,MAAM,CAAC,MAAM,EAAE;YACZ,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,KAAK;YACd,QAAQ,EACJ,+FAA+F;gBAC/F,gCAAgC;SACvC,CAAC,CAAA;IACV,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI,UAAU,GAA2B,SAAS,CAAA;QAClD,IAAI,CAAC;YACD,UAAU,GAAG,MAAM,2BAAY,CAAC,cAAc,CAC1C,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,UAAoB,CAAC,CACzD,CAAA;YACD,UAAU,CAAC,UAAU,CAAC;gBAClB,WAAW,EAAE,EAAE;gBACf,WAAW,EAAE,KAAK;gBAClB,aAAa,EAAE,KAAK;gBACpB,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC;aACxC,CAAC,CAAA;YACF,MAAM,UAAU,CAAC,UAAU,EAAE,CAAA;YAE7B,MAAM,OAAO,GAAG;gBACZ,WAAW,EACP,UAAU,CAAC,OAAO,CAAC,yBAAyB;oBAC3C,KAAiC;gBACtC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;aACjB,CAAA;YAED,QAAQ,IAAI,CAAC,CAAC,EAAE,CAAC;gBACb,KAAK,KAAK;oBACN,OAAO,CAAC,WAAW,GAAG,KAAK,CAAA;oBAC3B,MAAK;gBACT,KAAK,MAAM,CAAC;gBACZ,KAAK,OAAO;oBACR,OAAO,CAAC,WAAW,GAAG,MAAM,CAAA;oBAC5B,MAAK;gBACT,KAAK,MAAM;oBACP,OAAO,CAAC,WAAW,GAAG,MAAM,CAAA;oBAC5B,MAAK;gBACT,QAAQ;gBACR,OAAO;YACX,CAAC;YAED,MAAM,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;YACvC,MAAM,UAAU,CAAC,OAAO,EAAE,CAAA;YAE1B,4BAA4B;YAC5B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACnB,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,6BAAa,CAAC,SAAS,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAA;YAE3D,IAAI,UAAU,IAAI,UAAU,CAAC,aAAa;gBACtC,MAAM,UAAU,CAAC,OAAO,EAAE,CAAA;YAE9B,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACnB,CAAC;IACL,CAAC;CACJ;AA/ED,kDA+EC","file":"MigrationRunCommand.js","sourcesContent":["import path from \"path\"\r\nimport * as process from \"process\"\r\nimport * as yargs from \"yargs\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport { DataSource } from \"../data-source\"\r\nimport { CommandUtils } from \"./CommandUtils\"\r\n\r\n/**\r\n * Runs migration command.\r\n */\r\nexport class MigrationRunCommand implements yargs.CommandModule {\r\n    command = \"migration:run\"\r\n    describe = \"Runs all pending migrations.\"\r\n\r\n    builder(args: yargs.Argv) {\r\n        return args\r\n            .option(\"dataSource\", {\r\n                alias: \"d\",\r\n                describe:\r\n                    \"Path to the file where your DataSource instance is defined.\",\r\n                demandOption: true,\r\n            })\r\n            .option(\"transaction\", {\r\n                alias: \"t\",\r\n                default: \"default\",\r\n                describe:\r\n                    \"Indicates if transaction should be used or not for migration run. Enabled by default.\",\r\n            })\r\n            .option(\"fake\", {\r\n                alias: \"f\",\r\n                type: \"boolean\",\r\n                default: false,\r\n                describe:\r\n                    \"Fakes running the migrations if table schema has already been changed manually or externally \" +\r\n                    \"(e.g. through another project)\",\r\n            })\r\n    }\r\n\r\n    async handler(args: yargs.Arguments) {\r\n        let dataSource: DataSource | undefined = undefined\r\n        try {\r\n            dataSource = await CommandUtils.loadDataSource(\r\n                path.resolve(process.cwd(), args.dataSource as string),\r\n            )\r\n            dataSource.setOptions({\r\n                subscribers: [],\r\n                synchronize: false,\r\n                migrationsRun: false,\r\n                dropSchema: false,\r\n                logging: [\"query\", \"error\", \"schema\"],\r\n            })\r\n            await dataSource.initialize()\r\n\r\n            const options = {\r\n                transaction:\r\n                    dataSource.options.migrationsTransactionMode ??\r\n                    (\"all\" as \"all\" | \"none\" | \"each\"),\r\n                fake: !!args.f,\r\n            }\r\n\r\n            switch (args.t) {\r\n                case \"all\":\r\n                    options.transaction = \"all\"\r\n                    break\r\n                case \"none\":\r\n                case \"false\":\r\n                    options.transaction = \"none\"\r\n                    break\r\n                case \"each\":\r\n                    options.transaction = \"each\"\r\n                    break\r\n                default:\r\n                // noop\r\n            }\r\n\r\n            await dataSource.runMigrations(options)\r\n            await dataSource.destroy()\r\n\r\n            // exit process if no errors\r\n            process.exit(0)\r\n        } catch (err) {\r\n            PlatformTools.logCmdErr(\"Error during migration run:\", err)\r\n\r\n            if (dataSource && dataSource.isInitialized)\r\n                await dataSource.destroy()\r\n\r\n            process.exit(1)\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
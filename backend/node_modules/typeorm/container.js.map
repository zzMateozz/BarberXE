{"version":3,"sources":["../../src/container.ts"],"names":[],"mappings":";;AA8DA,oCAMC;AAOD,4CAcC;AA5DD;;;;;GAKG;AACH,MAAM,gBAAgB,GAAuB,IAAI,CAAC;IAAA;QAGtC,cAAS,GAAsC,EAAE,CAAA;IAc7D,CAAC;IAZG,GAAG,CAAI,SAA2B;QAC9B,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAA;QAC/D,IAAI,CAAC,QAAQ,EAAE,CAAC;YACZ,QAAQ,GAAG;gBACP,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,IAAK,SAAyB,EAAE;aAC3C,CAAA;YACD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACjC,CAAC;QAED,OAAO,QAAQ,CAAC,MAAM,CAAA;IAC1B,CAAC;CACJ,CAAC,EAAE,CAAA;AAEJ,IAAI,aAAiC,CAAA;AACrC,IAAI,oBAAqD,CAAA;AAEzD;;;;GAIG;AACH,SAAgB,YAAY,CACxB,YAAgC,EAChC,OAA6B;IAE7B,aAAa,GAAG,YAAY,CAAA;IAC5B,oBAAoB,GAAG,OAAO,CAAA;AAClC,CAAC;AAED;;;;GAIG;AACH,SAAgB,gBAAgB,CAAI,SAA2B;IAC3D,IAAI,aAAa,EAAE,CAAC;QAChB,IAAI,CAAC;YACD,MAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;YAC7C,IAAI,QAAQ;gBAAE,OAAO,QAAQ,CAAA;YAE7B,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,QAAQ;gBACvD,OAAO,QAAQ,CAAA;QACvB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,oBAAoB,IAAI,CAAC,oBAAoB,CAAC,gBAAgB;gBAC/D,MAAM,KAAK,CAAA;QACnB,CAAC;IACL,CAAC;IACD,OAAO,gBAAgB,CAAC,GAAG,CAAI,SAAS,CAAC,CAAA;AAC7C,CAAC","file":"container.js","sourcesContent":["/**\r\n * Container options.\r\n *\r\n * @deprecated\r\n */\r\nexport interface UseContainerOptions {\r\n    /**\r\n     * If set to true, then default container will be used in the case if given container haven't returned anything.\r\n     */\r\n    fallback?: boolean\r\n\r\n    /**\r\n     * If set to true, then default container will be used in the case if given container thrown an exception.\r\n     */\r\n    fallbackOnErrors?: boolean\r\n}\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport type ContainedType<T> = { new (...args: any[]): T } | Function\r\n\r\n/**\r\n * @deprecated\r\n */\r\nexport interface ContainerInterface {\r\n    get<T>(someClass: ContainedType<T>): T\r\n}\r\n\r\n/**\r\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\r\n * container simply creates a new instance of the given class.\r\n *\r\n * @deprecated\r\n */\r\nconst defaultContainer: ContainerInterface = new (class\r\n    implements ContainerInterface\r\n{\r\n    private instances: { type: Function; object: any }[] = []\r\n\r\n    get<T>(someClass: ContainedType<T>): T {\r\n        let instance = this.instances.find((i) => i.type === someClass)\r\n        if (!instance) {\r\n            instance = {\r\n                type: someClass,\r\n                object: new (someClass as new () => T)(),\r\n            }\r\n            this.instances.push(instance)\r\n        }\r\n\r\n        return instance.object\r\n    }\r\n})()\r\n\r\nlet userContainer: ContainerInterface\r\nlet userContainerOptions: UseContainerOptions | undefined\r\n\r\n/**\r\n * Sets container to be used by this library.\r\n *\r\n * @deprecated\r\n */\r\nexport function useContainer(\r\n    iocContainer: ContainerInterface,\r\n    options?: UseContainerOptions,\r\n) {\r\n    userContainer = iocContainer\r\n    userContainerOptions = options\r\n}\r\n\r\n/**\r\n * Gets the IOC container used by this library.\r\n *\r\n * @deprecated\r\n */\r\nexport function getFromContainer<T>(someClass: ContainedType<T>): T {\r\n    if (userContainer) {\r\n        try {\r\n            const instance = userContainer.get(someClass)\r\n            if (instance) return instance\r\n\r\n            if (!userContainerOptions || !userContainerOptions.fallback)\r\n                return instance\r\n        } catch (error) {\r\n            if (!userContainerOptions || !userContainerOptions.fallbackOnErrors)\r\n                throw error\r\n        }\r\n    }\r\n    return defaultContainer.get<T>(someClass)\r\n}\r\n"],"sourceRoot":"."}
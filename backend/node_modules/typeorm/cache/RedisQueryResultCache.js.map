{"version":3,"sources":["../../src/cache/RedisQueryResultCache.ts"],"names":[],"mappings":"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","file":"RedisQueryResultCache.js","sourcesContent":["import { QueryResultCache } from \"./QueryResultCache\"\r\nimport { QueryResultCacheOptions } from \"./QueryResultCacheOptions\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { TypeORMError } from \"../error/TypeORMError\"\r\n\r\n/**\r\n * Caches query result into Redis database.\r\n */\r\nexport class RedisQueryResultCache implements QueryResultCache {\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Redis module instance loaded dynamically.\r\n     */\r\n    protected redis: any\r\n\r\n    /**\r\n     * Connected redis client.\r\n     */\r\n    protected client: any\r\n\r\n    /**\r\n     * Type of the Redis Client (redis or ioredis).\r\n     */\r\n    protected clientType: \"redis\" | \"ioredis\" | \"ioredis/cluster\"\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        protected connection: DataSource,\r\n        clientType: \"redis\" | \"ioredis\" | \"ioredis/cluster\",\r\n    ) {\r\n        this.clientType = clientType\r\n        this.redis = this.loadRedis()\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a connection with given cache provider.\r\n     */\r\n    async connect(): Promise<void> {\r\n        const cacheOptions: any = this.connection.options.cache\r\n        if (this.clientType === \"redis\") {\r\n            this.client = this.redis.createClient({\r\n                ...cacheOptions?.options,\r\n                legacyMode: true,\r\n            })\r\n            if (\r\n                typeof this.connection.options.cache === \"object\" &&\r\n                this.connection.options.cache.ignoreErrors\r\n            ) {\r\n                this.client.on(\"error\", (err: any) => {\r\n                    this.connection.logger.log(\"warn\", err)\r\n                })\r\n            }\r\n            if (\"connect\" in this.client) {\r\n                await this.client.connect()\r\n            }\r\n        } else if (this.clientType === \"ioredis\") {\r\n            if (cacheOptions && cacheOptions.port) {\r\n                if (cacheOptions.options) {\r\n                    this.client = new this.redis(\r\n                        cacheOptions.port,\r\n                        cacheOptions.options,\r\n                    )\r\n                } else {\r\n                    this.client = new this.redis(cacheOptions.port)\r\n                }\r\n            } else if (cacheOptions && cacheOptions.options) {\r\n                this.client = new this.redis(cacheOptions.options)\r\n            } else {\r\n                this.client = new this.redis()\r\n            }\r\n        } else if (this.clientType === \"ioredis/cluster\") {\r\n            if (\r\n                cacheOptions &&\r\n                cacheOptions.options &&\r\n                Array.isArray(cacheOptions.options)\r\n            ) {\r\n                this.client = new this.redis.Cluster(cacheOptions.options)\r\n            } else if (\r\n                cacheOptions &&\r\n                cacheOptions.options &&\r\n                cacheOptions.options.startupNodes\r\n            ) {\r\n                this.client = new this.redis.Cluster(\r\n                    cacheOptions.options.startupNodes,\r\n                    cacheOptions.options.options,\r\n                )\r\n            } else {\r\n                throw new TypeORMError(\r\n                    `options.startupNodes required for ${this.clientType}.`,\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnects the connection\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.client.quit((err: any, result: any) => {\r\n                if (err) return fail(err)\r\n                ok()\r\n                this.client = undefined\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Creates table for storing cache if it does not exist yet.\r\n     */\r\n    async synchronize(queryRunner: QueryRunner): Promise<void> {}\r\n\r\n    /**\r\n     * Get data from cache.\r\n     * Returns cache result if found.\r\n     * Returns undefined if result is not cached.\r\n     */\r\n    getFromCache(\r\n        options: QueryResultCacheOptions,\r\n        queryRunner?: QueryRunner,\r\n    ): Promise<QueryResultCacheOptions | undefined> {\r\n        return new Promise<QueryResultCacheOptions | undefined>((ok, fail) => {\r\n            if (options.identifier) {\r\n                this.client.get(options.identifier, (err: any, result: any) => {\r\n                    if (err) return fail(err)\r\n                    ok(JSON.parse(result))\r\n                })\r\n            } else if (options.query) {\r\n                this.client.get(options.query, (err: any, result: any) => {\r\n                    if (err) return fail(err)\r\n                    ok(JSON.parse(result))\r\n                })\r\n            } else {\r\n                ok(undefined)\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Checks if cache is expired or not.\r\n     */\r\n    isExpired(savedCache: QueryResultCacheOptions): boolean {\r\n        return savedCache.time! + savedCache.duration < new Date().getTime()\r\n    }\r\n\r\n    /**\r\n     * Stores given query result in the cache.\r\n     */\r\n    async storeInCache(\r\n        options: QueryResultCacheOptions,\r\n        savedCache: QueryResultCacheOptions,\r\n        queryRunner?: QueryRunner,\r\n    ): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            if (options.identifier) {\r\n                this.client.set(\r\n                    options.identifier,\r\n                    JSON.stringify(options),\r\n                    \"PX\",\r\n                    options.duration,\r\n                    (err: any, result: any) => {\r\n                        if (err) return fail(err)\r\n                        ok()\r\n                    },\r\n                )\r\n            } else if (options.query) {\r\n                this.client.set(\r\n                    options.query,\r\n                    JSON.stringify(options),\r\n                    \"PX\",\r\n                    options.duration,\r\n                    (err: any, result: any) => {\r\n                        if (err) return fail(err)\r\n                        ok()\r\n                    },\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Clears everything stored in the cache.\r\n     */\r\n    async clear(queryRunner?: QueryRunner): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.client.flushdb((err: any, result: any) => {\r\n                if (err) return fail(err)\r\n                ok()\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Removes all cached results by given identifiers from cache.\r\n     */\r\n    async remove(\r\n        identifiers: string[],\r\n        queryRunner?: QueryRunner,\r\n    ): Promise<void> {\r\n        await Promise.all(\r\n            identifiers.map((identifier) => {\r\n                return this.deleteKey(identifier)\r\n            }),\r\n        )\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Removes a single key from redis database.\r\n     */\r\n    protected deleteKey(key: string): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.client.del(key, (err: any, result: any) => {\r\n                if (err) return fail(err)\r\n                ok()\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Loads redis dependency.\r\n     */\r\n    protected loadRedis(): any {\r\n        try {\r\n            if (this.clientType === \"ioredis/cluster\") {\r\n                return PlatformTools.load(\"ioredis\")\r\n            } else {\r\n                return PlatformTools.load(this.clientType)\r\n            }\r\n        } catch (e) {\r\n            throw new TypeORMError(\r\n                `Cannot use cache because ${this.clientType} is not installed. Please run \"npm i ${this.clientType} --save\".`,\r\n            )\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../../src/cache/QueryResultCache.ts"],"names":[],"mappings":"","file":"QueryResultCache.js","sourcesContent":["import { QueryResultCacheOptions } from \"./QueryResultCacheOptions\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\n\r\n/**\r\n * Implementations of this interface provide different strategies to cache query builder results.\r\n */\r\nexport interface QueryResultCache {\r\n    /**\r\n     * Creates a connection with given cache provider.\r\n     */\r\n    connect(): Promise<void>\r\n\r\n    /**\r\n     * Closes a connection with given cache provider.\r\n     */\r\n    disconnect(): Promise<void>\r\n\r\n    /**\r\n     * Perform operations during schema synchronization.\r\n     */\r\n    synchronize(queryRunner?: QueryRunner): Promise<void>\r\n\r\n    /**\r\n     * Get data from cache.\r\n     * Returns cache result if found.\r\n     * Returns undefined if result is not cached.\r\n     */\r\n    getFromCache(\r\n        options: QueryResultCacheOptions,\r\n        queryRunner?: QueryRunner,\r\n    ): Promise<QueryResultCacheOptions | undefined>\r\n\r\n    /**\r\n     * Stores given query result in the cache.\r\n     */\r\n    storeInCache(\r\n        options: QueryResultCacheOptions,\r\n        savedCache: QueryResultCacheOptions | undefined,\r\n        queryRunner?: QueryRunner,\r\n    ): Promise<void>\r\n\r\n    /**\r\n     * Checks if cache is expired or not.\r\n     */\r\n    isExpired(savedCache: QueryResultCacheOptions): boolean\r\n\r\n    /**\r\n     * Clears everything stored in the cache.\r\n     */\r\n    clear(queryRunner?: QueryRunner): Promise<void>\r\n\r\n    /**\r\n     * Removes all cached results by given identifiers from cache.\r\n     */\r\n    remove(identifiers: string[], queryRunner?: QueryRunner): Promise<void>\r\n}\r\n"],"sourceRoot":".."}
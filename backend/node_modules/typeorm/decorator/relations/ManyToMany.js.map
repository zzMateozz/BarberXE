{"version":3,"sources":["../../src/decorator/relations/ManyToMany.ts"],"names":[],"mappings":";;AAgCA,gCA4CC;AA5ED,2CAAsD;AAItD,wDAAoD;AAuBpD;;;;GAIG;AACH,SAAgB,UAAU,CACtB,oBAA8D,EAC9D,oBAAsE,EACtE,OAAyB;IAEzB,uBAAuB;IACvB,IAAI,mBAAkD,CAAA;IACtD,IAAI,yBAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE,CAAC;QAC7C,OAAO,GAAoB,oBAAoB,CAAA;IACnD,CAAC;SAAM,CAAC;QACJ,mBAAmB,GAAG,oBAA2B,CAAA;IACrD,CAAC;IAED,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAqB,CAAA;QAE7C,4CAA4C;QAC5C,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,KAAK,IAAI,CAAA;QAClC,IAAI,CAAC,MAAM,IAAI,OAAO,IAAK,OAAe,CAAC,WAAW,EAAE,CAAC;YACrD,0BAA0B;YAC1B,MAAM,aAAa,GAAI,OAAe,CAAC,WAAW,CAC9C,aAAa,EACb,MAAM,EACN,YAAY,CACf,CAAA;YACD,IACI,aAAa;gBACb,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ;gBACtC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS;gBAE9C,MAAM,GAAG,IAAI,CAAA;QACrB,CAAC;QAED,IAAA,gCAAsB,GAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,+BAA+B;YAC/B,YAAY,EAAE,cAAc;YAC5B,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,oBAAoB;YAC1B,mBAAmB,EAAE,mBAAmB;YACxC,OAAO,EAAE,OAAO;SACK,CAAC,CAAA;IAC9B,CAAC,CAAA;AACL,CAAC","file":"ManyToMany.js","sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\r\nimport { RelationMetadataArgs } from \"../../metadata-args/RelationMetadataArgs\"\r\nimport { ObjectType } from \"../../common/ObjectType\"\r\nimport { RelationOptions } from \"../options/RelationOptions\"\r\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\r\n\r\n/**\r\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\r\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\r\n * entity1 and entity2 ids. This is owner side of the relationship.\r\n */\r\nexport function ManyToMany<T>(\r\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\r\n    options?: RelationOptions,\r\n): PropertyDecorator\r\n\r\n/**\r\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\r\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\r\n * entity1 and entity2 ids. This is owner side of the relationship.\r\n */\r\nexport function ManyToMany<T>(\r\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\r\n    inverseSide?: string | ((object: T) => any),\r\n    options?: RelationOptions,\r\n): PropertyDecorator\r\n\r\n/**\r\n * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have\r\n * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage\r\n * entity1 and entity2 ids. This is owner side of the relationship.\r\n */\r\nexport function ManyToMany<T>(\r\n    typeFunctionOrTarget: string | ((type?: any) => ObjectType<T>),\r\n    inverseSideOrOptions?: string | ((object: T) => any) | RelationOptions,\r\n    options?: RelationOptions,\r\n): PropertyDecorator {\r\n    // normalize parameters\r\n    let inverseSideProperty: string | ((object: T) => any)\r\n    if (ObjectUtils.isObject(inverseSideOrOptions)) {\r\n        options = <RelationOptions>inverseSideOrOptions\r\n    } else {\r\n        inverseSideProperty = inverseSideOrOptions as any\r\n    }\r\n\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions\r\n\r\n        // now try to determine it its lazy relation\r\n        let isLazy = options.lazy === true\r\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) {\r\n            // automatic determination\r\n            const reflectedType = (Reflect as any).getMetadata(\r\n                \"design:type\",\r\n                object,\r\n                propertyName,\r\n            )\r\n            if (\r\n                reflectedType &&\r\n                typeof reflectedType.name === \"string\" &&\r\n                reflectedType.name.toLowerCase() === \"promise\"\r\n            )\r\n                isLazy = true\r\n        }\r\n\r\n        getMetadataArgsStorage().relations.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            // propertyType: reflectedType,\r\n            relationType: \"many-to-many\",\r\n            isLazy: isLazy,\r\n            type: typeFunctionOrTarget,\r\n            inverseSideProperty: inverseSideProperty,\r\n            options: options,\r\n        } as RelationMetadataArgs)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/decorator/tree/Tree.ts"],"names":[],"mappings":";;AAWA,oBAWC;AAtBD,2CAAsD;AAKtD;;;;;GAKG;AACH,SAAgB,IAAI,CAChB,IAAc,EACd,OAA4B;IAE5B,OAAO,UAAU,MAAgB;QAC7B,IAAA,gCAAsB,GAAE,CAAC,KAAK,CAAC,IAAI,CAAC;YAChC,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,IAAI,KAAK,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;SACtC,CAAC,CAAA;IAC1B,CAAC,CAAA;AACL,CAAC","file":"Tree.js","sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\r\nimport { TreeMetadataArgs } from \"../../metadata-args/TreeMetadataArgs\"\r\nimport { TreeType } from \"../../metadata/types/TreeTypes\"\r\nimport { ClosureTreeOptions } from \"../../metadata/types/ClosureTreeOptions\"\r\n\r\n/**\r\n * Marks entity to work like a tree.\r\n * Tree pattern that will be used for the tree entity should be specified.\r\n * @TreeParent decorator must be used in tree entities.\r\n * TreeRepository can be used to manipulate with tree entities.\r\n */\r\nexport function Tree(\r\n    type: TreeType,\r\n    options?: ClosureTreeOptions,\r\n): ClassDecorator {\r\n    return function (target: Function) {\r\n        getMetadataArgsStorage().trees.push({\r\n            target: target,\r\n            type: type,\r\n            options: type === \"closure-table\" ? options : undefined,\r\n        } as TreeMetadataArgs)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
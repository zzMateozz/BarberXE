{"version":3,"sources":["../../src/decorator/options/ColumnOptions.ts"],"names":[],"mappings":"","file":"ColumnOptions.js","sourcesContent":["import { ColumnType } from \"../../driver/types/ColumnTypes\"\r\nimport { ValueTransformer } from \"./ValueTransformer\"\r\nimport { ColumnCommonOptions } from \"./ColumnCommonOptions\"\r\n\r\n/**\r\n * Describes all column's options.\r\n */\r\nexport interface ColumnOptions extends ColumnCommonOptions {\r\n    /**\r\n     * Column type. Must be one of the value from the ColumnTypes class.\r\n     */\r\n    type?: ColumnType\r\n\r\n    /**\r\n     * Column name in the database.\r\n     */\r\n    name?: string\r\n\r\n    /**\r\n     * Column type's length. Used only on some column types.\r\n     * For example type = \"string\" and length = \"100\" means that ORM will create a column with type varchar(100).\r\n     */\r\n    length?: string | number\r\n\r\n    /**\r\n     * Column type's display width. Used only on some column types in MySQL.\r\n     * For example, INT(4) specifies an INT with a display width of four digits.\r\n     */\r\n    width?: number\r\n\r\n    /**\r\n     * Indicates if column's value can be set to NULL.\r\n     * Default value is \"false\".\r\n     */\r\n    nullable?: boolean\r\n\r\n    /**\r\n     * Indicates if column value is not updated by \"save\" operation.\r\n     * It means you'll be able to write this value only when you first time insert the object.\r\n     * Default value is \"false\".\r\n     *\r\n     * @deprecated Please use the `update` option instead.  Careful, it takes\r\n     * the opposite value to readonly.\r\n     *\r\n     */\r\n    readonly?: boolean\r\n\r\n    /**\r\n     * Indicates if column value is updated by \"save\" operation.\r\n     * If false, you'll be able to write this value only when you first time insert the object.\r\n     * Default value is \"true\".\r\n     */\r\n    update?: boolean\r\n\r\n    /**\r\n     * Indicates if column is always selected by QueryBuilder and find operations.\r\n     * Default value is \"true\".\r\n     */\r\n    select?: boolean\r\n\r\n    /**\r\n     * Indicates if column is inserted by default.\r\n     * Default value is \"true\".\r\n     */\r\n    insert?: boolean\r\n\r\n    /**\r\n     * Default database value.\r\n     */\r\n    default?: any\r\n\r\n    /**\r\n     * ON UPDATE trigger. Works only for MySQL.\r\n     */\r\n    onUpdate?: string\r\n\r\n    /**\r\n     * Indicates if this column is a primary key.\r\n     * Same can be achieved when @PrimaryColumn decorator is used.\r\n     */\r\n    primary?: boolean\r\n\r\n    /**\r\n     * Specifies if column's value must be unique or not.\r\n     */\r\n    unique?: boolean\r\n\r\n    /**\r\n     * Column comment. Not supported by all database types.\r\n     */\r\n    comment?: string\r\n\r\n    /**\r\n     * The precision for a decimal (exact numeric) column (applies only for decimal column), which is the maximum\r\n     * number of digits that are stored for the values.\r\n     */\r\n    precision?: number | null\r\n\r\n    /**\r\n     * The scale for a decimal (exact numeric) column (applies only for decimal column), which represents the number\r\n     * of digits to the right of the decimal point and must not be greater than precision.\r\n     */\r\n    scale?: number\r\n\r\n    /**\r\n     * Puts ZEROFILL attribute on to numeric column. Works only for MySQL.\r\n     * If you specify ZEROFILL for a numeric column, MySQL automatically adds the UNSIGNED attribute to this column\r\n     */\r\n    zerofill?: boolean\r\n\r\n    /**\r\n     * Puts UNSIGNED attribute on to numeric column. Works only for MySQL.\r\n     */\r\n    unsigned?: boolean\r\n\r\n    /**\r\n     * Defines a column character set.\r\n     * Not supported by all database types.\r\n     */\r\n    charset?: string\r\n\r\n    /**\r\n     * Defines a column collation.\r\n     */\r\n    collation?: string\r\n\r\n    /**\r\n     * Array of possible enumerated values.\r\n     */\r\n    enum?: (string | number)[] | Object\r\n\r\n    /**\r\n     * Exact name of enum\r\n     */\r\n    enumName?: string\r\n\r\n    /**\r\n     * If this column is primary key then this specifies the name for it.\r\n     */\r\n    primaryKeyConstraintName?: string\r\n\r\n    /**\r\n     * If this column is foreign key then this specifies the name for it.\r\n     */\r\n    foreignKeyConstraintName?: string\r\n\r\n    /**\r\n     * Generated column expression.\r\n     */\r\n    asExpression?: string\r\n\r\n    /**\r\n     * Generated column type.\r\n     */\r\n    generatedType?: \"VIRTUAL\" | \"STORED\"\r\n\r\n    /**\r\n     * Identity column type. Supports only in Postgres 10+.\r\n     */\r\n    generatedIdentity?: \"ALWAYS\" | \"BY DEFAULT\"\r\n\r\n    /**\r\n     * Return type of HSTORE column.\r\n     * Returns value as string or as object.\r\n     */\r\n    hstoreType?: \"object\" | \"string\"\r\n\r\n    /**\r\n     * Indicates if this column is an array.\r\n     * Can be simply set to true or array length can be specified.\r\n     * Supported only by postgres.\r\n     */\r\n    array?: boolean\r\n\r\n    /**\r\n     * Specifies a value transformer that is to be used to (un)marshal\r\n     * this column when reading or writing to the database.\r\n     */\r\n    transformer?: ValueTransformer | ValueTransformer[]\r\n\r\n    /**\r\n     * Spatial Feature Type (Geometry, Point, Polygon, etc.)\r\n     */\r\n    spatialFeatureType?: string\r\n\r\n    /**\r\n     * SRID (Spatial Reference ID (EPSG code))\r\n     */\r\n    srid?: number\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/decorator/Index.ts"],"names":[],"mappings":";;AAiFA,sBAkEC;AAnJD,wCAAmD;AAGnD,qDAAiD;AAyEjD;;;;GAIG;AACH,SAAgB,KAAK,CACjB,qBAIkB,EAClB,oBAI4B,EAC5B,YAA2B;IAE3B,uBAAuB;IACvB,MAAM,IAAI,GACN,OAAO,qBAAqB,KAAK,QAAQ;QACrC,CAAC,CAAC,qBAAqB;QACvB,CAAC,CAAC,SAAS,CAAA;IACnB,MAAM,MAAM,GACR,OAAO,qBAAqB,KAAK,QAAQ;QACrC,CAAC,CAGE,oBAAoB;QACvB,CAAC,CAAE,qBAAkC,CAAA;IAC7C,IAAI,OAAO,GACP,yBAAW,CAAC,QAAQ,CAAC,qBAAqB,CAAC;QAC3C,CAAC,KAAK,CAAC,OAAO,CAAC,qBAAqB,CAAC;QACjC,CAAC,CAAE,qBAAsC;QACzC,CAAC,CAAC,YAAY,CAAA;IACtB,IAAI,CAAC,OAAO;QACR,OAAO;YACH,yBAAW,CAAC,QAAQ,CAAC,oBAAoB,CAAC;gBAC1C,CAAC,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC;gBAChC,CAAC,CAAE,oBAAqC;gBACxC,CAAC,CAAC,YAAY,CAAA;IAE1B,OAAO,UACH,WAA8B,EAC9B,YAA8B;QAE9B,IAAA,gCAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,YAAY;gBAChB,CAAC,CAAC,WAAW,CAAC,WAAW;gBACzB,CAAC,CAAE,WAAwB;YAC/B,IAAI,EAAE,IAAI;YACV,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM;YAC/C,WAAW,EACP,OAAO;gBACN,OAAkC,CAAC,WAAW,KAAK,KAAK;gBACrD,CAAC,CAAC,KAAK;gBACP,CAAC,CAAC,IAAI;YACd,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;YAC1C,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YAChD,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YAClD,QAAQ,EAAE,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YACpD,YAAY,EAAE,OAAO,IAAI,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YAC5D,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YAC5C,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YAChD,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YACxD,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK;YACxD,kBAAkB,EAAE,OAAO;gBACvB,CAAC,CAAC,OAAO,CAAC,kBAAkB;gBAC5B,CAAC,CAAC,SAAS;SACG,CAAC,CAAA;IAC3B,CAAC,CAAA;AACL,CAAC","file":"Index.js","sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\r\nimport { IndexMetadataArgs } from \"../metadata-args/IndexMetadataArgs\"\r\nimport { IndexOptions } from \"./options/IndexOptions\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\n\r\n/**\r\n * Creates a database index.\r\n * Can be used on entity property or on entity.\r\n * Can create indices with composite columns when used on entity.\r\n */\r\nexport function Index(\r\n    options?: IndexOptions,\r\n): ClassDecorator & PropertyDecorator\r\n\r\n/**\r\n * Creates a database index.\r\n * Can be used on entity property or on entity.\r\n * Can create indices with composite columns when used on entity.\r\n */\r\nexport function Index(\r\n    name: string,\r\n    options?: IndexOptions,\r\n): ClassDecorator & PropertyDecorator\r\n\r\n/**\r\n * Creates a database index.\r\n * Can be used on entity property or on entity.\r\n * Can create indices with composite columns when used on entity.\r\n */\r\nexport function Index(\r\n    name: string,\r\n    options: { synchronize: false },\r\n): ClassDecorator & PropertyDecorator\r\n\r\n/**\r\n * Creates a database index.\r\n * Can be used on entity property or on entity.\r\n * Can create indices with composite columns when used on entity.\r\n */\r\nexport function Index(\r\n    name: string,\r\n    fields: string[],\r\n    options?: IndexOptions,\r\n): ClassDecorator & PropertyDecorator\r\n\r\n/**\r\n * Creates a database index.\r\n * Can be used on entity property or on entity.\r\n * Can create indices with composite columns when used on entity.\r\n */\r\nexport function Index(\r\n    fields: string[],\r\n    options?: IndexOptions,\r\n): ClassDecorator & PropertyDecorator\r\n\r\n/**\r\n * Creates a database index.\r\n * Can be used on entity property or on entity.\r\n * Can create indices with composite columns when used on entity.\r\n */\r\nexport function Index(\r\n    fields: (object?: any) => any[] | { [key: string]: number },\r\n    options?: IndexOptions,\r\n): ClassDecorator & PropertyDecorator\r\n\r\n/**\r\n * Creates a database index.\r\n * Can be used on entity property or on entity.\r\n * Can create indices with composite columns when used on entity.\r\n */\r\nexport function Index(\r\n    name: string,\r\n    fields: (object?: any) => any[] | { [key: string]: number },\r\n    options?: IndexOptions,\r\n): ClassDecorator & PropertyDecorator\r\n\r\n/**\r\n * Creates a database index.\r\n * Can be used on entity property or on entity.\r\n * Can create indices with composite columns when used on entity.\r\n */\r\nexport function Index(\r\n    nameOrFieldsOrOptions?:\r\n        | string\r\n        | string[]\r\n        | ((object: any) => any[] | { [key: string]: number })\r\n        | IndexOptions,\r\n    maybeFieldsOrOptions?:\r\n        | ((object?: any) => any[] | { [key: string]: number })\r\n        | IndexOptions\r\n        | string[]\r\n        | { synchronize: false },\r\n    maybeOptions?: IndexOptions,\r\n): ClassDecorator & PropertyDecorator {\r\n    // normalize parameters\r\n    const name =\r\n        typeof nameOrFieldsOrOptions === \"string\"\r\n            ? nameOrFieldsOrOptions\r\n            : undefined\r\n    const fields =\r\n        typeof nameOrFieldsOrOptions === \"string\"\r\n            ? <\r\n                  | ((object?: any) => any[] | { [key: string]: number })\r\n                  | string[]\r\n              >maybeFieldsOrOptions\r\n            : (nameOrFieldsOrOptions as string[])\r\n    let options =\r\n        ObjectUtils.isObject(nameOrFieldsOrOptions) &&\r\n        !Array.isArray(nameOrFieldsOrOptions)\r\n            ? (nameOrFieldsOrOptions as IndexOptions)\r\n            : maybeOptions\r\n    if (!options)\r\n        options =\r\n            ObjectUtils.isObject(maybeFieldsOrOptions) &&\r\n            !Array.isArray(maybeFieldsOrOptions)\r\n                ? (maybeFieldsOrOptions as IndexOptions)\r\n                : maybeOptions\r\n\r\n    return function (\r\n        clsOrObject: Function | Object,\r\n        propertyName?: string | symbol,\r\n    ) {\r\n        getMetadataArgsStorage().indices.push({\r\n            target: propertyName\r\n                ? clsOrObject.constructor\r\n                : (clsOrObject as Function),\r\n            name: name,\r\n            columns: propertyName ? [propertyName] : fields,\r\n            synchronize:\r\n                options &&\r\n                (options as { synchronize: false }).synchronize === false\r\n                    ? false\r\n                    : true,\r\n            where: options ? options.where : undefined,\r\n            unique: options && options.unique ? true : false,\r\n            spatial: options && options.spatial ? true : false,\r\n            fulltext: options && options.fulltext ? true : false,\r\n            nullFiltered: options && options.nullFiltered ? true : false,\r\n            parser: options ? options.parser : undefined,\r\n            sparse: options && options.sparse ? true : false,\r\n            background: options && options.background ? true : false,\r\n            concurrent: options && options.concurrent ? true : false,\r\n            expireAfterSeconds: options\r\n                ? options.expireAfterSeconds\r\n                : undefined,\r\n        } as IndexMetadataArgs)\r\n    }\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../../src/decorator/columns/ViewColumn.ts"],"names":[],"mappings":";;AAOA,gCASC;AAhBD,2CAAsD;AAItD;;GAEG;AACH,SAAgB,UAAU,CAAC,OAA2B;IAClD,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAA,gCAAsB,GAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO,IAAI,EAAE;SACH,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","file":"ViewColumn.js","sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\r\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\r\nimport { ViewColumnOptions } from \"../options/ViewColumnOptions\"\r\n\r\n/**\r\n * ViewColumn decorator is used to mark a specific class property as a view column.\r\n */\r\nexport function ViewColumn(options?: ViewColumnOptions): PropertyDecorator {\r\n    return function (object: Object, propertyName: string) {\r\n        getMetadataArgsStorage().columns.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            mode: \"regular\",\r\n            options: options || {},\r\n        } as ColumnMetadataArgs)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
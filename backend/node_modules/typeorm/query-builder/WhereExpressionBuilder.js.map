{"version":3,"sources":["../../src/query-builder/WhereExpressionBuilder.ts"],"names":[],"mappings":"","file":"WhereExpressionBuilder.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { Brackets } from \"./Brackets\"\r\n\r\n/**\r\n * Query Builders can implement this interface to support where expression\r\n */\r\nexport interface WhereExpressionBuilder {\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: string, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: Brackets, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: ObjectLiteral, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(where: ObjectLiteral[], parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(subQuery: (qb: this) => string, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: string, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: Brackets, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: ObjectLiteral, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(where: ObjectLiteral[], parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(subQuery: (qb: this) => string, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: string, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: Brackets, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: ObjectLiteral, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(where: ObjectLiteral[], parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(subQuery: (qb: this) => string, parameters?: ObjectLiteral): this\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder with a condition for the given ids.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     *\r\n     * Ids are mixed.\r\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\r\n     * If you have multiple primary keys you need to pass object with property names and values specified,\r\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\r\n     */\r\n    whereInIds(ids: any | any[]): this\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     *\r\n     * Ids are mixed.\r\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\r\n     * If you have multiple primary keys you need to pass object with property names and values specified,\r\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\r\n     */\r\n    andWhereInIds(ids: any | any[]): this\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     *\r\n     * Ids are mixed.\r\n     * It means if you have single primary key you can pass a simple id values, for example [1, 2, 3].\r\n     * If you have multiple primary keys you need to pass object with property names and values specified,\r\n     * for example [{ firstId: 1, secondId: 2 }, { firstId: 2, secondId: 3 }, ...]\r\n     */\r\n    orWhereInIds(ids: any | any[]): this\r\n}\r\n\r\n/**\r\n * @deprecated Use `WhereExpressionBuilder` instead\r\n */\r\nexport interface WhereExpression extends WhereExpressionBuilder {}\r\n"],"sourceRoot":".."}
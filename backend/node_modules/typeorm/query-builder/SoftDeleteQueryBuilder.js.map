{"version":3,"sources":["../../src/query-builder/SoftDeleteQueryBuilder.ts"],"names":[],"mappings":"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","file":"SoftDeleteQueryBuilder.js","sourcesContent":["import { QueryBuilder } from \"./QueryBuilder\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { EntityTarget } from \"../common/EntityTarget\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { WhereExpressionBuilder } from \"./WhereExpressionBuilder\"\r\nimport { Brackets } from \"./Brackets\"\r\nimport { UpdateResult } from \"./result/UpdateResult\"\r\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\"\r\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\"\r\nimport { OrderByCondition } from \"../find-options/OrderByCondition\"\r\nimport { LimitOnUpdateNotSupportedError } from \"../error/LimitOnUpdateNotSupportedError\"\r\nimport { MissingDeleteDateColumnError } from \"../error/MissingDeleteDateColumnError\"\r\nimport { UpdateValuesMissingError } from \"../error/UpdateValuesMissingError\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { DriverUtils } from \"../driver/DriverUtils\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class SoftDeleteQueryBuilder<Entity extends ObjectLiteral>\r\n    extends QueryBuilder<Entity>\r\n    implements WhereExpressionBuilder\r\n{\r\n    readonly \"@instanceof\" = Symbol.for(\"SoftDeleteQueryBuilder\")\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        connectionOrQueryBuilder: DataSource | QueryBuilder<any>,\r\n        queryRunner?: QueryRunner,\r\n    ) {\r\n        super(connectionOrQueryBuilder as any, queryRunner)\r\n        this.expressionMap.aliasNamePrefixingEnabled = false\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated SQL query without parameters being replaced.\r\n     */\r\n    getQuery(): string {\r\n        let sql = this.createUpdateExpression()\r\n        sql += this.createCteExpression()\r\n        sql += this.createOrderByExpression()\r\n        sql += this.createLimitExpression()\r\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim())\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<UpdateResult> {\r\n        const queryRunner = this.obtainQueryRunner()\r\n        let transactionStartedByUs: boolean = false\r\n\r\n        try {\r\n            // start transaction if it was enabled\r\n            if (\r\n                this.expressionMap.useTransaction === true &&\r\n                queryRunner.isTransactionActive === false\r\n            ) {\r\n                await queryRunner.startTransaction()\r\n                transactionStartedByUs = true\r\n            }\r\n\r\n            // call before soft remove and recover methods in listeners and subscribers\r\n            if (\r\n                this.expressionMap.callListeners === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                if (this.expressionMap.queryType === \"soft-delete\")\r\n                    await queryRunner.broadcaster.broadcast(\r\n                        \"BeforeSoftRemove\",\r\n                        this.expressionMap.mainAlias!.metadata,\r\n                    )\r\n                else if (this.expressionMap.queryType === \"restore\")\r\n                    await queryRunner.broadcaster.broadcast(\r\n                        \"BeforeRecover\",\r\n                        this.expressionMap.mainAlias!.metadata,\r\n                    )\r\n            }\r\n\r\n            // if update entity mode is enabled we may need extra columns for the returning statement\r\n            const returningResultsEntityUpdator =\r\n                new ReturningResultsEntityUpdator(\r\n                    queryRunner,\r\n                    this.expressionMap,\r\n                )\r\n            if (\r\n                this.expressionMap.updateEntity === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata &&\r\n                this.expressionMap.whereEntities.length > 0\r\n            ) {\r\n                this.expressionMap.extraReturningColumns =\r\n                    returningResultsEntityUpdator.getSoftDeletionReturningColumns()\r\n            }\r\n\r\n            // execute update query\r\n            const [sql, parameters] = this.getQueryAndParameters()\r\n\r\n            const queryResult = await queryRunner.query(sql, parameters, true)\r\n            const updateResult = UpdateResult.from(queryResult)\r\n\r\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\r\n            if (\r\n                this.expressionMap.updateEntity === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata &&\r\n                this.expressionMap.whereEntities.length > 0\r\n            ) {\r\n                await returningResultsEntityUpdator.update(\r\n                    updateResult,\r\n                    this.expressionMap.whereEntities,\r\n                )\r\n            }\r\n\r\n            // call after soft remove and recover methods in listeners and subscribers\r\n            if (\r\n                this.expressionMap.callListeners === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                if (this.expressionMap.queryType === \"soft-delete\")\r\n                    await queryRunner.broadcaster.broadcast(\r\n                        \"AfterSoftRemove\",\r\n                        this.expressionMap.mainAlias!.metadata,\r\n                    )\r\n                else if (this.expressionMap.queryType === \"restore\")\r\n                    await queryRunner.broadcaster.broadcast(\r\n                        \"AfterRecover\",\r\n                        this.expressionMap.mainAlias!.metadata,\r\n                    )\r\n            }\r\n\r\n            // close transaction if we started it\r\n            if (transactionStartedByUs) await queryRunner.commitTransaction()\r\n\r\n            return updateResult\r\n        } catch (error) {\r\n            // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try {\r\n                    await queryRunner.rollbackTransaction()\r\n                } catch (rollbackError) {}\r\n            }\r\n            throw error\r\n        } finally {\r\n            if (queryRunner !== this.queryRunner) {\r\n                // means we created our own query runner\r\n                await queryRunner.release()\r\n            }\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    from<T extends ObjectLiteral>(\r\n        entityTarget: EntityTarget<T>,\r\n        aliasName?: string,\r\n    ): SoftDeleteQueryBuilder<T> {\r\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\r\n            ? entityTarget.options.name\r\n            : entityTarget\r\n        const mainAlias = this.createFromAlias(entityTarget, aliasName)\r\n        this.expressionMap.setMainAlias(mainAlias)\r\n        return this as any as SoftDeleteQueryBuilder<T>\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(\r\n        where:\r\n            | string\r\n            | ((qb: this) => string)\r\n            | Brackets\r\n            | ObjectLiteral\r\n            | ObjectLiteral[],\r\n        parameters?: ObjectLiteral,\r\n    ): this {\r\n        this.expressionMap.wheres = [] // don't move this block below since computeWhereParameter can add where expressions\r\n        const condition = this.getWhereCondition(where)\r\n        if (condition)\r\n            this.expressionMap.wheres = [\r\n                { type: \"simple\", condition: condition },\r\n            ]\r\n        if (parameters) this.setParameters(parameters)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(\r\n        where:\r\n            | string\r\n            | ((qb: this) => string)\r\n            | Brackets\r\n            | ObjectLiteral\r\n            | ObjectLiteral[],\r\n        parameters?: ObjectLiteral,\r\n    ): this {\r\n        this.expressionMap.wheres.push({\r\n            type: \"and\",\r\n            condition: this.getWhereCondition(where),\r\n        })\r\n        if (parameters) this.setParameters(parameters)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(\r\n        where:\r\n            | string\r\n            | ((qb: this) => string)\r\n            | Brackets\r\n            | ObjectLiteral\r\n            | ObjectLiteral[],\r\n        parameters?: ObjectLiteral,\r\n    ): this {\r\n        this.expressionMap.wheres.push({\r\n            type: \"or\",\r\n            condition: this.getWhereCondition(where),\r\n        })\r\n        if (parameters) this.setParameters(parameters)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     */\r\n    whereInIds(ids: any | any[]): this {\r\n        return this.where(this.getWhereInIdsCondition(ids))\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     */\r\n    andWhereInIds(ids: any | any[]): this {\r\n        return this.andWhere(this.getWhereInIdsCondition(ids))\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     */\r\n    orWhereInIds(ids: any | any[]): this {\r\n        return this.orWhere(this.getWhereInIdsCondition(ids))\r\n    }\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    output(columns: string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    output(output: string): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string | string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string | string[]): this {\r\n        return this.returning(output)\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    returning(columns: string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    returning(returning: string): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string | string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string | string[]): this {\r\n        // not all databases support returning/output cause\r\n        if (!this.connection.driver.isReturningSqlSupported(\"update\")) {\r\n            throw new ReturningStatementNotSupportedError()\r\n        }\r\n\r\n        this.expressionMap.returning = returning\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     *\r\n     * Calling order by without order set will remove all previously set order bys.\r\n     */\r\n    orderBy(): this\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(\r\n        sort: string,\r\n        order?: \"ASC\" | \"DESC\",\r\n        nulls?: \"NULLS FIRST\" | \"NULLS LAST\",\r\n    ): this\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(order: OrderByCondition): this\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(\r\n        sort?: string | OrderByCondition,\r\n        order: \"ASC\" | \"DESC\" = \"ASC\",\r\n        nulls?: \"NULLS FIRST\" | \"NULLS LAST\",\r\n    ): this {\r\n        if (sort) {\r\n            if (typeof sort === \"object\") {\r\n                this.expressionMap.orderBys = sort as OrderByCondition\r\n            } else {\r\n                if (nulls) {\r\n                    this.expressionMap.orderBys = {\r\n                        [sort as string]: { order, nulls },\r\n                    }\r\n                } else {\r\n                    this.expressionMap.orderBys = { [sort as string]: order }\r\n                }\r\n            }\r\n        } else {\r\n            this.expressionMap.orderBys = {}\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds ORDER BY condition in the query builder.\r\n     */\r\n    addOrderBy(\r\n        sort: string,\r\n        order: \"ASC\" | \"DESC\" = \"ASC\",\r\n        nulls?: \"NULLS FIRST\" | \"NULLS LAST\",\r\n    ): this {\r\n        if (nulls) {\r\n            this.expressionMap.orderBys[sort] = { order, nulls }\r\n        } else {\r\n            this.expressionMap.orderBys[sort] = order\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets LIMIT - maximum number of rows to be selected.\r\n     */\r\n    limit(limit?: number): this {\r\n        this.expressionMap.limit = limit\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Indicates if entity must be updated after update operation.\r\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\r\n     * Enabled by default.\r\n     */\r\n    whereEntity(entity: Entity | Entity[]): this {\r\n        if (!this.expressionMap.mainAlias!.hasMetadata)\r\n            throw new TypeORMError(\r\n                `.whereEntity method can only be used on queries which update real entity table.`,\r\n            )\r\n\r\n        this.expressionMap.wheres = []\r\n        const entities: Entity[] = Array.isArray(entity) ? entity : [entity]\r\n        entities.forEach((entity) => {\r\n            const entityIdMap =\r\n                this.expressionMap.mainAlias!.metadata.getEntityIdMap(entity)\r\n            if (!entityIdMap)\r\n                throw new TypeORMError(\r\n                    `Provided entity does not have ids set, cannot perform operation.`,\r\n                )\r\n\r\n            this.orWhereInIds(entityIdMap)\r\n        })\r\n\r\n        this.expressionMap.whereEntities = entities\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Indicates if entity must be updated after update operation.\r\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\r\n     * Enabled by default.\r\n     */\r\n    updateEntity(enabled: boolean): this {\r\n        this.expressionMap.updateEntity = enabled\r\n        return this\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates UPDATE express used to perform insert query.\r\n     */\r\n    protected createUpdateExpression() {\r\n        const metadata = this.expressionMap.mainAlias!.hasMetadata\r\n            ? this.expressionMap.mainAlias!.metadata\r\n            : undefined\r\n        if (!metadata)\r\n            throw new TypeORMError(\r\n                `Cannot get entity metadata for the given alias \"${this.expressionMap.mainAlias}\"`,\r\n            )\r\n        if (!metadata.deleteDateColumn) {\r\n            throw new MissingDeleteDateColumnError(metadata)\r\n        }\r\n\r\n        // prepare columns and values to be updated\r\n        const updateColumnAndValues: string[] = []\r\n\r\n        switch (this.expressionMap.queryType) {\r\n            case \"soft-delete\":\r\n                updateColumnAndValues.push(\r\n                    this.escape(metadata.deleteDateColumn.databaseName) +\r\n                        \" = CURRENT_TIMESTAMP\",\r\n                )\r\n                break\r\n            case \"restore\":\r\n                updateColumnAndValues.push(\r\n                    this.escape(metadata.deleteDateColumn.databaseName) +\r\n                        \" = NULL\",\r\n                )\r\n                break\r\n            default:\r\n                throw new TypeORMError(\r\n                    `The queryType must be \"soft-delete\" or \"restore\"`,\r\n                )\r\n        }\r\n        if (metadata.versionColumn)\r\n            updateColumnAndValues.push(\r\n                this.escape(metadata.versionColumn.databaseName) +\r\n                    \" = \" +\r\n                    this.escape(metadata.versionColumn.databaseName) +\r\n                    \" + 1\",\r\n            )\r\n        if (metadata.updateDateColumn)\r\n            updateColumnAndValues.push(\r\n                this.escape(metadata.updateDateColumn.databaseName) +\r\n                    \" = CURRENT_TIMESTAMP\",\r\n            ) // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\r\n\r\n        if (updateColumnAndValues.length <= 0) {\r\n            throw new UpdateValuesMissingError()\r\n        }\r\n\r\n        // get a table name and all column database names\r\n        const whereExpression = this.createWhereExpression()\r\n        const returningExpression = this.createReturningExpression(\"update\")\r\n\r\n        if (returningExpression === \"\") {\r\n            return `UPDATE ${this.getTableName(\r\n                this.getMainTableName(),\r\n            )} SET ${updateColumnAndValues.join(\", \")}${whereExpression}` // todo: how do we replace aliases in where to nothing?\r\n        }\r\n        if (this.connection.driver.options.type === \"mssql\") {\r\n            return `UPDATE ${this.getTableName(\r\n                this.getMainTableName(),\r\n            )} SET ${updateColumnAndValues.join(\r\n                \", \",\r\n            )} OUTPUT ${returningExpression}${whereExpression}`\r\n        }\r\n        return `UPDATE ${this.getTableName(\r\n            this.getMainTableName(),\r\n        )} SET ${updateColumnAndValues.join(\r\n            \", \",\r\n        )}${whereExpression} RETURNING ${returningExpression}`\r\n    }\r\n\r\n    /**\r\n     * Creates \"ORDER BY\" part of SQL query.\r\n     */\r\n    protected createOrderByExpression() {\r\n        const orderBys = this.expressionMap.orderBys\r\n        if (Object.keys(orderBys).length > 0)\r\n            return (\r\n                \" ORDER BY \" +\r\n                Object.keys(orderBys)\r\n                    .map((columnName) => {\r\n                        if (typeof orderBys[columnName] === \"string\") {\r\n                            return (\r\n                                this.replacePropertyNames(columnName) +\r\n                                \" \" +\r\n                                orderBys[columnName]\r\n                            )\r\n                        } else {\r\n                            return (\r\n                                this.replacePropertyNames(columnName) +\r\n                                \" \" +\r\n                                (orderBys[columnName] as any).order +\r\n                                \" \" +\r\n                                (orderBys[columnName] as any).nulls\r\n                            )\r\n                        }\r\n                    })\r\n                    .join(\", \")\r\n            )\r\n\r\n        return \"\"\r\n    }\r\n\r\n    /**\r\n     * Creates \"LIMIT\" parts of SQL query.\r\n     */\r\n    protected createLimitExpression(): string {\r\n        let limit: number | undefined = this.expressionMap.limit\r\n\r\n        if (limit) {\r\n            if (DriverUtils.isMySQLFamily(this.connection.driver)) {\r\n                return \" LIMIT \" + limit\r\n            } else {\r\n                throw new LimitOnUpdateNotSupportedError()\r\n            }\r\n        }\r\n\r\n        return \"\"\r\n    }\r\n}\r\n"],"sourceRoot":".."}
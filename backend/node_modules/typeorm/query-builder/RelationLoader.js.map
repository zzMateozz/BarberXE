{"version":3,"sources":["../../src/query-builder/RelationLoader.ts"],"names":[],"mappings":"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","file":"RelationLoader.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\r\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\r\nimport { SelectQueryBuilder } from \"./SelectQueryBuilder\"\r\n\r\n/**\r\n * Wraps entities and creates getters/setters for their relations\r\n * to be able to lazily load relations when accessing these relations.\r\n */\r\nexport class RelationLoader {\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(private connection: DataSource) {}\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads relation data for the given entity and its relation.\r\n     */\r\n    load(\r\n        relation: RelationMetadata,\r\n        entityOrEntities: ObjectLiteral | ObjectLiteral[],\r\n        queryRunner?: QueryRunner,\r\n        queryBuilder?: SelectQueryBuilder<any>,\r\n    ): Promise<any[]> {\r\n        // todo: check all places where it uses non array\r\n        if (queryRunner && queryRunner.isReleased) queryRunner = undefined // get new one if already closed\r\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            return this.loadManyToOneOrOneToOneOwner(\r\n                relation,\r\n                entityOrEntities,\r\n                queryRunner,\r\n                queryBuilder,\r\n            )\r\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            return this.loadOneToManyOrOneToOneNotOwner(\r\n                relation,\r\n                entityOrEntities,\r\n                queryRunner,\r\n                queryBuilder,\r\n            )\r\n        } else if (relation.isManyToManyOwner) {\r\n            return this.loadManyToManyOwner(\r\n                relation,\r\n                entityOrEntities,\r\n                queryRunner,\r\n                queryBuilder,\r\n            )\r\n        } else {\r\n            // many-to-many non owner\r\n            return this.loadManyToManyNotOwner(\r\n                relation,\r\n                entityOrEntities,\r\n                queryRunner,\r\n                queryBuilder,\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads data for many-to-one and one-to-one owner relations.\r\n     *\r\n     * (ow) post.category<=>category.post\r\n     * loaded: category from post\r\n     * example: SELECT category.id AS category_id, category.name AS category_name FROM category category\r\n     *              INNER JOIN post Post ON Post.category=category.id WHERE Post.id=1\r\n     */\r\n    loadManyToOneOrOneToOneOwner(\r\n        relation: RelationMetadata,\r\n        entityOrEntities: ObjectLiteral | ObjectLiteral[],\r\n        queryRunner?: QueryRunner,\r\n        queryBuilder?: SelectQueryBuilder<any>,\r\n    ): Promise<any> {\r\n        const entities = Array.isArray(entityOrEntities)\r\n            ? entityOrEntities\r\n            : [entityOrEntities]\r\n\r\n        const joinAliasName = relation.entityMetadata.name\r\n        const qb = queryBuilder\r\n            ? queryBuilder\r\n            : this.connection\r\n                  .createQueryBuilder(queryRunner)\r\n                  .select(relation.propertyName) // category\r\n                  .from(relation.type, relation.propertyName)\r\n\r\n        const mainAlias = qb.expressionMap.mainAlias!.name\r\n        const columns = relation.entityMetadata.primaryColumns\r\n        const joinColumns = relation.isOwning\r\n            ? relation.joinColumns\r\n            : relation.inverseRelation!.joinColumns\r\n        const conditions = joinColumns\r\n            .map((joinColumn) => {\r\n                return `${relation.entityMetadata.name}.${\r\n                    joinColumn.propertyName\r\n                } = ${mainAlias}.${joinColumn.referencedColumn!.propertyName}`\r\n            })\r\n            .join(\" AND \")\r\n\r\n        qb.innerJoin(\r\n            relation.entityMetadata.target as Function,\r\n            joinAliasName,\r\n            conditions,\r\n        )\r\n\r\n        if (columns.length === 1) {\r\n            qb.where(\r\n                `${joinAliasName}.${columns[0].propertyPath} IN (:...${\r\n                    joinAliasName + \"_\" + columns[0].propertyName\r\n                })`,\r\n            )\r\n            qb.setParameter(\r\n                joinAliasName + \"_\" + columns[0].propertyName,\r\n                entities.map((entity) =>\r\n                    columns[0].getEntityValue(entity, true),\r\n                ),\r\n            )\r\n        } else {\r\n            const condition = entities\r\n                .map((entity, entityIndex) => {\r\n                    return columns\r\n                        .map((column, columnIndex) => {\r\n                            const paramName =\r\n                                joinAliasName +\r\n                                \"_entity_\" +\r\n                                entityIndex +\r\n                                \"_\" +\r\n                                columnIndex\r\n                            qb.setParameter(\r\n                                paramName,\r\n                                column.getEntityValue(entity, true),\r\n                            )\r\n                            return (\r\n                                joinAliasName +\r\n                                \".\" +\r\n                                column.propertyPath +\r\n                                \" = :\" +\r\n                                paramName\r\n                            )\r\n                        })\r\n                        .join(\" AND \")\r\n                })\r\n                .map((condition) => \"(\" + condition + \")\")\r\n                .join(\" OR \")\r\n            qb.where(condition)\r\n        }\r\n\r\n        FindOptionsUtils.joinEagerRelations(\r\n            qb,\r\n            qb.alias,\r\n            qb.expressionMap.mainAlias!.metadata,\r\n        )\r\n\r\n        return qb.getMany()\r\n        // return qb.getOne(); todo: fix all usages\r\n    }\r\n\r\n    /**\r\n     * Loads data for one-to-many and one-to-one not owner relations.\r\n     *\r\n     * SELECT post\r\n     * FROM post post\r\n     * WHERE post.[joinColumn.name] = entity[joinColumn.referencedColumn]\r\n     */\r\n    loadOneToManyOrOneToOneNotOwner(\r\n        relation: RelationMetadata,\r\n        entityOrEntities: ObjectLiteral | ObjectLiteral[],\r\n        queryRunner?: QueryRunner,\r\n        queryBuilder?: SelectQueryBuilder<any>,\r\n    ): Promise<any> {\r\n        const entities = Array.isArray(entityOrEntities)\r\n            ? entityOrEntities\r\n            : [entityOrEntities]\r\n        const columns = relation.inverseRelation!.joinColumns\r\n        const qb = queryBuilder\r\n            ? queryBuilder\r\n            : this.connection\r\n                  .createQueryBuilder(queryRunner)\r\n                  .select(relation.propertyName)\r\n                  .from(\r\n                      relation.inverseRelation!.entityMetadata.target,\r\n                      relation.propertyName,\r\n                  )\r\n\r\n        const aliasName = qb.expressionMap.mainAlias!.name\r\n\r\n        if (columns.length === 1) {\r\n            qb.where(\r\n                `${aliasName}.${columns[0].propertyPath} IN (:...${\r\n                    aliasName + \"_\" + columns[0].propertyName\r\n                })`,\r\n            )\r\n            qb.setParameter(\r\n                aliasName + \"_\" + columns[0].propertyName,\r\n                entities.map((entity) =>\r\n                    columns[0].referencedColumn!.getEntityValue(entity, true),\r\n                ),\r\n            )\r\n        } else {\r\n            const condition = entities\r\n                .map((entity, entityIndex) => {\r\n                    return columns\r\n                        .map((column, columnIndex) => {\r\n                            const paramName =\r\n                                aliasName +\r\n                                \"_entity_\" +\r\n                                entityIndex +\r\n                                \"_\" +\r\n                                columnIndex\r\n                            qb.setParameter(\r\n                                paramName,\r\n                                column.referencedColumn!.getEntityValue(\r\n                                    entity,\r\n                                    true,\r\n                                ),\r\n                            )\r\n                            return (\r\n                                aliasName +\r\n                                \".\" +\r\n                                column.propertyPath +\r\n                                \" = :\" +\r\n                                paramName\r\n                            )\r\n                        })\r\n                        .join(\" AND \")\r\n                })\r\n                .map((condition) => \"(\" + condition + \")\")\r\n                .join(\" OR \")\r\n            qb.where(condition)\r\n        }\r\n\r\n        FindOptionsUtils.joinEagerRelations(\r\n            qb,\r\n            qb.alias,\r\n            qb.expressionMap.mainAlias!.metadata,\r\n        )\r\n\r\n        return qb.getMany()\r\n        // return relation.isOneToMany ? qb.getMany() : qb.getOne(); todo: fix all usages\r\n    }\r\n\r\n    /**\r\n     * Loads data for many-to-many owner relations.\r\n     *\r\n     * SELECT category\r\n     * FROM category category\r\n     * INNER JOIN post_categories post_categories\r\n     * ON post_categories.postId = :postId\r\n     * AND post_categories.categoryId = category.id\r\n     */\r\n    loadManyToManyOwner(\r\n        relation: RelationMetadata,\r\n        entityOrEntities: ObjectLiteral | ObjectLiteral[],\r\n        queryRunner?: QueryRunner,\r\n        queryBuilder?: SelectQueryBuilder<any>,\r\n    ): Promise<any> {\r\n        const entities = Array.isArray(entityOrEntities)\r\n            ? entityOrEntities\r\n            : [entityOrEntities]\r\n        const parameters = relation.joinColumns.reduce(\r\n            (parameters, joinColumn) => {\r\n                parameters[joinColumn.propertyName] = entities.map((entity) =>\r\n                    joinColumn.referencedColumn!.getEntityValue(entity, true),\r\n                )\r\n                return parameters\r\n            },\r\n            {} as ObjectLiteral,\r\n        )\r\n\r\n        const qb = queryBuilder\r\n            ? queryBuilder\r\n            : this.connection\r\n                  .createQueryBuilder(queryRunner)\r\n                  .select(relation.propertyName)\r\n                  .from(relation.type, relation.propertyName)\r\n\r\n        const mainAlias = qb.expressionMap.mainAlias!.name\r\n        const joinAlias = relation.junctionEntityMetadata!.tableName\r\n        const joinColumnConditions = relation.joinColumns.map((joinColumn) => {\r\n            return `${joinAlias}.${joinColumn.propertyName} IN (:...${joinColumn.propertyName})`\r\n        })\r\n        const inverseJoinColumnConditions = relation.inverseJoinColumns.map(\r\n            (inverseJoinColumn) => {\r\n                return `${joinAlias}.${\r\n                    inverseJoinColumn.propertyName\r\n                }=${mainAlias}.${\r\n                    inverseJoinColumn.referencedColumn!.propertyName\r\n                }`\r\n            },\r\n        )\r\n\r\n        qb.innerJoin(\r\n            joinAlias,\r\n            joinAlias,\r\n            [...joinColumnConditions, ...inverseJoinColumnConditions].join(\r\n                \" AND \",\r\n            ),\r\n        ).setParameters(parameters)\r\n\r\n        FindOptionsUtils.joinEagerRelations(\r\n            qb,\r\n            qb.alias,\r\n            qb.expressionMap.mainAlias!.metadata,\r\n        )\r\n\r\n        return qb.getMany()\r\n    }\r\n\r\n    /**\r\n     * Loads data for many-to-many not owner relations.\r\n     *\r\n     * SELECT post\r\n     * FROM post post\r\n     * INNER JOIN post_categories post_categories\r\n     * ON post_categories.postId = post.id\r\n     * AND post_categories.categoryId = post_categories.categoryId\r\n     */\r\n    loadManyToManyNotOwner(\r\n        relation: RelationMetadata,\r\n        entityOrEntities: ObjectLiteral | ObjectLiteral[],\r\n        queryRunner?: QueryRunner,\r\n        queryBuilder?: SelectQueryBuilder<any>,\r\n    ): Promise<any> {\r\n        const entities = Array.isArray(entityOrEntities)\r\n            ? entityOrEntities\r\n            : [entityOrEntities]\r\n\r\n        const qb = queryBuilder\r\n            ? queryBuilder\r\n            : this.connection\r\n                  .createQueryBuilder(queryRunner)\r\n                  .select(relation.propertyName)\r\n                  .from(relation.type, relation.propertyName)\r\n\r\n        const mainAlias = qb.expressionMap.mainAlias!.name\r\n        const joinAlias = relation.junctionEntityMetadata!.tableName\r\n        const joinColumnConditions = relation.inverseRelation!.joinColumns.map(\r\n            (joinColumn) => {\r\n                return `${joinAlias}.${\r\n                    joinColumn.propertyName\r\n                } = ${mainAlias}.${joinColumn.referencedColumn!.propertyName}`\r\n            },\r\n        )\r\n        const inverseJoinColumnConditions =\r\n            relation.inverseRelation!.inverseJoinColumns.map(\r\n                (inverseJoinColumn) => {\r\n                    return `${joinAlias}.${inverseJoinColumn.propertyName} IN (:...${inverseJoinColumn.propertyName})`\r\n                },\r\n            )\r\n        const parameters = relation.inverseRelation!.inverseJoinColumns.reduce(\r\n            (parameters, joinColumn) => {\r\n                parameters[joinColumn.propertyName] = entities.map((entity) =>\r\n                    joinColumn.referencedColumn!.getEntityValue(entity, true),\r\n                )\r\n                return parameters\r\n            },\r\n            {} as ObjectLiteral,\r\n        )\r\n\r\n        qb.innerJoin(\r\n            joinAlias,\r\n            joinAlias,\r\n            [...joinColumnConditions, ...inverseJoinColumnConditions].join(\r\n                \" AND \",\r\n            ),\r\n        ).setParameters(parameters)\r\n\r\n        FindOptionsUtils.joinEagerRelations(\r\n            qb,\r\n            qb.alias,\r\n            qb.expressionMap.mainAlias!.metadata,\r\n        )\r\n\r\n        return qb.getMany()\r\n    }\r\n\r\n    /**\r\n     * Wraps given entity and creates getters/setters for its given relation\r\n     * to be able to lazily load data when accessing this relation.\r\n     */\r\n    enableLazyLoad(\r\n        relation: RelationMetadata,\r\n        entity: ObjectLiteral,\r\n        queryRunner?: QueryRunner,\r\n    ) {\r\n        const relationLoader = this\r\n        const dataIndex = \"__\" + relation.propertyName + \"__\" // in what property of the entity loaded data will be stored\r\n        const promiseIndex = \"__promise_\" + relation.propertyName + \"__\" // in what property of the entity loading promise will be stored\r\n        const resolveIndex = \"__has_\" + relation.propertyName + \"__\" // indicates if relation data already was loaded or not, we need this flag if loaded data is empty\r\n\r\n        const setData = (entity: ObjectLiteral, value: any) => {\r\n            entity[dataIndex] = value\r\n            entity[resolveIndex] = true\r\n            delete entity[promiseIndex]\r\n            return value\r\n        }\r\n        const setPromise = (entity: ObjectLiteral, value: Promise<any>) => {\r\n            delete entity[resolveIndex]\r\n            delete entity[dataIndex]\r\n            entity[promiseIndex] = value\r\n            value.then(\r\n                // ensure different value is not assigned yet\r\n                (result) =>\r\n                    entity[promiseIndex] === value\r\n                        ? setData(entity, result)\r\n                        : result,\r\n            )\r\n            return value\r\n        }\r\n\r\n        Object.defineProperty(entity, relation.propertyName, {\r\n            get: function () {\r\n                if (\r\n                    this[resolveIndex] === true ||\r\n                    this[dataIndex] !== undefined\r\n                )\r\n                    // if related data already was loaded then simply return it\r\n                    return Promise.resolve(this[dataIndex])\r\n\r\n                if (this[promiseIndex])\r\n                    // if related data is loading then return a promise relationLoader loads it\r\n                    return this[promiseIndex]\r\n\r\n                // nothing is loaded yet, load relation data and save it in the model once they are loaded\r\n                const loader = relationLoader\r\n                    .load(relation, this, queryRunner)\r\n                    .then((result) =>\r\n                        relation.isOneToOne || relation.isManyToOne\r\n                            ? result.length === 0\r\n                                ? null\r\n                                : result[0]\r\n                            : result,\r\n                    )\r\n                return setPromise(this, loader)\r\n            },\r\n            set: function (value: any | Promise<any>) {\r\n                if (value instanceof Promise) {\r\n                    // if set data is a promise then wait for its resolve and save in the object\r\n                    setPromise(this, value)\r\n                } else {\r\n                    // if its direct data set (non promise, probably not safe-typed)\r\n                    setData(this, value)\r\n                }\r\n            },\r\n            configurable: true,\r\n            enumerable: false,\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":".."}
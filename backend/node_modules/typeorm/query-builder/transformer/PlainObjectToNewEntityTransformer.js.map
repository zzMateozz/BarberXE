{"version":3,"sources":["../../src/query-builder/transformer/PlainObjectToNewEntityTransformer.ts"],"names":[],"mappings":"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","file":"PlainObjectToNewEntityTransformer.js","sourcesContent":["import { EntityMetadata } from \"../../metadata/EntityMetadata\"\r\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\r\n\r\n/**\r\n * Transforms plain old javascript object\r\n * Entity is constructed based on its entity metadata.\r\n */\r\nexport class PlainObjectToNewEntityTransformer {\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    transform<T extends ObjectLiteral>(\r\n        newEntity: T,\r\n        object: ObjectLiteral,\r\n        metadata: EntityMetadata,\r\n        getLazyRelationsPromiseValue: boolean = false,\r\n    ): T {\r\n        // console.log(\"groupAndTransform entity:\", newEntity);\r\n        // console.log(\"groupAndTransform object:\", object);\r\n        this.groupAndTransform(\r\n            newEntity,\r\n            object,\r\n            metadata,\r\n            getLazyRelationsPromiseValue,\r\n        )\r\n        // console.log(\"result:\", newEntity);\r\n        return newEntity\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Since db returns a duplicated rows of the data where accuracies of the same object can be duplicated\r\n     * we need to group our result and we must have some unique id (primary key in our case)\r\n     */\r\n    private groupAndTransform(\r\n        entity: ObjectLiteral,\r\n        object: ObjectLiteral,\r\n        metadata: EntityMetadata,\r\n        getLazyRelationsPromiseValue: boolean = false,\r\n    ): void {\r\n        // console.log(\"groupAndTransform entity:\", entity);\r\n        // console.log(\"groupAndTransform object:\", object);\r\n\r\n        // copy regular column properties from the given object\r\n        metadata.nonVirtualColumns.forEach((column) => {\r\n            const objectColumnValue = column.getEntityValue(object)\r\n            if (objectColumnValue !== undefined)\r\n                column.setEntityValue(entity, objectColumnValue)\r\n        })\r\n\r\n        // // copy relation properties from the given object\r\n        if (metadata.relations.length) {\r\n            metadata.relations.forEach((relation) => {\r\n                let entityRelatedValue = relation.getEntityValue(entity)\r\n                const objectRelatedValue = relation.getEntityValue(\r\n                    object,\r\n                    getLazyRelationsPromiseValue,\r\n                )\r\n                if (objectRelatedValue === undefined) return\r\n\r\n                if (relation.isOneToMany || relation.isManyToMany) {\r\n                    if (!Array.isArray(objectRelatedValue)) return\r\n\r\n                    if (!entityRelatedValue) {\r\n                        entityRelatedValue = []\r\n                        relation.setEntityValue(entity, entityRelatedValue)\r\n                    }\r\n\r\n                    objectRelatedValue.forEach((objectRelatedValueItem) => {\r\n                        // check if we have this item from the merging object in the original entity we merge into\r\n                        let objectRelatedValueEntity = (\r\n                            entityRelatedValue as any[]\r\n                        ).find((entityRelatedValueItem) => {\r\n                            return relation.inverseEntityMetadata.compareEntities(\r\n                                objectRelatedValueItem,\r\n                                entityRelatedValueItem,\r\n                            )\r\n                        })\r\n\r\n                        const inverseEntityMetadata =\r\n                            relation.inverseEntityMetadata.findInheritanceMetadata(\r\n                                objectRelatedValueItem,\r\n                            )\r\n\r\n                        // if such item already exist then merge new data into it, if its not we create a new entity and merge it into the array\r\n                        if (!objectRelatedValueEntity) {\r\n                            objectRelatedValueEntity =\r\n                                inverseEntityMetadata.create(undefined, {\r\n                                    fromDeserializer: true,\r\n                                })\r\n                            entityRelatedValue.push(objectRelatedValueEntity)\r\n                        }\r\n\r\n                        this.groupAndTransform(\r\n                            objectRelatedValueEntity,\r\n                            objectRelatedValueItem,\r\n                            inverseEntityMetadata,\r\n                            getLazyRelationsPromiseValue,\r\n                        )\r\n                    })\r\n                } else {\r\n                    // if related object isn't an object (direct relation id for example)\r\n                    // we just set it to the entity relation, we don't need anything more from it\r\n                    // however we do it only if original entity does not have this relation set to object\r\n                    // to prevent full overriding of objects\r\n                    if (!ObjectUtils.isObject(objectRelatedValue)) {\r\n                        if (!ObjectUtils.isObject(entityRelatedValue))\r\n                            relation.setEntityValue(entity, objectRelatedValue)\r\n                        return\r\n                    }\r\n\r\n                    const inverseEntityMetadata =\r\n                        relation.inverseEntityMetadata.findInheritanceMetadata(\r\n                            objectRelatedValue,\r\n                        )\r\n\r\n                    if (!entityRelatedValue) {\r\n                        entityRelatedValue = inverseEntityMetadata.create(\r\n                            undefined,\r\n                            {\r\n                                fromDeserializer: true,\r\n                            },\r\n                        )\r\n                        relation.setEntityValue(entity, entityRelatedValue)\r\n                    }\r\n\r\n                    this.groupAndTransform(\r\n                        entityRelatedValue,\r\n                        objectRelatedValue,\r\n                        inverseEntityMetadata,\r\n                        getLazyRelationsPromiseValue,\r\n                    )\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
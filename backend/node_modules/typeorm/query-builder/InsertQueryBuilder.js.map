{"version":3,"sources":["../../src/query-builder/InsertQueryBuilder.ts"],"names":[],"mappings":"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","file":"InsertQueryBuilder.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\"\r\nimport { EntityTarget } from \"../common/EntityTarget\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { AuroraMysqlDriver } from \"../driver/aurora-mysql/AuroraMysqlDriver\"\r\nimport { DriverUtils } from \"../driver/DriverUtils\"\r\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\"\r\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { InsertValuesMissingError } from \"../error/InsertValuesMissingError\"\r\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\"\r\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\r\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\nimport { InsertOrUpdateOptions } from \"./InsertOrUpdateOptions\"\r\nimport { QueryBuilder } from \"./QueryBuilder\"\r\nimport { QueryDeepPartialEntity } from \"./QueryPartialEntity\"\r\nimport { InsertResult } from \"./result/InsertResult\"\r\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\"\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class InsertQueryBuilder<\r\n    Entity extends ObjectLiteral,\r\n> extends QueryBuilder<Entity> {\r\n    readonly \"@instanceof\" = Symbol.for(\"InsertQueryBuilder\")\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated SQL query without parameters being replaced.\r\n     */\r\n    getQuery(): string {\r\n        let sql = this.createComment()\r\n        sql += this.createCteExpression()\r\n        sql += this.createInsertExpression()\r\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim())\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<InsertResult> {\r\n        // console.time(\".value sets\");\r\n        const valueSets: ObjectLiteral[] = this.getValueSets()\r\n        // console.timeEnd(\".value sets\");\r\n\r\n        // If user passed empty array of entities then we don't need to do\r\n        // anything.\r\n        //\r\n        // Fixes GitHub issues #3111 and #5734. If we were to let this through\r\n        // we would run into problems downstream, like subscribers getting\r\n        // invoked with the empty array where they expect an entity, and SQL\r\n        // queries with an empty VALUES clause.\r\n        if (valueSets.length === 0) return new InsertResult()\r\n\r\n        // console.time(\"QueryBuilder.execute\");\r\n        // console.time(\".database stuff\");\r\n        const queryRunner = this.obtainQueryRunner()\r\n        let transactionStartedByUs: boolean = false\r\n\r\n        try {\r\n            // start transaction if it was enabled\r\n            if (\r\n                this.expressionMap.useTransaction === true &&\r\n                queryRunner.isTransactionActive === false\r\n            ) {\r\n                await queryRunner.startTransaction()\r\n                transactionStartedByUs = true\r\n            }\r\n\r\n            // console.timeEnd(\".database stuff\");\r\n\r\n            // call before insertion methods in listeners and subscribers\r\n            if (\r\n                this.expressionMap.callListeners === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                const broadcastResult = new BroadcasterResult()\r\n                valueSets.forEach((valueSet) => {\r\n                    queryRunner.broadcaster.broadcastBeforeInsertEvent(\r\n                        broadcastResult,\r\n                        this.expressionMap.mainAlias!.metadata,\r\n                        valueSet,\r\n                    )\r\n                })\r\n                await broadcastResult.wait()\r\n            }\r\n\r\n            let declareSql: string | null = null\r\n            let selectOutputSql: string | null = null\r\n\r\n            // if update entity mode is enabled we may need extra columns for the returning statement\r\n            // console.time(\".prepare returning statement\");\r\n            const returningResultsEntityUpdator =\r\n                new ReturningResultsEntityUpdator(\r\n                    queryRunner,\r\n                    this.expressionMap,\r\n                )\r\n\r\n            const returningColumns: ColumnMetadata[] = []\r\n\r\n            if (\r\n                Array.isArray(this.expressionMap.returning) &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                for (const columnPath of this.expressionMap.returning) {\r\n                    returningColumns.push(\r\n                        ...this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(\r\n                            columnPath,\r\n                        ),\r\n                    )\r\n                }\r\n            }\r\n\r\n            if (\r\n                this.expressionMap.updateEntity === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                if (\r\n                    !(\r\n                        valueSets.length > 1 &&\r\n                        this.connection.driver.options.type === \"oracle\"\r\n                    )\r\n                ) {\r\n                    this.expressionMap.extraReturningColumns =\r\n                        this.expressionMap.mainAlias!.metadata.getInsertionReturningColumns()\r\n                }\r\n\r\n                returningColumns.push(\r\n                    ...this.expressionMap.extraReturningColumns.filter(\r\n                        (c) => !returningColumns.includes(c),\r\n                    ),\r\n                )\r\n            }\r\n\r\n            if (\r\n                returningColumns.length > 0 &&\r\n                this.connection.driver.options.type === \"mssql\"\r\n            ) {\r\n                declareSql = (\r\n                    this.connection.driver as SqlServerDriver\r\n                ).buildTableVariableDeclaration(\r\n                    \"@OutputTable\",\r\n                    returningColumns,\r\n                )\r\n                selectOutputSql = `SELECT * FROM @OutputTable`\r\n            }\r\n            // console.timeEnd(\".prepare returning statement\");\r\n\r\n            // execute query\r\n            // console.time(\".getting query and parameters\");\r\n            const [insertSql, parameters] = this.getQueryAndParameters()\r\n            // console.timeEnd(\".getting query and parameters\");\r\n\r\n            // console.time(\".query execution by database\");\r\n            const statements = [declareSql, insertSql, selectOutputSql]\r\n            const sql = statements.filter((s) => s != null).join(\";\\n\\n\")\r\n\r\n            const queryResult = await queryRunner.query(sql, parameters, true)\r\n\r\n            const insertResult = InsertResult.from(queryResult)\r\n\r\n            // console.timeEnd(\".query execution by database\");\r\n\r\n            // load returning results and set them to the entity if entity updation is enabled\r\n            if (\r\n                this.expressionMap.updateEntity === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                // console.time(\".updating entity\");\r\n                await returningResultsEntityUpdator.insert(\r\n                    insertResult,\r\n                    valueSets,\r\n                )\r\n                // console.timeEnd(\".updating entity\");\r\n            }\r\n\r\n            // call after insertion methods in listeners and subscribers\r\n            if (\r\n                this.expressionMap.callListeners === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                const broadcastResult = new BroadcasterResult()\r\n                valueSets.forEach((valueSet) => {\r\n                    queryRunner.broadcaster.broadcastAfterInsertEvent(\r\n                        broadcastResult,\r\n                        this.expressionMap.mainAlias!.metadata,\r\n                        valueSet,\r\n                    )\r\n                })\r\n                await broadcastResult.wait()\r\n            }\r\n\r\n            // close transaction if we started it\r\n            // console.time(\".commit\");\r\n            if (transactionStartedByUs) {\r\n                await queryRunner.commitTransaction()\r\n            }\r\n            // console.timeEnd(\".commit\");\r\n\r\n            return insertResult\r\n        } catch (error) {\r\n            // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try {\r\n                    await queryRunner.rollbackTransaction()\r\n                } catch (rollbackError) {}\r\n            }\r\n            throw error\r\n        } finally {\r\n            // console.time(\".releasing connection\");\r\n            if (queryRunner !== this.queryRunner) {\r\n                // means we created our own query runner\r\n                await queryRunner.release()\r\n            }\r\n            // console.timeEnd(\".releasing connection\");\r\n            // console.timeEnd(\"QueryBuilder.execute\");\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Specifies INTO which entity's table insertion will be executed.\r\n     */\r\n    into<T extends ObjectLiteral>(\r\n        entityTarget: EntityTarget<T>,\r\n        columns?: string[],\r\n    ): InsertQueryBuilder<T> {\r\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\r\n            ? entityTarget.options.name\r\n            : entityTarget\r\n        const mainAlias = this.createFromAlias(entityTarget)\r\n        this.expressionMap.setMainAlias(mainAlias)\r\n        this.expressionMap.insertColumns = columns || []\r\n        return this as any as InsertQueryBuilder<T>\r\n    }\r\n\r\n    /**\r\n     * Values needs to be inserted into table.\r\n     */\r\n    values(\r\n        values:\r\n            | QueryDeepPartialEntity<Entity>\r\n            | QueryDeepPartialEntity<Entity>[],\r\n    ): this {\r\n        this.expressionMap.valuesSet = values\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    output(columns: string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    output(output: string): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string | string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string | string[]): this {\r\n        return this.returning(output)\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    returning(columns: string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    returning(returning: string): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string | string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string | string[]): this {\r\n        // not all databases support returning/output cause\r\n        if (!this.connection.driver.isReturningSqlSupported(\"insert\")) {\r\n            throw new ReturningStatementNotSupportedError()\r\n        }\r\n\r\n        this.expressionMap.returning = returning\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Indicates if entity must be updated after insertion operations.\r\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\r\n     * Enabled by default.\r\n     */\r\n    updateEntity(enabled: boolean): this {\r\n        this.expressionMap.updateEntity = enabled\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds additional ON CONFLICT statement supported in postgres and cockroach.\r\n     *\r\n     * @deprecated Use `orIgnore` or `orUpdate`\r\n     */\r\n    onConflict(statement: string): this {\r\n        this.expressionMap.onConflict = statement\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds additional ignore statement supported in databases.\r\n     */\r\n    orIgnore(statement: string | boolean = true): this {\r\n        this.expressionMap.onIgnore = !!statement\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * @deprecated\r\n     *\r\n     * `.orUpdate({ columns: [ \"is_updated\" ] }).setParameter(\"is_updated\", value)`\r\n     *\r\n     * is now `.orUpdate([\"is_updated\"])`\r\n     *\r\n     * `.orUpdate({ conflict_target: ['date'], overwrite: ['title'] })`\r\n     *\r\n     * is now `.orUpdate(['title'], ['date'])`\r\n     *\r\n     */\r\n    orUpdate(statement?: {\r\n        columns?: string[]\r\n        overwrite?: string[]\r\n        conflict_target?: string | string[]\r\n    }): this\r\n\r\n    orUpdate(\r\n        overwrite: string[],\r\n        conflictTarget?: string | string[],\r\n        orUpdateOptions?: InsertOrUpdateOptions,\r\n    ): this\r\n\r\n    /**\r\n     * Adds additional update statement supported in databases.\r\n     */\r\n    orUpdate(\r\n        statementOrOverwrite?:\r\n            | {\r\n                  columns?: string[]\r\n                  overwrite?: string[]\r\n                  conflict_target?: string | string[]\r\n              }\r\n            | string[],\r\n        conflictTarget?: string | string[],\r\n        orUpdateOptions?: InsertOrUpdateOptions,\r\n    ): this {\r\n        if (!Array.isArray(statementOrOverwrite)) {\r\n            this.expressionMap.onUpdate = {\r\n                conflict: statementOrOverwrite?.conflict_target,\r\n                columns: statementOrOverwrite?.columns,\r\n                overwrite: statementOrOverwrite?.overwrite,\r\n                skipUpdateIfNoValuesChanged:\r\n                    orUpdateOptions?.skipUpdateIfNoValuesChanged,\r\n                upsertType: orUpdateOptions?.upsertType,\r\n            }\r\n            return this\r\n        }\r\n\r\n        this.expressionMap.onUpdate = {\r\n            overwrite: statementOrOverwrite,\r\n            conflict: conflictTarget,\r\n            skipUpdateIfNoValuesChanged:\r\n                orUpdateOptions?.skipUpdateIfNoValuesChanged,\r\n            indexPredicate: orUpdateOptions?.indexPredicate,\r\n            upsertType: orUpdateOptions?.upsertType,\r\n        }\r\n        return this\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates INSERT express used to perform insert query.\r\n     */\r\n    protected createInsertExpression() {\r\n        const tableName = this.getTableName(this.getMainTableName())\r\n        const valuesExpression = this.createValuesExpression() // its important to get values before returning expression because oracle rely on native parameters and ordering of them is important\r\n        const returningExpression =\r\n            this.connection.driver.options.type === \"oracle\" &&\r\n            this.getValueSets().length > 1\r\n                ? null\r\n                : this.createReturningExpression(\"insert\") // oracle doesnt support returning with multi-row insert\r\n        const columnsExpression = this.createColumnNamesExpression()\r\n        let query = \"INSERT \"\r\n\r\n        if (this.expressionMap.onUpdate?.upsertType === \"primary-key\") {\r\n            query = \"UPSERT \"\r\n        }\r\n\r\n        if (\r\n            DriverUtils.isMySQLFamily(this.connection.driver) ||\r\n            this.connection.driver.options.type === \"aurora-mysql\"\r\n        ) {\r\n            query += `${this.expressionMap.onIgnore ? \" IGNORE \" : \"\"}`\r\n        }\r\n\r\n        query += `INTO ${tableName}`\r\n\r\n        if (\r\n            this.alias !== this.getMainTableName() &&\r\n            DriverUtils.isPostgresFamily(this.connection.driver)\r\n        ) {\r\n            query += ` AS \"${this.alias}\"`\r\n        }\r\n\r\n        // add columns expression\r\n        if (columnsExpression) {\r\n            query += `(${columnsExpression})`\r\n        } else {\r\n            if (\r\n                !valuesExpression &&\r\n                (DriverUtils.isMySQLFamily(this.connection.driver) ||\r\n                    this.connection.driver.options.type === \"aurora-mysql\")\r\n            )\r\n                // special syntax for mysql DEFAULT VALUES insertion\r\n                query += \"()\"\r\n        }\r\n\r\n        // add OUTPUT expression\r\n        if (\r\n            returningExpression &&\r\n            this.connection.driver.options.type === \"mssql\"\r\n        ) {\r\n            query += ` OUTPUT ${returningExpression}`\r\n        }\r\n\r\n        // add VALUES expression\r\n        if (valuesExpression) {\r\n            if (\r\n                (this.connection.driver.options.type === \"oracle\" ||\r\n                    this.connection.driver.options.type === \"sap\") &&\r\n                this.getValueSets().length > 1\r\n            ) {\r\n                query += ` ${valuesExpression}`\r\n            } else {\r\n                query += ` VALUES ${valuesExpression}`\r\n            }\r\n        } else {\r\n            if (\r\n                DriverUtils.isMySQLFamily(this.connection.driver) ||\r\n                this.connection.driver.options.type === \"aurora-mysql\"\r\n            ) {\r\n                // special syntax for mysql DEFAULT VALUES insertion\r\n                query += \" VALUES ()\"\r\n            } else {\r\n                query += ` DEFAULT VALUES`\r\n            }\r\n        }\r\n        if (this.expressionMap.onUpdate?.upsertType !== \"primary-key\") {\r\n            if (\r\n                this.connection.driver.supportedUpsertTypes.includes(\r\n                    \"on-conflict-do-update\",\r\n                )\r\n            ) {\r\n                if (this.expressionMap.onIgnore) {\r\n                    query += \" ON CONFLICT DO NOTHING \"\r\n                } else if (this.expressionMap.onConflict) {\r\n                    query += ` ON CONFLICT ${this.expressionMap.onConflict} `\r\n                } else if (this.expressionMap.onUpdate) {\r\n                    const {\r\n                        overwrite,\r\n                        columns,\r\n                        conflict,\r\n                        skipUpdateIfNoValuesChanged,\r\n                        indexPredicate,\r\n                    } = this.expressionMap.onUpdate\r\n\r\n                    let conflictTarget = \"ON CONFLICT\"\r\n\r\n                    if (Array.isArray(conflict)) {\r\n                        conflictTarget += ` ( ${conflict\r\n                            .map((column) => this.escape(column))\r\n                            .join(\", \")} )`\r\n                        if (\r\n                            indexPredicate &&\r\n                            !DriverUtils.isPostgresFamily(\r\n                                this.connection.driver,\r\n                            )\r\n                        ) {\r\n                            throw new TypeORMError(\r\n                                `indexPredicate option is not supported by the current database driver`,\r\n                            )\r\n                        }\r\n                        if (\r\n                            indexPredicate &&\r\n                            DriverUtils.isPostgresFamily(this.connection.driver)\r\n                        ) {\r\n                            conflictTarget += ` WHERE ( ${indexPredicate} )`\r\n                        }\r\n                    } else if (conflict) {\r\n                        conflictTarget += ` ON CONSTRAINT ${this.escape(\r\n                            conflict,\r\n                        )}`\r\n                    }\r\n\r\n                    const updatePart: string[] = []\r\n\r\n                    if (Array.isArray(overwrite)) {\r\n                        updatePart.push(\r\n                            ...overwrite.map(\r\n                                (column) =>\r\n                                    `${this.escape(\r\n                                        column,\r\n                                    )} = EXCLUDED.${this.escape(column)}`,\r\n                            ),\r\n                        )\r\n                    } else if (columns) {\r\n                        updatePart.push(\r\n                            ...columns.map(\r\n                                (column) =>\r\n                                    `${this.escape(column)} = :${column}`,\r\n                            ),\r\n                        )\r\n                    }\r\n\r\n                    if (updatePart.length > 0) {\r\n                        query += ` ${conflictTarget} DO UPDATE SET `\r\n\r\n                        updatePart.push(\r\n                            ...this.expressionMap\r\n                                .mainAlias!.metadata.columns.filter(\r\n                                    (column) =>\r\n                                        column.isUpdateDate &&\r\n                                        !overwrite?.includes(\r\n                                            column.databaseName,\r\n                                        ) &&\r\n                                        !(\r\n                                            (this.connection.driver.options\r\n                                                .type === \"oracle\" &&\r\n                                                this.getValueSets().length >\r\n                                                    1) ||\r\n                                            DriverUtils.isSQLiteFamily(\r\n                                                this.connection.driver,\r\n                                            ) ||\r\n                                            this.connection.driver.options\r\n                                                .type === \"sap\" ||\r\n                                            this.connection.driver.options\r\n                                                .type === \"spanner\"\r\n                                        ),\r\n                                )\r\n                                .map(\r\n                                    (column) =>\r\n                                        `${this.escape(\r\n                                            column.databaseName,\r\n                                        )} = DEFAULT`,\r\n                                ),\r\n                        )\r\n\r\n                        query += updatePart.join(\", \")\r\n                        query += \" \"\r\n                    }\r\n\r\n                    if (\r\n                        Array.isArray(overwrite) &&\r\n                        skipUpdateIfNoValuesChanged &&\r\n                        DriverUtils.isPostgresFamily(this.connection.driver)\r\n                    ) {\r\n                        query += ` WHERE (`\r\n                        query += overwrite\r\n                            .map(\r\n                                (column) =>\r\n                                    `${tableName}.${this.escape(\r\n                                        column,\r\n                                    )} IS DISTINCT FROM EXCLUDED.${this.escape(\r\n                                        column,\r\n                                    )}`,\r\n                            )\r\n                            .join(\" OR \")\r\n                        query += \") \"\r\n                    }\r\n                }\r\n            } else if (\r\n                this.connection.driver.supportedUpsertTypes.includes(\r\n                    \"on-duplicate-key-update\",\r\n                )\r\n            ) {\r\n                if (this.expressionMap.onUpdate) {\r\n                    const { overwrite, columns } = this.expressionMap.onUpdate\r\n\r\n                    if (Array.isArray(overwrite)) {\r\n                        query += \" ON DUPLICATE KEY UPDATE \"\r\n                        query += overwrite\r\n                            .map(\r\n                                (column) =>\r\n                                    `${this.escape(\r\n                                        column,\r\n                                    )} = VALUES(${this.escape(column)})`,\r\n                            )\r\n                            .join(\", \")\r\n                        query += \" \"\r\n                    } else if (Array.isArray(columns)) {\r\n                        query += \" ON DUPLICATE KEY UPDATE \"\r\n                        query += columns\r\n                            .map(\r\n                                (column) =>\r\n                                    `${this.escape(column)} = :${column}`,\r\n                            )\r\n                            .join(\", \")\r\n                        query += \" \"\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.expressionMap.onUpdate) {\r\n                    throw new TypeORMError(\r\n                        `onUpdate is not supported by the current database driver`,\r\n                    )\r\n                }\r\n            }\r\n        }\r\n\r\n        // add RETURNING expression\r\n        if (\r\n            returningExpression &&\r\n            (DriverUtils.isPostgresFamily(this.connection.driver) ||\r\n                this.connection.driver.options.type === \"oracle\" ||\r\n                this.connection.driver.options.type === \"cockroachdb\" ||\r\n                DriverUtils.isMySQLFamily(this.connection.driver))\r\n        ) {\r\n            query += ` RETURNING ${returningExpression}`\r\n        }\r\n\r\n        // Inserting a specific value for an auto-increment primary key in mssql requires enabling IDENTITY_INSERT\r\n        // IDENTITY_INSERT can only be enabled for tables where there is an IDENTITY column and only if there is a value to be inserted (i.e. supplying DEFAULT is prohibited if IDENTITY_INSERT is enabled)\r\n        if (\r\n            this.connection.driver.options.type === \"mssql\" &&\r\n            this.expressionMap.mainAlias!.hasMetadata &&\r\n            this.expressionMap\r\n                .mainAlias!.metadata.columns.filter((column) =>\r\n                    this.expressionMap.insertColumns.length > 0\r\n                        ? this.expressionMap.insertColumns.indexOf(\r\n                              column.propertyPath,\r\n                          ) !== -1\r\n                        : column.isInsert,\r\n                )\r\n                .some((column) =>\r\n                    this.isOverridingAutoIncrementBehavior(column),\r\n                )\r\n        ) {\r\n            query = `SET IDENTITY_INSERT ${tableName} ON; ${query}; SET IDENTITY_INSERT ${tableName} OFF`\r\n        }\r\n\r\n        return query\r\n    }\r\n\r\n    /**\r\n     * Gets list of columns where values must be inserted to.\r\n     */\r\n    protected getInsertedColumns(): ColumnMetadata[] {\r\n        if (!this.expressionMap.mainAlias!.hasMetadata) return []\r\n\r\n        return this.expressionMap.mainAlias!.metadata.columns.filter(\r\n            (column) => {\r\n                // if user specified list of columns he wants to insert to, then we filter only them\r\n                if (this.expressionMap.insertColumns.length)\r\n                    return (\r\n                        this.expressionMap.insertColumns.indexOf(\r\n                            column.propertyPath,\r\n                        ) !== -1\r\n                    )\r\n\r\n                // skip columns the user doesn't want included by default\r\n                if (!column.isInsert) {\r\n                    return false\r\n                }\r\n\r\n                // if user did not specified such list then return all columns except auto-increment one\r\n                // for Oracle we return auto-increment column as well because Oracle does not support DEFAULT VALUES expression\r\n                if (\r\n                    column.isGenerated &&\r\n                    column.generationStrategy === \"increment\" &&\r\n                    !(this.connection.driver.options.type === \"spanner\") &&\r\n                    !(this.connection.driver.options.type === \"oracle\") &&\r\n                    !DriverUtils.isSQLiteFamily(this.connection.driver) &&\r\n                    !DriverUtils.isMySQLFamily(this.connection.driver) &&\r\n                    !(this.connection.driver.options.type === \"aurora-mysql\") &&\r\n                    !(\r\n                        this.connection.driver.options.type === \"mssql\" &&\r\n                        this.isOverridingAutoIncrementBehavior(column)\r\n                    )\r\n                )\r\n                    return false\r\n\r\n                return true\r\n            },\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a columns string where values must be inserted to for INSERT INTO expression.\r\n     */\r\n    protected createColumnNamesExpression(): string {\r\n        const columns = this.getInsertedColumns()\r\n        if (columns.length > 0)\r\n            return columns\r\n                .map((column) => this.escape(column.databaseName))\r\n                .join(\", \")\r\n\r\n        // in the case if there are no insert columns specified and table without metadata used\r\n        // we get columns from the inserted value map, in the case if only one inserted map is specified\r\n        if (\r\n            !this.expressionMap.mainAlias!.hasMetadata &&\r\n            !this.expressionMap.insertColumns.length\r\n        ) {\r\n            const valueSets = this.getValueSets()\r\n            if (valueSets.length === 1)\r\n                return Object.keys(valueSets[0])\r\n                    .map((columnName) => this.escape(columnName))\r\n                    .join(\", \")\r\n        }\r\n\r\n        // get a table name and all column database names\r\n        return this.expressionMap.insertColumns\r\n            .map((columnName) => this.escape(columnName))\r\n            .join(\", \")\r\n    }\r\n\r\n    /**\r\n     * Creates list of values needs to be inserted in the VALUES expression.\r\n     */\r\n    protected createValuesExpression(): string {\r\n        const valueSets = this.getValueSets()\r\n        const columns = this.getInsertedColumns()\r\n\r\n        // if column metadatas are given then apply all necessary operations with values\r\n        if (columns.length > 0) {\r\n            let expression = \"\"\r\n            valueSets.forEach((valueSet, valueSetIndex) => {\r\n                columns.forEach((column, columnIndex) => {\r\n                    if (columnIndex === 0) {\r\n                        if (\r\n                            this.connection.driver.options.type === \"oracle\" &&\r\n                            valueSets.length > 1\r\n                        ) {\r\n                            expression += \" SELECT \"\r\n                        } else if (\r\n                            this.connection.driver.options.type === \"sap\" &&\r\n                            valueSets.length > 1\r\n                        ) {\r\n                            expression += \" SELECT \"\r\n                        } else {\r\n                            expression += \"(\"\r\n                        }\r\n                    }\r\n\r\n                    // extract real value from the entity\r\n                    let value = column.getEntityValue(valueSet)\r\n\r\n                    // if column is relational and value is an object then get real referenced column value from this object\r\n                    // for example column value is { question: { id: 1 } }, value will be equal to { id: 1 }\r\n                    // and we extract \"1\" from this object\r\n                    /*if (column.referencedColumn && value instanceof Object && !(typeof value === \"function\")) { // todo: check if we still need it since getEntityValue already has similar code\r\n                        value = column.referencedColumn.getEntityValue(value);\r\n                    }*/\r\n\r\n                    if (!(typeof value === \"function\")) {\r\n                        // make sure our value is normalized by a driver\r\n                        value = this.connection.driver.preparePersistentValue(\r\n                            value,\r\n                            column,\r\n                        )\r\n                    }\r\n\r\n                    // newly inserted entities always have a version equal to 1 (first version)\r\n                    // also, user-specified version must be empty\r\n                    if (column.isVersion && value === undefined) {\r\n                        expression += \"1\"\r\n\r\n                        // } else if (column.isNestedSetLeft) {\r\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\r\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\r\n                        //     const subQuery = `(SELECT c.max + 1 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\r\n                        //     expression += subQuery;\r\n                        //\r\n                        // } else if (column.isNestedSetRight) {\r\n                        //     const tableName = this.connection.driver.escape(column.entityMetadata.tablePath);\r\n                        //     const rightColumnName = this.connection.driver.escape(column.entityMetadata.nestedSetRightColumn!.databaseName);\r\n                        //     const subQuery = `(SELECT c.max + 2 FROM (SELECT MAX(${rightColumnName}) as max from ${tableName}) c)`;\r\n                        //     expression += subQuery;\r\n                    } else if (column.isDiscriminator) {\r\n                        expression += this.createParameter(\r\n                            this.expressionMap.mainAlias!.metadata\r\n                                .discriminatorValue,\r\n                        )\r\n                        // return \"1\";\r\n\r\n                        // for create and update dates we insert current date\r\n                        // no, we don't do it because this constant is already in \"default\" value of the column\r\n                        // with extended timestamp functionality, like CURRENT_TIMESTAMP(6) for example\r\n                        // } else if (column.isCreateDate || column.isUpdateDate) {\r\n                        //     return \"CURRENT_TIMESTAMP\";\r\n\r\n                        // if column is generated uuid and database does not support its generation and custom generated value was not provided by a user - we generate a new uuid value for insertion\r\n                    } else if (\r\n                        column.isGenerated &&\r\n                        column.generationStrategy === \"uuid\" &&\r\n                        !this.connection.driver.isUUIDGenerationSupported() &&\r\n                        value === undefined\r\n                    ) {\r\n                        value = uuidv4()\r\n                        expression += this.createParameter(value)\r\n\r\n                        if (\r\n                            !(\r\n                                valueSetIndex in\r\n                                this.expressionMap.locallyGenerated\r\n                            )\r\n                        ) {\r\n                            this.expressionMap.locallyGenerated[valueSetIndex] =\r\n                                {}\r\n                        }\r\n                        column.setEntityValue(\r\n                            this.expressionMap.locallyGenerated[valueSetIndex],\r\n                            value,\r\n                        )\r\n\r\n                        // if value for this column was not provided then insert default value\r\n                    } else if (value === undefined) {\r\n                        if (\r\n                            (this.connection.driver.options.type === \"oracle\" &&\r\n                                valueSets.length > 1) ||\r\n                            DriverUtils.isSQLiteFamily(\r\n                                this.connection.driver,\r\n                            ) ||\r\n                            this.connection.driver.options.type === \"sap\" ||\r\n                            this.connection.driver.options.type === \"spanner\"\r\n                        ) {\r\n                            // unfortunately sqlite does not support DEFAULT expression in INSERT queries\r\n                            if (\r\n                                column.default !== undefined &&\r\n                                column.default !== null\r\n                            ) {\r\n                                // try to use default defined in the column\r\n                                expression +=\r\n                                    this.connection.driver.normalizeDefault(\r\n                                        column,\r\n                                    )\r\n                            } else {\r\n                                expression += \"NULL\" // otherwise simply use NULL and pray if column is nullable\r\n                            }\r\n                        } else {\r\n                            expression += \"DEFAULT\"\r\n                        }\r\n                    } else if (\r\n                        value === null &&\r\n                        this.connection.driver.options.type === \"spanner\"\r\n                    ) {\r\n                        expression += \"NULL\"\r\n\r\n                        // support for SQL expressions in queries\r\n                    } else if (typeof value === \"function\") {\r\n                        expression += value()\r\n\r\n                        // just any other regular value\r\n                    } else {\r\n                        if (this.connection.driver.options.type === \"mssql\")\r\n                            value = (\r\n                                this.connection.driver as SqlServerDriver\r\n                            ).parametrizeValue(column, value)\r\n\r\n                        // we need to store array values in a special class to make sure parameter replacement will work correctly\r\n                        // if (value instanceof Array)\r\n                        //     value = new ArrayParameter(value);\r\n\r\n                        const paramName = this.createParameter(value)\r\n\r\n                        if (\r\n                            (DriverUtils.isMySQLFamily(\r\n                                this.connection.driver,\r\n                            ) ||\r\n                                this.connection.driver.options.type ===\r\n                                    \"aurora-mysql\") &&\r\n                            this.connection.driver.spatialTypes.indexOf(\r\n                                column.type,\r\n                            ) !== -1\r\n                        ) {\r\n                            const useLegacy = (\r\n                                this.connection.driver as\r\n                                    | MysqlDriver\r\n                                    | AuroraMysqlDriver\r\n                            ).options.legacySpatialSupport\r\n                            const geomFromText = useLegacy\r\n                                ? \"GeomFromText\"\r\n                                : \"ST_GeomFromText\"\r\n                            if (column.srid != null) {\r\n                                expression += `${geomFromText}(${paramName}, ${column.srid})`\r\n                            } else {\r\n                                expression += `${geomFromText}(${paramName})`\r\n                            }\r\n                        } else if (\r\n                            DriverUtils.isPostgresFamily(\r\n                                this.connection.driver,\r\n                            ) &&\r\n                            this.connection.driver.spatialTypes.indexOf(\r\n                                column.type,\r\n                            ) !== -1\r\n                        ) {\r\n                            if (column.srid != null) {\r\n                                expression += `ST_SetSRID(ST_GeomFromGeoJSON(${paramName}), ${column.srid})::${column.type}`\r\n                            } else {\r\n                                expression += `ST_GeomFromGeoJSON(${paramName})::${column.type}`\r\n                            }\r\n                        } else if (\r\n                            this.connection.driver.options.type === \"mssql\" &&\r\n                            this.connection.driver.spatialTypes.indexOf(\r\n                                column.type,\r\n                            ) !== -1\r\n                        ) {\r\n                            expression +=\r\n                                column.type +\r\n                                \"::STGeomFromText(\" +\r\n                                paramName +\r\n                                \", \" +\r\n                                (column.srid || \"0\") +\r\n                                \")\"\r\n                        } else {\r\n                            expression += paramName\r\n                        }\r\n                    }\r\n\r\n                    if (columnIndex === columns.length - 1) {\r\n                        if (valueSetIndex === valueSets.length - 1) {\r\n                            if (\r\n                                this.connection.driver.options.type ===\r\n                                    \"oracle\" &&\r\n                                valueSets.length > 1\r\n                            ) {\r\n                                expression += \" FROM DUAL \"\r\n                            } else if (\r\n                                this.connection.driver.options.type === \"sap\" &&\r\n                                valueSets.length > 1\r\n                            ) {\r\n                                expression += \" FROM dummy \"\r\n                            } else {\r\n                                expression += \")\"\r\n                            }\r\n                        } else {\r\n                            if (\r\n                                this.connection.driver.options.type ===\r\n                                    \"oracle\" &&\r\n                                valueSets.length > 1\r\n                            ) {\r\n                                expression += \" FROM DUAL UNION ALL \"\r\n                            } else if (\r\n                                this.connection.driver.options.type === \"sap\" &&\r\n                                valueSets.length > 1\r\n                            ) {\r\n                                expression += \" FROM dummy UNION ALL \"\r\n                            } else {\r\n                                expression += \"), \"\r\n                            }\r\n                        }\r\n                    } else {\r\n                        expression += \", \"\r\n                    }\r\n                })\r\n            })\r\n            if (expression === \"()\") return \"\"\r\n\r\n            return expression\r\n        } else {\r\n            // for tables without metadata\r\n            // get values needs to be inserted\r\n            let expression = \"\"\r\n\r\n            valueSets.forEach((valueSet, insertionIndex) => {\r\n                const columns = Object.keys(valueSet)\r\n                columns.forEach((columnName, columnIndex) => {\r\n                    if (columnIndex === 0) {\r\n                        expression += \"(\"\r\n                    }\r\n\r\n                    const value = valueSet[columnName]\r\n\r\n                    // support for SQL expressions in queries\r\n                    if (typeof value === \"function\") {\r\n                        expression += value()\r\n\r\n                        // if value for this column was not provided then insert default value\r\n                    } else if (value === undefined) {\r\n                        if (\r\n                            (this.connection.driver.options.type === \"oracle\" &&\r\n                                valueSets.length > 1) ||\r\n                            DriverUtils.isSQLiteFamily(\r\n                                this.connection.driver,\r\n                            ) ||\r\n                            this.connection.driver.options.type === \"sap\" ||\r\n                            this.connection.driver.options.type === \"spanner\"\r\n                        ) {\r\n                            expression += \"NULL\"\r\n                        } else {\r\n                            expression += \"DEFAULT\"\r\n                        }\r\n                    } else if (\r\n                        value === null &&\r\n                        this.connection.driver.options.type === \"spanner\"\r\n                    ) {\r\n                        // just any other regular value\r\n                    } else {\r\n                        expression += this.createParameter(value)\r\n                    }\r\n\r\n                    if (columnIndex === Object.keys(valueSet).length - 1) {\r\n                        if (insertionIndex === valueSets.length - 1) {\r\n                            expression += \")\"\r\n                        } else {\r\n                            expression += \"), \"\r\n                        }\r\n                    } else {\r\n                        expression += \", \"\r\n                    }\r\n                })\r\n            })\r\n            if (expression === \"()\") return \"\"\r\n            return expression\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets array of values need to be inserted into the target table.\r\n     */\r\n    protected getValueSets(): ObjectLiteral[] {\r\n        if (Array.isArray(this.expressionMap.valuesSet))\r\n            return this.expressionMap.valuesSet\r\n\r\n        if (ObjectUtils.isObject(this.expressionMap.valuesSet))\r\n            return [this.expressionMap.valuesSet]\r\n\r\n        throw new InsertValuesMissingError()\r\n    }\r\n\r\n    /**\r\n     * Checks if column is an auto-generated primary key, but the current insertion specifies a value for it.\r\n     *\r\n     * @param column\r\n     */\r\n    protected isOverridingAutoIncrementBehavior(\r\n        column: ColumnMetadata,\r\n    ): boolean {\r\n        return (\r\n            column.isPrimary &&\r\n            column.isGenerated &&\r\n            column.generationStrategy === \"increment\" &&\r\n            this.getValueSets().some(\r\n                (valueSet) =>\r\n                    column.getEntityValue(valueSet) !== undefined &&\r\n                    column.getEntityValue(valueSet) !== null,\r\n            )\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":".."}
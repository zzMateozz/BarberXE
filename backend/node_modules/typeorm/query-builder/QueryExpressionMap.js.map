{"version":3,"sources":["../../src/query-builder/QueryExpressionMap.ts"],"names":[],"mappings":"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","file":"QueryExpressionMap.js","sourcesContent":["import { Alias } from \"./Alias\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { OrderByCondition } from \"../find-options/OrderByCondition\"\r\nimport { JoinAttribute } from \"./JoinAttribute\"\r\nimport { QueryBuilder } from \"./QueryBuilder\"\r\nimport { QueryBuilderCteOptions } from \"./QueryBuilderCte\"\r\nimport { RelationIdAttribute } from \"./relation-id/RelationIdAttribute\"\r\nimport { RelationCountAttribute } from \"./relation-count/RelationCountAttribute\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\r\nimport { SelectQuery } from \"./SelectQuery\"\r\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\r\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\r\nimport { SelectQueryBuilderOption } from \"./SelectQueryBuilderOption\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { WhereClause } from \"./WhereClause\"\r\nimport { UpsertType } from \"../driver/types/UpsertType\"\r\nimport { CockroachConnectionOptions } from \"../driver/cockroachdb/CockroachConnectionOptions\"\r\n\r\n/**\r\n * Contains all properties of the QueryBuilder that needs to be build a final query.\r\n */\r\nexport class QueryExpressionMap {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Strategy to load relations.\r\n     */\r\n    relationLoadStrategy: \"join\" | \"query\" = \"join\"\r\n\r\n    /**\r\n     * Indicates if QueryBuilder used to select entities and not a raw results.\r\n     */\r\n    queryEntity: boolean = false\r\n\r\n    /**\r\n     * Main alias is a main selection object selected by QueryBuilder.\r\n     */\r\n    mainAlias?: Alias\r\n\r\n    /**\r\n     * All aliases (including main alias) used in the query.\r\n     */\r\n    aliases: Alias[] = []\r\n\r\n    /**\r\n     * Represents query type. QueryBuilder is able to build SELECT, UPDATE and DELETE queries.\r\n     */\r\n    queryType:\r\n        | \"select\"\r\n        | \"update\"\r\n        | \"delete\"\r\n        | \"insert\"\r\n        | \"relation\"\r\n        | \"soft-delete\"\r\n        | \"restore\" = \"select\"\r\n\r\n    /**\r\n     * Data needs to be SELECT-ed.\r\n     */\r\n    selects: SelectQuery[] = []\r\n\r\n    /**\r\n     * Max execution time in millisecond.\r\n     */\r\n    maxExecutionTime: number = 0\r\n\r\n    /**\r\n     * Whether SELECT is DISTINCT.\r\n     */\r\n    selectDistinct: boolean = false\r\n\r\n    /**\r\n     * SELECT DISTINCT ON query (postgres).\r\n     */\r\n    selectDistinctOn: string[] = []\r\n\r\n    /**\r\n     * FROM-s to be selected.\r\n     */\r\n    // froms: { target: string, alias: string }[] = [];\r\n\r\n    /**\r\n     * If update query was used, it needs \"update set\" - properties which will be updated by this query.\r\n     * If insert query was used, it needs \"insert set\" - values that needs to be inserted.\r\n     */\r\n    valuesSet?: ObjectLiteral | ObjectLiteral[]\r\n\r\n    /**\r\n     * Optional returning (or output) clause for insert, update or delete queries.\r\n     */\r\n    returning: string | string[]\r\n\r\n    /**\r\n     * Extra returning columns to be added to the returning statement if driver supports it.\r\n     */\r\n    extraReturningColumns: ColumnMetadata[] = []\r\n\r\n    /**\r\n     * Optional on conflict statement used in insertion query in postgres.\r\n     */\r\n    onConflict: string = \"\"\r\n\r\n    /**\r\n     * Optional on ignore statement used in insertion query in databases.\r\n     */\r\n    onIgnore: boolean = false\r\n\r\n    /**\r\n     * Optional on update statement used in insertion query in databases.\r\n     */\r\n    onUpdate: {\r\n        conflict?: string | string[]\r\n        columns?: string[]\r\n        overwrite?: string[]\r\n        skipUpdateIfNoValuesChanged?: boolean\r\n        indexPredicate?: string\r\n        upsertType?: UpsertType\r\n    }\r\n\r\n    /**\r\n     * JOIN queries.\r\n     */\r\n    joinAttributes: JoinAttribute[] = []\r\n\r\n    /**\r\n     * RelationId queries.\r\n     */\r\n    relationIdAttributes: RelationIdAttribute[] = []\r\n\r\n    /**\r\n     * Relation count queries.\r\n     */\r\n    relationCountAttributes: RelationCountAttribute[] = []\r\n\r\n    /**\r\n     * WHERE queries.\r\n     */\r\n    wheres: WhereClause[] = []\r\n\r\n    /**\r\n     * HAVING queries.\r\n     */\r\n    havings: { type: \"simple\" | \"and\" | \"or\"; condition: string }[] = []\r\n\r\n    /**\r\n     * ORDER BY queries.\r\n     */\r\n    orderBys: OrderByCondition = {}\r\n\r\n    /**\r\n     * GROUP BY queries.\r\n     */\r\n    groupBys: string[] = []\r\n\r\n    /**\r\n     * LIMIT query.\r\n     */\r\n    limit?: number\r\n\r\n    /**\r\n     * OFFSET query.\r\n     */\r\n    offset?: number\r\n\r\n    /**\r\n     * Number of rows to skip of result using pagination.\r\n     */\r\n    skip?: number\r\n\r\n    /**\r\n     * Number of rows to take using pagination.\r\n     */\r\n    take?: number\r\n\r\n    /**\r\n     * Use certain index for the query.\r\n     *\r\n     * SELECT * FROM table_name USE INDEX (col1_index, col2_index) WHERE col1=1 AND col2=2 AND col3=3;\r\n     */\r\n    useIndex?: string\r\n\r\n    /**\r\n     * Locking mode.\r\n     */\r\n    lockMode?:\r\n        | \"optimistic\"\r\n        | \"pessimistic_read\"\r\n        | \"pessimistic_write\"\r\n        | \"dirty_read\"\r\n        /*\r\n            \"pessimistic_partial_write\" and \"pessimistic_write_or_fail\" are deprecated and\r\n            will be removed in a future version.\r\n\r\n            Use onLocked instead.\r\n         */\r\n        | \"pessimistic_partial_write\"\r\n        | \"pessimistic_write_or_fail\"\r\n        | \"for_no_key_update\"\r\n        | \"for_key_share\"\r\n\r\n    /**\r\n     * Current version of the entity, used for locking.\r\n     */\r\n    lockVersion?: number | Date\r\n\r\n    /**\r\n     * Tables to be specified in the \"FOR UPDATE OF\" clause, referred by their alias\r\n     */\r\n    lockTables?: string[]\r\n\r\n    /**\r\n     * Modify behavior when encountering locked rows. NOWAIT or SKIP LOCKED\r\n     */\r\n    onLocked?: \"nowait\" | \"skip_locked\"\r\n\r\n    /**\r\n     * Indicates if soft-deleted rows should be included in entity result.\r\n     * By default the soft-deleted rows are not included.\r\n     */\r\n    withDeleted: boolean = false\r\n\r\n    /**\r\n     * Parameters used to be escaped in final query.\r\n     */\r\n    parameters: ObjectLiteral = {}\r\n\r\n    /**\r\n     * Indicates if alias, table names and column names will be escaped by driver, or not.\r\n     *\r\n     * todo: rename to isQuotingDisabled, also think if it should be named \"escaping\"\r\n     */\r\n    disableEscaping: boolean = true\r\n\r\n    /**\r\n     * Indicates if virtual columns should be included in entity result.\r\n     *\r\n     * todo: what to do with it? is it properly used? what about persistence?\r\n     */\r\n    enableRelationIdValues: boolean = false\r\n\r\n    /**\r\n     * Extra where condition appended to the end of original where conditions with AND keyword.\r\n     * Original condition will be wrapped into brackets.\r\n     */\r\n    extraAppendedAndWhereCondition: string = \"\"\r\n\r\n    /**\r\n     * Indicates if query builder creates a subquery.\r\n     */\r\n    subQuery: boolean = false\r\n\r\n    /**\r\n     * Indicates if property names are prefixed with alias names during property replacement.\r\n     * By default this is enabled, however we need this because aliases are not supported in UPDATE and DELETE queries,\r\n     * but user can use them in WHERE expressions.\r\n     */\r\n    aliasNamePrefixingEnabled: boolean = true\r\n\r\n    /**\r\n     * Indicates if query result cache is enabled or not.\r\n     * It is undefined by default to avoid overriding the `alwaysEnabled` config\r\n     */\r\n    cache?: boolean\r\n\r\n    /**\r\n     * Time in milliseconds in which cache will expire.\r\n     * If not set then global caching time will be used.\r\n     */\r\n    cacheDuration: number\r\n\r\n    /**\r\n     * Cache id.\r\n     * Used to identifier your cache queries.\r\n     */\r\n    cacheId: string\r\n\r\n    /**\r\n     * Options that define QueryBuilder behaviour.\r\n     */\r\n    options: SelectQueryBuilderOption[] = []\r\n\r\n    /**\r\n     * Property path of relation to work with.\r\n     * Used in relational query builder.\r\n     */\r\n    relationPropertyPath: string\r\n\r\n    /**\r\n     * Entity (target) which relations will be updated.\r\n     */\r\n    of: any | any[]\r\n\r\n    /**\r\n     * List of columns where data should be inserted.\r\n     * Used in INSERT query.\r\n     */\r\n    insertColumns: string[] = []\r\n\r\n    /**\r\n     * Used if user wants to update or delete a specific entities.\r\n     */\r\n    whereEntities: ObjectLiteral[] = []\r\n\r\n    /**\r\n     * Indicates if entity must be updated after insertion / updation.\r\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\r\n     */\r\n    updateEntity: boolean = true\r\n\r\n    /**\r\n     * Indicates if listeners and subscribers must be called before and after query execution.\r\n     */\r\n    callListeners: boolean = true\r\n\r\n    /**\r\n     * Indicates if query must be wrapped into transaction.\r\n     */\r\n    useTransaction: boolean = false\r\n\r\n    /**\r\n     * Indicates if query should be time travel query\r\n     * https://www.cockroachlabs.com/docs/stable/as-of-system-time.html\r\n     */\r\n    timeTravel?: boolean | string\r\n\r\n    /**\r\n     * Extra parameters.\r\n     *\r\n     * @deprecated Use standard parameters instead\r\n     */\r\n    nativeParameters: ObjectLiteral = {}\r\n\r\n    /**\r\n     * Query Comment to include extra information for debugging or other purposes.\r\n     */\r\n    comment?: string\r\n\r\n    /**\r\n     * Items from an entity that have been locally generated & are recorded here for later use.\r\n     * Examples include the UUID generation when the database does not natively support it.\r\n     * These are included in the entity index order.\r\n     */\r\n    locallyGenerated: { [key: number]: ObjectLiteral } = {}\r\n\r\n    commonTableExpressions: {\r\n        queryBuilder: QueryBuilder<any> | string\r\n        alias: string\r\n        options: QueryBuilderCteOptions\r\n    }[] = []\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: DataSource) {\r\n        if (connection.options.relationLoadStrategy) {\r\n            this.relationLoadStrategy = connection.options.relationLoadStrategy\r\n        }\r\n\r\n        this.timeTravel =\r\n            (connection.options as CockroachConnectionOptions)\r\n                ?.timeTravelQueries || false\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Get all ORDER BY queries - if order by is specified by user then it uses them,\r\n     * otherwise it uses default entity order by if it was set.\r\n     */\r\n    get allOrderBys() {\r\n        if (\r\n            !Object.keys(this.orderBys).length &&\r\n            this.mainAlias!.hasMetadata &&\r\n            this.options.indexOf(\"disable-global-order\") === -1\r\n        ) {\r\n            const entityOrderBy = this.mainAlias!.metadata.orderBy || {}\r\n            return Object.keys(entityOrderBy).reduce((orderBy, key) => {\r\n                orderBy[this.mainAlias!.name + \".\" + key] = entityOrderBy[key]\r\n                return orderBy\r\n            }, {} as OrderByCondition)\r\n        }\r\n\r\n        return this.orderBys\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a main alias and adds it to the current expression map.\r\n     */\r\n    setMainAlias(alias: Alias): Alias {\r\n        // if main alias is already set then remove it from the array\r\n        // if (this.mainAlias)\r\n        //     this.aliases.splice(this.aliases.indexOf(this.mainAlias));\r\n\r\n        // set new main alias\r\n        this.mainAlias = alias\r\n\r\n        return alias\r\n    }\r\n\r\n    /**\r\n     * Creates a new alias and adds it to the current expression map.\r\n     */\r\n    createAlias(options: {\r\n        type: \"from\" | \"select\" | \"join\" | \"other\"\r\n        name?: string\r\n        target?: Function | string\r\n        tablePath?: string\r\n        subQuery?: string\r\n        metadata?: EntityMetadata\r\n    }): Alias {\r\n        let aliasName = options.name\r\n        if (!aliasName && options.tablePath) aliasName = options.tablePath\r\n        if (!aliasName && typeof options.target === \"function\")\r\n            aliasName = options.target.name\r\n        if (!aliasName && typeof options.target === \"string\")\r\n            aliasName = options.target\r\n\r\n        const alias = new Alias()\r\n        alias.type = options.type\r\n        if (aliasName) alias.name = aliasName\r\n        if (options.metadata) alias.metadata = options.metadata\r\n        if (options.target && !alias.hasMetadata)\r\n            alias.metadata = this.connection.getMetadata(options.target)\r\n        if (options.tablePath) alias.tablePath = options.tablePath\r\n        if (options.subQuery) alias.subQuery = options.subQuery\r\n\r\n        this.aliases.push(alias)\r\n        return alias\r\n    }\r\n\r\n    /**\r\n     * Finds alias with the given name.\r\n     * If alias was not found it throw an exception.\r\n     */\r\n    findAliasByName(aliasName: string): Alias {\r\n        const alias = this.aliases.find((alias) => alias.name === aliasName)\r\n        if (!alias)\r\n            throw new TypeORMError(\r\n                `\"${aliasName}\" alias was not found. Maybe you forgot to join it?`,\r\n            )\r\n\r\n        return alias\r\n    }\r\n\r\n    findColumnByAliasExpression(\r\n        aliasExpression: string,\r\n    ): ColumnMetadata | undefined {\r\n        const [aliasName, propertyPath] = aliasExpression.split(\".\")\r\n        const alias = this.findAliasByName(aliasName)\r\n        return alias.metadata.findColumnWithPropertyName(propertyPath)\r\n    }\r\n\r\n    /**\r\n     * Gets relation metadata of the relation this query builder works with.\r\n     *\r\n     * todo: add proper exceptions\r\n     */\r\n    get relationMetadata(): RelationMetadata {\r\n        if (!this.mainAlias)\r\n            throw new TypeORMError(`Entity to work with is not specified!`) // todo: better message\r\n\r\n        const relationMetadata =\r\n            this.mainAlias.metadata.findRelationWithPropertyPath(\r\n                this.relationPropertyPath,\r\n            )\r\n        if (!relationMetadata)\r\n            throw new TypeORMError(\r\n                `Relation ${this.relationPropertyPath} was not found in entity ${this.mainAlias.name}`,\r\n            ) // todo: better message\r\n\r\n        return relationMetadata\r\n    }\r\n\r\n    /**\r\n     * Copies all properties of the current QueryExpressionMap into a new one.\r\n     * Useful when QueryBuilder needs to create a copy of itself.\r\n     */\r\n    clone(): QueryExpressionMap {\r\n        const map = new QueryExpressionMap(this.connection)\r\n        map.queryType = this.queryType\r\n        map.selects = this.selects.map((select) => select)\r\n        map.maxExecutionTime = this.maxExecutionTime\r\n        map.selectDistinct = this.selectDistinct\r\n        map.selectDistinctOn = this.selectDistinctOn\r\n        this.aliases.forEach((alias) => map.aliases.push(new Alias(alias)))\r\n        map.relationLoadStrategy = this.relationLoadStrategy\r\n        map.mainAlias = this.mainAlias\r\n        map.valuesSet = this.valuesSet\r\n        map.returning = this.returning\r\n        map.onConflict = this.onConflict\r\n        map.onIgnore = this.onIgnore\r\n        map.onUpdate = this.onUpdate\r\n        map.joinAttributes = this.joinAttributes.map(\r\n            (join) => new JoinAttribute(this.connection, this, join),\r\n        )\r\n        map.relationIdAttributes = this.relationIdAttributes.map(\r\n            (relationId) => new RelationIdAttribute(this, relationId),\r\n        )\r\n        map.relationCountAttributes = this.relationCountAttributes.map(\r\n            (relationCount) => new RelationCountAttribute(this, relationCount),\r\n        )\r\n        map.wheres = this.wheres.map((where) => ({ ...where }))\r\n        map.havings = this.havings.map((having) => ({ ...having }))\r\n        map.orderBys = Object.assign({}, this.orderBys)\r\n        map.groupBys = this.groupBys.map((groupBy) => groupBy)\r\n        map.limit = this.limit\r\n        map.offset = this.offset\r\n        map.skip = this.skip\r\n        map.take = this.take\r\n        map.lockMode = this.lockMode\r\n        map.onLocked = this.onLocked\r\n        map.lockVersion = this.lockVersion\r\n        map.lockTables = this.lockTables\r\n        map.withDeleted = this.withDeleted\r\n        map.parameters = Object.assign({}, this.parameters)\r\n        map.disableEscaping = this.disableEscaping\r\n        map.enableRelationIdValues = this.enableRelationIdValues\r\n        map.extraAppendedAndWhereCondition = this.extraAppendedAndWhereCondition\r\n        map.subQuery = this.subQuery\r\n        map.aliasNamePrefixingEnabled = this.aliasNamePrefixingEnabled\r\n        map.cache = this.cache\r\n        map.cacheId = this.cacheId\r\n        map.cacheDuration = this.cacheDuration\r\n        map.relationPropertyPath = this.relationPropertyPath\r\n        map.of = this.of\r\n        map.insertColumns = this.insertColumns\r\n        map.whereEntities = this.whereEntities\r\n        map.updateEntity = this.updateEntity\r\n        map.callListeners = this.callListeners\r\n        map.useTransaction = this.useTransaction\r\n        map.timeTravel = this.timeTravel\r\n        map.nativeParameters = Object.assign({}, this.nativeParameters)\r\n        map.comment = this.comment\r\n        map.commonTableExpressions = this.commonTableExpressions.map(\r\n            (cteOptions) => ({\r\n                alias: cteOptions.alias,\r\n                queryBuilder:\r\n                    typeof cteOptions.queryBuilder === \"string\"\r\n                        ? cteOptions.queryBuilder\r\n                        : cteOptions.queryBuilder.clone(),\r\n                options: cteOptions.options,\r\n            }),\r\n        )\r\n        return map\r\n    }\r\n}\r\n"],"sourceRoot":".."}
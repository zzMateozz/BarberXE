{"version":3,"sources":["../../src/persistence/Subject.ts"],"names":[],"mappings":"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","file":"Subject.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\r\nimport { SubjectChangeMap } from \"./SubjectChangeMap\"\r\nimport { OrmUtils } from \"../util/OrmUtils\"\r\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\r\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\n\r\n/**\r\n * Subject is a subject of persistence.\r\n * It holds information about each entity that needs to be persisted:\r\n * - what entity should be persisted\r\n * - what is database representation of the persisted entity\r\n * - what entity metadata of the persisted entity\r\n * - what is allowed to with persisted entity (insert/update/remove)\r\n *\r\n * Having this collection of subjects we can perform database queries.\r\n */\r\nexport class Subject {\r\n    readonly \"@instanceof\" = Symbol.for(\"Subject\")\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the subject entity.\r\n     */\r\n    metadata: EntityMetadata\r\n\r\n    /**\r\n     * Subject identifier.\r\n     * This identifier is not limited to table entity primary columns.\r\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\r\n     * Insert / Update / Remove operation will be executed by a given identifier.\r\n     */\r\n    identifier: ObjectLiteral | undefined = undefined\r\n\r\n    /**\r\n     * Copy of entity but with relational ids fulfilled.\r\n     */\r\n    entityWithFulfilledIds: ObjectLiteral | undefined = undefined\r\n\r\n    /**\r\n     * If subject was created by cascades this property will contain subject\r\n     * from where this subject was created.\r\n     */\r\n    parentSubject?: Subject\r\n\r\n    /**\r\n     * Gets entity sent to the persistence (e.g. changed entity).\r\n     * If entity is not set then this subject is created only for the entity loaded from the database,\r\n     * or this subject is used for the junction operation (junction operations are relying only on identifier).\r\n     */\r\n    entity?: ObjectLiteral\r\n\r\n    /**\r\n     * Database entity.\r\n     * THIS IS NOT RAW ENTITY DATA, its a real entity.\r\n     */\r\n    databaseEntity?: ObjectLiteral\r\n\r\n    /**\r\n     * Indicates if database entity was loaded.\r\n     * No matter if it was found or not, it indicates the fact of loading.\r\n     */\r\n    databaseEntityLoaded: boolean = false\r\n\r\n    /**\r\n     * Changes needs to be applied in the database for the given subject.\r\n     */\r\n    changeMaps: SubjectChangeMap[] = []\r\n\r\n    /**\r\n     * Generated values returned by a database (for example generated id or default values).\r\n     * Used in insert and update operations.\r\n     * Has entity-like structure (not just column database name and values).\r\n     */\r\n    generatedMap?: ObjectLiteral\r\n\r\n    /**\r\n     * Inserted values with updated values of special and default columns.\r\n     * Has entity-like structure (not just column database name and values).\r\n     */\r\n    insertedValueSet?: ObjectLiteral\r\n\r\n    /**\r\n     * Indicates if this subject can be inserted into the database.\r\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\r\n     */\r\n    canBeInserted: boolean = false\r\n\r\n    /**\r\n     * Indicates if this subject can be updated in the database.\r\n     * This means that this subject either was persisted, either can be updated by cascades.\r\n     */\r\n    canBeUpdated: boolean = false\r\n\r\n    /**\r\n     * Indicates if this subject MUST be removed from the database.\r\n     * This means that this subject either was removed, either was removed by cascades.\r\n     */\r\n    mustBeRemoved: boolean = false\r\n\r\n    /**\r\n     * Indicates if this subject can be soft-removed from the database.\r\n     * This means that this subject either was soft-removed, either was soft-removed by cascades.\r\n     */\r\n    canBeSoftRemoved: boolean = false\r\n\r\n    /**\r\n     * Indicates if this subject can be recovered from the database.\r\n     * This means that this subject either was recovered, either was recovered by cascades.\r\n     */\r\n    canBeRecovered: boolean = false\r\n\r\n    /**\r\n     * Relations updated by the change maps.\r\n     */\r\n    updatedRelationMaps: {\r\n        relation: RelationMetadata\r\n        value: ObjectLiteral\r\n    }[] = []\r\n\r\n    /**\r\n     * List of updated columns\r\n     */\r\n    diffColumns: ColumnMetadata[] = []\r\n\r\n    /**\r\n     * List of updated relations\r\n     */\r\n    diffRelations: RelationMetadata[] = []\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        metadata: EntityMetadata\r\n        parentSubject?: Subject\r\n        entity?: ObjectLiteral\r\n        canBeInserted?: boolean\r\n        canBeUpdated?: boolean\r\n        mustBeRemoved?: boolean\r\n        canBeSoftRemoved?: boolean\r\n        canBeRecovered?: boolean\r\n        identifier?: ObjectLiteral\r\n        changeMaps?: SubjectChangeMap[]\r\n    }) {\r\n        this.metadata = options.metadata\r\n        this.entity = options.entity\r\n        this.parentSubject = options.parentSubject\r\n        if (options.canBeInserted !== undefined)\r\n            this.canBeInserted = options.canBeInserted\r\n        if (options.canBeUpdated !== undefined)\r\n            this.canBeUpdated = options.canBeUpdated\r\n        if (options.mustBeRemoved !== undefined)\r\n            this.mustBeRemoved = options.mustBeRemoved\r\n        if (options.canBeSoftRemoved !== undefined)\r\n            this.canBeSoftRemoved = options.canBeSoftRemoved\r\n        if (options.canBeRecovered !== undefined)\r\n            this.canBeRecovered = options.canBeRecovered\r\n        if (options.identifier !== undefined)\r\n            this.identifier = options.identifier\r\n        if (options.changeMaps !== undefined)\r\n            this.changeMaps.push(...options.changeMaps)\r\n\r\n        this.recompute()\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if this subject must be inserted into the database.\r\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\r\n     * and if it does not have database entity set.\r\n     */\r\n    get mustBeInserted() {\r\n        return this.canBeInserted && !this.databaseEntity\r\n    }\r\n\r\n    /**\r\n     * Checks if this subject must be updated into the database.\r\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\r\n     * and if it does have differentiated columns or relations.\r\n     */\r\n    get mustBeUpdated() {\r\n        return (\r\n            this.canBeUpdated &&\r\n            this.identifier &&\r\n            (this.databaseEntityLoaded === false ||\r\n                (this.databaseEntityLoaded && this.databaseEntity)) &&\r\n            // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\r\n            // ensure there are one or more changes for updatable columns\r\n            this.changeMaps.some(\r\n                (change) => !change.column || change.column.isUpdate,\r\n            )\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if this subject must be soft-removed into the database.\r\n     * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\r\n     * and if it does have differentiated columns or relations.\r\n     */\r\n    get mustBeSoftRemoved() {\r\n        return (\r\n            this.canBeSoftRemoved &&\r\n            this.identifier &&\r\n            (this.databaseEntityLoaded === false ||\r\n                (this.databaseEntityLoaded && this.databaseEntity))\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if this subject must be recovered into the database.\r\n     * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\r\n     * and if it does have differentiated columns or relations.\r\n     */\r\n    get mustBeRecovered() {\r\n        return (\r\n            this.canBeRecovered &&\r\n            this.identifier &&\r\n            (this.databaseEntityLoaded === false ||\r\n                (this.databaseEntityLoaded && this.databaseEntity))\r\n        )\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a value set needs to be inserted / updated in the database.\r\n     * Value set is based on the entity and change maps of the subject.\r\n     * Important note: this method pops data from this subject's change maps.\r\n     */\r\n    createValueSetAndPopChangeMap(): ObjectLiteral {\r\n        const changeMapsWithoutValues: SubjectChangeMap[] = []\r\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\r\n            let value = changeMap.value\r\n            if (InstanceChecker.isSubject(value)) {\r\n                // referenced columns can refer on values both which were just inserted and which were present in the model\r\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\r\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\r\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\r\n                value = value.insertedValueSet\r\n                    ? value.insertedValueSet\r\n                    : value.entity\r\n            }\r\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\r\n\r\n            let valueMap: ObjectLiteral | undefined\r\n            if (this.metadata.isJunction && changeMap.column) {\r\n                valueMap = changeMap.column.createValueMap(\r\n                    changeMap.column.referencedColumn!.getEntityValue(value),\r\n                )\r\n            } else if (changeMap.column) {\r\n                valueMap = changeMap.column.createValueMap(value)\r\n            } else if (changeMap.relation) {\r\n                // value can be a related object, for example: post.question = { id: 1 }\r\n                // or value can be a null or direct relation id, e.g. post.question = 1\r\n                // if its a direction relation id then we just set it to the valueMap,\r\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\r\n                if (ObjectUtils.isObject(value) && !Buffer.isBuffer(value)) {\r\n                    // get relation id, e.g. referenced column name and its value,\r\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\r\n                    const relationId =\r\n                        changeMap.relation!.getRelationIdMap(value)\r\n\r\n                    // but relation id can be empty, for example in the case when you insert a new post with category\r\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\r\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\r\n                    // that's why we create a new changeMap operation for future updation of the post entity\r\n                    if (relationId === undefined) {\r\n                        changeMapsWithoutValues.push(changeMap)\r\n                        this.canBeUpdated = true\r\n                        return updateMap\r\n                    }\r\n                    valueMap = changeMap.relation!.createValueMap(relationId)\r\n                    this.updatedRelationMaps.push({\r\n                        relation: changeMap.relation,\r\n                        value: relationId,\r\n                    })\r\n                } else {\r\n                    // value can be \"null\" or direct relation id here\r\n                    valueMap = changeMap.relation!.createValueMap(value)\r\n                    this.updatedRelationMaps.push({\r\n                        relation: changeMap.relation,\r\n                        value: value,\r\n                    })\r\n                }\r\n            }\r\n\r\n            OrmUtils.mergeDeep(updateMap, valueMap)\r\n            return updateMap\r\n        }, {} as ObjectLiteral)\r\n        this.changeMaps = changeMapsWithoutValues\r\n        return changeSet\r\n    }\r\n\r\n    /**\r\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\r\n     */\r\n    recompute(): void {\r\n        if (this.entity) {\r\n            this.entityWithFulfilledIds = Object.assign({}, this.entity)\r\n            if (this.parentSubject) {\r\n                this.metadata.primaryColumns.forEach((primaryColumn) => {\r\n                    if (\r\n                        primaryColumn.relationMetadata &&\r\n                        primaryColumn.relationMetadata.inverseEntityMetadata ===\r\n                            this.parentSubject!.metadata\r\n                    ) {\r\n                        const value =\r\n                            primaryColumn.referencedColumn!.getEntityValue(\r\n                                this.parentSubject!.entity!,\r\n                            )\r\n                        primaryColumn.setEntityValue(\r\n                            this.entityWithFulfilledIds!,\r\n                            value,\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n            this.identifier = this.metadata.getEntityIdMap(\r\n                this.entityWithFulfilledIds,\r\n            )\r\n        } else if (this.databaseEntity) {\r\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity)\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
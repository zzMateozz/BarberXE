{"version":3,"sources":["../../src/persistence/SubjectExecutor.ts"],"names":[],"mappings":"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","file":"SubjectExecutor.js","sourcesContent":["import { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { Subject } from \"./Subject\"\r\nimport { SubjectTopologicalSorter } from \"./SubjectTopologicalSorter\"\r\nimport { SubjectChangedColumnsComputer } from \"./SubjectChangedColumnsComputer\"\r\nimport { SubjectWithoutIdentifierError } from \"../error/SubjectWithoutIdentifierError\"\r\nimport { SubjectRemovedAndUpdatedError } from \"../error/SubjectRemovedAndUpdatedError\"\r\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { SaveOptions } from \"../repository/SaveOptions\"\r\nimport { RemoveOptions } from \"../repository/RemoveOptions\"\r\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\"\r\nimport { NestedSetSubjectExecutor } from \"./tree/NestedSetSubjectExecutor\"\r\nimport { ClosureSubjectExecutor } from \"./tree/ClosureSubjectExecutor\"\r\nimport { MaterializedPathSubjectExecutor } from \"./tree/MaterializedPathSubjectExecutor\"\r\nimport { OrmUtils } from \"../util/OrmUtils\"\r\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\n\r\n/**\r\n * Executes all database operations (inserts, updated, deletes) that must be executed\r\n * with given persistence subjects.\r\n */\r\nexport class SubjectExecutor {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if executor has any operations to execute (e.g. has insert / update / delete operations to be executed).\r\n     */\r\n    hasExecutableOperations: boolean = false\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * QueryRunner used to execute all queries with a given subjects.\r\n     */\r\n    protected queryRunner: QueryRunner\r\n\r\n    /**\r\n     * Persistence options.\r\n     */\r\n    protected options?: SaveOptions & RemoveOptions\r\n\r\n    /**\r\n     * All subjects that needs to be operated.\r\n     */\r\n    protected allSubjects: Subject[]\r\n\r\n    /**\r\n     * Subjects that must be inserted.\r\n     */\r\n    protected insertSubjects: Subject[] = []\r\n\r\n    /**\r\n     * Subjects that must be updated.\r\n     */\r\n    protected updateSubjects: Subject[] = []\r\n\r\n    /**\r\n     * Subjects that must be removed.\r\n     */\r\n    protected removeSubjects: Subject[] = []\r\n\r\n    /**\r\n     * Subjects that must be soft-removed.\r\n     */\r\n    protected softRemoveSubjects: Subject[] = []\r\n\r\n    /**\r\n     * Subjects that must be recovered.\r\n     */\r\n    protected recoverSubjects: Subject[] = []\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        queryRunner: QueryRunner,\r\n        subjects: Subject[],\r\n        options?: SaveOptions & RemoveOptions,\r\n    ) {\r\n        this.queryRunner = queryRunner\r\n        this.allSubjects = subjects\r\n        this.options = options\r\n        this.validate()\r\n        this.recompute()\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes all operations over given array of subjects.\r\n     * Executes queries using given query runner.\r\n     */\r\n    async execute(): Promise<void> {\r\n        // console.time(\"SubjectExecutor.execute\");\r\n\r\n        // broadcast \"before\" events before we start insert / update / remove operations\r\n        let broadcasterResult: BroadcasterResult | undefined = undefined\r\n        if (!this.options || this.options.listeners !== false) {\r\n            // console.time(\".broadcastBeforeEventsForAll\");\r\n            broadcasterResult = this.broadcastBeforeEventsForAll()\r\n            if (broadcasterResult.promises.length > 0)\r\n                await Promise.all(broadcasterResult.promises)\r\n            // console.timeEnd(\".broadcastBeforeEventsForAll\");\r\n        }\r\n\r\n        // since event listeners and subscribers can call save methods and/or trigger entity changes we need to recompute operational subjects\r\n        // recompute only in the case if any listener or subscriber was really executed\r\n        if (broadcasterResult && broadcasterResult.count > 0) {\r\n            // console.time(\".recompute\");\r\n            this.insertSubjects.forEach((subject) => subject.recompute())\r\n            this.updateSubjects.forEach((subject) => subject.recompute())\r\n            this.removeSubjects.forEach((subject) => subject.recompute())\r\n            this.softRemoveSubjects.forEach((subject) => subject.recompute())\r\n            this.recoverSubjects.forEach((subject) => subject.recompute())\r\n            this.recompute()\r\n            // console.timeEnd(\".recompute\");\r\n        }\r\n\r\n        // make sure our insert subjects are sorted (using topological sorting) to make cascade inserts work properly\r\n\r\n        // console.timeEnd(\"prepare\");\r\n\r\n        // execute all insert operations\r\n        // console.time(\".insertion\");\r\n        this.insertSubjects = new SubjectTopologicalSorter(\r\n            this.insertSubjects,\r\n        ).sort(\"insert\")\r\n        await this.executeInsertOperations()\r\n        // console.timeEnd(\".insertion\");\r\n\r\n        // recompute update operations since insertion can create updation operations for the\r\n        // properties it wasn't able to handle on its own (referenced columns)\r\n        this.updateSubjects = this.allSubjects.filter(\r\n            (subject) => subject.mustBeUpdated,\r\n        )\r\n\r\n        // execute update operations\r\n        // console.time(\".updation\");\r\n        await this.executeUpdateOperations()\r\n        // console.timeEnd(\".updation\");\r\n\r\n        // make sure our remove subjects are sorted (using topological sorting) when multiple entities are passed for the removal\r\n        // console.time(\".removal\");\r\n        this.removeSubjects = new SubjectTopologicalSorter(\r\n            this.removeSubjects,\r\n        ).sort(\"delete\")\r\n        await this.executeRemoveOperations()\r\n        // console.timeEnd(\".removal\");\r\n\r\n        // recompute soft-remove operations\r\n        this.softRemoveSubjects = this.allSubjects.filter(\r\n            (subject) => subject.mustBeSoftRemoved,\r\n        )\r\n\r\n        // execute soft-remove operations\r\n        await this.executeSoftRemoveOperations()\r\n\r\n        // recompute recover operations\r\n        this.recoverSubjects = this.allSubjects.filter(\r\n            (subject) => subject.mustBeRecovered,\r\n        )\r\n\r\n        // execute recover operations\r\n        await this.executeRecoverOperations()\r\n\r\n        // update all special columns in persisted entities, like inserted id or remove ids from the removed entities\r\n        // console.time(\".updateSpecialColumnsInPersistedEntities\");\r\n        this.updateSpecialColumnsInPersistedEntities()\r\n        // console.timeEnd(\".updateSpecialColumnsInPersistedEntities\");\r\n\r\n        // finally broadcast \"after\" events after we finish insert / update / remove operations\r\n        if (!this.options || this.options.listeners !== false) {\r\n            // console.time(\".broadcastAfterEventsForAll\");\r\n            broadcasterResult = this.broadcastAfterEventsForAll()\r\n            if (broadcasterResult.promises.length > 0)\r\n                await Promise.all(broadcasterResult.promises)\r\n            // console.timeEnd(\".broadcastAfterEventsForAll\");\r\n        }\r\n        // console.timeEnd(\"SubjectExecutor.execute\");\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validates all given subjects.\r\n     */\r\n    protected validate() {\r\n        this.allSubjects.forEach((subject) => {\r\n            if (subject.mustBeUpdated && subject.mustBeRemoved)\r\n                throw new SubjectRemovedAndUpdatedError(subject)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Performs entity re-computations - finds changed columns, re-builds insert/update/remove subjects.\r\n     */\r\n    protected recompute(): void {\r\n        new SubjectChangedColumnsComputer().compute(this.allSubjects)\r\n        this.insertSubjects = this.allSubjects.filter(\r\n            (subject) => subject.mustBeInserted,\r\n        )\r\n        this.updateSubjects = this.allSubjects.filter(\r\n            (subject) => subject.mustBeUpdated,\r\n        )\r\n        this.removeSubjects = this.allSubjects.filter(\r\n            (subject) => subject.mustBeRemoved,\r\n        )\r\n        this.softRemoveSubjects = this.allSubjects.filter(\r\n            (subject) => subject.mustBeSoftRemoved,\r\n        )\r\n        this.recoverSubjects = this.allSubjects.filter(\r\n            (subject) => subject.mustBeRecovered,\r\n        )\r\n        this.hasExecutableOperations =\r\n            this.insertSubjects.length > 0 ||\r\n            this.updateSubjects.length > 0 ||\r\n            this.removeSubjects.length > 0 ||\r\n            this.softRemoveSubjects.length > 0 ||\r\n            this.recoverSubjects.length > 0\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"BEFORE_INSERT\", \"BEFORE_UPDATE\", \"BEFORE_REMOVE\", \"BEFORE_SOFT_REMOVE\", \"BEFORE_RECOVER\" events for all given subjects.\r\n     */\r\n    protected broadcastBeforeEventsForAll(): BroadcasterResult {\r\n        const result = new BroadcasterResult()\r\n        if (this.insertSubjects.length)\r\n            this.insertSubjects.forEach((subject) =>\r\n                this.queryRunner.broadcaster.broadcastBeforeInsertEvent(\r\n                    result,\r\n                    subject.metadata,\r\n                    subject.entity!,\r\n                ),\r\n            )\r\n        if (this.updateSubjects.length)\r\n            this.updateSubjects.forEach((subject) =>\r\n                this.queryRunner.broadcaster.broadcastBeforeUpdateEvent(\r\n                    result,\r\n                    subject.metadata,\r\n                    subject.entity!,\r\n                    subject.databaseEntity,\r\n                    subject.diffColumns,\r\n                    subject.diffRelations,\r\n                ),\r\n            )\r\n        if (this.removeSubjects.length)\r\n            this.removeSubjects.forEach((subject) =>\r\n                this.queryRunner.broadcaster.broadcastBeforeRemoveEvent(\r\n                    result,\r\n                    subject.metadata,\r\n                    subject.entity!,\r\n                    subject.databaseEntity,\r\n                    subject.identifier,\r\n                ),\r\n            )\r\n        if (this.softRemoveSubjects.length)\r\n            this.softRemoveSubjects.forEach((subject) =>\r\n                this.queryRunner.broadcaster.broadcastBeforeSoftRemoveEvent(\r\n                    result,\r\n                    subject.metadata,\r\n                    subject.entity!,\r\n                    subject.databaseEntity,\r\n                    subject.identifier,\r\n                ),\r\n            )\r\n        if (this.recoverSubjects.length)\r\n            this.recoverSubjects.forEach((subject) =>\r\n                this.queryRunner.broadcaster.broadcastBeforeRecoverEvent(\r\n                    result,\r\n                    subject.metadata,\r\n                    subject.entity!,\r\n                    subject.databaseEntity,\r\n                    subject.identifier,\r\n                ),\r\n            )\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * Broadcasts \"AFTER_INSERT\", \"AFTER_UPDATE\", \"AFTER_REMOVE\", \"AFTER_SOFT_REMOVE\", \"AFTER_RECOVER\" events for all given subjects.\r\n     * Returns void if there wasn't any listener or subscriber executed.\r\n     * Note: this method has a performance-optimized code organization.\r\n     */\r\n    protected broadcastAfterEventsForAll(): BroadcasterResult {\r\n        const result = new BroadcasterResult()\r\n        if (this.insertSubjects.length)\r\n            this.insertSubjects.forEach((subject) =>\r\n                this.queryRunner.broadcaster.broadcastAfterInsertEvent(\r\n                    result,\r\n                    subject.metadata,\r\n                    subject.entity!,\r\n                    subject.identifier,\r\n                ),\r\n            )\r\n        if (this.updateSubjects.length)\r\n            this.updateSubjects.forEach((subject) =>\r\n                this.queryRunner.broadcaster.broadcastAfterUpdateEvent(\r\n                    result,\r\n                    subject.metadata,\r\n                    subject.entity!,\r\n                    subject.databaseEntity,\r\n                    subject.diffColumns,\r\n                    subject.diffRelations,\r\n                ),\r\n            )\r\n        if (this.removeSubjects.length)\r\n            this.removeSubjects.forEach((subject) =>\r\n                this.queryRunner.broadcaster.broadcastAfterRemoveEvent(\r\n                    result,\r\n                    subject.metadata,\r\n                    subject.entity!,\r\n                    subject.databaseEntity,\r\n                    subject.identifier,\r\n                ),\r\n            )\r\n        if (this.softRemoveSubjects.length)\r\n            this.softRemoveSubjects.forEach((subject) =>\r\n                this.queryRunner.broadcaster.broadcastAfterSoftRemoveEvent(\r\n                    result,\r\n                    subject.metadata,\r\n                    subject.entity!,\r\n                    subject.databaseEntity,\r\n                    subject.identifier,\r\n                ),\r\n            )\r\n        if (this.recoverSubjects.length)\r\n            this.recoverSubjects.forEach((subject) =>\r\n                this.queryRunner.broadcaster.broadcastAfterRecoverEvent(\r\n                    result,\r\n                    subject.metadata,\r\n                    subject.entity!,\r\n                    subject.databaseEntity,\r\n                    subject.identifier,\r\n                ),\r\n            )\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * Executes insert operations.\r\n     */\r\n    protected async executeInsertOperations(): Promise<void> {\r\n        // group insertion subjects to make bulk insertions\r\n        const [groupedInsertSubjects, groupedInsertSubjectKeys] =\r\n            this.groupBulkSubjects(this.insertSubjects, \"insert\")\r\n\r\n        // then we run insertion in the sequential order which is important since we have an ordered subjects\r\n        for (const groupName of groupedInsertSubjectKeys) {\r\n            const subjects = groupedInsertSubjects[groupName]\r\n\r\n            // we must separately insert entities which does not have any values to insert\r\n            // because its not possible to insert multiple entities with only default values in bulk\r\n            const bulkInsertMaps: ObjectLiteral[] = []\r\n            const bulkInsertSubjects: Subject[] = []\r\n            const singleInsertSubjects: Subject[] = []\r\n            if (this.queryRunner.connection.driver.options.type === \"mongodb\") {\r\n                subjects.forEach((subject) => {\r\n                    if (subject.metadata.createDateColumn && subject.entity) {\r\n                        subject.entity[\r\n                            subject.metadata.createDateColumn.databaseName\r\n                        ] = new Date()\r\n                    }\r\n\r\n                    if (subject.metadata.updateDateColumn && subject.entity) {\r\n                        subject.entity[\r\n                            subject.metadata.updateDateColumn.databaseName\r\n                        ] = new Date()\r\n                    }\r\n\r\n                    subject.createValueSetAndPopChangeMap()\r\n\r\n                    bulkInsertSubjects.push(subject)\r\n                    bulkInsertMaps.push(subject.entity!)\r\n                })\r\n            } else if (\r\n                this.queryRunner.connection.driver.options.type === \"oracle\"\r\n            ) {\r\n                subjects.forEach((subject) => {\r\n                    singleInsertSubjects.push(subject)\r\n                })\r\n            } else {\r\n                subjects.forEach((subject) => {\r\n                    // we do not insert in bulk in following cases:\r\n                    // - when there is no values in insert (only defaults are inserted), since we cannot use DEFAULT VALUES expression for multiple inserted rows\r\n                    // - when entity is a tree table, since tree tables require extra operation per each inserted row\r\n                    // - when oracle is used, since oracle's bulk insertion is very bad\r\n                    if (\r\n                        subject.changeMaps.length === 0 ||\r\n                        subject.metadata.treeType ||\r\n                        this.queryRunner.connection.driver.options.type ===\r\n                            \"oracle\" ||\r\n                        this.queryRunner.connection.driver.options.type ===\r\n                            \"sap\"\r\n                    ) {\r\n                        singleInsertSubjects.push(subject)\r\n                    } else {\r\n                        bulkInsertSubjects.push(subject)\r\n                        bulkInsertMaps.push(\r\n                            subject.createValueSetAndPopChangeMap(),\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n\r\n            // for mongodb we have a bit different insertion logic\r\n            if (\r\n                InstanceChecker.isMongoEntityManager(this.queryRunner.manager)\r\n            ) {\r\n                const insertResult = await this.queryRunner.manager.insert(\r\n                    subjects[0].metadata.target,\r\n                    bulkInsertMaps,\r\n                )\r\n                subjects.forEach((subject, index) => {\r\n                    subject.identifier = insertResult.identifiers[index]\r\n                    subject.generatedMap = insertResult.generatedMaps[index]\r\n                    subject.insertedValueSet = bulkInsertMaps[index]\r\n                })\r\n            } else {\r\n                // here we execute our insertion query\r\n                // we need to enable entity updation because we DO need to have updated insertedMap\r\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\r\n                // also, we disable listeners because we call them on our own in persistence layer\r\n                if (bulkInsertMaps.length > 0) {\r\n                    const insertResult = await this.queryRunner.manager\r\n                        .createQueryBuilder()\r\n                        .insert()\r\n                        .into(subjects[0].metadata.target)\r\n                        .values(bulkInsertMaps)\r\n                        .updateEntity(\r\n                            this.options && this.options.reload === false\r\n                                ? false\r\n                                : true,\r\n                        )\r\n                        .callListeners(false)\r\n                        .execute()\r\n\r\n                    bulkInsertSubjects.forEach((subject, index) => {\r\n                        subject.identifier = insertResult.identifiers[index]\r\n                        subject.generatedMap = insertResult.generatedMaps[index]\r\n                        subject.insertedValueSet = bulkInsertMaps[index]\r\n                    })\r\n                }\r\n\r\n                // insert subjects which must be inserted in separate requests (all default values)\r\n                if (singleInsertSubjects.length > 0) {\r\n                    for (const subject of singleInsertSubjects) {\r\n                        subject.insertedValueSet =\r\n                            subject.createValueSetAndPopChangeMap() // important to have because query builder sets inserted values into it\r\n\r\n                        // for nested set we execute additional queries\r\n                        if (subject.metadata.treeType === \"nested-set\")\r\n                            await new NestedSetSubjectExecutor(\r\n                                this.queryRunner,\r\n                            ).insert(subject)\r\n\r\n                        await this.queryRunner.manager\r\n                            .createQueryBuilder()\r\n                            .insert()\r\n                            .into(subject.metadata.target)\r\n                            .values(subject.insertedValueSet)\r\n                            .updateEntity(\r\n                                this.options && this.options.reload === false\r\n                                    ? false\r\n                                    : true,\r\n                            )\r\n                            .callListeners(false)\r\n                            .execute()\r\n                            .then((insertResult) => {\r\n                                subject.identifier = insertResult.identifiers[0]\r\n                                subject.generatedMap =\r\n                                    insertResult.generatedMaps[0]\r\n                            })\r\n\r\n                        // for tree tables we execute additional queries\r\n                        if (subject.metadata.treeType === \"closure-table\") {\r\n                            await new ClosureSubjectExecutor(\r\n                                this.queryRunner,\r\n                            ).insert(subject)\r\n                        } else if (\r\n                            subject.metadata.treeType === \"materialized-path\"\r\n                        ) {\r\n                            await new MaterializedPathSubjectExecutor(\r\n                                this.queryRunner,\r\n                            ).insert(subject)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            subjects.forEach((subject) => {\r\n                if (subject.generatedMap) {\r\n                    subject.metadata.columns.forEach((column) => {\r\n                        const value = column.getEntityValue(\r\n                            subject.generatedMap!,\r\n                        )\r\n                        if (value !== undefined && value !== null) {\r\n                            const preparedValue =\r\n                                this.queryRunner.connection.driver.prepareHydratedValue(\r\n                                    value,\r\n                                    column,\r\n                                )\r\n                            column.setEntityValue(\r\n                                subject.generatedMap!,\r\n                                preparedValue,\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates all given subjects in the database.\r\n     */\r\n    protected async executeUpdateOperations(): Promise<void> {\r\n        const updateSubject = async (subject: Subject) => {\r\n            if (!subject.identifier)\r\n                throw new SubjectWithoutIdentifierError(subject)\r\n\r\n            // for mongodb we have a bit different updation logic\r\n            if (\r\n                InstanceChecker.isMongoEntityManager(this.queryRunner.manager)\r\n            ) {\r\n                const partialEntity = this.cloneMongoSubjectEntity(subject)\r\n                if (\r\n                    subject.metadata.objectIdColumn &&\r\n                    subject.metadata.objectIdColumn.propertyName\r\n                ) {\r\n                    delete partialEntity[\r\n                        subject.metadata.objectIdColumn.propertyName\r\n                    ]\r\n                }\r\n\r\n                if (\r\n                    subject.metadata.createDateColumn &&\r\n                    subject.metadata.createDateColumn.propertyName\r\n                ) {\r\n                    delete partialEntity[\r\n                        subject.metadata.createDateColumn.propertyName\r\n                    ]\r\n                }\r\n\r\n                if (\r\n                    subject.metadata.updateDateColumn &&\r\n                    subject.metadata.updateDateColumn.propertyName\r\n                ) {\r\n                    partialEntity[\r\n                        subject.metadata.updateDateColumn.propertyName\r\n                    ] = new Date()\r\n                }\r\n\r\n                const manager = this.queryRunner.manager as MongoEntityManager\r\n\r\n                await manager.update(\r\n                    subject.metadata.target,\r\n                    subject.identifier,\r\n                    partialEntity,\r\n                )\r\n            } else {\r\n                const updateMap: ObjectLiteral =\r\n                    subject.createValueSetAndPopChangeMap()\r\n\r\n                // for tree tables we execute additional queries\r\n                switch (subject.metadata.treeType) {\r\n                    case \"nested-set\":\r\n                        await new NestedSetSubjectExecutor(\r\n                            this.queryRunner,\r\n                        ).update(subject)\r\n                        break\r\n\r\n                    case \"closure-table\":\r\n                        await new ClosureSubjectExecutor(\r\n                            this.queryRunner,\r\n                        ).update(subject)\r\n                        break\r\n\r\n                    case \"materialized-path\":\r\n                        await new MaterializedPathSubjectExecutor(\r\n                            this.queryRunner,\r\n                        ).update(subject)\r\n                        break\r\n                }\r\n\r\n                // here we execute our updation query\r\n                // we need to enable entity updation because we update a subject identifier\r\n                // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\r\n                // also, we disable listeners because we call them on our own in persistence layer\r\n                const updateQueryBuilder = this.queryRunner.manager\r\n                    .createQueryBuilder()\r\n                    .update(subject.metadata.target)\r\n                    .set(updateMap)\r\n                    .updateEntity(\r\n                        this.options && this.options.reload === false\r\n                            ? false\r\n                            : true,\r\n                    )\r\n                    .callListeners(false)\r\n\r\n                if (subject.entity) {\r\n                    updateQueryBuilder.whereEntity(subject.identifier)\r\n                } else {\r\n                    // in this case identifier is just conditions object to update by\r\n                    updateQueryBuilder.where(subject.identifier)\r\n                }\r\n\r\n                const updateResult = await updateQueryBuilder.execute()\r\n                let updateGeneratedMap = updateResult.generatedMaps[0]\r\n                if (updateGeneratedMap) {\r\n                    subject.metadata.columns.forEach((column) => {\r\n                        const value = column.getEntityValue(updateGeneratedMap!)\r\n                        if (value !== undefined && value !== null) {\r\n                            const preparedValue =\r\n                                this.queryRunner.connection.driver.prepareHydratedValue(\r\n                                    value,\r\n                                    column,\r\n                                )\r\n                            column.setEntityValue(\r\n                                updateGeneratedMap!,\r\n                                preparedValue,\r\n                            )\r\n                        }\r\n                    })\r\n                    if (!subject.generatedMap) {\r\n                        subject.generatedMap = {}\r\n                    }\r\n                    Object.assign(subject.generatedMap, updateGeneratedMap)\r\n                }\r\n            }\r\n        }\r\n\r\n        // Nested sets need to be updated one by one\r\n        // Split array in two, one with nested set subjects and the other with the remaining subjects\r\n        const nestedSetSubjects: Subject[] = []\r\n        const remainingSubjects: Subject[] = []\r\n\r\n        for (const subject of this.updateSubjects) {\r\n            if (subject.metadata.treeType === \"nested-set\") {\r\n                nestedSetSubjects.push(subject)\r\n            } else {\r\n                remainingSubjects.push(subject)\r\n            }\r\n        }\r\n\r\n        // Run nested set updates one by one\r\n        const nestedSetPromise = new Promise<void>(async (ok, fail) => {\r\n            for (const subject of nestedSetSubjects) {\r\n                try {\r\n                    await updateSubject(subject)\r\n                } catch (error) {\r\n                    fail(error)\r\n                }\r\n            }\r\n            ok()\r\n        })\r\n\r\n        // Run all remaining subjects in parallel\r\n        await Promise.all([\r\n            ...remainingSubjects.map(updateSubject),\r\n            nestedSetPromise,\r\n        ])\r\n    }\r\n\r\n    /**\r\n     * Removes all given subjects from the database.\r\n     *\r\n     * todo: we need to apply topological sort here as well\r\n     */\r\n    protected async executeRemoveOperations(): Promise<void> {\r\n        // group insertion subjects to make bulk insertions\r\n        const [groupedRemoveSubjects, groupedRemoveSubjectKeys] =\r\n            this.groupBulkSubjects(this.removeSubjects, \"delete\")\r\n\r\n        for (const groupName of groupedRemoveSubjectKeys) {\r\n            const subjects = groupedRemoveSubjects[groupName]\r\n            const deleteMaps = subjects.map((subject) => {\r\n                if (!subject.identifier)\r\n                    throw new SubjectWithoutIdentifierError(subject)\r\n\r\n                return subject.identifier\r\n            })\r\n\r\n            // for mongodb we have a bit different updation logic\r\n            if (\r\n                InstanceChecker.isMongoEntityManager(this.queryRunner.manager)\r\n            ) {\r\n                const manager = this.queryRunner.manager as MongoEntityManager\r\n                await manager.delete(subjects[0].metadata.target, deleteMaps)\r\n            } else {\r\n                // for tree tables we execute additional queries\r\n                switch (subjects[0].metadata.treeType) {\r\n                    case \"nested-set\":\r\n                        await new NestedSetSubjectExecutor(\r\n                            this.queryRunner,\r\n                        ).remove(subjects)\r\n                        break\r\n\r\n                    case \"closure-table\":\r\n                        await new ClosureSubjectExecutor(\r\n                            this.queryRunner,\r\n                        ).remove(subjects)\r\n                        break\r\n                }\r\n\r\n                // here we execute our deletion query\r\n                // we don't need to specify entities and set update entity to true since the only thing query builder\r\n                // will do for use is a primary keys deletion which is handled by us later once persistence is finished\r\n                // also, we disable listeners because we call them on our own in persistence layer\r\n                await this.queryRunner.manager\r\n                    .createQueryBuilder()\r\n                    .delete()\r\n                    .from(subjects[0].metadata.target)\r\n                    .where(deleteMaps)\r\n                    .callListeners(false)\r\n                    .execute()\r\n            }\r\n        }\r\n    }\r\n\r\n    private cloneMongoSubjectEntity(subject: Subject): ObjectLiteral {\r\n        const target: ObjectLiteral = {}\r\n\r\n        if (subject.entity) {\r\n            for (const column of subject.metadata.columns) {\r\n                OrmUtils.mergeDeep(\r\n                    target,\r\n                    column.getEntityValueMap(subject.entity),\r\n                )\r\n            }\r\n        }\r\n\r\n        return target\r\n    }\r\n\r\n    /**\r\n     * Soft-removes all given subjects in the database.\r\n     */\r\n    protected async executeSoftRemoveOperations(): Promise<void> {\r\n        await Promise.all(\r\n            this.softRemoveSubjects.map(async (subject) => {\r\n                if (!subject.identifier)\r\n                    throw new SubjectWithoutIdentifierError(subject)\r\n\r\n                let updateResult: UpdateResult\r\n\r\n                // for mongodb we have a bit different updation logic\r\n                if (\r\n                    InstanceChecker.isMongoEntityManager(\r\n                        this.queryRunner.manager,\r\n                    )\r\n                ) {\r\n                    const partialEntity = this.cloneMongoSubjectEntity(subject)\r\n                    if (\r\n                        subject.metadata.objectIdColumn &&\r\n                        subject.metadata.objectIdColumn.propertyName\r\n                    ) {\r\n                        delete partialEntity[\r\n                            subject.metadata.objectIdColumn.propertyName\r\n                        ]\r\n                    }\r\n\r\n                    if (\r\n                        subject.metadata.createDateColumn &&\r\n                        subject.metadata.createDateColumn.propertyName\r\n                    ) {\r\n                        delete partialEntity[\r\n                            subject.metadata.createDateColumn.propertyName\r\n                        ]\r\n                    }\r\n\r\n                    if (\r\n                        subject.metadata.updateDateColumn &&\r\n                        subject.metadata.updateDateColumn.propertyName\r\n                    ) {\r\n                        partialEntity[\r\n                            subject.metadata.updateDateColumn.propertyName\r\n                        ] = new Date()\r\n                    }\r\n\r\n                    if (\r\n                        subject.metadata.deleteDateColumn &&\r\n                        subject.metadata.deleteDateColumn.propertyName\r\n                    ) {\r\n                        partialEntity[\r\n                            subject.metadata.deleteDateColumn.propertyName\r\n                        ] = new Date()\r\n                    }\r\n\r\n                    const manager = this.queryRunner\r\n                        .manager as MongoEntityManager\r\n\r\n                    updateResult = await manager.update(\r\n                        subject.metadata.target,\r\n                        subject.identifier,\r\n                        partialEntity,\r\n                    )\r\n                } else {\r\n                    // here we execute our soft-deletion query\r\n                    // we need to enable entity soft-deletion because we update a subject identifier\r\n                    // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\r\n                    // also, we disable listeners because we call them on our own in persistence layer\r\n                    const softDeleteQueryBuilder = this.queryRunner.manager\r\n                        .createQueryBuilder()\r\n                        .softDelete()\r\n                        .from(subject.metadata.target)\r\n                        .updateEntity(\r\n                            this.options && this.options.reload === false\r\n                                ? false\r\n                                : true,\r\n                        )\r\n                        .callListeners(false)\r\n\r\n                    if (subject.entity) {\r\n                        softDeleteQueryBuilder.whereEntity(subject.identifier)\r\n                    } else {\r\n                        // in this case identifier is just conditions object to update by\r\n                        softDeleteQueryBuilder.where(subject.identifier)\r\n                    }\r\n\r\n                    updateResult = await softDeleteQueryBuilder.execute()\r\n                }\r\n\r\n                subject.generatedMap = updateResult.generatedMaps[0]\r\n                if (subject.generatedMap) {\r\n                    subject.metadata.columns.forEach((column) => {\r\n                        const value = column.getEntityValue(\r\n                            subject.generatedMap!,\r\n                        )\r\n                        if (value !== undefined && value !== null) {\r\n                            const preparedValue =\r\n                                this.queryRunner.connection.driver.prepareHydratedValue(\r\n                                    value,\r\n                                    column,\r\n                                )\r\n                            column.setEntityValue(\r\n                                subject.generatedMap!,\r\n                                preparedValue,\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n\r\n                // experiments, remove probably, need to implement tree tables children removal\r\n                // if (subject.updatedRelationMaps.length > 0) {\r\n                //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {\r\n                //         if (!updatedRelation.relation.isTreeParent) return;\r\n                //         if (!updatedRelation.value !== null) return;\r\n                //\r\n                //         if (subject.metadata.treeType === \"closure-table\") {\r\n                //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);\r\n                //         }\r\n                //     }));\r\n                // }\r\n            }),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Recovers all given subjects in the database.\r\n     */\r\n    protected async executeRecoverOperations(): Promise<void> {\r\n        await Promise.all(\r\n            this.recoverSubjects.map(async (subject) => {\r\n                if (!subject.identifier)\r\n                    throw new SubjectWithoutIdentifierError(subject)\r\n\r\n                let updateResult: UpdateResult\r\n\r\n                // for mongodb we have a bit different updation logic\r\n                if (\r\n                    InstanceChecker.isMongoEntityManager(\r\n                        this.queryRunner.manager,\r\n                    )\r\n                ) {\r\n                    const partialEntity = this.cloneMongoSubjectEntity(subject)\r\n                    if (\r\n                        subject.metadata.objectIdColumn &&\r\n                        subject.metadata.objectIdColumn.propertyName\r\n                    ) {\r\n                        delete partialEntity[\r\n                            subject.metadata.objectIdColumn.propertyName\r\n                        ]\r\n                    }\r\n\r\n                    if (\r\n                        subject.metadata.createDateColumn &&\r\n                        subject.metadata.createDateColumn.propertyName\r\n                    ) {\r\n                        delete partialEntity[\r\n                            subject.metadata.createDateColumn.propertyName\r\n                        ]\r\n                    }\r\n\r\n                    if (\r\n                        subject.metadata.updateDateColumn &&\r\n                        subject.metadata.updateDateColumn.propertyName\r\n                    ) {\r\n                        partialEntity[\r\n                            subject.metadata.updateDateColumn.propertyName\r\n                        ] = new Date()\r\n                    }\r\n\r\n                    if (\r\n                        subject.metadata.deleteDateColumn &&\r\n                        subject.metadata.deleteDateColumn.propertyName\r\n                    ) {\r\n                        partialEntity[\r\n                            subject.metadata.deleteDateColumn.propertyName\r\n                        ] = null\r\n                    }\r\n\r\n                    const manager = this.queryRunner\r\n                        .manager as MongoEntityManager\r\n\r\n                    updateResult = await manager.update(\r\n                        subject.metadata.target,\r\n                        subject.identifier,\r\n                        partialEntity,\r\n                    )\r\n                } else {\r\n                    // here we execute our restory query\r\n                    // we need to enable entity restory because we update a subject identifier\r\n                    // which is not same object as our entity that's why we don't need to worry about our entity to get dirty\r\n                    // also, we disable listeners because we call them on our own in persistence layer\r\n                    const softDeleteQueryBuilder = this.queryRunner.manager\r\n                        .createQueryBuilder()\r\n                        .restore()\r\n                        .from(subject.metadata.target)\r\n                        .updateEntity(\r\n                            this.options && this.options.reload === false\r\n                                ? false\r\n                                : true,\r\n                        )\r\n                        .callListeners(false)\r\n\r\n                    if (subject.entity) {\r\n                        softDeleteQueryBuilder.whereEntity(subject.identifier)\r\n                    } else {\r\n                        // in this case identifier is just conditions object to update by\r\n                        softDeleteQueryBuilder.where(subject.identifier)\r\n                    }\r\n\r\n                    updateResult = await softDeleteQueryBuilder.execute()\r\n                }\r\n\r\n                subject.generatedMap = updateResult.generatedMaps[0]\r\n                if (subject.generatedMap) {\r\n                    subject.metadata.columns.forEach((column) => {\r\n                        const value = column.getEntityValue(\r\n                            subject.generatedMap!,\r\n                        )\r\n                        if (value !== undefined && value !== null) {\r\n                            const preparedValue =\r\n                                this.queryRunner.connection.driver.prepareHydratedValue(\r\n                                    value,\r\n                                    column,\r\n                                )\r\n                            column.setEntityValue(\r\n                                subject.generatedMap!,\r\n                                preparedValue,\r\n                            )\r\n                        }\r\n                    })\r\n                }\r\n\r\n                // experiments, remove probably, need to implement tree tables children removal\r\n                // if (subject.updatedRelationMaps.length > 0) {\r\n                //     await Promise.all(subject.updatedRelationMaps.map(async updatedRelation => {\r\n                //         if (!updatedRelation.relation.isTreeParent) return;\r\n                //         if (!updatedRelation.value !== null) return;\r\n                //\r\n                //         if (subject.metadata.treeType === \"closure-table\") {\r\n                //             await new ClosureSubjectExecutor(this.queryRunner).deleteChildrenOf(subject);\r\n                //         }\r\n                //     }));\r\n                // }\r\n            }),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\r\n     * Also updates nullable columns and columns with default values.\r\n     */\r\n    protected updateSpecialColumnsInPersistedEntities(): void {\r\n        // update inserted entity properties\r\n        if (this.insertSubjects.length)\r\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(\r\n                this.insertSubjects,\r\n            )\r\n\r\n        // update updated entity properties\r\n        if (this.updateSubjects.length)\r\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(\r\n                this.updateSubjects,\r\n            )\r\n\r\n        // update soft-removed entity properties\r\n        if (this.softRemoveSubjects.length)\r\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(\r\n                this.softRemoveSubjects,\r\n            )\r\n\r\n        // update recovered entity properties\r\n        if (this.recoverSubjects.length)\r\n            this.updateSpecialColumnsInInsertedAndUpdatedEntities(\r\n                this.recoverSubjects,\r\n            )\r\n\r\n        // remove ids from the entities that were removed\r\n        if (this.removeSubjects.length) {\r\n            this.removeSubjects.forEach((subject) => {\r\n                if (!subject.entity) return\r\n\r\n                subject.metadata.primaryColumns.forEach((primaryColumn) => {\r\n                    primaryColumn.setEntityValue(subject.entity!, undefined)\r\n                })\r\n            })\r\n        }\r\n\r\n        // other post-persist updations\r\n        this.allSubjects.forEach((subject) => {\r\n            if (!subject.entity) return\r\n\r\n            subject.metadata.relationIds.forEach((relationId) => {\r\n                relationId.setValue(subject.entity!)\r\n            })\r\n\r\n            // mongo _id remove\r\n            if (\r\n                InstanceChecker.isMongoEntityManager(this.queryRunner.manager)\r\n            ) {\r\n                if (\r\n                    subject.metadata.objectIdColumn &&\r\n                    subject.metadata.objectIdColumn.databaseName &&\r\n                    subject.metadata.objectIdColumn.databaseName !==\r\n                        subject.metadata.objectIdColumn.propertyName\r\n                ) {\r\n                    delete subject.entity[\r\n                        subject.metadata.objectIdColumn.databaseName\r\n                    ]\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Updates all special columns of the saving entities (create date, update date, version, etc.).\r\n     * Also updates nullable columns and columns with default values.\r\n     */\r\n    protected updateSpecialColumnsInInsertedAndUpdatedEntities(\r\n        subjects: Subject[],\r\n    ): void {\r\n        subjects.forEach((subject) => {\r\n            if (!subject.entity) return\r\n\r\n            // set values to \"null\" for nullable columns that did not have values\r\n            subject.metadata.columns.forEach((column) => {\r\n                // if table inheritance is used make sure this column is not child's column\r\n                if (\r\n                    subject.metadata.childEntityMetadatas.length > 0 &&\r\n                    subject.metadata.childEntityMetadatas\r\n                        .map((metadata) => metadata.target)\r\n                        .indexOf(column.target) !== -1\r\n                )\r\n                    return\r\n\r\n                // entities does not have virtual columns\r\n                if (column.isVirtual) return\r\n\r\n                // if column is deletedAt\r\n                if (column.isDeleteDate) return\r\n\r\n                // update nullable columns\r\n                if (column.isNullable) {\r\n                    const columnValue = column.getEntityValue(subject.entity!)\r\n                    if (columnValue === undefined)\r\n                        column.setEntityValue(subject.entity!, null)\r\n                }\r\n\r\n                // update relational columns\r\n                if (subject.updatedRelationMaps.length > 0) {\r\n                    subject.updatedRelationMaps.forEach(\r\n                        (updatedRelationMap) => {\r\n                            updatedRelationMap.relation.joinColumns.forEach(\r\n                                (column) => {\r\n                                    if (column.isVirtual === true) return\r\n\r\n                                    column.setEntityValue(\r\n                                        subject.entity!,\r\n                                        ObjectUtils.isObject(\r\n                                            updatedRelationMap.value,\r\n                                        )\r\n                                            ? column.referencedColumn!.getEntityValue(\r\n                                                  updatedRelationMap.value,\r\n                                              )\r\n                                            : updatedRelationMap.value,\r\n                                    )\r\n                                },\r\n                            )\r\n                        },\r\n                    )\r\n                }\r\n            })\r\n\r\n            // merge into entity all generated values returned by a database\r\n            if (subject.generatedMap)\r\n                this.queryRunner.manager.merge(\r\n                    subject.metadata.target as any,\r\n                    subject.entity,\r\n                    subject.generatedMap,\r\n                )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Groups subjects by metadata names (by tables) to make bulk insertions and deletions possible.\r\n     * However there are some limitations with bulk insertions of data into tables with generated (increment) columns\r\n     * in some drivers. Some drivers like mysql and sqlite does not support returning multiple generated columns\r\n     * after insertion and can only return a single generated column value, that's why its not possible to do bulk insertion,\r\n     * because it breaks insertion result's generatedMap and leads to problems when this subject is used in other subjects saves.\r\n     * That's why we only support bulking in junction tables for those drivers.\r\n     *\r\n     * Other drivers like postgres and sql server support RETURNING / OUTPUT statement which allows to return generated\r\n     * id for each inserted row, that's why bulk insertion is not limited to junction tables in there.\r\n     */\r\n    protected groupBulkSubjects(\r\n        subjects: Subject[],\r\n        type: \"insert\" | \"delete\",\r\n    ): [{ [key: string]: Subject[] }, string[]] {\r\n        const group: { [key: string]: Subject[] } = {}\r\n        const keys: string[] = []\r\n        const hasReturningDependColumns = subjects.some((subject) => {\r\n            return subject.metadata.getInsertionReturningColumns().length > 0\r\n        })\r\n        const groupingAllowed =\r\n            type === \"delete\" ||\r\n            this.queryRunner.connection.driver.isReturningSqlSupported(\r\n                \"insert\",\r\n            ) ||\r\n            hasReturningDependColumns === false\r\n\r\n        subjects.forEach((subject, index) => {\r\n            const key =\r\n                groupingAllowed || subject.metadata.isJunction\r\n                    ? subject.metadata.name\r\n                    : subject.metadata.name + \"_\" + index\r\n            if (!group[key]) {\r\n                group[key] = [subject]\r\n                keys.push(key)\r\n            } else {\r\n                group[key].push(subject)\r\n            }\r\n        })\r\n\r\n        return [group, keys]\r\n    }\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../browser/src/schema-builder/view/View.ts"],"names":[],"mappings":"AASA;;GAEG;AACH,MAAM,OAAO,IAAI;IAqCb,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAAqB;QAxCxB,mBAAa,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QAyCvC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAA;QACjB,IAAI,OAAO,EAAE,CAAC;YACV,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;YAChC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;YAC5B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;YACxB,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;YACpC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,YAAY,CAAA;QAC9C,CAAC;IACL,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,KAAK;QACD,OAAO,IAAI,IAAI,CAAc;YACzB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,YAAY,EAAE,IAAI,CAAC,YAAY;SAClC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,KAAiB;QACtB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAC5B,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,SAAqB;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAC3B,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAC3C,CAAA;QACD,IAAI,KAAK,EAAE,CAAC;YACR,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAA;QACvD,CAAC;IACL,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,MAAM,CAAC,MAAM,CAAC,cAA8B,EAAE,MAAc;QACxD,MAAM,OAAO,GAAgB;YACzB,QAAQ,EAAE,cAAc,CAAC,QAAQ;YACjC,MAAM,EAAE,cAAc,CAAC,MAAM;YAC7B,IAAI,EAAE,MAAM,CAAC,cAAc,CACvB,cAAc,CAAC,SAAS,EACxB,cAAc,CAAC,MAAM,EACrB,cAAc,CAAC,QAAQ,CAC1B;YACD,UAAU,EAAE,cAAc,CAAC,UAAW;YACtC,YAAY,EAAE,cAAc,CAAC,iBAAiB,CAAC,YAAY;SAC9D,CAAA;QAED,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,CAAA;IAC5B,CAAC;CACJ","file":"View.js","sourcesContent":["import {\r\n    DataSource,\r\n    Driver,\r\n    EntityMetadata,\r\n    SelectQueryBuilder,\r\n    TableIndex,\r\n} from \"../..\"\r\nimport { ViewOptions } from \"../options/ViewOptions\"\r\n\r\n/**\r\n * View in the database represented in this class.\r\n */\r\nexport class View {\r\n    readonly \"@instanceof\" = Symbol.for(\"View\")\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database name that this view resides in if it applies.\r\n     */\r\n    database?: string\r\n\r\n    /**\r\n     * Schema name that this view resides in if it applies.\r\n     */\r\n    schema?: string\r\n\r\n    /**\r\n     * View name\r\n     */\r\n    name: string\r\n\r\n    /**\r\n     * Indicates if view is materialized.\r\n     */\r\n    materialized: boolean\r\n\r\n    /**\r\n     * View Indices\r\n     */\r\n    indices: TableIndex[]\r\n\r\n    /**\r\n     * View definition.\r\n     */\r\n    expression: string | ((connection: DataSource) => SelectQueryBuilder<any>)\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options?: ViewOptions) {\r\n        this.indices = []\r\n        if (options) {\r\n            this.database = options.database\r\n            this.schema = options.schema\r\n            this.name = options.name\r\n            this.expression = options.expression\r\n            this.materialized = !!options.materialized\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Clones this table to a new table with all properties cloned.\r\n     */\r\n    clone(): View {\r\n        return new View(<ViewOptions>{\r\n            database: this.database,\r\n            schema: this.schema,\r\n            name: this.name,\r\n            expression: this.expression,\r\n            materialized: this.materialized,\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Add index\r\n     */\r\n    addIndex(index: TableIndex): void {\r\n        this.indices.push(index)\r\n    }\r\n\r\n    /**\r\n     * Remove index\r\n     */\r\n    removeIndex(viewIndex: TableIndex): void {\r\n        const index = this.indices.find(\r\n            (index) => index.name === viewIndex.name,\r\n        )\r\n        if (index) {\r\n            this.indices.splice(this.indices.indexOf(index), 1)\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates view from a given entity metadata.\r\n     */\r\n    static create(entityMetadata: EntityMetadata, driver: Driver): View {\r\n        const options: ViewOptions = {\r\n            database: entityMetadata.database,\r\n            schema: entityMetadata.schema,\r\n            name: driver.buildTableName(\r\n                entityMetadata.tableName,\r\n                entityMetadata.schema,\r\n                entityMetadata.database,\r\n            ),\r\n            expression: entityMetadata.expression!,\r\n            materialized: entityMetadata.tableMetadataArgs.materialized,\r\n        }\r\n\r\n        return new View(options)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../browser/src/schema-builder/table/TableIndex.ts"],"names":[],"mappings":"AAGA;;GAEG;AACH,MAAM,OAAO,UAAU;IA4DnB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAA0B;QA/D7B,mBAAa,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QAWjD;;WAEG;QACH,gBAAW,GAAa,EAAE,CAAA;QAkDtB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACxB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAA;QACtC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAA;QAClC,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,CAAA;QACpC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,YAAY,CAAA;QAC1C,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAA;QACtC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,cAAc,CAAA;QAC9C,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;QAC5B,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAA;IACnD,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,KAAK;QACD,OAAO,IAAI,UAAU,CAAoB;YACrC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC;YAClC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,YAAY,EAAE,IAAI,CAAC,YAAY;YAC/B,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,KAAK,EAAE,IAAI,CAAC,KAAK;SACpB,CAAC,CAAA;IACN,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,MAAM,CAAC,MAAM,CAAC,aAA4B;QACtC,OAAO,IAAI,UAAU,CAAoB;YACrC,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,WAAW,EAAE,aAAa,CAAC,OAAO,CAAC,GAAG,CAClC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAClC;YACD,QAAQ,EAAE,aAAa,CAAC,QAAQ;YAChC,SAAS,EAAE,aAAa,CAAC,SAAS;YAClC,YAAY,EAAE,aAAa,CAAC,YAAY;YACxC,UAAU,EAAE,aAAa,CAAC,UAAU;YACpC,cAAc,EAAE,aAAa,CAAC,cAAc;YAC5C,MAAM,EAAE,aAAa,CAAC,MAAM;YAC5B,KAAK,EAAE,aAAa,CAAC,KAAK;SAC7B,CAAC,CAAA;IACN,CAAC;CACJ","file":"TableIndex.js","sourcesContent":["import { IndexMetadata } from \"../../metadata/IndexMetadata\"\r\nimport { TableIndexOptions } from \"../options/TableIndexOptions\"\r\n\r\n/**\r\n * Database's table index stored in this class.\r\n */\r\nexport class TableIndex {\r\n    readonly \"@instanceof\" = Symbol.for(\"TableIndex\")\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Index name.\r\n     */\r\n    name?: string\r\n\r\n    /**\r\n     * Columns included in this index.\r\n     */\r\n    columnNames: string[] = []\r\n\r\n    /**\r\n     * Indicates if this index is unique.\r\n     */\r\n    isUnique: boolean\r\n\r\n    /**\r\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\r\n     * Works only in MySQL.\r\n     */\r\n    isSpatial: boolean\r\n\r\n    /**\r\n     * Create the index using the CONCURRENTLY modifier\r\n     * Works only in postgres.\r\n     */\r\n    isConcurrent: boolean\r\n\r\n    /**\r\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\r\n     * Works only in MySQL.\r\n     */\r\n    isFulltext: boolean\r\n\r\n    /**\r\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\r\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\r\n     * a normal index that includes NULL values.\r\n     *\r\n     * Works only in Spanner.\r\n     */\r\n    isNullFiltered: boolean\r\n\r\n    /**\r\n     * Fulltext parser.\r\n     * Works only in MySQL.\r\n     */\r\n    parser?: string\r\n\r\n    /**\r\n     * Index filter condition.\r\n     */\r\n    where: string\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: TableIndexOptions) {\r\n        this.name = options.name\r\n        this.columnNames = options.columnNames\r\n        this.isUnique = !!options.isUnique\r\n        this.isSpatial = !!options.isSpatial\r\n        this.isConcurrent = !!options.isConcurrent\r\n        this.isFulltext = !!options.isFulltext\r\n        this.isNullFiltered = !!options.isNullFiltered\r\n        this.parser = options.parser\r\n        this.where = options.where ? options.where : \"\"\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this index with exactly same properties.\r\n     */\r\n    clone(): TableIndex {\r\n        return new TableIndex(<TableIndexOptions>{\r\n            name: this.name,\r\n            columnNames: [...this.columnNames],\r\n            isUnique: this.isUnique,\r\n            isSpatial: this.isSpatial,\r\n            isConcurrent: this.isConcurrent,\r\n            isFulltext: this.isFulltext,\r\n            isNullFiltered: this.isNullFiltered,\r\n            parser: this.parser,\r\n            where: this.where,\r\n        })\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates index from the index metadata object.\r\n     */\r\n    static create(indexMetadata: IndexMetadata): TableIndex {\r\n        return new TableIndex(<TableIndexOptions>{\r\n            name: indexMetadata.name,\r\n            columnNames: indexMetadata.columns.map(\r\n                (column) => column.databaseName,\r\n            ),\r\n            isUnique: indexMetadata.isUnique,\r\n            isSpatial: indexMetadata.isSpatial,\r\n            isConcurrent: indexMetadata.isConcurrent,\r\n            isFulltext: indexMetadata.isFulltext,\r\n            isNullFiltered: indexMetadata.isNullFiltered,\r\n            parser: indexMetadata.parser,\r\n            where: indexMetadata.where,\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
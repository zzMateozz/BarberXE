{"version":3,"sources":["../browser/src/metadata/ForeignKeyMetadata.ts"],"names":[],"mappings":"AAOA;;GAEG;AACH,MAAM,OAAO,kBAAkB;IAmE3B,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,YAAY,OAUX;QAlED;;WAEG;QACH,YAAO,GAAqB,EAAE,CAAA;QAE9B;;WAEG;QACH,sBAAiB,GAAqB,EAAE,CAAA;QA6BxC;;WAEG;QACH,gBAAW,GAAa,EAAE,CAAA;QAE1B;;WAEG;QACH,0BAAqB,GAAa,EAAE,CAAA;QAsBhC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAA;QAC5C,IAAI,CAAC,wBAAwB,GAAG,OAAO,CAAC,wBAAwB,CAAA;QAChE,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAA;QAC9B,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,CAAA;QAClD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,WAAW,CAAA;QAC/C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,WAAW,CAAA;QAC/C,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;QACpC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAA;QAC7B,IAAI,OAAO,CAAC,cAAc;YAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;IAClE,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;;OAGG;IACH,KAAK,CAAC,cAAuC;QACzC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;QACpE,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,iBAAiB,CAAC,GAAG,CACnD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAClC,CAAA;QACD,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAA;QAClE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS;YACtB,CAAC,CAAC,IAAI,CAAC,SAAS;YAChB,CAAC,CAAC,cAAc,CAAC,cAAc,CACzB,IAAI,CAAC,cAAc,CAAC,SAAS,EAC7B,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,wBAAwB,CAAC,SAAS,EACvC,IAAI,CAAC,qBAAqB,CAC7B,CAAA;IACX,CAAC;CACJ","file":"ForeignKeyMetadata.js","sourcesContent":["import { ColumnMetadata } from \"./ColumnMetadata\"\r\nimport { EntityMetadata } from \"./EntityMetadata\"\r\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\r\nimport { DeferrableType } from \"./types/DeferrableType\"\r\nimport { OnDeleteType } from \"./types/OnDeleteType\"\r\nimport { OnUpdateType } from \"./types/OnUpdateType\"\r\n\r\n/**\r\n * Contains all information about entity's foreign key.\r\n */\r\nexport class ForeignKeyMetadata {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this foreign key is.\r\n     */\r\n    entityMetadata: EntityMetadata\r\n\r\n    /**\r\n     * Entity metadata which this foreign key references.\r\n     */\r\n    referencedEntityMetadata: EntityMetadata\r\n\r\n    /**\r\n     * Array of columns of this foreign key.\r\n     */\r\n    columns: ColumnMetadata[] = []\r\n\r\n    /**\r\n     * Array of referenced columns.\r\n     */\r\n    referencedColumns: ColumnMetadata[] = []\r\n\r\n    /**\r\n     * What to do with a relation on deletion of the row containing a foreign key.\r\n     */\r\n    onDelete?: OnDeleteType\r\n\r\n    /**\r\n     * What to do with a relation on update of the row containing a foreign key.\r\n     */\r\n    onUpdate?: OnUpdateType\r\n\r\n    /**\r\n     * When to check the constraints of a foreign key.\r\n     */\r\n    deferrable?: DeferrableType\r\n\r\n    /**\r\n     * Gets the table name to which this foreign key is referenced.\r\n     */\r\n    referencedTablePath: string\r\n\r\n    /**\r\n     * Gets foreign key name.\r\n     * If unique constraint name was given by a user then it stores givenName.\r\n     * If unique constraint name was not given then its generated.\r\n     */\r\n    name: string\r\n\r\n    /**\r\n     * Gets array of column names.\r\n     */\r\n    columnNames: string[] = []\r\n\r\n    /**\r\n     * Gets array of referenced column names.\r\n     */\r\n    referencedColumnNames: string[] = []\r\n\r\n    /**\r\n     * User specified unique constraint name.\r\n     */\r\n    givenName?: string\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata\r\n        referencedEntityMetadata: EntityMetadata\r\n        namingStrategy?: NamingStrategyInterface\r\n        columns: ColumnMetadata[]\r\n        referencedColumns: ColumnMetadata[]\r\n        onDelete?: OnDeleteType\r\n        onUpdate?: OnUpdateType\r\n        deferrable?: DeferrableType\r\n        name?: string\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata\r\n        this.referencedEntityMetadata = options.referencedEntityMetadata\r\n        this.columns = options.columns\r\n        this.referencedColumns = options.referencedColumns\r\n        this.onDelete = options.onDelete || \"NO ACTION\"\r\n        this.onUpdate = options.onUpdate || \"NO ACTION\"\r\n        this.deferrable = options.deferrable\r\n        this.givenName = options.name\r\n        if (options.namingStrategy) this.build(options.namingStrategy)\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend foreign key properties.\r\n     * Must be called after all entity metadatas and their columns are built.\r\n     */\r\n    build(namingStrategy: NamingStrategyInterface) {\r\n        this.columnNames = this.columns.map((column) => column.databaseName)\r\n        this.referencedColumnNames = this.referencedColumns.map(\r\n            (column) => column.databaseName,\r\n        )\r\n        this.referencedTablePath = this.referencedEntityMetadata.tablePath\r\n        this.name = this.givenName\r\n            ? this.givenName\r\n            : namingStrategy.foreignKeyName(\r\n                  this.entityMetadata.tableName,\r\n                  this.columnNames,\r\n                  this.referencedEntityMetadata.tableName,\r\n                  this.referencedColumnNames,\r\n              )\r\n    }\r\n}\r\n"],"sourceRoot":".."}
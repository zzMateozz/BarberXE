{"version":3,"sources":["../browser/src/metadata/RelationMetadata.ts"],"names":[],"mappings":"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","file":"RelationMetadata.js","sourcesContent":["import { RelationType } from \"./types/RelationTypes\"\r\nimport { EntityMetadata } from \"./EntityMetadata\"\r\nimport { ForeignKeyMetadata } from \"./ForeignKeyMetadata\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { ColumnMetadata } from \"./ColumnMetadata\"\r\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\r\nimport { RelationMetadataArgs } from \"../metadata-args/RelationMetadataArgs\"\r\nimport { DeferrableType } from \"./types/DeferrableType\"\r\nimport { OnUpdateType } from \"./types/OnUpdateType\"\r\nimport { OnDeleteType } from \"./types/OnDeleteType\"\r\nimport { PropertyTypeFactory } from \"./types/PropertyTypeInFunction\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\n\r\n/**\r\n * Contains all information about some entity's relation.\r\n */\r\nexport class RelationMetadata {\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the entity where this relation is placed.\r\n     *\r\n     * For example for @ManyToMany(type => Category) in Post, entityMetadata will be metadata of Post entity.\r\n     */\r\n    entityMetadata: EntityMetadata\r\n\r\n    /**\r\n     * Entity metadata of the entity that is targeted by this relation.\r\n     *\r\n     * For example for @ManyToMany(type => Category) in Post, inverseEntityMetadata will be metadata of Category entity.\r\n     */\r\n    inverseEntityMetadata: EntityMetadata\r\n\r\n    /**\r\n     * Entity metadata of the junction table.\r\n     * Junction tables have their own entity metadata objects.\r\n     * Defined only for many-to-many relations.\r\n     */\r\n    junctionEntityMetadata?: EntityMetadata\r\n\r\n    /**\r\n     * Embedded metadata where this relation is.\r\n     * If this relation is not in embed then this property value is undefined.\r\n     */\r\n    embeddedMetadata?: EmbeddedMetadata\r\n\r\n    /**\r\n     * Relation type, e.g. is it one-to-one, one-to-many, many-to-one or many-to-many.\r\n     */\r\n    relationType: RelationType\r\n\r\n    /**\r\n     * Target entity to which this relation is applied.\r\n     * Target IS NOT equal to entityMetadata.target, because relation\r\n     *\r\n     * For example for @ManyToMany(type => Category) in Post, target will be Post.\r\n     * If @ManyToMany(type => Category) is in Counters which is embedded into Post, target will be Counters.\r\n     * If @ManyToMany(type => Category) is in abstract class BaseUser which Post extends, target will be BaseUser.\r\n     * Target can be string if its defined in entity schema instead of class.\r\n     */\r\n    target: Function | string\r\n\r\n    /**\r\n     * Target's property name to which relation decorator is applied.\r\n     */\r\n    propertyName: string\r\n\r\n    /**\r\n     * Gets full path to this column property (including relation name).\r\n     * Full path is relevant when column is used in embeds (one or multiple nested).\r\n     * For example it will return \"counters.subcounters.likes\".\r\n     * If property is not in embeds then it returns just property name of the column.\r\n     */\r\n    propertyPath: string\r\n\r\n    /**\r\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\r\n     */\r\n    isTreeParent: boolean = false\r\n\r\n    /**\r\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\r\n     */\r\n    isTreeChildren: boolean = false\r\n\r\n    /**\r\n     * Indicates if this relation's column is a primary key.\r\n     * Can be used only for many-to-one and owner one-to-one relations.\r\n     */\r\n    isPrimary: boolean = false\r\n\r\n    /**\r\n     * Indicates if this relation is lazily loaded.\r\n     */\r\n    isLazy: boolean = false\r\n\r\n    /**\r\n     * Indicates if this relation is eagerly loaded.\r\n     */\r\n    isEager: boolean = false\r\n\r\n    /**\r\n     * Indicates if persistence is enabled for the relation.\r\n     * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\r\n     * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\r\n     * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\r\n     */\r\n    persistenceEnabled: boolean = true\r\n\r\n    /**\r\n     * When a parent is saved (with cascading but) without a child row that still exists in database, this will control what shall happen to them.\r\n     * delete will remove these rows from database. nullify will remove the relation key.\r\n     * skip will keep the relation intact. Removal of related item is only possible through its own repo.\r\n     */\r\n    orphanedRowAction?: \"nullify\" | \"delete\" | \"soft-delete\" | \"disable\"\r\n\r\n    /**\r\n     * If set to true then related objects are allowed to be inserted to the database.\r\n     */\r\n    isCascadeInsert: boolean = false\r\n\r\n    /**\r\n     * If set to true then related objects are allowed to be updated in the database.\r\n     */\r\n    isCascadeUpdate: boolean = false\r\n\r\n    /**\r\n     * If set to true then related objects are allowed to be remove from the database.\r\n     */\r\n    isCascadeRemove: boolean = false\r\n\r\n    /**\r\n     * If set to true then related objects are allowed to be soft-removed from the database.\r\n     */\r\n    isCascadeSoftRemove: boolean = false\r\n\r\n    /**\r\n     * If set to true then related objects are allowed to be recovered from the database.\r\n     */\r\n    isCascadeRecover: boolean = false\r\n\r\n    /**\r\n     * Indicates if relation column value can be nullable or not.\r\n     */\r\n    isNullable: boolean = true\r\n\r\n    /**\r\n     * What to do with a relation on deletion of the row containing a foreign key.\r\n     */\r\n    onDelete?: OnDeleteType\r\n\r\n    /**\r\n     * What to do with a relation on update of the row containing a foreign key.\r\n     */\r\n    onUpdate?: OnUpdateType\r\n\r\n    /**\r\n     * What to do with a relation on update of the row containing a foreign key.\r\n     */\r\n    deferrable?: DeferrableType\r\n\r\n    /**\r\n     * Indicates whether foreign key constraints will be created for join columns.\r\n     * Can be used only for many-to-one and owner one-to-one relations.\r\n     * Defaults to true.\r\n     */\r\n    createForeignKeyConstraints: boolean = true\r\n\r\n    /**\r\n     * Gets the property's type to which this relation is applied.\r\n     *\r\n     * For example for @ManyToMany(type => Category) in Post, target will be Category.\r\n     */\r\n    type: Function | string\r\n\r\n    /**\r\n     * Indicates if this side is an owner of this relation.\r\n     */\r\n    isOwning: boolean = false\r\n\r\n    /**\r\n     * Checks if this relation's type is \"one-to-one\".\r\n     */\r\n    isOneToOne: boolean = false\r\n\r\n    /**\r\n     * Checks if this relation is owner side of the \"one-to-one\" relation.\r\n     * Owner side means this side of relation has a join column in the table.\r\n     */\r\n    isOneToOneOwner: boolean = false\r\n\r\n    /**\r\n     * Checks if this relation has a join column (e.g. is it many-to-one or one-to-one owner side).\r\n     */\r\n    isWithJoinColumn: boolean = false\r\n\r\n    /**\r\n     * Checks if this relation is NOT owner side of the \"one-to-one\" relation.\r\n     * NOT owner side means this side of relation does not have a join column in the table.\r\n     */\r\n    isOneToOneNotOwner: boolean = false\r\n\r\n    /**\r\n     * Checks if this relation's type is \"one-to-many\".\r\n     */\r\n    isOneToMany: boolean = false\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-one\".\r\n     */\r\n    isManyToOne: boolean = false\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-many\".\r\n     */\r\n    isManyToMany: boolean = false\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-many\", and is owner side of the relationship.\r\n     * Owner side means this side of relation has a join table.\r\n     */\r\n    isManyToManyOwner: boolean = false\r\n\r\n    /**\r\n     * Checks if this relation's type is \"many-to-many\", and is NOT owner side of the relationship.\r\n     * Not owner side means this side of relation does not have a join table.\r\n     */\r\n    isManyToManyNotOwner: boolean = false\r\n\r\n    /**\r\n     * Gets the property path of the inverse side of the relation.\r\n     */\r\n    inverseSidePropertyPath: string\r\n\r\n    /**\r\n     * Inverse side of the relation set by user.\r\n     *\r\n     * Inverse side set in the relation can be either string - property name of the column on inverse side,\r\n     * either can be a function that accepts a map of properties with the object and returns one of them.\r\n     * Second approach is used to achieve type-safety.\r\n     */\r\n    givenInverseSidePropertyFactory: PropertyTypeFactory<any>\r\n\r\n    /**\r\n     * Gets the relation metadata of the inverse side of this relation.\r\n     */\r\n    inverseRelation?: RelationMetadata\r\n\r\n    /**\r\n     * Join table name.\r\n     */\r\n    joinTableName: string\r\n\r\n    /**\r\n     * Foreign keys created for this relation.\r\n     */\r\n    foreignKeys: ForeignKeyMetadata[] = []\r\n\r\n    /**\r\n     * Join table columns.\r\n     * Join columns can be obtained only from owner side of the relation.\r\n     * From non-owner side of the relation join columns will be empty.\r\n     * If this relation is a many-to-one/one-to-one then it takes join columns from the current entity.\r\n     * If this relation is many-to-many then it takes all owner join columns from the junction entity.\r\n     */\r\n    joinColumns: ColumnMetadata[] = []\r\n\r\n    /**\r\n     * Inverse join table columns.\r\n     * Inverse join columns are supported only for many-to-many relations\r\n     * and can be obtained only from owner side of the relation.\r\n     * From non-owner side of the relation join columns will be undefined.\r\n     */\r\n    inverseJoinColumns: ColumnMetadata[] = []\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata\r\n        embeddedMetadata?: EmbeddedMetadata\r\n        args: RelationMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata\r\n        this.embeddedMetadata = options.embeddedMetadata!\r\n        const args = options.args\r\n        this.target = args.target\r\n        this.propertyName = args.propertyName\r\n        this.relationType = args.relationType\r\n\r\n        if (args.inverseSideProperty)\r\n            this.givenInverseSidePropertyFactory = args.inverseSideProperty\r\n\r\n        this.isLazy = args.isLazy || false\r\n        // this.isCascadeInsert = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"insert\") !== -1);\r\n        // this.isCascadeUpdate = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"update\") !== -1);\r\n        // this.isCascadeRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"remove\") !== -1);\r\n        // this.isCascadeSoftRemove = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"soft-remove\") !== -1);\r\n        // this.isCascadeRecover = args.options.cascade === true || (args.options.cascade instanceof Array && args.options.cascade.indexOf(\"recover\") !== -1);\r\n        this.isCascadeInsert =\r\n            args.options.cascade === true ||\r\n            (Array.isArray(args.options.cascade) &&\r\n                args.options.cascade.indexOf(\"insert\") !== -1)\r\n        this.isCascadeUpdate =\r\n            args.options.cascade === true ||\r\n            (Array.isArray(args.options.cascade) &&\r\n                args.options.cascade.indexOf(\"update\") !== -1)\r\n        this.isCascadeRemove =\r\n            args.options.cascade === true ||\r\n            (Array.isArray(args.options.cascade) &&\r\n                args.options.cascade.indexOf(\"remove\") !== -1)\r\n        this.isCascadeSoftRemove =\r\n            args.options.cascade === true ||\r\n            (Array.isArray(args.options.cascade) &&\r\n                args.options.cascade.indexOf(\"soft-remove\") !== -1)\r\n        this.isCascadeRecover =\r\n            args.options.cascade === true ||\r\n            (Array.isArray(args.options.cascade) &&\r\n                args.options.cascade.indexOf(\"recover\") !== -1)\r\n        // this.isPrimary = args.options.primary || false;\r\n        this.isNullable =\r\n            args.options.nullable === false || this.isPrimary ? false : true\r\n        this.onDelete = args.options.onDelete\r\n        this.onUpdate = args.options.onUpdate\r\n        this.deferrable = args.options.deferrable\r\n        this.createForeignKeyConstraints =\r\n            args.options.createForeignKeyConstraints === false ? false : true\r\n        this.isEager = args.options.eager || false\r\n        this.persistenceEnabled =\r\n            args.options.persistence === false ? false : true\r\n        this.orphanedRowAction = args.options.orphanedRowAction || \"nullify\"\r\n        this.isTreeParent = args.isTreeParent || false\r\n        this.isTreeChildren = args.isTreeChildren || false\r\n\r\n        if (typeof args.type === \"function\") {\r\n            this.type =\r\n                typeof args.type === \"function\"\r\n                    ? (args.type as () => any)()\r\n                    : args.type\r\n        } else if (InstanceChecker.isEntitySchema(args.type)) {\r\n            this.type = args.type.options.name\r\n        } else if (\r\n            ObjectUtils.isObject(args.type) &&\r\n            typeof (args.type as any).name === \"string\"\r\n        ) {\r\n            this.type = (args.type as any).name\r\n        } else {\r\n            this.type = args.type as string | Function\r\n        }\r\n\r\n        this.isOneToOne = this.relationType === \"one-to-one\"\r\n        this.isOneToMany = this.relationType === \"one-to-many\"\r\n        this.isManyToOne = this.relationType === \"many-to-one\"\r\n        this.isManyToMany = this.relationType === \"many-to-many\"\r\n        this.isOneToOneNotOwner = this.isOneToOne ? true : false\r\n        this.isManyToManyNotOwner = this.isManyToMany ? true : false\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates join column ids map from the given related entity ids array.\r\n     */\r\n    getRelationIdMap(entity: ObjectLiteral): ObjectLiteral | undefined {\r\n        const joinColumns = this.isOwning\r\n            ? this.joinColumns\r\n            : this.inverseRelation!.joinColumns\r\n        const referencedColumns = joinColumns.map(\r\n            (joinColumn) => joinColumn.referencedColumn!,\r\n        )\r\n        // console.log(\"entity\", entity);\r\n        // console.log(\"referencedColumns\", referencedColumns);\r\n        return EntityMetadata.getValueMap(entity, referencedColumns)\r\n    }\r\n\r\n    /**\r\n     * Ensures that given object is an entity id map.\r\n     * If given id is an object then it means its already id map.\r\n     * If given id isn't an object then it means its a value of the id column\r\n     * and it creates a new id map with this value and name of the primary column.\r\n     */\r\n    ensureRelationIdMap(id: any): ObjectLiteral {\r\n        if (ObjectUtils.isObject(id)) return id\r\n\r\n        const joinColumns = this.isOwning\r\n            ? this.joinColumns\r\n            : this.inverseRelation!.joinColumns\r\n        const referencedColumns = joinColumns.map(\r\n            (joinColumn) => joinColumn.referencedColumn!,\r\n        )\r\n\r\n        if (referencedColumns.length > 1)\r\n            throw new TypeORMError(\r\n                `Cannot create relation id map for a single value because relation contains multiple referenced columns.`,\r\n            )\r\n\r\n        return referencedColumns[0].createValueMap(id)\r\n    }\r\n\r\n    /**\r\n     * Extracts column value from the given entity.\r\n     * If column is in embedded (or recursive embedded) it extracts its value from there.\r\n     */\r\n    getEntityValue(\r\n        entity: ObjectLiteral,\r\n        getLazyRelationsPromiseValue: boolean = false,\r\n    ): any | undefined {\r\n        if (entity === null || entity === undefined) return undefined\r\n        // extract column value from embeddeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames]\r\n\r\n            // next we need to access post[data][information][counters][this.propertyName] to get column value from the counters\r\n            // this recursive function takes array of generated property names and gets the post[data][information][counters] embed\r\n            const extractEmbeddedColumnValue = (\r\n                propertyNames: string[],\r\n                value: ObjectLiteral,\r\n            ): any => {\r\n                const propertyName = propertyNames.shift()\r\n                if (propertyName) {\r\n                    if (value[propertyName]) {\r\n                        return extractEmbeddedColumnValue(\r\n                            propertyNames,\r\n                            value[propertyName],\r\n                        )\r\n                    }\r\n                    return undefined\r\n                }\r\n                return value\r\n            }\r\n\r\n            // once we get nested embed object we get its column, e.g. post[data][information][counters][this.propertyName]\r\n            const embeddedObject = extractEmbeddedColumnValue(\r\n                propertyNames,\r\n                entity,\r\n            )\r\n\r\n            if (this.isLazy) {\r\n                if (\r\n                    embeddedObject[\"__\" + this.propertyName + \"__\"] !==\r\n                    undefined\r\n                )\r\n                    return embeddedObject[\"__\" + this.propertyName + \"__\"]\r\n\r\n                if (getLazyRelationsPromiseValue === true)\r\n                    return embeddedObject[this.propertyName]\r\n\r\n                return undefined\r\n            }\r\n            return embeddedObject\r\n                ? embeddedObject[\r\n                      this.isLazy\r\n                          ? \"__\" + this.propertyName + \"__\"\r\n                          : this.propertyName\r\n                  ]\r\n                : undefined\r\n        } else {\r\n            // no embeds - no problems. Simply return column name by property name of the entity\r\n            if (this.isLazy) {\r\n                if (entity[\"__\" + this.propertyName + \"__\"] !== undefined)\r\n                    return entity[\"__\" + this.propertyName + \"__\"]\r\n\r\n                if (getLazyRelationsPromiseValue === true)\r\n                    return entity[this.propertyName]\r\n\r\n                return undefined\r\n            }\r\n            return entity[this.propertyName]\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets given entity's relation's value.\r\n     * Using of this method helps to set entity relation's value of the lazy and non-lazy relations.\r\n     *\r\n     * If merge is set to true, it merges given value into currently\r\n     */\r\n    setEntityValue(entity: ObjectLiteral, value: any): void {\r\n        const propertyName = this.isLazy\r\n            ? \"__\" + this.propertyName + \"__\"\r\n            : this.propertyName\r\n\r\n        if (this.embeddedMetadata) {\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const extractEmbeddedColumnValue = (\r\n                embeddedMetadatas: EmbeddedMetadata[],\r\n                map: ObjectLiteral,\r\n            ): any => {\r\n                // if (!object[embeddedMetadata.propertyName])\r\n                //     object[embeddedMetadata.propertyName] = embeddedMetadata.create();\r\n\r\n                const embeddedMetadata = embeddedMetadatas.shift()\r\n                if (embeddedMetadata) {\r\n                    if (!map[embeddedMetadata.propertyName])\r\n                        map[embeddedMetadata.propertyName] =\r\n                            embeddedMetadata.create()\r\n\r\n                    extractEmbeddedColumnValue(\r\n                        embeddedMetadatas,\r\n                        map[embeddedMetadata.propertyName],\r\n                    )\r\n                    return map\r\n                }\r\n                map[propertyName] = value\r\n                return map\r\n            }\r\n            return extractEmbeddedColumnValue(\r\n                [...this.embeddedMetadata.embeddedMetadataTree],\r\n                entity,\r\n            )\r\n        } else {\r\n            entity[propertyName] = value\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates entity id map from the given entity ids array.\r\n     */\r\n    createValueMap(value: any) {\r\n        // extract column value from embeds of entity if column is in embedded\r\n        if (this.embeddedMetadata) {\r\n            // example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeddeds\r\n            // we need to get value of \"id\" column from the post real entity object and return it in a\r\n            // { data: { information: { counters: { id: ... } } } } format\r\n\r\n            // first step - we extract all parent properties of the entity relative to this column, e.g. [data, information, counters]\r\n            const propertyNames = [...this.embeddedMetadata.parentPropertyNames]\r\n\r\n            // now need to access post[data][information][counters] to get column value from the counters\r\n            // and on each step we need to create complex literal object, e.g. first { data },\r\n            // then { data: { information } }, then { data: { information: { counters } } },\r\n            // then { data: { information: { counters: [this.propertyName]: entity[data][information][counters][this.propertyName] } } }\r\n            // this recursive function helps doing that\r\n            const extractEmbeddedColumnValue = (\r\n                propertyNames: string[],\r\n                map: ObjectLiteral,\r\n            ): any => {\r\n                const propertyName = propertyNames.shift()\r\n                if (propertyName) {\r\n                    map[propertyName] = {}\r\n                    extractEmbeddedColumnValue(propertyNames, map[propertyName])\r\n                    return map\r\n                }\r\n                map[this.propertyName] = value\r\n                return map\r\n            }\r\n            return extractEmbeddedColumnValue(propertyNames, {})\r\n        } else {\r\n            // no embeds - no problems. Simply return column property name and its value of the entity\r\n            return { [this.propertyName]: value }\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend relation metadata properties.\r\n     * This builder method should be used only after embedded metadata tree was build.\r\n     */\r\n    build() {\r\n        this.propertyPath = this.buildPropertyPath()\r\n    }\r\n\r\n    /**\r\n     * Registers given foreign keys in the relation.\r\n     * This builder method should be used to register foreign key in the relation.\r\n     */\r\n    registerForeignKeys(...foreignKeys: ForeignKeyMetadata[]) {\r\n        this.foreignKeys.push(...foreignKeys)\r\n    }\r\n\r\n    /**\r\n     * Registers given join columns in the relation.\r\n     * This builder method should be used to register join column in the relation.\r\n     */\r\n    registerJoinColumns(\r\n        joinColumns: ColumnMetadata[] = [],\r\n        inverseJoinColumns: ColumnMetadata[] = [],\r\n    ) {\r\n        this.joinColumns = joinColumns\r\n        this.inverseJoinColumns = inverseJoinColumns\r\n        this.isOwning =\r\n            this.isManyToOne ||\r\n            ((this.isManyToMany || this.isOneToOne) &&\r\n                this.joinColumns.length > 0)\r\n        this.isOneToOneOwner = this.isOneToOne && this.isOwning\r\n        this.isOneToOneNotOwner = this.isOneToOne && !this.isOwning\r\n        this.isManyToManyOwner = this.isManyToMany && this.isOwning\r\n        this.isManyToManyNotOwner = this.isManyToMany && !this.isOwning\r\n        this.isWithJoinColumn = this.isManyToOne || this.isOneToOneOwner\r\n    }\r\n\r\n    /**\r\n     * Registers a given junction entity metadata.\r\n     * This builder method can be called after junction entity metadata for the many-to-many relation was created.\r\n     */\r\n    registerJunctionEntityMetadata(junctionEntityMetadata: EntityMetadata) {\r\n        this.junctionEntityMetadata = junctionEntityMetadata\r\n        this.joinTableName = junctionEntityMetadata.tableName\r\n        if (this.inverseRelation) {\r\n            this.inverseRelation.junctionEntityMetadata = junctionEntityMetadata\r\n            this.joinTableName = junctionEntityMetadata.tableName\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds inverse side property path based on given inverse side property factory.\r\n     * This builder method should be used only after properties map of the inverse entity metadata was build.\r\n     */\r\n    buildInverseSidePropertyPath(): string {\r\n        if (this.givenInverseSidePropertyFactory) {\r\n            const ownerEntityPropertiesMap =\r\n                this.inverseEntityMetadata.propertiesMap\r\n            if (typeof this.givenInverseSidePropertyFactory === \"function\")\r\n                return this.givenInverseSidePropertyFactory(\r\n                    ownerEntityPropertiesMap,\r\n                )\r\n\r\n            if (typeof this.givenInverseSidePropertyFactory === \"string\")\r\n                return this.givenInverseSidePropertyFactory\r\n        } else if (\r\n            this.isTreeParent &&\r\n            this.entityMetadata.treeChildrenRelation\r\n        ) {\r\n            return this.entityMetadata.treeChildrenRelation.propertyName\r\n        } else if (\r\n            this.isTreeChildren &&\r\n            this.entityMetadata.treeParentRelation\r\n        ) {\r\n            return this.entityMetadata.treeParentRelation.propertyName\r\n        }\r\n\r\n        return \"\"\r\n    }\r\n\r\n    /**\r\n     * Builds relation's property path based on its embedded tree.\r\n     */\r\n    buildPropertyPath(): string {\r\n        if (\r\n            !this.embeddedMetadata ||\r\n            !this.embeddedMetadata.parentPropertyNames.length\r\n        )\r\n            return this.propertyName\r\n\r\n        return (\r\n            this.embeddedMetadata.parentPropertyNames.join(\".\") +\r\n            \".\" +\r\n            this.propertyName\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":".."}
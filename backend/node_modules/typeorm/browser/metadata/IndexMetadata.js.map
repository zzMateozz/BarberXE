{"version":3,"sources":["../browser/src/metadata/IndexMetadata.ts"],"names":[],"mappings":"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","file":"IndexMetadata.js","sourcesContent":["import { EntityMetadata } from \"./EntityMetadata\"\r\nimport { IndexMetadataArgs } from \"../metadata-args/IndexMetadataArgs\"\r\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\r\nimport { ColumnMetadata } from \"./ColumnMetadata\"\r\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\r\nimport { TypeORMError } from \"../error\"\r\n\r\n/**\r\n * Index metadata contains all information about table's index.\r\n */\r\nexport class IndexMetadata {\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the class to which this index is applied.\r\n     */\r\n    entityMetadata: EntityMetadata\r\n\r\n    /**\r\n     * Embedded metadata if this index was applied on embedded.\r\n     */\r\n    embeddedMetadata?: EmbeddedMetadata\r\n\r\n    /**\r\n     * Indicates if this index must be unique.\r\n     */\r\n    isUnique: boolean = false\r\n\r\n    /**\r\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\r\n     * Works only in MySQL.\r\n     */\r\n    isSpatial: boolean = false\r\n\r\n    /**\r\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\r\n     * Works only in MySQL.\r\n     */\r\n    isFulltext: boolean = false\r\n\r\n    /**\r\n     * NULL_FILTERED indexes are particularly useful for indexing sparse columns, where most rows contain a NULL value.\r\n     * In these cases, the NULL_FILTERED index can be considerably smaller and more efficient to maintain than\r\n     * a normal index that includes NULL values.\r\n     *\r\n     * Works only in Spanner.\r\n     */\r\n    isNullFiltered: boolean = false\r\n\r\n    /**\r\n     * Fulltext parser.\r\n     * Works only in MySQL.\r\n     */\r\n    parser?: string\r\n\r\n    /**\r\n     * Indicates if this index must synchronize with database index.\r\n     */\r\n    synchronize: boolean = true\r\n\r\n    /**\r\n     * If true, the index only references documents with the specified field.\r\n     * These indexes use less space but behave differently in some situations (particularly sorts).\r\n     * This option is only supported for mongodb database.\r\n     */\r\n    isSparse?: boolean\r\n\r\n    /**\r\n     * Builds the index in the background so that building an index an does not block other database activities.\r\n     * This option is only supported for mongodb database.\r\n     */\r\n    isBackground?: boolean\r\n\r\n    /**\r\n     * Builds the index using the concurrently option.\r\n     * This options is only supported for postgres database.\r\n     */\r\n    isConcurrent?: boolean\r\n\r\n    /**\r\n     * Specifies a time to live, in seconds.\r\n     * This option is only supported for mongodb database.\r\n     */\r\n    expireAfterSeconds?: number\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    target?: Function | string\r\n\r\n    /**\r\n     * Indexed columns.\r\n     */\r\n    columns: ColumnMetadata[] = []\r\n\r\n    /**\r\n     * User specified index name.\r\n     */\r\n    givenName?: string\r\n\r\n    /**\r\n     * User specified column names.\r\n     */\r\n    givenColumnNames?:\r\n        | ((object?: any) => any[] | { [key: string]: number })\r\n        | string[]\r\n\r\n    /**\r\n     * Final index name.\r\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\r\n     * If index name was not given then its generated.\r\n     */\r\n    name: string\r\n\r\n    /**\r\n     * Index filter condition.\r\n     */\r\n    where?: string\r\n\r\n    /**\r\n     * Map of column names with order set.\r\n     * Used only by MongoDB driver.\r\n     */\r\n    columnNamesWithOrderingMap: { [key: string]: number } = {}\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata\r\n        embeddedMetadata?: EmbeddedMetadata\r\n        columns?: ColumnMetadata[]\r\n        args?: IndexMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata\r\n        this.embeddedMetadata = options.embeddedMetadata\r\n        if (options.columns) this.columns = options.columns\r\n\r\n        if (options.args) {\r\n            this.target = options.args.target\r\n            if (\r\n                options.args.synchronize !== null &&\r\n                options.args.synchronize !== undefined\r\n            )\r\n                this.synchronize = options.args.synchronize\r\n            this.isUnique = !!options.args.unique\r\n            this.isSpatial = !!options.args.spatial\r\n            this.isFulltext = !!options.args.fulltext\r\n            this.isNullFiltered = !!options.args.nullFiltered\r\n            this.parser = options.args.parser\r\n            this.where = options.args.where\r\n            this.isSparse = options.args.sparse\r\n            this.isBackground = options.args.background\r\n            this.isConcurrent = options.args.concurrent\r\n            this.expireAfterSeconds = options.args.expireAfterSeconds\r\n            this.givenName = options.args.name\r\n            this.givenColumnNames = options.args.columns\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Build Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend index properties.\r\n     * Must be called after all entity metadata's properties map, columns and relations are built.\r\n     */\r\n    build(namingStrategy: NamingStrategyInterface): this {\r\n        if (this.synchronize === false) {\r\n            this.name = this.givenName!\r\n            return this\r\n        }\r\n\r\n        const map: { [key: string]: number } = {}\r\n\r\n        // if columns already an array of string then simply return it\r\n        if (this.givenColumnNames) {\r\n            let columnPropertyPaths: string[] = []\r\n            if (Array.isArray(this.givenColumnNames)) {\r\n                columnPropertyPaths = this.givenColumnNames.map(\r\n                    (columnName) => {\r\n                        if (this.embeddedMetadata)\r\n                            return (\r\n                                this.embeddedMetadata.propertyPath +\r\n                                \".\" +\r\n                                columnName\r\n                            )\r\n\r\n                        return columnName.trim()\r\n                    },\r\n                )\r\n                columnPropertyPaths.forEach(\r\n                    (propertyPath) => (map[propertyPath] = 1),\r\n                )\r\n            } else {\r\n                // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\r\n                // if columns is a function that returns array of field names then execute it and get columns names from it\r\n                const columnsFnResult = this.givenColumnNames(\r\n                    this.entityMetadata.propertiesMap,\r\n                )\r\n                if (Array.isArray(columnsFnResult)) {\r\n                    columnPropertyPaths = columnsFnResult.map((i: any) =>\r\n                        String(i),\r\n                    )\r\n                    columnPropertyPaths.forEach((name) => (map[name] = 1))\r\n                } else {\r\n                    columnPropertyPaths = Object.keys(columnsFnResult).map(\r\n                        (i: any) => String(i),\r\n                    )\r\n                    Object.keys(columnsFnResult).forEach(\r\n                        (columnName) =>\r\n                            (map[columnName] = columnsFnResult[columnName]),\r\n                    )\r\n                }\r\n            }\r\n\r\n            this.columns = columnPropertyPaths\r\n                .map((propertyPath) => {\r\n                    const columnWithSameName = this.entityMetadata.columns.find(\r\n                        (column) => column.propertyPath === propertyPath,\r\n                    )\r\n                    if (columnWithSameName) {\r\n                        return [columnWithSameName]\r\n                    }\r\n                    const relationWithSameName =\r\n                        this.entityMetadata.relations.find(\r\n                            (relation) =>\r\n                                relation.isWithJoinColumn &&\r\n                                relation.propertyName === propertyPath,\r\n                        )\r\n                    if (relationWithSameName) {\r\n                        return relationWithSameName.joinColumns\r\n                    }\r\n                    const indexName = this.givenName\r\n                        ? '\"' + this.givenName + '\" '\r\n                        : \"\"\r\n                    const entityName = this.entityMetadata.targetName\r\n                    throw new TypeORMError(\r\n                        `Index ${indexName}contains column that is missing in the entity (${entityName}): ` +\r\n                            propertyPath,\r\n                    )\r\n                })\r\n                .reduce((a, b) => a.concat(b))\r\n        }\r\n\r\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(\r\n            (updatedMap, key) => {\r\n                const column = this.entityMetadata.columns.find(\r\n                    (column) => column.propertyPath === key,\r\n                )\r\n                if (column) updatedMap[column.databasePath] = map[key]\r\n\r\n                return updatedMap\r\n            },\r\n            {} as { [key: string]: number },\r\n        )\r\n\r\n        this.name = this.givenName\r\n            ? this.givenName\r\n            : namingStrategy.indexName(\r\n                  this.entityMetadata.tableName,\r\n                  this.columns.map((column) => column.databaseName),\r\n                  this.where,\r\n              )\r\n        return this\r\n    }\r\n}\r\n"],"sourceRoot":".."}
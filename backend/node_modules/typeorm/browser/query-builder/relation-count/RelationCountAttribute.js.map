{"version":3,"sources":["../browser/src/query-builder/relation-count/RelationCountAttribute.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAA;AAIxD,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAA;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAA;AAEvD,MAAM,OAAO,sBAAsB;IAuB/B,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YACY,aAAiC,EACzC,sBAAwD;QADhD,kBAAa,GAAb,aAAa,CAAoB;QAGzC,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,sBAAsB,IAAI,EAAE,CAAC,CAAA;IAC1D,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,IAAI,uBAAuB;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAA;IAC9C,CAAC;IAED;;;;;OAKG;IACH,IAAI,WAAW;QACX,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;YACrD,MAAM,IAAI,YAAY,CAClB,+DAA+D,CAClE,CAAA;QAEL,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1C,CAAC;IAED;;;;;;OAMG;IACH,IAAI,gBAAgB;QAChB,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;YACrD,MAAM,IAAI,YAAY,CAClB,0DAA0D,CAC7D,CAAA;QAEL,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;IAC1C,CAAC;IAED,IAAI,aAAa;QACb,MAAM,CAAC,WAAW,EAAE,gBAAgB,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACpE,OAAO,WAAW,GAAG,GAAG,GAAG,gBAAgB,GAAG,KAAK,CAAA;IACvD,CAAC;IAED;;;;OAIG;IACH,IAAI,QAAQ;QACR,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;YACrD,MAAM,IAAI,YAAY,CAClB,0DAA0D,CAC7D,CAAA;QAEL,MAAM,CAAC,WAAW,EAAE,YAAY,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAChE,MAAM,sBAAsB,GACxB,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,WAAW,CAAC,CAAA;QACnD,MAAM,QAAQ,GACV,sBAAsB,CAAC,QAAQ,CAAC,4BAA4B,CACxD,YAAY,CACf,CAAA;QACL,IAAI,CAAC,QAAQ;YACT,MAAM,IAAI,YAAY,CAClB,+BAA+B,YAAY,2BAA2B,CACzE,CAAA;QACL,OAAO,QAAQ,CAAA;IACnB,CAAC;IAED;;;OAGG;IACH,IAAI,QAAQ;QACR,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;YACrD,MAAM,IAAI,YAAY,CAClB,0DAA0D,CAC7D,CAAA;QAEL,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QACnD,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,WAAW,CAAC,CAAA;QACjE,OAAO,SAAS,CAAC,QAAQ,CAAA;IAC7B,CAAC;IAED,IAAI,yBAAyB;QACzB,OAAO,IAAI,CAAC,aAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;IAC5C,CAAC;CACJ","file":"RelationCountAttribute.js","sourcesContent":["import { EntityMetadata } from \"../../metadata/EntityMetadata\"\r\nimport { QueryBuilderUtils } from \"../QueryBuilderUtils\"\r\nimport { RelationMetadata } from \"../../metadata/RelationMetadata\"\r\nimport { QueryExpressionMap } from \"../QueryExpressionMap\"\r\nimport { SelectQueryBuilder } from \"../SelectQueryBuilder\"\r\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\r\nimport { TypeORMError } from \"../../error/TypeORMError\"\r\n\r\nexport class RelationCountAttribute {\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias?: string\r\n\r\n    /**\r\n     * Name of relation.\r\n     */\r\n    relationName: string\r\n\r\n    /**\r\n     * Property + alias of the object where to joined data should be mapped.\r\n     */\r\n    mapToProperty: string\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    queryBuilderFactory?: (\r\n        qb: SelectQueryBuilder<any>,\r\n    ) => SelectQueryBuilder<any>\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        private expressionMap: QueryExpressionMap,\r\n        relationCountAttribute?: Partial<RelationCountAttribute>,\r\n    ) {\r\n        ObjectUtils.assign(this, relationCountAttribute || {})\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    get joinInverseSideMetadata(): EntityMetadata {\r\n        return this.relation.inverseEntityMetadata\r\n    }\r\n\r\n    /**\r\n     * Alias of the parent of this join.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get parentAlias(): string {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new TypeORMError(\r\n                `Given value must be a string representation of alias property`,\r\n            )\r\n\r\n        return this.relationName.split(\".\")[0]\r\n    }\r\n\r\n    /**\r\n     * Relation property name of the parent.\r\n     * This is used to understand what is joined.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relationProperty(): string | undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new TypeORMError(\r\n                `Given value is a string representation of alias property`,\r\n            )\r\n\r\n        return this.relationName.split(\".\")[1]\r\n    }\r\n\r\n    get junctionAlias(): string {\r\n        const [parentAlias, relationProperty] = this.relationName.split(\".\")\r\n        return parentAlias + \"_\" + relationProperty + \"_rc\"\r\n    }\r\n\r\n    /**\r\n     * Relation of the parent.\r\n     * This is used to understand what is joined.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relation(): RelationMetadata {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new TypeORMError(\r\n                `Given value is a string representation of alias property`,\r\n            )\r\n\r\n        const [parentAlias, propertyPath] = this.relationName.split(\".\")\r\n        const relationOwnerSelection =\r\n            this.expressionMap.findAliasByName(parentAlias)\r\n        const relation =\r\n            relationOwnerSelection.metadata.findRelationWithPropertyPath(\r\n                propertyPath,\r\n            )\r\n        if (!relation)\r\n            throw new TypeORMError(\r\n                `Relation with property path ${propertyPath} in entity was not found.`,\r\n            )\r\n        return relation\r\n    }\r\n\r\n    /**\r\n     * Metadata of the joined entity.\r\n     * If table without entity was joined, then it will return undefined.\r\n     */\r\n    get metadata(): EntityMetadata {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new TypeORMError(\r\n                `Given value is a string representation of alias property`,\r\n            )\r\n\r\n        const parentAlias = this.relationName.split(\".\")[0]\r\n        const selection = this.expressionMap.findAliasByName(parentAlias)\r\n        return selection.metadata\r\n    }\r\n\r\n    get mapToPropertyPropertyName(): string {\r\n        return this.mapToProperty!.split(\".\")[1]\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
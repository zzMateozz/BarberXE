{"version":3,"sources":["../browser/src/query-builder/DeleteQueryBuilder.ts"],"names":[],"mappings":"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","file":"DeleteQueryBuilder.js","sourcesContent":["import { QueryBuilder } from \"./QueryBuilder\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { EntityTarget } from \"../common/EntityTarget\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { WhereExpressionBuilder } from \"./WhereExpressionBuilder\"\r\nimport { Brackets } from \"./Brackets\"\r\nimport { DeleteResult } from \"./result/DeleteResult\"\r\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class DeleteQueryBuilder<Entity extends ObjectLiteral>\r\n    extends QueryBuilder<Entity>\r\n    implements WhereExpressionBuilder\r\n{\r\n    readonly \"@instanceof\" = Symbol.for(\"DeleteQueryBuilder\")\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        connectionOrQueryBuilder: DataSource | QueryBuilder<any>,\r\n        queryRunner?: QueryRunner,\r\n    ) {\r\n        super(connectionOrQueryBuilder as any, queryRunner)\r\n        this.expressionMap.aliasNamePrefixingEnabled = false\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated SQL query without parameters being replaced.\r\n     */\r\n    getQuery(): string {\r\n        let sql = this.createComment()\r\n        sql += this.createCteExpression()\r\n        sql += this.createDeleteExpression()\r\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim())\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<DeleteResult> {\r\n        const [sql, parameters] = this.getQueryAndParameters()\r\n        const queryRunner = this.obtainQueryRunner()\r\n        let transactionStartedByUs: boolean = false\r\n\r\n        try {\r\n            // start transaction if it was enabled\r\n            if (\r\n                this.expressionMap.useTransaction === true &&\r\n                queryRunner.isTransactionActive === false\r\n            ) {\r\n                await queryRunner.startTransaction()\r\n                transactionStartedByUs = true\r\n            }\r\n\r\n            // call before deletion methods in listeners and subscribers\r\n            if (\r\n                this.expressionMap.callListeners === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                await queryRunner.broadcaster.broadcast(\r\n                    \"BeforeRemove\",\r\n                    this.expressionMap.mainAlias!.metadata,\r\n                )\r\n            }\r\n\r\n            // execute query\r\n            const queryResult = await queryRunner.query(sql, parameters, true)\r\n            const deleteResult = DeleteResult.from(queryResult)\r\n\r\n            // call after deletion methods in listeners and subscribers\r\n            if (\r\n                this.expressionMap.callListeners === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                await queryRunner.broadcaster.broadcast(\r\n                    \"AfterRemove\",\r\n                    this.expressionMap.mainAlias!.metadata,\r\n                )\r\n            }\r\n\r\n            // close transaction if we started it\r\n            if (transactionStartedByUs) await queryRunner.commitTransaction()\r\n\r\n            return deleteResult\r\n        } catch (error) {\r\n            // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try {\r\n                    await queryRunner.rollbackTransaction()\r\n                } catch (rollbackError) {}\r\n            }\r\n            throw error\r\n        } finally {\r\n            if (queryRunner !== this.queryRunner) {\r\n                // means we created our own query runner\r\n                await queryRunner.release()\r\n            }\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Specifies FROM which entity's table select/update/delete will be executed.\r\n     * Also sets a main string alias of the selection data.\r\n     */\r\n    from<T extends ObjectLiteral>(\r\n        entityTarget: EntityTarget<T>,\r\n        aliasName?: string,\r\n    ): DeleteQueryBuilder<T> {\r\n        entityTarget = InstanceChecker.isEntitySchema(entityTarget)\r\n            ? entityTarget.options.name\r\n            : entityTarget\r\n        const mainAlias = this.createFromAlias(entityTarget, aliasName)\r\n        this.expressionMap.setMainAlias(mainAlias)\r\n        return this as any as DeleteQueryBuilder<T>\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(\r\n        where:\r\n            | Brackets\r\n            | string\r\n            | ((qb: this) => string)\r\n            | ObjectLiteral\r\n            | ObjectLiteral[],\r\n        parameters?: ObjectLiteral,\r\n    ): this {\r\n        this.expressionMap.wheres = [] // don't move this block below since computeWhereParameter can add where expressions\r\n        const condition = this.getWhereCondition(where)\r\n        if (condition)\r\n            this.expressionMap.wheres = [\r\n                { type: \"simple\", condition: condition },\r\n            ]\r\n        if (parameters) this.setParameters(parameters)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(\r\n        where:\r\n            | Brackets\r\n            | string\r\n            | ((qb: this) => string)\r\n            | ObjectLiteral\r\n            | ObjectLiteral[],\r\n        parameters?: ObjectLiteral,\r\n    ): this {\r\n        this.expressionMap.wheres.push({\r\n            type: \"and\",\r\n            condition: this.getWhereCondition(where),\r\n        })\r\n        if (parameters) this.setParameters(parameters)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(\r\n        where:\r\n            | Brackets\r\n            | string\r\n            | ((qb: this) => string)\r\n            | ObjectLiteral\r\n            | ObjectLiteral[],\r\n        parameters?: ObjectLiteral,\r\n    ): this {\r\n        this.expressionMap.wheres.push({\r\n            type: \"or\",\r\n            condition: this.getWhereCondition(where),\r\n        })\r\n        if (parameters) this.setParameters(parameters)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder with a condition for the given ids.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     */\r\n    whereInIds(ids: any | any[]): this {\r\n        return this.where(this.getWhereInIdsCondition(ids))\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     */\r\n    andWhereInIds(ids: any | any[]): this {\r\n        return this.andWhere(this.getWhereInIdsCondition(ids))\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     */\r\n    orWhereInIds(ids: any | any[]): this {\r\n        return this.orWhere(this.getWhereInIdsCondition(ids))\r\n    }\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    output(columns: string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    output(output: string): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string | string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string | string[]): this {\r\n        return this.returning(output)\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    returning(columns: string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    returning(returning: string): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string | string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string | string[]): this {\r\n        // not all databases support returning/output cause\r\n        if (!this.connection.driver.isReturningSqlSupported(\"delete\")) {\r\n            throw new ReturningStatementNotSupportedError()\r\n        }\r\n\r\n        this.expressionMap.returning = returning\r\n        return this\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates DELETE express used to perform query.\r\n     */\r\n    protected createDeleteExpression() {\r\n        const tableName = this.getTableName(this.getMainTableName())\r\n        const whereExpression = this.createWhereExpression()\r\n        const returningExpression = this.createReturningExpression(\"delete\")\r\n\r\n        if (returningExpression === \"\") {\r\n            return `DELETE FROM ${tableName}${whereExpression}`\r\n        }\r\n        if (this.connection.driver.options.type === \"mssql\") {\r\n            return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`\r\n        }\r\n        return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`\r\n    }\r\n}\r\n"],"sourceRoot":".."}
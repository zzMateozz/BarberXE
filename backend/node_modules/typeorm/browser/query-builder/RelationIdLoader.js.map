{"version":3,"sources":["../browser/src/query-builder/RelationIdLoader.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAGnD;;GAEG;AACH,MAAM,OAAO,gBAAgB;IACzB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YACY,UAAsB,EACpB,WAAqC;QADvC,eAAU,GAAV,UAAU,CAAY;QACpB,gBAAW,GAAX,WAAW,CAA0B;IAChD,CAAC;IAEJ,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,IAAI,CACA,QAA0B,EAC1B,gBAAiD,EACjD,8BAAgE;QAEhE,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC;YAC5C,CAAC,CAAC,gBAAgB;YAClB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAA;QACxB,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,8BAA8B,CAAC;YACjE,CAAC,CAAC,8BAA8B;YAChC,CAAC,CAAC,8BAA8B;gBAChC,CAAC,CAAC,CAAC,8BAA8B,CAAC;gBAClC,CAAC,CAAC,SAAS,CAAA;QAEf,4CAA4C;QAC5C,IAAI,QAAQ,CAAC,YAAY,EAAE,CAAC;YACxB,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAA;QACtE,CAAC;aAAM,IAAI,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,eAAe,EAAE,CAAC;YAC1D,OAAO,IAAI,CAAC,gCAAgC,CACxC,QAAQ,EACR,QAAQ,EACR,eAAe,CAClB,CAAA;QACL,CAAC;aAAM,CAAC;YACJ,6DAA6D;YAC7D,OAAO,IAAI,CAAC,mCAAmC,CAC3C,QAAQ,EACR,QAAQ,EACR,eAAe,CAClB,CAAA;QACL,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iCAAiC,CAInC,QAA0B,EAC1B,kBAA6B,EAC7B,uBAAmC,EACnC,YAAsC;QAEtC,mDAAmD;QACnD,yDAAyD;QACzD,MAAM,MAAM,GAAG,QAAQ,CAAC,YAAY,IAAI,QAAQ,CAAC,WAAW,CAAA;QAC5D,MAAM,QAAQ,GAAS,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC;YACpD,CAAC,CAAC,kBAAkB;YACpB,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAA;QAE1B,IAAI,CAAC,uBAAuB,EAAE,CAAC;YAC3B,uBAAuB,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAC/D,QAAQ,EACR,kBAAkB,EAClB,IAAI,CAAC,WAAW,EAChB,YAAY,CACf,CAAA;YACD,IAAI,CAAC,uBAAuB,CAAC,MAAM;gBAC/B,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;oBAC7B,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS;iBACnC,CAAC,CAAC,CAAA;QACX,CAAC;QACD,+FAA+F;QAC/F,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,IAAI,CAC/B,QAAQ,EACR,kBAAkB,EAClB,uBAAuB,CAC1B,CAAA;QACD,qCAAqC;QACrC,mEAAmE;QACnE,2CAA2C;QAE3C,MAAM,eAAe,GAAS,KAAK,CAAC,OAAO,CAAC,uBAAuB,CAAC;YAChE,CAAC,CAAC,uBAAuB;YACzB,CAAC,CAAC,CAAC,uBAAwB,CAAC,CAAA;QAEhC,IAAI,OAAO,GAAqB,EAAE,EAC9B,cAAc,GAAqB,EAAE,CAAA;QACzC,IAAI,QAAQ,CAAC,iBAAiB,EAAE,CAAC;YAC7B,OAAO,GAAG,QAAQ,CAAC,sBAAuB,CAAC,cAAc,CAAC,GAAG,CACzD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,gBAAiB,CACvC,CAAA;YACD,cAAc,GAAG,QAAQ,CAAC,sBAAuB,CAAC,YAAY,CAAC,GAAG,CAC9D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,gBAAiB,CACvC,CAAA;QACL,CAAC;aAAM,IAAI,QAAQ,CAAC,oBAAoB,EAAE,CAAC;YACvC,OAAO,GAAG,QAAQ,CAAC,sBAAuB,CAAC,YAAY,CAAC,GAAG,CACvD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,gBAAiB,CACvC,CAAA;YACD,cAAc;gBACV,QAAQ,CAAC,sBAAuB,CAAC,cAAc,CAAC,GAAG,CAC/C,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,gBAAiB,CACvC,CAAA;QACT,CAAC;aAAM,IAAI,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,eAAe,EAAE,CAAC;YAC1D,OAAO,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAC9B,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,gBAAiB,CACvC,CAAA;YACD,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAA;QAC3D,CAAC;aAAM,IAAI,QAAQ,CAAC,WAAW,IAAI,QAAQ,CAAC,kBAAkB,EAAE,CAAC;YAC7D,OAAO,GAAG,QAAQ,CAAC,eAAgB,CAAC,cAAc,CAAC,cAAc,CAAA;YACjE,cAAc,GAAG,QAAQ,CAAC,eAAgB,CAAC,WAAW,CAAC,GAAG,CACtD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,gBAAiB,CACvC,CAAA;QACL,CAAC;aAAM,CAAC;QACR,CAAC;QAED,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YAC3B,MAAM,KAAK,GAAwC;gBAC/C,MAAM,EAAE,MAAM;gBACd,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS;aACnC,CAAA;YAED,MAAM,iBAAiB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE;gBACxD,OAAO,cAAc,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE;oBACnC,OAAO,MAAM,CAAC,kBAAkB,CAC5B,MAAM,EACN,UAAU,CACN,MAAM,CAAC,cAAc,CAAC,IAAI;wBACtB,GAAG;wBACH,MAAM,CAAC,iBAAiB,CAC/B,CACJ,CAAA;gBACL,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YACF,IAAI,CAAC,iBAAiB,CAAC,MAAM;gBAAE,OAAO,KAAK,CAAA;YAE3C,eAAe,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;gBACtC,iBAAiB,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;oBACrC,MAAM,oBAAoB,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE;wBAClD,OAAO,MAAM,CAAC,kBAAkB,CAC5B,aAAa,EACb,UAAU,CACN,WAAW,CAAC,UAAU,CAClB,IAAI,CAAC,UAAU,CAAC,MAAM,EACtB,SAAS,EACT,MAAM,CAAC,cAAc,CAAC,IAAI;4BACtB,GAAG;4BACH,QAAQ,CAAC,YAAY,CAAC,OAAO,CACzB,GAAG,EACH,GAAG,CACN;4BACD,GAAG;4BACH,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAC5C,CACJ,CACJ,CAAA;oBACL,CAAC,CAAC,CAAA;oBACF,IAAI,oBAAoB,EAAE,CAAC;wBACvB,IAAI,MAAM,EAAE,CAAC;4BACT,CAAC;4BAAC,KAAK,CAAC,OAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;wBAChD,CAAC;6BAAM,CAAC;4BACJ,KAAK,CAAC,OAAO,GAAG,aAAa,CAAA;wBACjC,CAAC;oBACL,CAAC;gBACL,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YACF,OAAO,KAAK,CAAA;QAChB,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAiCG;IAEH,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACO,iBAAiB,CACvB,QAA0B,EAC1B,QAAyB,EACzB,eAAiC;QAEjC,MAAM,gBAAgB,GAAG,QAAQ,CAAC,sBAAuB,CAAA;QACzD,MAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,CAAA;QACvC,MAAM,OAAO,GAAG,QAAQ,CAAC,QAAQ;YAC7B,CAAC,CAAC,gBAAgB,CAAC,YAAY;YAC/B,CAAC,CAAC,gBAAgB,CAAC,cAAc,CAAA;QACrC,MAAM,cAAc,GAAG,QAAQ,CAAC,QAAQ;YACpC,CAAC,CAAC,gBAAgB,CAAC,cAAc;YACjC,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAA;QACnC,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAE/D,yCAAyC;QACzC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACvB,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CACrC,IAAI,CAAC,UAAU,CAAC,MAAM,EACtB,SAAS,EACT,MAAM,CAAC,gBAAiB,CAAC,cAAc,CAAC,IAAI;gBACxC,GAAG;gBACH,MAAM,CAAC,gBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAC9D,CAAA;YACD,EAAE,CAAC,SAAS,CAAC,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC,CAAA;QACnE,CAAC,CAAC,CAAA;QACF,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAC9B,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CACrC,IAAI,CAAC,UAAU,CAAC,MAAM,EACtB,SAAS,EACT,MAAM,CAAC,gBAAiB,CAAC,cAAc,CAAC,IAAI;gBACxC,GAAG;gBACH,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;gBACvC,GAAG;gBACH,MAAM,CAAC,gBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAC9D,CAAA;YACD,EAAE,CAAC,SAAS,CAAC,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC,CAAA;QACnE,CAAC,CAAC,CAAA;QAEF,wCAAwC;QACxC,IAAI,UAAU,GAAG,EAAE,CAAA;QACnB,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACvB,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CACnC,OAAO,CAAC,CAAC,CAAC,CAAC,gBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CACtD,CAAA;YACD,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAC9B,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,KAAK,KAAK,QAAQ,CACvC,CAAA;YAED,IAAI,aAAa,EAAE,CAAC;gBAChB,UAAU,GAAG,GAAG,SAAS,IACrB,OAAO,CAAC,CAAC,CAAC,CAAC,YACf,QAAQ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAA;YAChC,CAAC;iBAAM,CAAC;gBACJ,EAAE,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;gBAClC,UAAU;oBACN,SAAS;wBACT,GAAG;wBACH,OAAO,CAAC,CAAC,CAAC,CAAC,YAAY;wBACvB,mBAAmB,CAAA,CAAC,6BAA6B;YACzD,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,UAAU;gBACN,GAAG;oBACH,QAAQ;yBACH,GAAG,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;wBACzB,OAAO,OAAO;6BACT,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;4BACZ,MAAM,SAAS,GACX,UAAU;gCACV,WAAW;gCACX,GAAG;gCACH,MAAM,CAAC,YAAY,CAAA;4BACvB,EAAE,CAAC,YAAY,CACX,SAAS,EACT,MAAM,CAAC,gBAAiB,CAAC,cAAc,CACnC,MAAM,CACT,CACJ,CAAA;4BACD,OAAO,CACH,SAAS;gCACT,GAAG;gCACH,MAAM,CAAC,YAAY;gCACnB,MAAM;gCACN,SAAS,CACZ,CAAA;wBACL,CAAC,CAAC;6BACD,IAAI,CAAC,OAAO,CAAC,CAAA;oBACtB,CAAC,CAAC;yBACD,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG,CAAC;yBACzC,IAAI,CAAC,MAAM,CAAC;oBACjB,GAAG,CAAA;QACX,CAAC;QAED,gDAAgD;QAChD,IAAI,UAAU,GAAG,EAAE,CAAA;QACnB,IAAI,eAAe,EAAE,CAAC;YAClB,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC9B,MAAM,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAC1C,cAAc,CAAC,CAAC,CAAC,CAAC,gBAAiB,CAAC,cAAc,CAAC,MAAM,CAAC,CAC7D,CAAA;gBACD,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAC9B,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,KAAK,KAAK,QAAQ,CACvC,CAAA;gBAED,IAAI,aAAa,EAAE,CAAC;oBAChB,UAAU,GAAG,GAAG,SAAS,IACrB,cAAc,CAAC,CAAC,CAAC,CAAC,YACtB,QAAQ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAA;gBAChC,CAAC;qBAAM,CAAC;oBACJ,EAAE,CAAC,YAAY,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;oBAClC,UAAU;wBACN,SAAS;4BACT,GAAG;4BACH,cAAc,CAAC,CAAC,CAAC,CAAC,YAAY;4BAC9B,mBAAmB,CAAA,CAAC,6BAA6B;gBACzD,CAAC;YACL,CAAC;iBAAM,CAAC;gBACJ,UAAU;oBACN,GAAG;wBACH,eAAe;6BACV,GAAG,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;4BACzB,OAAO,cAAc;iCAChB,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gCACZ,MAAM,SAAS,GACX,UAAU;oCACV,WAAW;oCACX,GAAG;oCACH,MAAM,CAAC,YAAY,CAAA;gCACvB,EAAE,CAAC,YAAY,CACX,SAAS,EACT,MAAM,CAAC,gBAAiB,CAAC,cAAc,CACnC,MAAM,CACT,CACJ,CAAA;gCACD,OAAO,CACH,SAAS;oCACT,GAAG;oCACH,MAAM,CAAC,YAAY;oCACnB,MAAM;oCACN,SAAS,CACZ,CAAA;4BACL,CAAC,CAAC;iCACD,IAAI,CAAC,OAAO,CAAC,CAAA;wBACtB,CAAC,CAAC;6BACD,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG,CAAC;6BACzC,IAAI,CAAC,MAAM,CAAC;wBACjB,GAAG,CAAA;YACX,CAAC;QACL,CAAC;QAED,8CAA8C;QAC9C,qEAAqE;QACrE,EAAE;QACF,mBAAmB;QACnB,mDAAmD;QACnD,oDAAoD;QACpD,qCAAqC;QACrC,8BAA8B;QAC9B,wDAAwD;QACxD,iDAAiD;QACjD,2CAA2C;QAC3C,kCAAkC;QAClC,8BAA8B;QAC9B,EAAE;QACF,WAAW;QACX,8BAA8B;QAC9B,IAAI;QAEJ,gBAAgB;QAChB,MAAM,SAAS,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC;aACrC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;aAC3B,IAAI,CAAC,OAAO,CAAC,CAAA;QAClB,OAAO,EAAE;aACJ,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,SAAS,CAAC;aACxC,KAAK,CAAC,SAAS,CAAC;aAChB,UAAU,EAAE,CAAA;IACrB,CAAC;IAED;;OAEG;IACO,gCAAgC,CACtC,QAA0B,EAC1B,QAAyB,EACzB,eAAiC;QAEjC,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAA;QAEpD,sCAAsC;QACtC,oDAAoD;QACpD,MAAM,yBAAyB,GAAG,QAAQ,CAAC,WAAW,CAAC,KAAK,CACxD,CAAC,UAAU,EAAE,EAAE;YACX,OAAO,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,IAAI,CACnD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,KAAK,UAAU,CACpC,CAAA;QACL,CAAC,CACJ,CAAA;QACD,IAAI,eAAe,IAAI,yBAAyB,EAAE,CAAC;YAC/C,IAAI,cAAc,GAAoB,EAAE,CAAA;YACxC,QAAQ,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACxB,IAAI,aAAa,GAAkB,EAAE,CAAA;gBACrC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAC1C,CAAC,aAAa,EAAE,EAAE;oBACd,MAAM,GAAG,GACL,aAAa,CAAC,cAAc,CAAC,IAAI;wBACjC,GAAG;wBACH,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;oBAChD,aAAa,CAAC,GAAG,CAAC;wBACd,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;gBAC5C,CAAC,CACJ,CAAA;gBAED,eAAe,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;oBACtC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;wBACxC,MAAM,iBAAiB,GACnB,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;wBACrC,MAAM,wBAAwB,GAC1B,UAAU,CAAC,gBAAiB,CAAC,cAAc,CACvC,aAAa,CAChB,CAAA;wBACL,IACI,iBAAiB,KAAK,SAAS;4BAC/B,wBAAwB,KAAK,SAAS;4BAEtC,OAAM;wBAEV,IAAI,iBAAiB,KAAK,wBAAwB,EAAE,CAAC;4BACjD,MAAM,GAAG,GACL,UAAU,CAAC,gBAAiB,CAAC,cAAc;iCACtC,IAAI;gCACT,GAAG;gCACH,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;gCACvC,GAAG;gCACH,UAAU,CAAC,gBAAiB,CAAC,YAAY,CAAC,OAAO,CAC7C,GAAG,EACH,GAAG,CACN,CAAA;4BACL,aAAa,CAAC,GAAG,CAAC,GAAG,wBAAwB,CAAA;wBACjD,CAAC;oBACL,CAAC,CAAC,CAAA;gBACN,CAAC,CAAC,CAAA;gBACF,IACI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM;oBACjC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM;wBACzC,QAAQ,CAAC,WAAW,CAAC,MAAM,EACjC,CAAC;oBACC,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;gBACtC,CAAC;YACL,CAAC,CAAC,CAAA;YACF,gDAAgD;YAChD,mDAAmD;YACnD,IAAI,cAAc,CAAC,MAAM,KAAK,QAAQ,CAAC,MAAM;gBACzC,OAAO,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA;QAC9C,CAAC;QAED,6BAA6B;QAC7B,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAC/D,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;YAC7D,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CACrC,IAAI,CAAC,UAAU,CAAC,MAAM,EACtB,SAAS,EACT,aAAa,CAAC,cAAc,CAAC,IAAI;gBAC7B,GAAG;gBACH,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CACnD,CAAA;YACD,EAAE,CAAC,SAAS,CACR,SAAS,GAAG,GAAG,GAAG,aAAa,CAAC,YAAY,EAC5C,UAAU,CACb,CAAA;QACL,CAAC,CAAC,CAAA;QACF,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACpC,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CACrC,IAAI,CAAC,UAAU,CAAC,MAAM,EACtB,SAAS,EACT,MAAM,CAAC,gBAAiB,CAAC,cAAc,CAAC,IAAI;gBACxC,GAAG;gBACH,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;gBACvC,GAAG;gBACH,MAAM,CAAC,gBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAC9D,CAAA;YACD,EAAE,CAAC,SAAS,CAAC,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC,CAAA;QACnE,CAAC,CAAC,CAAA;QAEF,6BAA6B;QAC7B,IAAI,SAAS,GAAW,EAAE,CAAA;QAC1B,IAAI,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACtD,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CACnC,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CACpD,MAAM,CACT,CACJ,CAAA;YACD,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAC9B,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,KAAK,KAAK,QAAQ,CACvC,CAAA;YAED,IAAI,aAAa,EAAE,CAAC;gBAChB,SAAS,GAAG,GAAG,SAAS,IACpB,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,YAC9C,QAAQ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAA;YAChC,CAAC;iBAAM,CAAC;gBACJ,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;gBACjC,SAAS;oBACL,SAAS;wBACT,GAAG;wBACH,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,YAAY;wBACtD,kBAAkB,CAAA,CAAC,6BAA6B;YACxD,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,SAAS,GAAG,QAAQ;iBACf,GAAG,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;gBACzB,OAAO,QAAQ,CAAC,cAAc,CAAC,cAAc;qBACxC,GAAG,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;oBACzB,MAAM,SAAS,GACX,QAAQ,GAAG,WAAW,GAAG,GAAG,GAAG,WAAW,CAAA;oBAC9C,EAAE,CAAC,YAAY,CACX,SAAS,EACT,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAChC,CAAA;oBACD,OAAO,CACH,SAAS;wBACT,GAAG;wBACH,MAAM,CAAC,YAAY;wBACnB,MAAM;wBACN,SAAS,CACZ,CAAA;gBACL,CAAC,CAAC;qBACD,IAAI,CAAC,OAAO,CAAC,CAAA;YACtB,CAAC,CAAC;iBACD,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG,CAAC;iBACzC,IAAI,CAAC,MAAM,CAAC,CAAA;QACrB,CAAC;QAED,gBAAgB;QAChB,OAAO,EAAE;aACJ,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC;aAC/C,KAAK,CAAC,SAAS,CAAC;aAChB,UAAU,EAAE,CAAA;IACrB,CAAC;IAED;;OAEG;IACO,mCAAmC,CACzC,QAA0B,EAC1B,QAAyB,EACzB,eAAiC;QAEjC,QAAQ,GAAG,QAAQ,CAAC,eAAgB,CAAA;QAEpC,IACI,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,MAAM;YAC7C,QAAQ,CAAC,WAAW,CAAC,MAAM,EAC7B,CAAC;YACC,MAAM,qBAAqB,GACvB,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE;gBACpD,OAAO,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;YACtD,CAAC,CAAC,CAAA;YACN,IAAI,qBAAqB,EAAE,CAAC;gBACxB,OAAO,OAAO,CAAC,OAAO,CAClB,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;oBACpB,MAAM,MAAM,GAAkB,EAAE,CAAA;oBAChC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,UAAU;wBAC7C,MAAM,KAAK,GACP,UAAU,CAAC,gBAAiB,CAAC,cAAc,CACvC,MAAM,CACT,CAAA;wBACL,MAAM,cAAc,GAChB,UAAU,CAAC,gBAAiB,CAAC,cAAc;6BACtC,IAAI;4BACT,GAAG;4BACH,UAAU,CAAC,gBAAiB,CAAC,YAAY,CAAC,OAAO,CAC7C,GAAG,EACH,GAAG,CACN,CAAA;wBACL,MAAM,iBAAiB,GACnB,UAAU,CAAC,cAAc,CAAC,IAAI;4BAC9B,GAAG;4BACH,QAAQ,CAAC,eAAgB,CAAC,YAAY,CAAC,OAAO,CAC1C,GAAG,EACH,GAAG,CACN;4BACD,GAAG;4BACH,UAAU,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;wBAC7C,MAAM,CAAC,cAAc,CAAC,GAAG,KAAK,CAAA;wBAC9B,MAAM,CAAC,iBAAiB,CAAC,GAAG,KAAK,CAAA;oBACrC,CAAC,CAAC,CAAA;oBACF,OAAO,MAAM,CAAA;gBACjB,CAAC,CAAC,CACL,CAAA;YACL,CAAC;QACL,CAAC;QAED,MAAM,SAAS,GAAG,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAA;QAEpD,6BAA6B;QAC7B,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAC/D,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;YAC7D,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CACrC,IAAI,CAAC,UAAU,CAAC,MAAM,EACtB,SAAS,EACT,aAAa,CAAC,cAAc,CAAC,IAAI;gBAC7B,GAAG;gBACH,QAAQ,CAAC,eAAgB,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC;gBACxD,GAAG;gBACH,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CACnD,CAAA;YACD,EAAE,CAAC,SAAS,CACR,SAAS,GAAG,GAAG,GAAG,aAAa,CAAC,YAAY,EAC5C,UAAU,CACb,CAAA;QACL,CAAC,CAAC,CAAA;QACF,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACpC,MAAM,UAAU,GAAG,WAAW,CAAC,UAAU,CACrC,IAAI,CAAC,UAAU,CAAC,MAAM,EACtB,SAAS,EACT,MAAM,CAAC,gBAAiB,CAAC,cAAc,CAAC,IAAI;gBACxC,GAAG;gBACH,MAAM,CAAC,gBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAC9D,CAAA;YACD,EAAE,CAAC,SAAS,CAAC,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC,CAAA;QACnE,CAAC,CAAC,CAAA;QAEF,6BAA6B;QAC7B,IAAI,SAAS,GAAW,EAAE,CAAA;QAC1B,IAAI,QAAQ,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACpC,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CACnC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,gBAAiB,CAAC,cAAc,CACpD,MAAM,CACT,CACJ,CAAA;YACD,MAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAC9B,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,KAAK,KAAK,QAAQ,CACvC,CAAA;YAED,IAAI,aAAa,EAAE,CAAC;gBAChB,SAAS,GAAG,GAAG,SAAS,IACpB,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,YAC5B,QAAQ,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAA;YAChC,CAAC;iBAAM,CAAC;gBACJ,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAA;gBACjC,SAAS;oBACL,SAAS;wBACT,GAAG;wBACH,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY;wBACpC,kBAAkB,CAAA,CAAC,6BAA6B;YACxD,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,SAAS,GAAG,QAAQ;iBACf,GAAG,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;gBACzB,OAAO,QAAQ,CAAC,WAAW;qBACtB,GAAG,CAAC,CAAC,UAAU,EAAE,eAAe,EAAE,EAAE;oBACjC,MAAM,SAAS,GACX,QAAQ,GAAG,WAAW,GAAG,GAAG,GAAG,eAAe,CAAA;oBAClD,EAAE,CAAC,YAAY,CACX,SAAS,EACT,UAAU,CAAC,gBAAiB,CAAC,cAAc,CACvC,MAAM,CACT,CACJ,CAAA;oBACD,OAAO,CACH,SAAS;wBACT,GAAG;wBACH,UAAU,CAAC,YAAY;wBACvB,MAAM;wBACN,SAAS,CACZ,CAAA;gBACL,CAAC,CAAC;qBACD,IAAI,CAAC,OAAO,CAAC,CAAA;YACtB,CAAC,CAAC;iBACD,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,GAAG,SAAS,GAAG,GAAG,CAAC;iBACzC,IAAI,CAAC,MAAM,CAAC,CAAA;QACrB,CAAC;QAED,gBAAgB;QAChB,OAAO,EAAE;aACJ,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,EAAE,SAAS,CAAC;aAC/C,KAAK,CAAC,SAAS,CAAC;aAChB,UAAU,EAAE,CAAA;IACrB,CAAC;CACJ","file":"RelationIdLoader.js","sourcesContent":["import { RelationMetadata } from \"../metadata/RelationMetadata\"\r\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { SelectQueryBuilder } from \"./SelectQueryBuilder\"\r\nimport { DriverUtils } from \"../driver/DriverUtils\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\n\r\n/**\r\n * Loads relation ids for the given entities.\r\n */\r\nexport class RelationIdLoader {\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        private connection: DataSource,\r\n        protected queryRunner?: QueryRunner | undefined,\r\n    ) {}\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads relation ids of the given entity or entities.\r\n     */\r\n    load(\r\n        relation: RelationMetadata,\r\n        entityOrEntities: ObjectLiteral | ObjectLiteral[],\r\n        relatedEntityOrRelatedEntities?: ObjectLiteral | ObjectLiteral[],\r\n    ): Promise<any[]> {\r\n        const entities = Array.isArray(entityOrEntities)\r\n            ? entityOrEntities\r\n            : [entityOrEntities]\r\n        const relatedEntities = Array.isArray(relatedEntityOrRelatedEntities)\r\n            ? relatedEntityOrRelatedEntities\r\n            : relatedEntityOrRelatedEntities\r\n            ? [relatedEntityOrRelatedEntities]\r\n            : undefined\r\n\r\n        // load relation ids depend of relation type\r\n        if (relation.isManyToMany) {\r\n            return this.loadForManyToMany(relation, entities, relatedEntities)\r\n        } else if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            return this.loadForManyToOneAndOneToOneOwner(\r\n                relation,\r\n                entities,\r\n                relatedEntities,\r\n            )\r\n        } else {\r\n            // if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            return this.loadForOneToManyAndOneToOneNotOwner(\r\n                relation,\r\n                entities,\r\n                relatedEntities,\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads relation ids of the given entities and groups them into the object with parent and children.\r\n     *\r\n     * todo: extract this method?\r\n     */\r\n    async loadManyToManyRelationIdsAndGroup<\r\n        E1 extends ObjectLiteral,\r\n        E2 extends ObjectLiteral,\r\n    >(\r\n        relation: RelationMetadata,\r\n        entitiesOrEntities: E1 | E1[],\r\n        relatedEntityOrEntities?: E2 | E2[],\r\n        queryBuilder?: SelectQueryBuilder<any>,\r\n    ): Promise<{ entity: E1; related?: E2 | E2[] }[]> {\r\n        // console.log(\"relation:\", relation.propertyName);\r\n        // console.log(\"entitiesOrEntities\", entitiesOrEntities);\r\n        const isMany = relation.isManyToMany || relation.isOneToMany\r\n        const entities: E1[] = Array.isArray(entitiesOrEntities)\r\n            ? entitiesOrEntities\r\n            : [entitiesOrEntities]\r\n\r\n        if (!relatedEntityOrEntities) {\r\n            relatedEntityOrEntities = await this.connection.relationLoader.load(\r\n                relation,\r\n                entitiesOrEntities,\r\n                this.queryRunner,\r\n                queryBuilder,\r\n            )\r\n            if (!relatedEntityOrEntities.length)\r\n                return entities.map((entity) => ({\r\n                    entity: entity,\r\n                    related: isMany ? [] : undefined,\r\n                }))\r\n        }\r\n        // const relationIds = await this.load(relation, relatedEntityOrEntities!, entitiesOrEntities);\r\n        const relationIds = await this.load(\r\n            relation,\r\n            entitiesOrEntities,\r\n            relatedEntityOrEntities,\r\n        )\r\n        // console.log(\"entities\", entities);\r\n        // console.log(\"relatedEntityOrEntities\", relatedEntityOrEntities);\r\n        // console.log(\"relationIds\", relationIds);\r\n\r\n        const relatedEntities: E2[] = Array.isArray(relatedEntityOrEntities)\r\n            ? relatedEntityOrEntities\r\n            : [relatedEntityOrEntities!]\r\n\r\n        let columns: ColumnMetadata[] = [],\r\n            inverseColumns: ColumnMetadata[] = []\r\n        if (relation.isManyToManyOwner) {\r\n            columns = relation.junctionEntityMetadata!.inverseColumns.map(\r\n                (column) => column.referencedColumn!,\r\n            )\r\n            inverseColumns = relation.junctionEntityMetadata!.ownerColumns.map(\r\n                (column) => column.referencedColumn!,\r\n            )\r\n        } else if (relation.isManyToManyNotOwner) {\r\n            columns = relation.junctionEntityMetadata!.ownerColumns.map(\r\n                (column) => column.referencedColumn!,\r\n            )\r\n            inverseColumns =\r\n                relation.junctionEntityMetadata!.inverseColumns.map(\r\n                    (column) => column.referencedColumn!,\r\n                )\r\n        } else if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            columns = relation.joinColumns.map(\r\n                (column) => column.referencedColumn!,\r\n            )\r\n            inverseColumns = relation.entityMetadata.primaryColumns\r\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\r\n            columns = relation.inverseRelation!.entityMetadata.primaryColumns\r\n            inverseColumns = relation.inverseRelation!.joinColumns.map(\r\n                (column) => column.referencedColumn!,\r\n            )\r\n        } else {\r\n        }\r\n\r\n        return entities.map((entity) => {\r\n            const group: { entity: E1; related?: E2 | E2[] } = {\r\n                entity: entity,\r\n                related: isMany ? [] : undefined,\r\n            }\r\n\r\n            const entityRelationIds = relationIds.filter((relationId) => {\r\n                return inverseColumns.every((column) => {\r\n                    return column.compareEntityValue(\r\n                        entity,\r\n                        relationId[\r\n                            column.entityMetadata.name +\r\n                                \"_\" +\r\n                                column.propertyAliasName\r\n                        ],\r\n                    )\r\n                })\r\n            })\r\n            if (!entityRelationIds.length) return group\r\n\r\n            relatedEntities.forEach((relatedEntity) => {\r\n                entityRelationIds.forEach((relationId) => {\r\n                    const relatedEntityMatched = columns.every((column) => {\r\n                        return column.compareEntityValue(\r\n                            relatedEntity,\r\n                            relationId[\r\n                                DriverUtils.buildAlias(\r\n                                    this.connection.driver,\r\n                                    undefined,\r\n                                    column.entityMetadata.name +\r\n                                        \"_\" +\r\n                                        relation.propertyPath.replace(\r\n                                            \".\",\r\n                                            \"_\",\r\n                                        ) +\r\n                                        \"_\" +\r\n                                        column.propertyPath.replace(\".\", \"_\"),\r\n                                )\r\n                            ],\r\n                        )\r\n                    })\r\n                    if (relatedEntityMatched) {\r\n                        if (isMany) {\r\n                            ;(group.related as E2[]).push(relatedEntity)\r\n                        } else {\r\n                            group.related = relatedEntity\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n            return group\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Loads relation ids of the given entities and maps them into the given entity property.\r\n     async loadManyToManyRelationIdsAndMap(\r\n     relation: RelationMetadata,\r\n     entityOrEntities: ObjectLiteral|ObjectLiteral[],\r\n     mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],\r\n     propertyName: string\r\n     ): Promise<void> {\r\n        const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);\r\n        const mapToEntities = mapToEntityOrEntities instanceof Array ? mapToEntityOrEntities : [mapToEntityOrEntities];\r\n        const junctionMetadata = relation.junctionEntityMetadata!;\r\n        const mainAlias = junctionMetadata.name;\r\n        const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\r\n        const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\r\n        mapToEntities.forEach(mapToEntity => {\r\n            mapToEntity[propertyName] = [];\r\n            relationIds.forEach(relationId => {\r\n                const match = inverseColumns.every(column => {\r\n                    return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + \"_\" + column.propertyName];\r\n                });\r\n                if (match) {\r\n                    if (columns.length === 1) {\r\n                        mapToEntity[propertyName].push(relationId[mainAlias + \"_\" + columns[0].propertyName]);\r\n                    } else {\r\n                        const value = {};\r\n                        columns.forEach(column => {\r\n                            column.referencedColumn!.setEntityValue(value, relationId[mainAlias + \"_\" + column.propertyName]);\r\n                        });\r\n                        mapToEntity[propertyName].push(value);\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }*/\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads relation ids for the many-to-many relation.\r\n     */\r\n    protected loadForManyToMany(\r\n        relation: RelationMetadata,\r\n        entities: ObjectLiteral[],\r\n        relatedEntities?: ObjectLiteral[],\r\n    ) {\r\n        const junctionMetadata = relation.junctionEntityMetadata!\r\n        const mainAlias = junctionMetadata.name\r\n        const columns = relation.isOwning\r\n            ? junctionMetadata.ownerColumns\r\n            : junctionMetadata.inverseColumns\r\n        const inverseColumns = relation.isOwning\r\n            ? junctionMetadata.inverseColumns\r\n            : junctionMetadata.ownerColumns\r\n        const qb = this.connection.createQueryBuilder(this.queryRunner)\r\n\r\n        // select all columns from junction table\r\n        columns.forEach((column) => {\r\n            const columnName = DriverUtils.buildAlias(\r\n                this.connection.driver,\r\n                undefined,\r\n                column.referencedColumn!.entityMetadata.name +\r\n                    \"_\" +\r\n                    column.referencedColumn!.propertyPath.replace(\".\", \"_\"),\r\n            )\r\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName)\r\n        })\r\n        inverseColumns.forEach((column) => {\r\n            const columnName = DriverUtils.buildAlias(\r\n                this.connection.driver,\r\n                undefined,\r\n                column.referencedColumn!.entityMetadata.name +\r\n                    \"_\" +\r\n                    relation.propertyPath.replace(\".\", \"_\") +\r\n                    \"_\" +\r\n                    column.referencedColumn!.propertyPath.replace(\".\", \"_\"),\r\n            )\r\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName)\r\n        })\r\n\r\n        // add conditions for the given entities\r\n        let condition1 = \"\"\r\n        if (columns.length === 1) {\r\n            const values = entities.map((entity) =>\r\n                columns[0].referencedColumn!.getEntityValue(entity),\r\n            )\r\n            const areAllNumbers = values.every(\r\n                (value) => typeof value === \"number\",\r\n            )\r\n\r\n            if (areAllNumbers) {\r\n                condition1 = `${mainAlias}.${\r\n                    columns[0].propertyPath\r\n                } IN (${values.join(\", \")})`\r\n            } else {\r\n                qb.setParameter(\"values1\", values)\r\n                condition1 =\r\n                    mainAlias +\r\n                    \".\" +\r\n                    columns[0].propertyPath +\r\n                    \" IN (:...values1)\" // todo: use ANY for postgres\r\n            }\r\n        } else {\r\n            condition1 =\r\n                \"(\" +\r\n                entities\r\n                    .map((entity, entityIndex) => {\r\n                        return columns\r\n                            .map((column) => {\r\n                                const paramName =\r\n                                    \"entity1_\" +\r\n                                    entityIndex +\r\n                                    \"_\" +\r\n                                    column.propertyName\r\n                                qb.setParameter(\r\n                                    paramName,\r\n                                    column.referencedColumn!.getEntityValue(\r\n                                        entity,\r\n                                    ),\r\n                                )\r\n                                return (\r\n                                    mainAlias +\r\n                                    \".\" +\r\n                                    column.propertyPath +\r\n                                    \" = :\" +\r\n                                    paramName\r\n                                )\r\n                            })\r\n                            .join(\" AND \")\r\n                    })\r\n                    .map((condition) => \"(\" + condition + \")\")\r\n                    .join(\" OR \") +\r\n                \")\"\r\n        }\r\n\r\n        // add conditions for the given inverse entities\r\n        let condition2 = \"\"\r\n        if (relatedEntities) {\r\n            if (inverseColumns.length === 1) {\r\n                const values = relatedEntities.map((entity) =>\r\n                    inverseColumns[0].referencedColumn!.getEntityValue(entity),\r\n                )\r\n                const areAllNumbers = values.every(\r\n                    (value) => typeof value === \"number\",\r\n                )\r\n\r\n                if (areAllNumbers) {\r\n                    condition2 = `${mainAlias}.${\r\n                        inverseColumns[0].propertyPath\r\n                    } IN (${values.join(\", \")})`\r\n                } else {\r\n                    qb.setParameter(\"values2\", values)\r\n                    condition2 =\r\n                        mainAlias +\r\n                        \".\" +\r\n                        inverseColumns[0].propertyPath +\r\n                        \" IN (:...values2)\" // todo: use ANY for postgres\r\n                }\r\n            } else {\r\n                condition2 =\r\n                    \"(\" +\r\n                    relatedEntities\r\n                        .map((entity, entityIndex) => {\r\n                            return inverseColumns\r\n                                .map((column) => {\r\n                                    const paramName =\r\n                                        \"entity2_\" +\r\n                                        entityIndex +\r\n                                        \"_\" +\r\n                                        column.propertyName\r\n                                    qb.setParameter(\r\n                                        paramName,\r\n                                        column.referencedColumn!.getEntityValue(\r\n                                            entity,\r\n                                        ),\r\n                                    )\r\n                                    return (\r\n                                        mainAlias +\r\n                                        \".\" +\r\n                                        column.propertyPath +\r\n                                        \" = :\" +\r\n                                        paramName\r\n                                    )\r\n                                })\r\n                                .join(\" AND \")\r\n                        })\r\n                        .map((condition) => \"(\" + condition + \")\")\r\n                        .join(\" OR \") +\r\n                    \")\"\r\n            }\r\n        }\r\n\r\n        // qb.from(junctionMetadata.target, mainAlias)\r\n        //     .where(condition1 + (condition2 ? \" AND \" + condition2 : \"\"));\r\n        //\r\n        // // execute query\r\n        // const { values1, values2 } = qb.getParameters();\r\n        // console.log(`I can do it`, { values1, values2 });\r\n        // if (inverseColumns.length === 1 &&\r\n        //     columns.length === 1 &&\r\n        //     this.connection.driver instanceof SqliteDriver &&\r\n        //     (values1.length + values2.length) > 500 &&\r\n        //     values1.length === values2.length) {\r\n        //     console.log(`I can do it`);\r\n        //     return qb.getRawMany();\r\n        //\r\n        // } else {\r\n        //     return qb.getRawMany();\r\n        // }\r\n\r\n        // execute query\r\n        const condition = [condition1, condition2]\r\n            .filter((v) => v.length > 0)\r\n            .join(\" AND \")\r\n        return qb\r\n            .from(junctionMetadata.target, mainAlias)\r\n            .where(condition)\r\n            .getRawMany()\r\n    }\r\n\r\n    /**\r\n     * Loads relation ids for the many-to-one and one-to-one owner relations.\r\n     */\r\n    protected loadForManyToOneAndOneToOneOwner(\r\n        relation: RelationMetadata,\r\n        entities: ObjectLiteral[],\r\n        relatedEntities?: ObjectLiteral[],\r\n    ) {\r\n        const mainAlias = relation.entityMetadata.targetName\r\n\r\n        // console.log(\"entitiesx\", entities);\r\n        // console.log(\"relatedEntitiesx\", relatedEntities);\r\n        const hasAllJoinColumnsInEntity = relation.joinColumns.every(\r\n            (joinColumn) => {\r\n                return !!relation.entityMetadata.nonVirtualColumns.find(\r\n                    (column) => column === joinColumn,\r\n                )\r\n            },\r\n        )\r\n        if (relatedEntities && hasAllJoinColumnsInEntity) {\r\n            let relationIdMaps: ObjectLiteral[] = []\r\n            entities.forEach((entity) => {\r\n                let relationIdMap: ObjectLiteral = {}\r\n                relation.entityMetadata.primaryColumns.forEach(\r\n                    (primaryColumn) => {\r\n                        const key =\r\n                            primaryColumn.entityMetadata.name +\r\n                            \"_\" +\r\n                            primaryColumn.propertyPath.replace(\".\", \"_\")\r\n                        relationIdMap[key] =\r\n                            primaryColumn.getEntityValue(entity)\r\n                    },\r\n                )\r\n\r\n                relatedEntities.forEach((relatedEntity) => {\r\n                    relation.joinColumns.forEach((joinColumn) => {\r\n                        const entityColumnValue =\r\n                            joinColumn.getEntityValue(entity)\r\n                        const relatedEntityColumnValue =\r\n                            joinColumn.referencedColumn!.getEntityValue(\r\n                                relatedEntity,\r\n                            )\r\n                        if (\r\n                            entityColumnValue === undefined ||\r\n                            relatedEntityColumnValue === undefined\r\n                        )\r\n                            return\r\n\r\n                        if (entityColumnValue === relatedEntityColumnValue) {\r\n                            const key =\r\n                                joinColumn.referencedColumn!.entityMetadata\r\n                                    .name +\r\n                                \"_\" +\r\n                                relation.propertyPath.replace(\".\", \"_\") +\r\n                                \"_\" +\r\n                                joinColumn.referencedColumn!.propertyPath.replace(\r\n                                    \".\",\r\n                                    \"_\",\r\n                                )\r\n                            relationIdMap[key] = relatedEntityColumnValue\r\n                        }\r\n                    })\r\n                })\r\n                if (\r\n                    Object.keys(relationIdMap).length ===\r\n                    relation.entityMetadata.primaryColumns.length +\r\n                        relation.joinColumns.length\r\n                ) {\r\n                    relationIdMaps.push(relationIdMap)\r\n                }\r\n            })\r\n            // console.log(\"relationIdMap\", relationIdMaps);\r\n            // console.log(\"entities.length\", entities.length);\r\n            if (relationIdMaps.length === entities.length)\r\n                return Promise.resolve(relationIdMaps)\r\n        }\r\n\r\n        // select all columns we need\r\n        const qb = this.connection.createQueryBuilder(this.queryRunner)\r\n        relation.entityMetadata.primaryColumns.forEach((primaryColumn) => {\r\n            const columnName = DriverUtils.buildAlias(\r\n                this.connection.driver,\r\n                undefined,\r\n                primaryColumn.entityMetadata.name +\r\n                    \"_\" +\r\n                    primaryColumn.propertyPath.replace(\".\", \"_\"),\r\n            )\r\n            qb.addSelect(\r\n                mainAlias + \".\" + primaryColumn.propertyPath,\r\n                columnName,\r\n            )\r\n        })\r\n        relation.joinColumns.forEach((column) => {\r\n            const columnName = DriverUtils.buildAlias(\r\n                this.connection.driver,\r\n                undefined,\r\n                column.referencedColumn!.entityMetadata.name +\r\n                    \"_\" +\r\n                    relation.propertyPath.replace(\".\", \"_\") +\r\n                    \"_\" +\r\n                    column.referencedColumn!.propertyPath.replace(\".\", \"_\"),\r\n            )\r\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName)\r\n        })\r\n\r\n        // add condition for entities\r\n        let condition: string = \"\"\r\n        if (relation.entityMetadata.primaryColumns.length === 1) {\r\n            const values = entities.map((entity) =>\r\n                relation.entityMetadata.primaryColumns[0].getEntityValue(\r\n                    entity,\r\n                ),\r\n            )\r\n            const areAllNumbers = values.every(\r\n                (value) => typeof value === \"number\",\r\n            )\r\n\r\n            if (areAllNumbers) {\r\n                condition = `${mainAlias}.${\r\n                    relation.entityMetadata.primaryColumns[0].propertyPath\r\n                } IN (${values.join(\", \")})`\r\n            } else {\r\n                qb.setParameter(\"values\", values)\r\n                condition =\r\n                    mainAlias +\r\n                    \".\" +\r\n                    relation.entityMetadata.primaryColumns[0].propertyPath +\r\n                    \" IN (:...values)\" // todo: use ANY for postgres\r\n            }\r\n        } else {\r\n            condition = entities\r\n                .map((entity, entityIndex) => {\r\n                    return relation.entityMetadata.primaryColumns\r\n                        .map((column, columnIndex) => {\r\n                            const paramName =\r\n                                \"entity\" + entityIndex + \"_\" + columnIndex\r\n                            qb.setParameter(\r\n                                paramName,\r\n                                column.getEntityValue(entity),\r\n                            )\r\n                            return (\r\n                                mainAlias +\r\n                                \".\" +\r\n                                column.propertyPath +\r\n                                \" = :\" +\r\n                                paramName\r\n                            )\r\n                        })\r\n                        .join(\" AND \")\r\n                })\r\n                .map((condition) => \"(\" + condition + \")\")\r\n                .join(\" OR \")\r\n        }\r\n\r\n        // execute query\r\n        return qb\r\n            .from(relation.entityMetadata.target, mainAlias)\r\n            .where(condition)\r\n            .getRawMany()\r\n    }\r\n\r\n    /**\r\n     * Loads relation ids for the one-to-many and one-to-one not owner relations.\r\n     */\r\n    protected loadForOneToManyAndOneToOneNotOwner(\r\n        relation: RelationMetadata,\r\n        entities: ObjectLiteral[],\r\n        relatedEntities?: ObjectLiteral[],\r\n    ) {\r\n        relation = relation.inverseRelation!\r\n\r\n        if (\r\n            relation.entityMetadata.primaryColumns.length ===\r\n            relation.joinColumns.length\r\n        ) {\r\n            const sameReferencedColumns =\r\n                relation.entityMetadata.primaryColumns.every((column) => {\r\n                    return relation.joinColumns.indexOf(column) !== -1\r\n                })\r\n            if (sameReferencedColumns) {\r\n                return Promise.resolve(\r\n                    entities.map((entity) => {\r\n                        const result: ObjectLiteral = {}\r\n                        relation.joinColumns.forEach(function (joinColumn) {\r\n                            const value =\r\n                                joinColumn.referencedColumn!.getEntityValue(\r\n                                    entity,\r\n                                )\r\n                            const joinColumnName =\r\n                                joinColumn.referencedColumn!.entityMetadata\r\n                                    .name +\r\n                                \"_\" +\r\n                                joinColumn.referencedColumn!.propertyPath.replace(\r\n                                    \".\",\r\n                                    \"_\",\r\n                                )\r\n                            const primaryColumnName =\r\n                                joinColumn.entityMetadata.name +\r\n                                \"_\" +\r\n                                relation.inverseRelation!.propertyPath.replace(\r\n                                    \".\",\r\n                                    \"_\",\r\n                                ) +\r\n                                \"_\" +\r\n                                joinColumn.propertyPath.replace(\".\", \"_\")\r\n                            result[joinColumnName] = value\r\n                            result[primaryColumnName] = value\r\n                        })\r\n                        return result\r\n                    }),\r\n                )\r\n            }\r\n        }\r\n\r\n        const mainAlias = relation.entityMetadata.targetName\r\n\r\n        // select all columns we need\r\n        const qb = this.connection.createQueryBuilder(this.queryRunner)\r\n        relation.entityMetadata.primaryColumns.forEach((primaryColumn) => {\r\n            const columnName = DriverUtils.buildAlias(\r\n                this.connection.driver,\r\n                undefined,\r\n                primaryColumn.entityMetadata.name +\r\n                    \"_\" +\r\n                    relation.inverseRelation!.propertyPath.replace(\".\", \"_\") +\r\n                    \"_\" +\r\n                    primaryColumn.propertyPath.replace(\".\", \"_\"),\r\n            )\r\n            qb.addSelect(\r\n                mainAlias + \".\" + primaryColumn.propertyPath,\r\n                columnName,\r\n            )\r\n        })\r\n        relation.joinColumns.forEach((column) => {\r\n            const columnName = DriverUtils.buildAlias(\r\n                this.connection.driver,\r\n                undefined,\r\n                column.referencedColumn!.entityMetadata.name +\r\n                    \"_\" +\r\n                    column.referencedColumn!.propertyPath.replace(\".\", \"_\"),\r\n            )\r\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName)\r\n        })\r\n\r\n        // add condition for entities\r\n        let condition: string = \"\"\r\n        if (relation.joinColumns.length === 1) {\r\n            const values = entities.map((entity) =>\r\n                relation.joinColumns[0].referencedColumn!.getEntityValue(\r\n                    entity,\r\n                ),\r\n            )\r\n            const areAllNumbers = values.every(\r\n                (value) => typeof value === \"number\",\r\n            )\r\n\r\n            if (areAllNumbers) {\r\n                condition = `${mainAlias}.${\r\n                    relation.joinColumns[0].propertyPath\r\n                } IN (${values.join(\", \")})`\r\n            } else {\r\n                qb.setParameter(\"values\", values)\r\n                condition =\r\n                    mainAlias +\r\n                    \".\" +\r\n                    relation.joinColumns[0].propertyPath +\r\n                    \" IN (:...values)\" // todo: use ANY for postgres\r\n            }\r\n        } else {\r\n            condition = entities\r\n                .map((entity, entityIndex) => {\r\n                    return relation.joinColumns\r\n                        .map((joinColumn, joinColumnIndex) => {\r\n                            const paramName =\r\n                                \"entity\" + entityIndex + \"_\" + joinColumnIndex\r\n                            qb.setParameter(\r\n                                paramName,\r\n                                joinColumn.referencedColumn!.getEntityValue(\r\n                                    entity,\r\n                                ),\r\n                            )\r\n                            return (\r\n                                mainAlias +\r\n                                \".\" +\r\n                                joinColumn.propertyPath +\r\n                                \" = :\" +\r\n                                paramName\r\n                            )\r\n                        })\r\n                        .join(\" AND \")\r\n                })\r\n                .map((condition) => \"(\" + condition + \")\")\r\n                .join(\" OR \")\r\n        }\r\n\r\n        // execute query\r\n        return qb\r\n            .from(relation.entityMetadata.target, mainAlias)\r\n            .where(condition)\r\n            .getRawMany()\r\n    }\r\n}\r\n"],"sourceRoot":".."}
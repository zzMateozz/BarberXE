{"version":3,"sources":["../browser/src/query-builder/RelationUpdater.ts"],"names":[],"mappings":"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","file":"RelationUpdater.js","sourcesContent":["import { QueryBuilder } from \"./QueryBuilder\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { QueryExpressionMap } from \"./QueryExpressionMap\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\n\r\n/**\r\n * Allows to work with entity relations and perform specific operations with those relations.\r\n *\r\n * todo: add transactions everywhere\r\n */\r\nexport class RelationUpdater {\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        protected queryBuilder: QueryBuilder<any>,\r\n        protected expressionMap: QueryExpressionMap,\r\n    ) {}\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs set or add operation on a relation.\r\n     */\r\n    async update(value: any | any[]): Promise<void> {\r\n        const relation = this.expressionMap.relationMetadata\r\n\r\n        if (relation.isManyToOne || relation.isOneToOneOwner) {\r\n            const updateSet = relation.joinColumns.reduce(\r\n                (updateSet, joinColumn) => {\r\n                    const relationValue = ObjectUtils.isObject(value)\r\n                        ? joinColumn.referencedColumn!.getEntityValue(value)\r\n                        : value\r\n                    joinColumn.setEntityValue(updateSet, relationValue)\r\n                    return updateSet\r\n                },\r\n                {} as any,\r\n            )\r\n\r\n            if (\r\n                !this.expressionMap.of ||\r\n                (Array.isArray(this.expressionMap.of) &&\r\n                    !this.expressionMap.of.length)\r\n            )\r\n                return\r\n\r\n            await this.queryBuilder\r\n                .createQueryBuilder()\r\n                .update(relation.entityMetadata.target)\r\n                .set(updateSet)\r\n                .whereInIds(this.expressionMap.of)\r\n                .execute()\r\n        } else if (\r\n            (relation.isOneToOneNotOwner || relation.isOneToMany) &&\r\n            value === null\r\n        ) {\r\n            // we handle null a bit different way\r\n\r\n            const updateSet: ObjectLiteral = {}\r\n            relation.inverseRelation!.joinColumns.forEach((column) => {\r\n                updateSet[column.propertyName] = null\r\n            })\r\n\r\n            const ofs = Array.isArray(this.expressionMap.of)\r\n                ? this.expressionMap.of\r\n                : [this.expressionMap.of]\r\n            const parameters: ObjectLiteral = {}\r\n            const conditions: string[] = []\r\n            ofs.forEach((of, ofIndex) => {\r\n                relation.inverseRelation!.joinColumns.map(\r\n                    (column, columnIndex) => {\r\n                        const parameterName =\r\n                            \"joinColumn_\" + ofIndex + \"_\" + columnIndex\r\n                        parameters[parameterName] = ObjectUtils.isObject(of)\r\n                            ? column.referencedColumn!.getEntityValue(of)\r\n                            : of\r\n                        conditions.push(\r\n                            `${column.propertyPath} = :${parameterName}`,\r\n                        )\r\n                    },\r\n                )\r\n            })\r\n            const condition = conditions\r\n                .map((str) => \"(\" + str + \")\")\r\n                .join(\" OR \")\r\n            if (!condition) return\r\n\r\n            await this.queryBuilder\r\n                .createQueryBuilder()\r\n                .update(relation.inverseEntityMetadata.target)\r\n                .set(updateSet)\r\n                .where(condition)\r\n                .setParameters(parameters)\r\n                .execute()\r\n        } else if (relation.isOneToOneNotOwner || relation.isOneToMany) {\r\n            if (Array.isArray(this.expressionMap.of))\r\n                throw new TypeORMError(\r\n                    `You cannot update relations of multiple entities with the same related object. Provide a single entity into .of method.`,\r\n                )\r\n\r\n            const of = this.expressionMap.of\r\n            const updateSet = relation.inverseRelation!.joinColumns.reduce(\r\n                (updateSet, joinColumn) => {\r\n                    const relationValue = ObjectUtils.isObject(of)\r\n                        ? joinColumn.referencedColumn!.getEntityValue(of)\r\n                        : of\r\n                    joinColumn.setEntityValue(updateSet, relationValue)\r\n                    return updateSet\r\n                },\r\n                {} as any,\r\n            )\r\n\r\n            if (!value || (Array.isArray(value) && !value.length)) return\r\n\r\n            await this.queryBuilder\r\n                .createQueryBuilder()\r\n                .update(relation.inverseEntityMetadata.target)\r\n                .set(updateSet)\r\n                .whereInIds(value)\r\n                .execute()\r\n        } else {\r\n            // many to many\r\n            const junctionMetadata = relation.junctionEntityMetadata!\r\n            const ofs = Array.isArray(this.expressionMap.of)\r\n                ? this.expressionMap.of\r\n                : [this.expressionMap.of]\r\n            const values = Array.isArray(value) ? value : [value]\r\n            const firstColumnValues = relation.isManyToManyOwner ? ofs : values\r\n            const secondColumnValues = relation.isManyToManyOwner ? values : ofs\r\n\r\n            const bulkInserted: ObjectLiteral[] = []\r\n            firstColumnValues.forEach((firstColumnVal) => {\r\n                secondColumnValues.forEach((secondColumnVal) => {\r\n                    const inserted: ObjectLiteral = {}\r\n                    junctionMetadata.ownerColumns.forEach((column) => {\r\n                        inserted[column.databaseName] = ObjectUtils.isObject(\r\n                            firstColumnVal,\r\n                        )\r\n                            ? column.referencedColumn!.getEntityValue(\r\n                                  firstColumnVal,\r\n                              )\r\n                            : firstColumnVal\r\n                    })\r\n                    junctionMetadata.inverseColumns.forEach((column) => {\r\n                        inserted[column.databaseName] = ObjectUtils.isObject(\r\n                            secondColumnVal,\r\n                        )\r\n                            ? column.referencedColumn!.getEntityValue(\r\n                                  secondColumnVal,\r\n                              )\r\n                            : secondColumnVal\r\n                    })\r\n                    bulkInserted.push(inserted)\r\n                })\r\n            })\r\n\r\n            if (!bulkInserted.length) return\r\n\r\n            if (\r\n                this.queryBuilder.connection.driver.options.type === \"oracle\" ||\r\n                this.queryBuilder.connection.driver.options.type === \"sap\"\r\n            ) {\r\n                await Promise.all(\r\n                    bulkInserted.map((value) => {\r\n                        return this.queryBuilder\r\n                            .createQueryBuilder()\r\n                            .insert()\r\n                            .into(junctionMetadata.tableName)\r\n                            .values(value)\r\n                            .execute()\r\n                    }),\r\n                )\r\n            } else {\r\n                await this.queryBuilder\r\n                    .createQueryBuilder()\r\n                    .insert()\r\n                    .into(junctionMetadata.tableName)\r\n                    .values(bulkInserted)\r\n                    .execute()\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
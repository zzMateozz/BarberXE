{"version":3,"sources":["../browser/src/query-builder/JoinAttribute.ts"],"names":[],"mappings":"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","file":"JoinAttribute.js","sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\r\nimport { QueryBuilderUtils } from \"./QueryBuilderUtils\"\r\nimport { QueryExpressionMap } from \"./QueryExpressionMap\"\r\nimport { Alias } from \"./Alias\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { DriverUtils } from \"../driver/DriverUtils\"\r\n\r\n/**\r\n * Stores all join attributes which will be used to build a JOIN query.\r\n */\r\nexport class JoinAttribute {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Join direction.\r\n     */\r\n    direction: \"LEFT\" | \"INNER\"\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias: Alias\r\n\r\n    /**\r\n     * Joined table, entity target, or relation in \"post.category\" format.\r\n     */\r\n    entityOrProperty: Function | string\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    condition?: string\r\n\r\n    /**\r\n     * Property + alias of the object where to joined data should be mapped.\r\n     */\r\n    mapToProperty?: string\r\n\r\n    /**\r\n     * Indicates if user maps one or many objects from the join.\r\n     */\r\n    isMappingMany?: boolean\r\n\r\n    /**\r\n     * Useful when the joined expression is a custom query to support mapping.\r\n     */\r\n    mapAsEntity?: Function | string\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        private connection: DataSource,\r\n        private queryExpressionMap: QueryExpressionMap,\r\n        joinAttribute?: JoinAttribute,\r\n    ) {\r\n        if (joinAttribute) {\r\n            ObjectUtils.assign(this, joinAttribute)\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    get isMany(): boolean {\r\n        if (this.isMappingMany !== undefined) return this.isMappingMany\r\n\r\n        if (this.relation)\r\n            return this.relation.isManyToMany || this.relation.isOneToMany\r\n\r\n        return false\r\n    }\r\n\r\n    isSelectedCache: boolean\r\n    isSelectedEvaluated: boolean = false\r\n    /**\r\n     * Indicates if this join is selected.\r\n     */\r\n    get isSelected(): boolean {\r\n        if (!this.isSelectedEvaluated) {\r\n            let getValue = () => {\r\n                for (const select of this.queryExpressionMap.selects) {\r\n                    if (select.selection === this.alias.name) return true\r\n\r\n                    if (\r\n                        this.metadata &&\r\n                        !!this.metadata.columns.find(\r\n                            (column) =>\r\n                                select.selection ===\r\n                                this.alias.name + \".\" + column.propertyPath,\r\n                        )\r\n                    )\r\n                        return true\r\n                }\r\n\r\n                return false\r\n            }\r\n            this.isSelectedCache = getValue()\r\n            this.isSelectedEvaluated = true\r\n        }\r\n        return this.isSelectedCache\r\n    }\r\n\r\n    /**\r\n     * Name of the table which we should join.\r\n     */\r\n    get tablePath(): string {\r\n        return this.metadata\r\n            ? this.metadata.tablePath\r\n            : (this.entityOrProperty as string)\r\n    }\r\n\r\n    /**\r\n     * Alias of the parent of this join.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get parentAlias(): string | undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n            return undefined\r\n\r\n        return this.entityOrProperty.substr(\r\n            0,\r\n            this.entityOrProperty.indexOf(\".\"),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Relation property name of the parent.\r\n     * This is used to understand what is joined.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relationPropertyPath(): string | undefined {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n            return undefined\r\n\r\n        return this.entityOrProperty.substr(\r\n            this.entityOrProperty.indexOf(\".\") + 1,\r\n        )\r\n    }\r\n\r\n    relationCache: RelationMetadata | undefined\r\n    relationEvaluated: boolean = false\r\n    /**\r\n     * Relation of the parent.\r\n     * This is used to understand what is joined.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     * Relation can be undefined if entityOrProperty is regular entity or custom table.\r\n     */\r\n    get relation(): RelationMetadata | undefined {\r\n        if (!this.relationEvaluated) {\r\n            let getValue = () => {\r\n                if (!QueryBuilderUtils.isAliasProperty(this.entityOrProperty))\r\n                    return undefined\r\n\r\n                const relationOwnerSelection =\r\n                    this.queryExpressionMap.findAliasByName(this.parentAlias!)\r\n                let relation =\r\n                    relationOwnerSelection.metadata.findRelationWithPropertyPath(\r\n                        this.relationPropertyPath!,\r\n                    )\r\n\r\n                if (relation) {\r\n                    return relation\r\n                }\r\n\r\n                if (relationOwnerSelection.metadata.parentEntityMetadata) {\r\n                    relation =\r\n                        relationOwnerSelection.metadata.parentEntityMetadata.findRelationWithPropertyPath(\r\n                            this.relationPropertyPath!,\r\n                        )\r\n                    if (relation) {\r\n                        return relation\r\n                    }\r\n                }\r\n\r\n                throw new TypeORMError(\r\n                    `Relation with property path ${this.relationPropertyPath} in entity was not found.`,\r\n                )\r\n            }\r\n            this.relationCache = getValue.bind(this)()\r\n            this.relationEvaluated = true\r\n        }\r\n        return this.relationCache\r\n    }\r\n\r\n    /**\r\n     * Metadata of the joined entity.\r\n     * If table without entity was joined, then it will return undefined.\r\n     */\r\n    get metadata(): EntityMetadata | undefined {\r\n        // entityOrProperty is relation, e.g. \"post.category\"\r\n        if (this.relation) return this.relation.inverseEntityMetadata\r\n\r\n        // entityOrProperty is Entity class\r\n        if (this.connection.hasMetadata(this.entityOrProperty))\r\n            return this.connection.getMetadata(this.entityOrProperty)\r\n\r\n        // Overriden mapping entity provided for leftJoinAndMapOne with custom query builder\r\n        if (this.mapAsEntity && this.connection.hasMetadata(this.mapAsEntity)) {\r\n            return this.connection.getMetadata(this.mapAsEntity)\r\n        }\r\n\r\n        return undefined\r\n\r\n        /*if (typeof this.entityOrProperty === \"string\") { // entityOrProperty is a custom table\r\n\r\n            // first try to find entity with such name, this is needed when entity does not have a target class,\r\n            // and its target is a string name (scenario when plain old javascript is used or entity schema is loaded from files)\r\n            const metadata = this.connection.entityMetadatas.find(metadata => metadata.name === this.entityOrProperty);\r\n            if (metadata)\r\n                return metadata;\r\n\r\n            // check if we have entity with such table name, and use its metadata if found\r\n            return this.connection.entityMetadatas.find(metadata => metadata.tableName === this.entityOrProperty);\r\n        }*/\r\n    }\r\n\r\n    /**\r\n     * Generates alias of junction table, whose ids we get.\r\n     */\r\n    get junctionAlias(): string {\r\n        if (!this.relation) {\r\n            throw new TypeORMError(\r\n                `Cannot get junction table for join without relation.`,\r\n            )\r\n        }\r\n        if (typeof this.entityOrProperty !== \"string\") {\r\n            throw new TypeORMError(`Junction property is not defined.`)\r\n        }\r\n\r\n        const aliasProperty = this.entityOrProperty.substr(\r\n            0,\r\n            this.entityOrProperty.indexOf(\".\"),\r\n        )\r\n\r\n        if (this.relation.isOwning) {\r\n            return DriverUtils.buildAlias(\r\n                this.connection.driver,\r\n                undefined,\r\n                aliasProperty,\r\n                this.alias.name,\r\n            )\r\n        } else {\r\n            return DriverUtils.buildAlias(\r\n                this.connection.driver,\r\n                undefined,\r\n                this.alias.name,\r\n                aliasProperty,\r\n            )\r\n        }\r\n    }\r\n\r\n    get mapToPropertyParentAlias(): string | undefined {\r\n        if (!this.mapToProperty) return undefined\r\n\r\n        return this.mapToProperty!.split(\".\")[0]\r\n    }\r\n\r\n    get mapToPropertyPropertyName(): string | undefined {\r\n        if (!this.mapToProperty) return undefined\r\n\r\n        return this.mapToProperty!.split(\".\")[1]\r\n    }\r\n}\r\n"],"sourceRoot":".."}
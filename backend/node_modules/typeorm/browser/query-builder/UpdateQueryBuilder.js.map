{"version":3,"sources":["../browser/src/query-builder/UpdateQueryBuilder.ts"],"names":[],"mappings":"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","file":"UpdateQueryBuilder.js","sourcesContent":["import { ColumnMetadata } from \"../metadata/ColumnMetadata\"\r\nimport { QueryBuilder } from \"./QueryBuilder\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { WhereExpressionBuilder } from \"./WhereExpressionBuilder\"\r\nimport { Brackets } from \"./Brackets\"\r\nimport { UpdateResult } from \"./result/UpdateResult\"\r\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\"\r\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\"\r\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\"\r\nimport { OrderByCondition } from \"../find-options/OrderByCondition\"\r\nimport { LimitOnUpdateNotSupportedError } from \"../error/LimitOnUpdateNotSupportedError\"\r\nimport { UpdateValuesMissingError } from \"../error/UpdateValuesMissingError\"\r\nimport { QueryDeepPartialEntity } from \"./QueryPartialEntity\"\r\nimport { AuroraMysqlDriver } from \"../driver/aurora-mysql/AuroraMysqlDriver\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { EntityPropertyNotFoundError } from \"../error/EntityPropertyNotFoundError\"\r\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\"\r\nimport { DriverUtils } from \"../driver/DriverUtils\"\r\n\r\n/**\r\n * Allows to build complex sql queries in a fashion way and execute those queries.\r\n */\r\nexport class UpdateQueryBuilder<Entity extends ObjectLiteral>\r\n    extends QueryBuilder<Entity>\r\n    implements WhereExpressionBuilder\r\n{\r\n    readonly \"@instanceof\" = Symbol.for(\"UpdateQueryBuilder\")\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        connectionOrQueryBuilder: DataSource | QueryBuilder<any>,\r\n        queryRunner?: QueryRunner,\r\n    ) {\r\n        super(connectionOrQueryBuilder as any, queryRunner)\r\n        this.expressionMap.aliasNamePrefixingEnabled = false\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets generated SQL query without parameters being replaced.\r\n     */\r\n    getQuery(): string {\r\n        let sql = this.createComment()\r\n        sql += this.createCteExpression()\r\n        sql += this.createUpdateExpression()\r\n        sql += this.createOrderByExpression()\r\n        sql += this.createLimitExpression()\r\n        return this.replacePropertyNamesForTheWholeQuery(sql.trim())\r\n    }\r\n\r\n    /**\r\n     * Executes sql generated by query builder and returns raw database results.\r\n     */\r\n    async execute(): Promise<UpdateResult> {\r\n        const queryRunner = this.obtainQueryRunner()\r\n        let transactionStartedByUs: boolean = false\r\n\r\n        try {\r\n            // start transaction if it was enabled\r\n            if (\r\n                this.expressionMap.useTransaction === true &&\r\n                queryRunner.isTransactionActive === false\r\n            ) {\r\n                await queryRunner.startTransaction()\r\n                transactionStartedByUs = true\r\n            }\r\n\r\n            // call before updation methods in listeners and subscribers\r\n            if (\r\n                this.expressionMap.callListeners === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                await queryRunner.broadcaster.broadcast(\r\n                    \"BeforeUpdate\",\r\n                    this.expressionMap.mainAlias!.metadata,\r\n                    this.expressionMap.valuesSet,\r\n                )\r\n            }\r\n\r\n            let declareSql: string | null = null\r\n            let selectOutputSql: string | null = null\r\n\r\n            // if update entity mode is enabled we may need extra columns for the returning statement\r\n            const returningResultsEntityUpdator =\r\n                new ReturningResultsEntityUpdator(\r\n                    queryRunner,\r\n                    this.expressionMap,\r\n                )\r\n\r\n            const returningColumns: ColumnMetadata[] = []\r\n\r\n            if (\r\n                Array.isArray(this.expressionMap.returning) &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                for (const columnPath of this.expressionMap.returning) {\r\n                    returningColumns.push(\r\n                        ...this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(\r\n                            columnPath,\r\n                        ),\r\n                    )\r\n                }\r\n            }\r\n\r\n            if (\r\n                this.expressionMap.updateEntity === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata &&\r\n                this.expressionMap.whereEntities.length > 0\r\n            ) {\r\n                this.expressionMap.extraReturningColumns =\r\n                    returningResultsEntityUpdator.getUpdationReturningColumns()\r\n\r\n                returningColumns.push(\r\n                    ...this.expressionMap.extraReturningColumns.filter(\r\n                        (c) => !returningColumns.includes(c),\r\n                    ),\r\n                )\r\n            }\r\n\r\n            if (\r\n                returningColumns.length > 0 &&\r\n                this.connection.driver.options.type === \"mssql\"\r\n            ) {\r\n                declareSql = (\r\n                    this.connection.driver as SqlServerDriver\r\n                ).buildTableVariableDeclaration(\r\n                    \"@OutputTable\",\r\n                    returningColumns,\r\n                )\r\n                selectOutputSql = `SELECT * FROM @OutputTable`\r\n            }\r\n\r\n            // execute update query\r\n            const [updateSql, parameters] = this.getQueryAndParameters()\r\n\r\n            const statements = [declareSql, updateSql, selectOutputSql]\r\n            const queryResult = await queryRunner.query(\r\n                statements.filter((sql) => sql != null).join(\";\\n\\n\"),\r\n                parameters,\r\n                true,\r\n            )\r\n            const updateResult = UpdateResult.from(queryResult)\r\n\r\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\r\n            if (\r\n                this.expressionMap.updateEntity === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata &&\r\n                this.expressionMap.whereEntities.length > 0\r\n            ) {\r\n                await returningResultsEntityUpdator.update(\r\n                    updateResult,\r\n                    this.expressionMap.whereEntities,\r\n                )\r\n            }\r\n\r\n            // call after updation methods in listeners and subscribers\r\n            if (\r\n                this.expressionMap.callListeners === true &&\r\n                this.expressionMap.mainAlias!.hasMetadata\r\n            ) {\r\n                await queryRunner.broadcaster.broadcast(\r\n                    \"AfterUpdate\",\r\n                    this.expressionMap.mainAlias!.metadata,\r\n                    this.expressionMap.valuesSet,\r\n                )\r\n            }\r\n\r\n            // close transaction if we started it\r\n            if (transactionStartedByUs) await queryRunner.commitTransaction()\r\n\r\n            return updateResult\r\n        } catch (error) {\r\n            // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try {\r\n                    await queryRunner.rollbackTransaction()\r\n                } catch (rollbackError) {}\r\n            }\r\n            throw error\r\n        } finally {\r\n            if (queryRunner !== this.queryRunner) {\r\n                // means we created our own query runner\r\n                await queryRunner.release()\r\n            }\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Values needs to be updated.\r\n     */\r\n    set(values: QueryDeepPartialEntity<Entity>): this {\r\n        this.expressionMap.valuesSet = values\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    where(\r\n        where:\r\n            | string\r\n            | ((qb: this) => string)\r\n            | Brackets\r\n            | ObjectLiteral\r\n            | ObjectLiteral[],\r\n        parameters?: ObjectLiteral,\r\n    ): this {\r\n        this.expressionMap.wheres = [] // don't move this block below since computeWhereParameter can add where expressions\r\n        const condition = this.getWhereCondition(where)\r\n        if (condition)\r\n            this.expressionMap.wheres = [\r\n                { type: \"simple\", condition: condition },\r\n            ]\r\n        if (parameters) this.setParameters(parameters)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    andWhere(\r\n        where:\r\n            | string\r\n            | ((qb: this) => string)\r\n            | Brackets\r\n            | ObjectLiteral\r\n            | ObjectLiteral[],\r\n        parameters?: ObjectLiteral,\r\n    ): this {\r\n        this.expressionMap.wheres.push({\r\n            type: \"and\",\r\n            condition: this.getWhereCondition(where),\r\n        })\r\n        if (parameters) this.setParameters(parameters)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE condition in the query builder.\r\n     * Additionally you can add parameters used in where expression.\r\n     */\r\n    orWhere(\r\n        where:\r\n            | string\r\n            | ((qb: this) => string)\r\n            | Brackets\r\n            | ObjectLiteral\r\n            | ObjectLiteral[],\r\n        parameters?: ObjectLiteral,\r\n    ): this {\r\n        this.expressionMap.wheres.push({\r\n            type: \"or\",\r\n            condition: this.getWhereCondition(where),\r\n        })\r\n        if (parameters) this.setParameters(parameters)\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets WHERE condition in the query builder with a condition for the given ids.\r\n     * If you had previously WHERE expression defined,\r\n     * calling this function will override previously set WHERE conditions.\r\n     */\r\n    whereInIds(ids: any | any[]): this {\r\n        return this.where(this.getWhereInIdsCondition(ids))\r\n    }\r\n\r\n    /**\r\n     * Adds new AND WHERE with conditions for the given ids.\r\n     */\r\n    andWhereInIds(ids: any | any[]): this {\r\n        return this.andWhere(this.getWhereInIdsCondition(ids))\r\n    }\r\n\r\n    /**\r\n     * Adds new OR WHERE with conditions for the given ids.\r\n     */\r\n    orWhereInIds(ids: any | any[]): this {\r\n        return this.orWhere(this.getWhereInIdsCondition(ids))\r\n    }\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    output(columns: string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    output(output: string): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string | string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    output(output: string | string[]): this {\r\n        return this.returning(output)\r\n    }\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * This will return given column values.\r\n     */\r\n    returning(columns: string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     * Returning is a SQL string containing returning statement.\r\n     */\r\n    returning(returning: string): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string | string[]): this\r\n\r\n    /**\r\n     * Optional returning/output clause.\r\n     */\r\n    returning(returning: string | string[]): this {\r\n        // not all databases support returning/output cause\r\n        if (!this.connection.driver.isReturningSqlSupported(\"update\")) {\r\n            throw new ReturningStatementNotSupportedError()\r\n        }\r\n\r\n        this.expressionMap.returning = returning\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     *\r\n     * Calling order by without order set will remove all previously set order bys.\r\n     */\r\n    orderBy(): this\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(\r\n        sort: string,\r\n        order?: \"ASC\" | \"DESC\",\r\n        nulls?: \"NULLS FIRST\" | \"NULLS LAST\",\r\n    ): this\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(order: OrderByCondition): this\r\n\r\n    /**\r\n     * Sets ORDER BY condition in the query builder.\r\n     * If you had previously ORDER BY expression defined,\r\n     * calling this function will override previously set ORDER BY conditions.\r\n     */\r\n    orderBy(\r\n        sort?: string | OrderByCondition,\r\n        order: \"ASC\" | \"DESC\" = \"ASC\",\r\n        nulls?: \"NULLS FIRST\" | \"NULLS LAST\",\r\n    ): this {\r\n        if (sort) {\r\n            if (typeof sort === \"object\") {\r\n                this.expressionMap.orderBys = sort as OrderByCondition\r\n            } else {\r\n                if (nulls) {\r\n                    this.expressionMap.orderBys = {\r\n                        [sort as string]: { order, nulls },\r\n                    }\r\n                } else {\r\n                    this.expressionMap.orderBys = { [sort as string]: order }\r\n                }\r\n            }\r\n        } else {\r\n            this.expressionMap.orderBys = {}\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Adds ORDER BY condition in the query builder.\r\n     */\r\n    addOrderBy(\r\n        sort: string,\r\n        order: \"ASC\" | \"DESC\" = \"ASC\",\r\n        nulls?: \"NULLS FIRST\" | \"NULLS LAST\",\r\n    ): this {\r\n        if (nulls) {\r\n            this.expressionMap.orderBys[sort] = { order, nulls }\r\n        } else {\r\n            this.expressionMap.orderBys[sort] = order\r\n        }\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Sets LIMIT - maximum number of rows to be selected.\r\n     */\r\n    limit(limit?: number): this {\r\n        this.expressionMap.limit = limit\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Indicates if entity must be updated after update operation.\r\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\r\n     * Enabled by default.\r\n     */\r\n    whereEntity(entity: Entity | Entity[]): this {\r\n        if (!this.expressionMap.mainAlias!.hasMetadata)\r\n            throw new TypeORMError(\r\n                `.whereEntity method can only be used on queries which update real entity table.`,\r\n            )\r\n\r\n        this.expressionMap.wheres = []\r\n        const entities: Entity[] = Array.isArray(entity) ? entity : [entity]\r\n        entities.forEach((entity) => {\r\n            const entityIdMap =\r\n                this.expressionMap.mainAlias!.metadata.getEntityIdMap(entity)\r\n            if (!entityIdMap)\r\n                throw new TypeORMError(\r\n                    `Provided entity does not have ids set, cannot perform operation.`,\r\n                )\r\n\r\n            this.orWhereInIds(entityIdMap)\r\n        })\r\n\r\n        this.expressionMap.whereEntities = entities\r\n        return this\r\n    }\r\n\r\n    /**\r\n     * Indicates if entity must be updated after update operation.\r\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\r\n     * Enabled by default.\r\n     */\r\n    updateEntity(enabled: boolean): this {\r\n        this.expressionMap.updateEntity = enabled\r\n        return this\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates UPDATE express used to perform insert query.\r\n     */\r\n    protected createUpdateExpression() {\r\n        const valuesSet = this.getValueSet()\r\n        const metadata = this.expressionMap.mainAlias!.hasMetadata\r\n            ? this.expressionMap.mainAlias!.metadata\r\n            : undefined\r\n\r\n        // it doesn't make sense to update undefined properties, so just skip them\r\n        const valuesSetNormalized: ObjectLiteral = {}\r\n        for (let key in valuesSet) {\r\n            if (valuesSet[key] !== undefined) {\r\n                valuesSetNormalized[key] = valuesSet[key]\r\n            }\r\n        }\r\n\r\n        // prepare columns and values to be updated\r\n        const updateColumnAndValues: string[] = []\r\n        const updatedColumns: ColumnMetadata[] = []\r\n        if (metadata) {\r\n            this.createPropertyPath(metadata, valuesSetNormalized).forEach(\r\n                (propertyPath) => {\r\n                    // todo: make this and other query builder to work with properly with tables without metadata\r\n                    const columns =\r\n                        metadata.findColumnsWithPropertyPath(propertyPath)\r\n\r\n                    if (columns.length <= 0) {\r\n                        throw new EntityPropertyNotFoundError(\r\n                            propertyPath,\r\n                            metadata,\r\n                        )\r\n                    }\r\n\r\n                    columns.forEach((column) => {\r\n                        if (\r\n                            !column.isUpdate ||\r\n                            updatedColumns.includes(column)\r\n                        ) {\r\n                            return\r\n                        }\r\n\r\n                        updatedColumns.push(column)\r\n\r\n                        //\r\n                        let value = column.getEntityValue(valuesSetNormalized)\r\n                        if (\r\n                            column.referencedColumn &&\r\n                            typeof value === \"object\" &&\r\n                            !(value instanceof Date) &&\r\n                            value !== null &&\r\n                            !Buffer.isBuffer(value)\r\n                        ) {\r\n                            value =\r\n                                column.referencedColumn.getEntityValue(value)\r\n                        } else if (!(typeof value === \"function\")) {\r\n                            value =\r\n                                this.connection.driver.preparePersistentValue(\r\n                                    value,\r\n                                    column,\r\n                                )\r\n                        }\r\n\r\n                        // todo: duplication zone\r\n                        if (typeof value === \"function\") {\r\n                            // support for SQL expressions in update query\r\n                            updateColumnAndValues.push(\r\n                                this.escape(column.databaseName) +\r\n                                    \" = \" +\r\n                                    value(),\r\n                            )\r\n                        } else if (\r\n                            (this.connection.driver.options.type === \"sap\" ||\r\n                                this.connection.driver.options.type ===\r\n                                    \"spanner\") &&\r\n                            value === null\r\n                        ) {\r\n                            updateColumnAndValues.push(\r\n                                this.escape(column.databaseName) + \" = NULL\",\r\n                            )\r\n                        } else {\r\n                            if (\r\n                                this.connection.driver.options.type === \"mssql\"\r\n                            ) {\r\n                                value = (\r\n                                    this.connection.driver as SqlServerDriver\r\n                                ).parametrizeValue(column, value)\r\n                            }\r\n\r\n                            const paramName = this.createParameter(value)\r\n\r\n                            let expression = null\r\n                            if (\r\n                                (DriverUtils.isMySQLFamily(\r\n                                    this.connection.driver,\r\n                                ) ||\r\n                                    this.connection.driver.options.type ===\r\n                                        \"aurora-mysql\") &&\r\n                                this.connection.driver.spatialTypes.indexOf(\r\n                                    column.type,\r\n                                ) !== -1\r\n                            ) {\r\n                                const useLegacy = (\r\n                                    this.connection.driver as\r\n                                        | MysqlDriver\r\n                                        | AuroraMysqlDriver\r\n                                ).options.legacySpatialSupport\r\n                                const geomFromText = useLegacy\r\n                                    ? \"GeomFromText\"\r\n                                    : \"ST_GeomFromText\"\r\n                                if (column.srid != null) {\r\n                                    expression = `${geomFromText}(${paramName}, ${column.srid})`\r\n                                } else {\r\n                                    expression = `${geomFromText}(${paramName})`\r\n                                }\r\n                            } else if (\r\n                                DriverUtils.isPostgresFamily(\r\n                                    this.connection.driver,\r\n                                ) &&\r\n                                this.connection.driver.spatialTypes.indexOf(\r\n                                    column.type,\r\n                                ) !== -1\r\n                            ) {\r\n                                if (column.srid != null) {\r\n                                    expression = `ST_SetSRID(ST_GeomFromGeoJSON(${paramName}), ${column.srid})::${column.type}`\r\n                                } else {\r\n                                    expression = `ST_GeomFromGeoJSON(${paramName})::${column.type}`\r\n                                }\r\n                            } else if (\r\n                                this.connection.driver.options.type ===\r\n                                    \"mssql\" &&\r\n                                this.connection.driver.spatialTypes.indexOf(\r\n                                    column.type,\r\n                                ) !== -1\r\n                            ) {\r\n                                expression =\r\n                                    column.type +\r\n                                    \"::STGeomFromText(\" +\r\n                                    paramName +\r\n                                    \", \" +\r\n                                    (column.srid || \"0\") +\r\n                                    \")\"\r\n                            } else {\r\n                                expression = paramName\r\n                            }\r\n                            updateColumnAndValues.push(\r\n                                this.escape(column.databaseName) +\r\n                                    \" = \" +\r\n                                    expression,\r\n                            )\r\n                        }\r\n                    })\r\n                },\r\n            )\r\n\r\n            // Don't allow calling update only with columns that are `update: false`\r\n            if (\r\n                updateColumnAndValues.length > 0 ||\r\n                Object.keys(valuesSetNormalized).length === 0\r\n            ) {\r\n                if (\r\n                    metadata.versionColumn &&\r\n                    updatedColumns.indexOf(metadata.versionColumn) === -1\r\n                )\r\n                    updateColumnAndValues.push(\r\n                        this.escape(metadata.versionColumn.databaseName) +\r\n                            \" = \" +\r\n                            this.escape(metadata.versionColumn.databaseName) +\r\n                            \" + 1\",\r\n                    )\r\n                if (\r\n                    metadata.updateDateColumn &&\r\n                    updatedColumns.indexOf(metadata.updateDateColumn) === -1\r\n                )\r\n                    updateColumnAndValues.push(\r\n                        this.escape(metadata.updateDateColumn.databaseName) +\r\n                            \" = CURRENT_TIMESTAMP\",\r\n                    ) // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\r\n            }\r\n        } else {\r\n            Object.keys(valuesSetNormalized).map((key) => {\r\n                let value = valuesSetNormalized[key]\r\n\r\n                // todo: duplication zone\r\n                if (typeof value === \"function\") {\r\n                    // support for SQL expressions in update query\r\n                    updateColumnAndValues.push(\r\n                        this.escape(key) + \" = \" + value(),\r\n                    )\r\n                } else if (\r\n                    (this.connection.driver.options.type === \"sap\" ||\r\n                        this.connection.driver.options.type === \"spanner\") &&\r\n                    value === null\r\n                ) {\r\n                    updateColumnAndValues.push(this.escape(key) + \" = NULL\")\r\n                } else {\r\n                    // we need to store array values in a special class to make sure parameter replacement will work correctly\r\n                    // if (value instanceof Array)\r\n                    //     value = new ArrayParameter(value);\r\n\r\n                    const paramName = this.createParameter(value)\r\n                    updateColumnAndValues.push(\r\n                        this.escape(key) + \" = \" + paramName,\r\n                    )\r\n                }\r\n            })\r\n        }\r\n\r\n        if (updateColumnAndValues.length <= 0) {\r\n            throw new UpdateValuesMissingError()\r\n        }\r\n\r\n        // get a table name and all column database names\r\n        const whereExpression = this.createWhereExpression()\r\n        const returningExpression = this.createReturningExpression(\"update\")\r\n\r\n        if (returningExpression === \"\") {\r\n            return `UPDATE ${this.getTableName(\r\n                this.getMainTableName(),\r\n            )} SET ${updateColumnAndValues.join(\", \")}${whereExpression}` // todo: how do we replace aliases in where to nothing?\r\n        }\r\n        if (this.connection.driver.options.type === \"mssql\") {\r\n            return `UPDATE ${this.getTableName(\r\n                this.getMainTableName(),\r\n            )} SET ${updateColumnAndValues.join(\r\n                \", \",\r\n            )} OUTPUT ${returningExpression}${whereExpression}`\r\n        }\r\n        return `UPDATE ${this.getTableName(\r\n            this.getMainTableName(),\r\n        )} SET ${updateColumnAndValues.join(\r\n            \", \",\r\n        )}${whereExpression} RETURNING ${returningExpression}`\r\n    }\r\n\r\n    /**\r\n     * Creates \"ORDER BY\" part of SQL query.\r\n     */\r\n    protected createOrderByExpression() {\r\n        const orderBys = this.expressionMap.orderBys\r\n        if (Object.keys(orderBys).length > 0)\r\n            return (\r\n                \" ORDER BY \" +\r\n                Object.keys(orderBys)\r\n                    .map((columnName) => {\r\n                        if (typeof orderBys[columnName] === \"string\") {\r\n                            return (\r\n                                this.replacePropertyNames(columnName) +\r\n                                \" \" +\r\n                                orderBys[columnName]\r\n                            )\r\n                        } else {\r\n                            return (\r\n                                this.replacePropertyNames(columnName) +\r\n                                \" \" +\r\n                                (orderBys[columnName] as any).order +\r\n                                \" \" +\r\n                                (orderBys[columnName] as any).nulls\r\n                            )\r\n                        }\r\n                    })\r\n                    .join(\", \")\r\n            )\r\n\r\n        return \"\"\r\n    }\r\n\r\n    /**\r\n     * Creates \"LIMIT\" parts of SQL query.\r\n     */\r\n    protected createLimitExpression(): string {\r\n        let limit: number | undefined = this.expressionMap.limit\r\n\r\n        if (limit) {\r\n            if (\r\n                DriverUtils.isMySQLFamily(this.connection.driver) ||\r\n                this.connection.driver.options.type === \"aurora-mysql\"\r\n            ) {\r\n                return \" LIMIT \" + limit\r\n            } else {\r\n                throw new LimitOnUpdateNotSupportedError()\r\n            }\r\n        }\r\n\r\n        return \"\"\r\n    }\r\n\r\n    /**\r\n     * Gets array of values need to be inserted into the target table.\r\n     */\r\n    protected getValueSet(): ObjectLiteral {\r\n        if (typeof this.expressionMap.valuesSet === \"object\")\r\n            return this.expressionMap.valuesSet\r\n\r\n        throw new UpdateValuesMissingError()\r\n    }\r\n}\r\n"],"sourceRoot":".."}
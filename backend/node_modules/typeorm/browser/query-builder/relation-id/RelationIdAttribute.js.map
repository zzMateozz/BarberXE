{"version":3,"sources":["../browser/src/query-builder/relation-id/RelationIdAttribute.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAA;AAIxD,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAA;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAA;AAEvD;;GAEG;AACH,MAAM,OAAO,mBAAmB;IAgC5B,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YACY,kBAAsC,EAC9C,mBAAkD;QAD1C,uBAAkB,GAAlB,kBAAkB,CAAoB;QAVlD;;WAEG;QACH,oBAAe,GAAG,KAAK,CAAA;QAUnB,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,mBAAmB,IAAI,EAAE,CAAC,CAAA;IACvD,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E,IAAI,uBAAuB;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAA;IAC9C,CAAC;IAED;;;;;OAKG;IACH,IAAI,WAAW;QACX,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;YACrD,MAAM,IAAI,YAAY,CAClB,+DAA+D,CAClE,CAAA;QAEL,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;IACtE,CAAC;IAED;;;;;;OAMG;IACH,IAAI,oBAAoB;QACpB,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;YACrD,MAAM,IAAI,YAAY,CAClB,+DAA+D,CAClE,CAAA;QAEL,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;IACvE,CAAC;IAED;;;;OAIG;IACH,IAAI,QAAQ;QACR,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC;YACrD,MAAM,IAAI,YAAY,CAClB,+DAA+D,CAClE,CAAA;QAEL,MAAM,sBAAsB,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAClE,IAAI,CAAC,WAAY,CACpB,CAAA;QACD,MAAM,QAAQ,GACV,sBAAsB,CAAC,QAAQ,CAAC,4BAA4B,CACxD,IAAI,CAAC,oBAAqB,CAC7B,CAAA;QACL,IAAI,CAAC,QAAQ;YACT,MAAM,IAAI,YAAY,CAClB,+BAA+B,IAAI,CAAC,oBAAoB,2BAA2B,CACtF,CAAA;QACL,OAAO,QAAQ,CAAA;IACnB,CAAC;IAED;;OAEG;IACH,IAAI,aAAa;QACb,MAAM,CAAC,WAAW,EAAE,gBAAgB,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACpE,OAAO,WAAW,GAAG,GAAG,GAAG,gBAAgB,GAAG,MAAM,CAAA;IACxD,CAAC;IAED;;;OAGG;IACH,IAAI,gBAAgB;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC,sBAAuB,CAAA;IAChD,CAAC;IAED,IAAI,wBAAwB;QACxB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;IACxE,CAAC;IAED,IAAI,yBAAyB;QACzB,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;IACzE,CAAC;CACJ","file":"RelationIdAttribute.js","sourcesContent":["import { RelationMetadata } from \"../../metadata/RelationMetadata\"\r\nimport { QueryBuilderUtils } from \"../QueryBuilderUtils\"\r\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\r\nimport { QueryExpressionMap } from \"../QueryExpressionMap\"\r\nimport { SelectQueryBuilder } from \"../SelectQueryBuilder\"\r\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\r\nimport { TypeORMError } from \"../../error/TypeORMError\"\r\n\r\n/**\r\n * Stores all join relation id attributes which will be used to build a JOIN query.\r\n */\r\nexport class RelationIdAttribute {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Alias of the joined (destination) table.\r\n     */\r\n    alias?: string\r\n\r\n    /**\r\n     * Name of relation.\r\n     */\r\n    relationName: string\r\n\r\n    /**\r\n     * Property + alias of the object where to joined data should be mapped.\r\n     */\r\n    mapToProperty: string\r\n\r\n    /**\r\n     * Extra condition applied to \"ON\" section of join.\r\n     */\r\n    queryBuilderFactory?: (\r\n        qb: SelectQueryBuilder<any>,\r\n    ) => SelectQueryBuilder<any>\r\n\r\n    /**\r\n     * Indicates if relation id should NOT be loaded as id map.\r\n     */\r\n    disableMixedMap = false\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        private queryExpressionMap: QueryExpressionMap,\r\n        relationIdAttribute?: Partial<RelationIdAttribute>,\r\n    ) {\r\n        ObjectUtils.assign(this, relationIdAttribute || {})\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    get joinInverseSideMetadata(): EntityMetadata {\r\n        return this.relation.inverseEntityMetadata\r\n    }\r\n\r\n    /**\r\n     * Alias of the parent of this join.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get parentAlias(): string {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new TypeORMError(\r\n                `Given value must be a string representation of alias property`,\r\n            )\r\n\r\n        return this.relationName.substr(0, this.relationName.indexOf(\".\"))\r\n    }\r\n\r\n    /**\r\n     * Relation property name of the parent.\r\n     * This is used to understand what is joined.\r\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\r\n     * This value is extracted from entityOrProperty value.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relationPropertyPath(): string {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new TypeORMError(\r\n                `Given value must be a string representation of alias property`,\r\n            )\r\n\r\n        return this.relationName.substr(this.relationName.indexOf(\".\") + 1)\r\n    }\r\n\r\n    /**\r\n     * Relation of the parent.\r\n     * This is used to understand what is joined.\r\n     * This is available when join was made using \"post.category\" syntax.\r\n     */\r\n    get relation(): RelationMetadata {\r\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\r\n            throw new TypeORMError(\r\n                `Given value must be a string representation of alias property`,\r\n            )\r\n\r\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(\r\n            this.parentAlias!,\r\n        )\r\n        const relation =\r\n            relationOwnerSelection.metadata.findRelationWithPropertyPath(\r\n                this.relationPropertyPath!,\r\n            )\r\n        if (!relation)\r\n            throw new TypeORMError(\r\n                `Relation with property path ${this.relationPropertyPath} in entity was not found.`,\r\n            )\r\n        return relation\r\n    }\r\n\r\n    /**\r\n     * Generates alias of junction table, whose ids we get.\r\n     */\r\n    get junctionAlias(): string {\r\n        const [parentAlias, relationProperty] = this.relationName.split(\".\")\r\n        return parentAlias + \"_\" + relationProperty + \"_rid\"\r\n    }\r\n\r\n    /**\r\n     * Metadata of the joined entity.\r\n     * If extra condition without entity was joined, then it will return undefined.\r\n     */\r\n    get junctionMetadata(): EntityMetadata {\r\n        return this.relation.junctionEntityMetadata!\r\n    }\r\n\r\n    get mapToPropertyParentAlias(): string {\r\n        return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"))\r\n    }\r\n\r\n    get mapToPropertyPropertyPath(): string {\r\n        return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
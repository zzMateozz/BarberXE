{"version":3,"sources":["../browser/src/util/DirectoryExportedClassesLoader.ts"],"names":[],"mappings":"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","file":"DirectoryExportedClassesLoader.js","sourcesContent":["import * as glob from \"glob\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport { Logger } from \"../logger/Logger\"\r\nimport { importOrRequireFile } from \"./ImportUtils\"\r\nimport { ObjectUtils } from \"./ObjectUtils\"\r\nimport { InstanceChecker } from \"./InstanceChecker\"\r\n\r\n/**\r\n * Loads all exported classes from the given directory.\r\n */\r\nexport async function importClassesFromDirectories(\r\n    logger: Logger,\r\n    directories: string[],\r\n    formats = [\".js\", \".mjs\", \".cjs\", \".ts\", \".mts\", \".cts\"],\r\n): Promise<Function[]> {\r\n    const logLevel = \"info\"\r\n    const classesNotFoundMessage =\r\n        \"No classes were found using the provided glob pattern: \"\r\n    const classesFoundMessage = \"All classes found using provided glob pattern\"\r\n    function loadFileClasses(exported: any, allLoaded: Function[]) {\r\n        if (\r\n            typeof exported === \"function\" ||\r\n            InstanceChecker.isEntitySchema(exported)\r\n        ) {\r\n            allLoaded.push(exported)\r\n        } else if (Array.isArray(exported)) {\r\n            exported.forEach((i: any) => loadFileClasses(i, allLoaded))\r\n        } else if (ObjectUtils.isObject(exported)) {\r\n            Object.keys(exported).forEach((key) =>\r\n                loadFileClasses(exported[key], allLoaded),\r\n            )\r\n        }\r\n        return allLoaded\r\n    }\r\n\r\n    const allFiles = directories.reduce((allDirs, dir) => {\r\n        return allDirs.concat(glob.sync(PlatformTools.pathNormalize(dir)))\r\n    }, [] as string[])\r\n\r\n    if (directories.length > 0 && allFiles.length === 0) {\r\n        logger.log(logLevel, `${classesNotFoundMessage} \"${directories}\"`)\r\n    } else if (allFiles.length > 0) {\r\n        logger.log(\r\n            logLevel,\r\n            `${classesFoundMessage} \"${directories}\" : \"${allFiles}\"`,\r\n        )\r\n    }\r\n    const dirPromises = allFiles\r\n        .filter((file) => {\r\n            const dtsExtension = file.substring(file.length - 5, file.length)\r\n            return (\r\n                formats.indexOf(PlatformTools.pathExtname(file)) !== -1 &&\r\n                dtsExtension !== \".d.ts\"\r\n            )\r\n        })\r\n        .map(async (file) => {\r\n            const [importOrRequireResult] = await importOrRequireFile(\r\n                PlatformTools.pathResolve(file),\r\n            )\r\n            return importOrRequireResult\r\n        })\r\n\r\n    const dirs = await Promise.all(dirPromises)\r\n\r\n    return loadFileClasses(dirs, [])\r\n}\r\n\r\n/**\r\n * Loads all json files from the given directory.\r\n */\r\nexport function importJsonsFromDirectories(\r\n    directories: string[],\r\n    format = \".json\",\r\n): any[] {\r\n    const allFiles = directories.reduce((allDirs, dir) => {\r\n        return allDirs.concat(glob.sync(PlatformTools.pathNormalize(dir)))\r\n    }, [] as string[])\r\n\r\n    return allFiles\r\n        .filter((file) => PlatformTools.pathExtname(file) === format)\r\n        .map((file) => require(PlatformTools.pathResolve(file)))\r\n}\r\n"],"sourceRoot":".."}
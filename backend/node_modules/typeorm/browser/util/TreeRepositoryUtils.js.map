{"version":3,"sources":["../browser/src/util/TreeRepositoryUtils.ts"],"names":[],"mappings":"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","file":"TreeRepositoryUtils.js","sourcesContent":["import { EntityManager } from \"../entity-manager/EntityManager\"\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\r\nimport { FindTreesOptions } from \"../repository/FindTreesOptions\"\r\n\r\n/**\r\n * Provides utilities for manipulating tree structures.\r\n *\r\n */\r\nexport class TreeRepositoryUtils {\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    static createRelationMaps(\r\n        manager: EntityManager,\r\n        metadata: EntityMetadata,\r\n        alias: string,\r\n        rawResults: any[],\r\n    ): { id: any; parentId: any }[] {\r\n        return rawResults.map((rawResult) => {\r\n            const joinColumn = metadata.treeParentRelation!.joinColumns[0]\r\n            const referencedColumn =\r\n                joinColumn.referencedColumn ?? metadata.primaryColumns[0]\r\n            // fixes issue #2518, default to databaseName property when givenDatabaseName is not set\r\n            const joinColumnName =\r\n                joinColumn.givenDatabaseName || joinColumn.databaseName\r\n            const referencedColumnName =\r\n                referencedColumn.givenDatabaseName ||\r\n                referencedColumn.databaseName\r\n            const id = rawResult[alias + \"_\" + referencedColumnName]\r\n            const parentId = rawResult[alias + \"_\" + joinColumnName]\r\n            return {\r\n                id: manager.connection.driver.prepareHydratedValue(\r\n                    id,\r\n                    referencedColumn,\r\n                ),\r\n                parentId: manager.connection.driver.prepareHydratedValue(\r\n                    parentId,\r\n                    joinColumn,\r\n                ),\r\n            }\r\n        })\r\n    }\r\n\r\n    static buildChildrenEntityTree(\r\n        metadata: EntityMetadata,\r\n        entity: any,\r\n        entities: any[],\r\n        relationMaps: { id: any; parentId: any }[],\r\n        options: FindTreesOptions & { depth: number },\r\n    ): void {\r\n        const childProperty = metadata.treeChildrenRelation!.propertyName\r\n        if (options.depth === 0) {\r\n            entity[childProperty] = []\r\n            return\r\n        }\r\n        const joinColumn = metadata.treeParentRelation!.joinColumns[0]\r\n        const referencedColumn =\r\n            joinColumn.referencedColumn ?? metadata.primaryColumns[0]\r\n        const parentEntityId = referencedColumn.getEntityValue(entity)\r\n        const childRelationMaps = relationMaps.filter(\r\n            (relationMap) => relationMap.parentId === parentEntityId,\r\n        )\r\n        const childIds = new Set(\r\n            childRelationMaps.map((relationMap) => relationMap.id),\r\n        )\r\n        entity[childProperty] = entities.filter((entity) =>\r\n            childIds.has(referencedColumn.getEntityValue(entity)),\r\n        )\r\n        entity[childProperty].forEach((childEntity: any) => {\r\n            TreeRepositoryUtils.buildChildrenEntityTree(\r\n                metadata,\r\n                childEntity,\r\n                entities,\r\n                relationMaps,\r\n                {\r\n                    ...options,\r\n                    depth: options.depth - 1,\r\n                },\r\n            )\r\n        })\r\n    }\r\n\r\n    static buildParentEntityTree(\r\n        metadata: EntityMetadata,\r\n        entity: any,\r\n        entities: any[],\r\n        relationMaps: { id: any; parentId: any }[],\r\n    ): void {\r\n        const parentProperty = metadata.treeParentRelation!.propertyName\r\n        const joinColumn = metadata.treeParentRelation!.joinColumns[0]\r\n        const referencedColumn =\r\n            joinColumn.referencedColumn ?? metadata.primaryColumns[0]\r\n        const entityId = referencedColumn.getEntityValue(entity)\r\n        const parentRelationMap = relationMaps.find(\r\n            (relationMap) => relationMap.id === entityId,\r\n        )\r\n        const parentEntity = entities.find((entity) => {\r\n            if (!parentRelationMap) return false\r\n\r\n            return (\r\n                referencedColumn.getEntityValue(entity) ===\r\n                parentRelationMap.parentId\r\n            )\r\n        })\r\n        if (parentEntity) {\r\n            entity[parentProperty] = parentEntity\r\n            TreeRepositoryUtils.buildParentEntityTree(\r\n                metadata,\r\n                entity[parentProperty],\r\n                entities,\r\n                relationMaps,\r\n            )\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
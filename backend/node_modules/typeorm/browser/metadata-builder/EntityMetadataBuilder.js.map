{"version":3,"sources":["../browser/src/metadata-builder/EntityMetadataBuilder.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAA;AAC3D,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAA;AAC3D,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAA;AACzD,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAA;AAC/D,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAA;AAG/D,OAAO,EAAE,kBAAkB,EAAE,MAAM,gCAAgC,CAAA;AACnE,OAAO,EAAE,qBAAqB,EAAE,MAAM,mCAAmC,CAAA;AACzE,OAAO,EAAE,kBAAkB,EAAE,MAAM,sCAAsC,CAAA;AACzE,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAA;AAE/C,OAAO,EAAE,6BAA6B,EAAE,MAAM,iCAAiC,CAAA;AAC/E,OAAO,EAAE,oCAAoC,EAAE,MAAM,wCAAwC,CAAA;AAC7F,OAAO,EAAE,yBAAyB,EAAE,MAAM,6BAA6B,CAAA;AAEvE,OAAO,EAAE,sBAAsB,EAAE,MAAM,oCAAoC,CAAA;AAC3E,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAA;AAC3D,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAA;AACzD,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAA;AACjE,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAA;AACvC,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAEnD;;GAEG;AACH,MAAM,OAAO,qBAAqB;IAoB9B,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YACY,UAAsB,EACtB,mBAAwC;QADxC,eAAU,GAAV,UAAU,CAAY;QACtB,wBAAmB,GAAnB,mBAAmB,CAAqB;QAEhD,IAAI,CAAC,6BAA6B,GAAG,IAAI,6BAA6B,CAClE,UAAU,CACb,CAAA;QACD,IAAI,CAAC,oCAAoC;YACrC,IAAI,oCAAoC,CAAC,UAAU,CAAC,CAAA;QACxD,IAAI,CAAC,yBAAyB,GAAG,IAAI,yBAAyB,CAC1D,UAAU,CACb,CAAA;IACL,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,KAAK,CAAC,aAA0B;QAC5B,yFAAyF;QACzF,MAAM,SAAS,GAAG,aAAa;YAC3B,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,aAAa,CAAC;YACtD,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAA;QAErC,kGAAkG;QAClG,MAAM,UAAU,GAAG,SAAS,CAAC,MAAM,CAC/B,CAAC,KAAK,EAAE,EAAE,CACN,KAAK,CAAC,IAAI,KAAK,SAAS;YACxB,KAAK,CAAC,IAAI,KAAK,SAAS;YACxB,KAAK,CAAC,IAAI,KAAK,cAAc;YAC7B,KAAK,CAAC,IAAI,KAAK,MAAM,CAC5B,CAAA;QAED,oHAAoH;QACpH,MAAM,eAAe,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CACjD,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,CACvC,CAAA;QAED,wDAAwD;QACxD,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE,CACvC,IAAI,CAAC,2BAA2B,CAAC,eAAe,EAAE,cAAc,CAAC,CACpE,CAAA;QAED,kFAAkF;QAClF,eAAe,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjC,QAAQ,CAAC,oBAAoB,GAAG,eAAe,CAAC,MAAM,CAClD,CAAC,aAAa,EAAE,EAAE;gBACd,OAAO,CACH,OAAO,QAAQ,CAAC,MAAM,KAAK,UAAU;oBACrC,OAAO,aAAa,CAAC,MAAM,KAAK,UAAU;oBAC1C,aAAa,CAAC,WAAW,CACrB,aAAa,CAAC,MAAM,EACpB,QAAQ,CAAC,MAAM,CAClB,CACJ,CAAA;YACL,CAAC,CACJ,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,mGAAmG;QACnG,eAAe;aACV,MAAM,CACH,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,SAAS,KAAK,cAAc,CAClE;aACA,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAA;QAExD,6FAA6F;QAC7F,eAAe;aACV,MAAM,CACH,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,SAAS,KAAK,cAAc,CAClE;aACA,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAA;QAExD,sHAAsH;QACtH,eAAe;aACV,MAAM,CACH,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,SAAS,KAAK,cAAc,CAClE;aACA,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE,CACxB,IAAI,CAAC,0BAA0B,CAC3B,eAAe,EACf,cAAc,CACjB,CACJ,CAAA;QAEL,wGAAwG;QACxG,eAAe;aACV,MAAM,CACH,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,SAAS,KAAK,cAAc,CAClE;aACA,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE,CACxB,IAAI,CAAC,0BAA0B,CAC3B,eAAe,EACf,cAAc,CACjB,CACJ,CAAA;QAEL,0EAA0E;QAC1E,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE,CACvC,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAClD,CAAA;QAED,iDAAiD;QACjD,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE,CACvC,IAAI,CAAC,wBAAwB,CAAC,cAAc,EAAE,eAAe,CAAC,CACjE,CAAA;QAED,0GAA0G;QAC1G,eAAe;aACV,MAAM,CACH,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,SAAS,KAAK,cAAc,CAClE;aACA,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE;YACxB,gFAAgF;YAChF,cAAc,CAAC,SAAS;iBACnB,MAAM,CACH,CAAC,QAAQ,EAAE,EAAE,CACT,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,WAAW,CAClD;iBACA,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAClB,MAAM,WAAW,GACb,IAAI,CAAC,mBAAmB,CAAC,iBAAiB,CACtC,QAAQ,CAAC,MAAM,EACf,QAAQ,CAAC,YAAY,CACxB,CAAA;gBACL,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,gBAAgB,EAAE,GAC3C,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAChC,WAAW,EACX,QAAQ,CACX,CAAA,CAAC,kDAAkD;gBACxD,IAAI,UAAU,EAAE,CAAC;oBACb,QAAQ,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAA,CAAC,gEAAgE;oBACzG,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;gBAC/C,CAAC;gBACD,IAAI,OAAO,EAAE,CAAC;oBACV,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAA;gBACzC,CAAC;gBACD,IAAI,gBAAgB,EAAE,CAAC;oBACnB,IACI,WAAW,CAAC,aAAa,CACrB,IAAI,CAAC,UAAU,CAAC,MAAM,CACzB;wBACD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI;4BAC/B,cAAc;wBAClB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI;4BAC/B,OAAO;wBACX,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,KAAK;wBAC7C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI;4BAC/B,SAAS,EACf,CAAC;wBACC,MAAM,KAAK,GAAG,IAAI,aAAa,CAAC;4BAC5B,cAAc,EACV,gBAAgB,CAAC,cAAc;4BACnC,OAAO,EAAE,gBAAgB,CAAC,OAAO;4BACjC,IAAI,EAAE;gCACF,MAAM,EAAE,gBAAgB,CAAC,MAAO;gCAChC,IAAI,EAAE,gBAAgB,CAAC,IAAI;gCAC3B,MAAM,EAAE,IAAI;gCACZ,WAAW,EAAE,IAAI;6BACpB;yBACJ,CAAC,CAAA;wBAEF,IACI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI;4BACnC,OAAO,EACT,CAAC;4BACC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO;iCACtB,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gCACZ,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CACnC,MAAM,CAAC,YAAY,CACtB,cAAc,CAAA;4BACnB,CAAC,CAAC;iCACD,IAAI,CAAC,OAAO,CAAC,CAAA;wBACtB,CAAC;wBAED,IACI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI;4BACnC,SAAS,EACX,CAAC;4BACC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAA;wBAC/B,CAAC;wBAED,IAAI,QAAQ,CAAC,gBAAgB,EAAE,CAAC;4BAC5B,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAClC,KAAK,CACR,CAAA;wBACL,CAAC;6BAAM,CAAC;4BACJ,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CACnC,KAAK,CACR,CAAA;wBACL,CAAC;wBACD,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAA;oBACnD,CAAC;yBAAM,CAAC;wBACJ,IAAI,QAAQ,CAAC,gBAAgB,EAAE,CAAC;4BAC5B,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAClC,gBAAgB,CACnB,CAAA;wBACL,CAAC;6BAAM,CAAC;4BACJ,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CACnC,gBAAgB,CACnB,CAAA;wBACL,CAAC;wBACD,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAA;oBACnD,CAAC;gBACL,CAAC;gBAED,IACI,UAAU;oBACV,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI;wBAC/B,aAAa,EACnB,CAAC;oBACC,MAAM,KAAK,GAAG,IAAI,aAAa,CAAC;wBAC5B,cAAc,EAAE,QAAQ,CAAC,cAAc;wBACvC,OAAO,EAAE,UAAU,CAAC,OAAO;wBAC3B,IAAI,EAAE;4BACF,MAAM,EAAE,QAAQ,CAAC,cAAc,CAAC,MAAO;4BACvC,WAAW,EAAE,IAAI;yBACpB;qBACJ,CAAC,CAAA;oBACF,IAAI,QAAQ,CAAC,gBAAgB,EAAE,CAAC;wBAC5B,QAAQ,CAAC,gBAAgB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;oBACjD,CAAC;yBAAM,CAAC;wBACJ,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;oBAClD,CAAC;oBACD,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAA;gBACnD,CAAC;YACL,CAAC,CAAC,CAAA;YAEN,qEAAqE;YACrE,cAAc,CAAC,SAAS;iBACnB,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC;iBAC3C,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAClB,MAAM,SAAS,GACX,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAClC,QAAQ,CAAC,MAAM,EACf,QAAQ,CAAC,YAAY,CACvB,CAAA;gBACN,IAAI,CAAC,SAAS;oBAAE,OAAM,CAAC,0FAA0F;gBAEjH,8FAA8F;gBAC9F,MAAM,sBAAsB,GACxB,IAAI,CAAC,6BAA6B,CAAC,KAAK,CACpC,QAAQ,EACR,SAAS,CACZ,CAAA;gBACL,QAAQ,CAAC,mBAAmB,CACxB,GAAG,sBAAsB,CAAC,WAAW,CACxC,CAAA;gBACD,QAAQ,CAAC,mBAAmB,CACxB,sBAAsB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,EAC5C,sBAAsB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAC/C,CAAA;gBACD,QAAQ,CAAC,8BAA8B,CACnC,sBAAsB,CACzB,CAAA;gBAED,8EAA8E;gBAC9E,IAAI,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,CAAA;gBACvD,IAAI,CAAC,wBAAwB,CACzB,sBAAsB,EACtB,eAAe,CAClB,CAAA;gBACD,eAAe,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAA;YAChD,CAAC,CAAC,CAAA;QACV,CAAC,CAAC,CAAA;QAEN,2CAA2C;QAC3C,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE;YACvC,cAAc,CAAC,wBAAwB;gBACnC,cAAc,CAAC,SAAS,CAAC,MAAM,CAC3B,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAC1C,CAAA;YACL,cAAc,CAAC,uBAAuB;gBAClC,cAAc,CAAC,wBAAwB,CAAC,IAAI,CACxC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,IAAI,QAAQ,CAAC,SAAS,CAC3D,CAAA;QACT,CAAC,CAAC,CAAA;QAEF,0DAA0D;QAC1D,eAAe;aACV,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,KAAK,eAAe,CAAC;aAC3D,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE;YACxB,MAAM,6BAA6B,GAC/B,IAAI,CAAC,oCAAoC,CAAC,KAAK,CAC3C,cAAc,CACjB,CAAA;YACL,cAAc,CAAC,oBAAoB;gBAC/B,6BAA6B,CAAA;YACjC,IAAI,CAAC,0BAA0B,CAAC,6BAA6B,CAAC,CAAA;YAC9D,IAAI,CAAC,wBAAwB,CACzB,6BAA6B,EAC7B,eAAe,CAClB,CAAA;YACD,eAAe,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAA;QACvD,CAAC,CAAC,CAAA;QAEN,yDAAyD;QACzD,eAAe;aACV,MAAM,CACH,CAAC,QAAQ,EAAE,EAAE,CACT,QAAQ,CAAC,kBAAkB,KAAK,KAAK;YACrC,QAAQ,CAAC,mBAAmB,CACnC;aACA,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE,CACxB,IAAI,CAAC,6BAA6B,CAAC,cAAc,CAAC,CACrD,CAAA;QAEL,qFAAqF;QACrF,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE;YACvC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CACrC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAC9C,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,gGAAgG;QAChG,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE;YACvC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CACtC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAC/C,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,8BAA8B;QAC9B,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE;YACvC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CACpC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAC9C,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,kCAAkC;QAClC,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE;YACvC,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE,CAC5C,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAClD,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,4CAA4C;QAC5C,eAAe;aACV,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,OAAO,QAAQ,CAAC,MAAM,KAAK,UAAU,CAAC;aAC3D,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE;YACxB,cAAc,CAAC,SAAS;iBACnB,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;iBACrC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBAClB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,QAAQ,EACP,cAAc,CAAC,MAAmB,CAAC,SAAS,CAChD,CAAA;YACL,CAAC,CAAC,CAAA;QACV,CAAC,CAAC,CAAA;QAEN,eAAe,CAAC,OAAO,CAAC,CAAC,cAAc,EAAE,EAAE;YACvC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACtC,yFAAyF;gBACzF,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,CACpD,MAAM,CAAC,MAAM,EACb,MAAM,CAAC,YAAY,CACtB,CAAA;gBACD,IAAI,SAAS,EAAE,CAAC;oBACZ,MAAM,CAAC,WAAW,GAAG,IAAI,CAAA;oBACzB,MAAM,CAAC,kBAAkB,GAAG,SAAS,CAAC,QAAQ,CAAA;oBAC9C,IAAI,SAAS,CAAC,QAAQ,KAAK,MAAM,EAAE,CAAC;wBAChC,MAAM,CAAC,IAAI,GAAG,MAAM,CAAA;oBACxB,CAAC;yBAAM,IAAI,SAAS,CAAC,QAAQ,KAAK,OAAO,EAAE,CAAC;wBACxC,MAAM,CAAC,IAAI,GAAG,KAAK,CAAA;oBACvB,CAAC;yBAAM,CAAC;wBACJ,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAA;oBACvC,CAAC;oBACD,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;oBAC7B,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAA;gBACnD,CAAC;YACL,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QAEF,OAAO,eAAe,CAAA;IAC1B,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;;OAGG;IACO,oBAAoB,CAC1B,SAA4B;QAE5B,0FAA0F;QAC1F,8FAA8F;QAC9F,2GAA2G;QAC3G,MAAM,eAAe,GACjB,OAAO,SAAS,CAAC,MAAM,KAAK,UAAU;YAClC,CAAC,CAAC,aAAa,CAAC,kBAAkB,CAAC,SAAS,CAAC,MAAM,CAAC;YACpD,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA,CAAC,4DAA4D;QAEzF,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CACjE,SAAS,CAAC,MAAM,CACnB,CAAA;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QAErE,4FAA4F;QAC5F,IAAI,0BAAiC,CAAA;QACrC,IACI,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,OAAO,KAAK,KAAK,CAAC;YACxD,SAAS,CAAC,IAAI,KAAK,cAAc,EACnC,CAAC;YACC,0BAA0B,GAAG,IAAI,CAAC,mBAAmB;iBAChD,yBAAyB,CAAC,SAAS,CAAC,MAAM,CAAC;iBAC3C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;iBAC1B,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,OAAO,MAAM,KAAK,UAAU,CAAC,CAAA;YAErD,eAAe,CAAC,IAAI,CAAC,GAAG,0BAA0B,CAAC,CAAA;QACvD,CAAC;QAED,OAAO,IAAI,cAAc,CAAC;YACtB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,IAAI,EAAE,SAAS;YACf,eAAe,EAAE,eAAe;YAChC,SAAS,EAAE,SAAS;YACpB,kBAAkB,EAAE,gBAAgB;gBAChC,CAAC,CAAC,gBAAgB,CAAC,OAAO;gBAC1B,CAAC,CAAC,SAAS;SAClB,CAAC,CAAA;IACN,CAAC;IAES,2BAA2B,CACjC,kBAAoC,EACpC,cAA8B;QAE9B,kFAAkF;QAClF,IAAI,cAAc,CAAC,SAAS,KAAK,cAAc,EAAE,CAAC;YAC9C,cAAc,CAAC,oBAAoB,GAAG,kBAAkB,CAAC,IAAI,CACzD,CAAC,iBAAiB,EAAE,EAAE;gBAClB,OAAO,CACH,iBAAiB,CAAC,eAAe,CAAC,OAAO,CACrC,cAAc,CAAC,MAAkB,CACpC,KAAK,CAAC,CAAC;oBACR,iBAAiB,CAAC,kBAAkB,KAAK,KAAK,CACjD,CAAA;YACL,CAAC,CACH,CAAA;QACN,CAAC;IACL,CAAC;IAES,0BAA0B,CAChC,kBAAoC,EACpC,cAA8B;QAE9B,MAAM,iBAAiB,GAAG,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAClE,cAAc,CAAC,MAAM,CACxB,CAAA;QAED,MAAM,kBAAkB,GACpB,IAAI,CAAC,mBAAmB,CAAC,sBAAsB,CAC3C,cAAc,CAAC,MAAM,CACxB,CAAA;QAEL,IAAI,OAAO,kBAAkB,KAAK,WAAW,EAAE,CAAC;YAC5C,cAAc,CAAC,kBAAkB,GAAG,kBAAkB,CAAC,KAAK,CAAA;QAChE,CAAC;aAAM,CAAC;YACJ,cAAc,CAAC,kBAAkB,GAC7B,cAAc,CAAC,MAClB,CAAC,IAAI,CAAA;QACV,CAAC;QAED,wFAAwF;QACxF,cAAc,CAAC,SAAS,GAAG,IAAI,CAAC,0BAA0B,CACtD,cAAc,EACd,IAAI,CAAC,mBAAmB,CAAC,eAAe,CACpC,cAAc,CAAC,eAAe,CACjC,CACJ,CAAC,GAAG,CAAC,CAAC,QAA0B,EAAoB,EAAE;YACnD,IAAI,cAAc,CAAC,kBAAkB,KAAK,KAAK,EAAE,CAAC;gBAC9C,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CACnC,CAAC,MAAsB,EAAkB,EAAE;oBACvC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAA;oBACxB,OAAO,MAAM,CAAA;gBACjB,CAAC,CACJ,CAAA;YACL,CAAC;YACD,OAAO,QAAQ,CAAA;QACnB,CAAC,CAAC,CAAA;QAEF,cAAc,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB;aAC/C,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC;aAC7C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACV,uEAAuE;YACvE,IAAI,cAAc,CAAC,SAAS,KAAK,cAAc;gBAC3C,OAAO,cAAc,CAAC,oBAAoB,CAAC,UAAU,CAAC,IAAI,CACtD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,CACvD,CAAA;YAEN,uEAAuE;YACvE,IACI,cAAc,CAAC,SAAS,KAAK,SAAS;gBACtC,IAAI,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,EACvC,CAAC;gBACC,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CACnD,CAAC,CAAC,EAAE,EAAE,CACF,CAAC,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY;oBACpC,CAAC,CAAC,MAAM,KAAK,cAAc,CAAC,MAAM,CACzC,CAAA;gBACD,IAAI,SAAS,IAAI,SAAS,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;oBACzC,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,OAAO,CAAA;gBACpD,CAAC;YACL,CAAC;YAED,MAAM,MAAM,GAAG,IAAI,cAAc,CAAC;gBAC9B,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,cAAc;gBACd,IAAI;aACP,CAAC,CAAA;YAEF,0FAA0F;YAC1F,MAAM,iCAAiC,GACnC,kBAAkB,CAAC,IAAI,CACnB,CAAC,mBAAmB,EAAE,EAAE,CACpB,mBAAmB,CAAC,SAAS,KAAK,cAAc;gBAChD,mBAAmB,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CACjD,CAAA;YACL,IAAI,iCAAiC;gBAAE,MAAM,CAAC,UAAU,GAAG,IAAI,CAAA;YAC/D,OAAO,MAAM,CAAA;QACjB,CAAC,CAAC,CAAA;QAEN,8DAA8D;QAC9D,EAAE;QACF,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,MAAM,EAAE,CAAC;YAChD,MAAM,uBAAuB,GACzB,iBAAiB,CAAC,MAAM,IAAI,iBAAiB,CAAC,MAAM,CAAC,IAAI;gBACrD,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI;gBAC/B,CAAC,CAAC,MAAM,CAAA;YAChB,IAAI,mBAAmB,GAAG,cAAc,CAAC,UAAU,CAAC,IAAI,CACpD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,KAAK,uBAAuB,CAC9D,CAAA;YACD,IAAI,CAAC,mBAAmB,EAAE,CAAC;gBACvB,mBAAmB,GAAG,IAAI,cAAc,CAAC;oBACrC,UAAU,EAAE,IAAI,CAAC,UAAU;oBAC3B,cAAc,EAAE,cAAc;oBAC9B,IAAI,EAAE;wBACF,MAAM,EAAE,cAAc,CAAC,MAAM;wBAC7B,IAAI,EAAE,SAAS;wBACf,YAAY,EAAE,uBAAuB;wBACrC,OAAO,EAAE,iBAAiB,CAAC,MAAM,IAAI;4BACjC,IAAI,EAAE,uBAAuB;4BAC7B,IAAI,EAAE,SAAS;4BACf,QAAQ,EAAE,KAAK;yBAClB;qBACJ;iBACJ,CAAC,CAAA;gBACF,mBAAmB,CAAC,SAAS,GAAG,IAAI,CAAA;gBACpC,mBAAmB,CAAC,eAAe,GAAG,IAAI,CAAA;gBAC1C,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;YACvD,CAAC;iBAAM,CAAC;gBACJ,mBAAmB,CAAC,eAAe,GAAG,IAAI,CAAA;YAC9C,CAAC;QACL,CAAC;QAED,yDAAyD;QACzD,kGAAkG;QAClG,IAAI,cAAc,CAAC,SAAS,KAAK,cAAc,EAAE,CAAC;YAC9C,MAAM,mBAAmB,GACrB,cAAc,CAAC,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAC/C,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,eAAe,CACrC,CAAA;YACL,IACI,mBAAmB;gBACnB,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAC3B,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,KAAK,mBAAmB,CAC7C,EACH,CAAC;gBACC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAA;YACvD,CAAC;YACD,oDAAoD;YACpD,mEAAmE;YACnE,cAAc,CAAC,kBAAkB;gBAC7B,cAAc,CAAC,oBAAoB,CAAC,kBAAkB,CAAA;YAC1D,IACI,CAAC,cAAc,CAAC,QAAQ;gBACxB,CAAC,CAAC,cAAc,CAAC,oBAAoB,CAAC,QAAQ,EAChD,CAAC;gBACC,cAAc,CAAC,QAAQ;oBACnB,cAAc,CAAC,oBAAoB,CAAC,QAAQ,CAAA;gBAChD,cAAc,CAAC,WAAW;oBACtB,cAAc,CAAC,oBAAoB,CAAC,WAAW,CAAA;gBACnD,cAAc,CAAC,kBAAkB;oBAC7B,cAAc,CAAC,oBAAoB,CAAC,kBAAkB,CAAA;gBAC1D,cAAc,CAAC,eAAe;oBAC1B,cAAc,CAAC,oBAAoB,CAAC,eAAe,CAAA;YAC3D,CAAC;QACL,CAAC;QAED,MAAM,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,UAAU,CAAA;QAE1C,kFAAkF;QAClF,IAAI,cAAc,CAAC,QAAQ,KAAK,mBAAmB,EAAE,CAAC;YAClD,cAAc,CAAC,UAAU,CAAC,IAAI,CAC1B,IAAI,cAAc,CAAC;gBACf,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,cAAc,EAAE,cAAc;gBAC9B,gBAAgB,EAAE,IAAI;gBACtB,IAAI,EAAE;oBACF,MAAM,EAAE,cAAc,CAAC,MAAM;oBAC7B,IAAI,EAAE,SAAS;oBACf,YAAY,EAAE,OAAO;oBACrB,OAAO,EAAE,mBAAmB,CAAC;wBACzB,IAAI,EAAE,cAAc,CAAC,0BAA0B;wBAC/C,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,IAAI;wBACd,OAAO,EAAE,EAAE;qBACd;iBACJ;aACJ,CAAC,CACL,CAAA;QACL,CAAC;aAAM,IAAI,cAAc,CAAC,QAAQ,KAAK,YAAY,EAAE,CAAC;YAClD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,cAAc,CAAC,oBAAoB,CAAA;YAC3D,cAAc,CAAC,UAAU,CAAC,IAAI,CAC1B,IAAI,cAAc,CAAC;gBACf,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,cAAc,EAAE,cAAc;gBAC9B,aAAa,EAAE,IAAI;gBACnB,IAAI,EAAE;oBACF,MAAM,EAAE,cAAc,CAAC,MAAM;oBAC7B,IAAI,EAAE,SAAS;oBACf,YAAY,EAAE,IAAI;oBAClB,OAAO,EAAE,mBAAmB,CAAC;wBACzB,IAAI,EAAE,IAAI;wBACV,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,KAAK;wBACf,OAAO,EAAE,CAAC;qBACb;iBACJ;aACJ,CAAC,CACL,CAAA;YACD,cAAc,CAAC,UAAU,CAAC,IAAI,CAC1B,IAAI,cAAc,CAAC;gBACf,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,cAAc,EAAE,cAAc;gBAC9B,cAAc,EAAE,IAAI;gBACpB,IAAI,EAAE;oBACF,MAAM,EAAE,cAAc,CAAC,MAAM;oBAC7B,IAAI,EAAE,SAAS;oBACf,YAAY,EAAE,KAAK;oBACnB,OAAO,EAAE,mBAAmB,CAAC;wBACzB,IAAI,EAAE,KAAK;wBACX,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,KAAK;wBACf,OAAO,EAAE,CAAC;qBACb;iBACJ;aACJ,CAAC,CACL,CAAA;QACL,CAAC;QAED,cAAc,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB;aACjD,eAAe,CAAC,cAAc,CAAC,eAAe,CAAC;aAC/C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACV,yEAAyE;YACzE,IAAI,cAAc,CAAC,SAAS,KAAK,cAAc,EAAE,CAAC;gBAC9C,MAAM,cAAc,GAChB,cAAc,CAAC,oBAAoB,CAAC,YAAY,CAAC,IAAI,CACjD,CAAC,QAAQ,EAAE,EAAE,CACT,QAAQ,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,CACjD,CAAA;gBACN,MAAM,IAAI,GACN,OAAO,IAAI,CAAC,IAAI,KAAK,UAAU;oBAC3B,CAAC,CAAE,IAAI,CAAC,IAAkB,EAAE;oBAC5B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAA;gBACnB,IAAI,cAAc,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;oBAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAA;oBAC3C,KAAK,CAAC,IAAI,GAAG,IAAI,CAAA;oBACjB,OAAO,KAAK,CAAA;gBAChB,CAAC;gBAED,OAAO,cAAc,CAAA;YACzB,CAAC;YAED,OAAO,IAAI,gBAAgB,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;QACzD,CAAC,CAAC,CAAA;QACN,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC,mBAAmB;aAChD,iBAAiB,CAAC,cAAc,CAAC,eAAe,CAAC;aACjD,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACV,4EAA4E;YAC5E,IAAI,cAAc,CAAC,SAAS,KAAK,cAAc;gBAC3C,OAAO,cAAc,CAAC,oBAAoB,CAAC,WAAW,CAAC,IAAI,CACvD,CAAC,UAAU,EAAE,EAAE,CACX,UAAU,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,CACnD,CAAA;YAEN,OAAO,IAAI,kBAAkB,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;QAC3D,CAAC,CAAC,CAAA;QACN,cAAc,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB;aACnD,oBAAoB,CAAC,cAAc,CAAC,eAAe,CAAC;aACpD,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACV,+EAA+E;YAC/E,IAAI,cAAc,CAAC,SAAS,KAAK,cAAc;gBAC3C,OAAO,cAAc,CAAC,oBAAoB,CAAC,cAAc,CAAC,IAAI,CAC1D,CAAC,aAAa,EAAE,EAAE,CACd,aAAa,CAAC,YAAY,KAAK,IAAI,CAAC,YAAY,CACtD,CAAA;YAEN,OAAO,IAAI,qBAAqB,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;QAC9D,CAAC,CAAC,CAAA;QACN,cAAc,CAAC,YAAY,GAAG,IAAI,CAAC,mBAAmB;aACjD,eAAe,CAAC,cAAc,CAAC,eAAe,CAAC;aAC/C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACV,OAAO,IAAI,sBAAsB,CAAC;gBAC9B,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE,IAAI;aACb,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QACN,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,mBAAmB;aAC3C,YAAY,CAAC,cAAc,CAAC,eAAe,CAAC;aAC5C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACV,OAAO,IAAI,aAAa,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;QACtD,CAAC,CAAC,CAAA;QAEN,kDAAkD;QAClD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;YACrD,cAAc,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB;iBAC/C,gBAAgB,CAAC,cAAc,CAAC,eAAe,CAAC;iBAChD,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,iBAAiB,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;YAC1D,CAAC,CAAC,CAAA;QACV,CAAC;QAED,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YACxD,cAAc,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB;iBAC/C,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC;iBAC7C,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;iBAC9B,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,aAAa,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;YACtD,CAAC,CAAC,CAAA;YAEN,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB;iBACnC,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC;iBAC7C,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;iBAC7B,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,cAAc,CAAC;oBACtB,cAAc,EAAE,cAAc;oBAC9B,IAAI,EAAE;wBACF,MAAM,EAAE,IAAI,CAAC,MAAM;wBACnB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,OAAO,EAAE,IAAI,CAAC,OAAO;qBACxB;iBACJ,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YACN,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAA;QAC9C,CAAC;aAAM,CAAC;YACJ,cAAc,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB;iBAC/C,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC;iBAC7C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,aAAa,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;YACtD,CAAC,CAAC,CAAA;QACV,CAAC;QAED,4DAA4D;QAC5D,IACI,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;YACjD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,cAAc;YACtD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,KAAK;YAC7C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,EACnD,CAAC;YACC,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB;iBACnC,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC;iBAC7C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,aAAa,CAAC;oBACrB,cAAc,EAAE,cAAc;oBAC9B,IAAI,EAAE;wBACF,MAAM,EAAE,IAAI,CAAC,MAAM;wBACnB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,OAAO,EAAE,IAAI,CAAC,OAAO;wBACrB,MAAM,EAAE,IAAI;wBACZ,WAAW,EAAE,IAAI;qBACpB;iBACJ,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YACN,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAA;QAC9C,CAAC;aAAM,CAAC;YACJ,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB;iBACnC,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC;iBAC7C,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,cAAc,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;YACvD,CAAC,CAAC,CAAA;YACN,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAA;QAC9C,CAAC;IACL,CAAC;IAED;;;OAGG;IACO,0BAA0B,CAChC,cAA8B,EAC9B,YAAoC;QAEpC,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE;YACrC,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAAC;gBAC1C,cAAc,EAAE,cAAc;gBAC9B,IAAI,EAAE,YAAY;aACrB,CAAC,CAAA;YACF,MAAM,OAAO,GACT,OAAO,gBAAgB,CAAC,IAAI,KAAK,UAAU;gBACvC,CAAC,CAAC,aAAa,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC;gBACzD,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAA,CAAC,4DAA4D;YAE9F,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC,mBAAmB;iBAC9C,aAAa,CAAC,OAAO,CAAC;iBACtB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,cAAc,CAAC;oBACtB,UAAU,EAAE,IAAI,CAAC,UAAU;oBAC3B,cAAc;oBACd,gBAAgB;oBAChB,IAAI;iBACP,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YACN,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB;iBAChD,eAAe,CAAC,OAAO,CAAC;iBACxB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,gBAAgB,CAAC;oBACxB,cAAc;oBACd,gBAAgB;oBAChB,IAAI;iBACP,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YACN,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB;iBAChD,eAAe,CAAC,OAAO,CAAC;iBACxB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,sBAAsB,CAAC;oBAC9B,cAAc;oBACd,gBAAgB;oBAChB,IAAI;iBACP,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YACN,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC,mBAAmB;iBAC9C,aAAa,CAAC,OAAO,CAAC;iBACtB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,aAAa,CAAC;oBACrB,cAAc;oBACd,gBAAgB;oBAChB,IAAI;iBACP,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YACN,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC,mBAAmB;iBAC9C,aAAa,CAAC,OAAO,CAAC;iBACtB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,cAAc,CAAC;oBACtB,cAAc;oBACd,gBAAgB;oBAChB,IAAI;iBACP,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YACN,gBAAgB,CAAC,WAAW,GAAG,IAAI,CAAC,mBAAmB;iBAClD,iBAAiB,CAAC,OAAO,CAAC;iBAC1B,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,kBAAkB,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;YAC3D,CAAC,CAAC,CAAA;YACN,gBAAgB,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB;iBACrD,oBAAoB,CAAC,OAAO,CAAC;iBAC7B,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACV,OAAO,IAAI,qBAAqB,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAA;YAC9D,CAAC,CAAC,CAAA;YACN,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC,0BAA0B,CACxD,cAAc,EACd,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,OAAO,CAAC,CACpD,CAAA;YACD,gBAAgB,CAAC,SAAS,CAAC,OAAO,CAC9B,CAAC,WAAW,EAAE,EAAE,CACZ,CAAC,WAAW,CAAC,sBAAsB,GAAG,gBAAgB,CAAC,CAC9D,CAAA;YACD,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YAClD,OAAO,gBAAgB,CAAA;QAC3B,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACO,0BAA0B,CAAC,cAA8B;QAC/D,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAC1C,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAClC,CAAA;QACD,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC1C,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CACxC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAChC,CAAA;YACD,QAAQ,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAA;QACtE,CAAC,CAAC,CAAA;QACF,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CACzC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAChC,CAAA;QACD,cAAc,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAA;QACnE,cAAc,CAAC,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CACtD,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,CACpB,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAChD,cAAc,CAAC,YAAY,CAC9B,CAAA;QACD,cAAc,CAAC,cAAc,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAC3D,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,CACjC,CAAA;QACD,cAAc,CAAC,aAAa,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAC1D,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,CAChC,CAAA;QACD,cAAc,CAAC,iBAAiB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAC9D,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,UAAU,CACpC,CAAA;QACD,cAAc,CAAC,kBAAkB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAC/D,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,WAAW,CACrC,CAAA;QACD,cAAc,CAAC,kBAAkB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAC/D,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,WAAW,CACrC,CAAA;QACD,cAAc,CAAC,mBAAmB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAChE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,YAAY,CACtC,CAAA;QACD,cAAc,CAAC,sBAAsB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CACnE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,eAAe,CACzC,CAAA;QACD,cAAc,CAAC,wBAAwB;YACnC,cAAc,CAAC,SAAS,CAAC,MAAM,CAC3B,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,iBAAiB,CAC3C,CAAA;QACL,cAAc,CAAC,kBAAkB,GAAG,cAAc,CAAC,SAAS,CAAC,IAAI,CAC7D,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,YAAY,CACtC,CAAA;QACD,cAAc,CAAC,oBAAoB,GAAG,cAAc,CAAC,SAAS,CAAC,IAAI,CAC/D,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,cAAc,CACxC,CAAA;QACD,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CACpD,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,EAC/D,cAAc,CAAC,UAAU,CAC5B,CAAA;QACD,cAAc,CAAC,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CACtD,CAAC,SAAS,EAAE,QAAQ,EAAE,EAAE,CACpB,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAChD,cAAc,CAAC,YAAY,CAC9B,CAAA;QACD,cAAc,CAAC,kBAAkB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAC/D,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,UAAU,CAChE,CAAA;QACD,cAAc,CAAC,oBAAoB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CACjE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,YAAY,CAClE,CAAA;QACD,cAAc,CAAC,oBAAoB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CACjE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,YAAY,CAClE,CAAA;QACD,cAAc,CAAC,oBAAoB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CACjE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,YAAY,CAClE,CAAA;QACD,cAAc,CAAC,wBAAwB;YACnC,cAAc,CAAC,SAAS,CAAC,MAAM,CAC3B,CAAC,QAAQ,EAAE,EAAE,CACT,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,iBAAiB,CAC7D,CAAA;QACL,cAAc,CAAC,qBAAqB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAClE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,aAAa,CACnE,CAAA;QACD,cAAc,CAAC,qBAAqB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAClE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,aAAa,CACnE,CAAA;QACD,cAAc,CAAC,qBAAqB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAClE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,aAAa,CACnE,CAAA;QACD,cAAc,CAAC,qBAAqB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAClE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,aAAa,CACnE,CAAA;QACD,cAAc,CAAC,yBAAyB;YACpC,cAAc,CAAC,SAAS,CAAC,MAAM,CAC3B,CAAC,QAAQ,EAAE,EAAE,CACT,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,kBAAkB,CAC9D,CAAA;QACL,cAAc,CAAC,sBAAsB,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CACnE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,kBAAkB,CAAC,cAAc,CACpE,CAAA;QACD,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CACpD,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,EAC/D,cAAc,CAAC,UAAU,CAC5B,CAAA;QACD,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CACpD,CAAC,OAAO,EAAE,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,CAAC,EAC/D,cAAc,CAAC,UAAU,CAC5B,CAAA;QACD,cAAc,CAAC,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC,MAAM,CACzD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAC/B,CAAA;QACD,cAAc,CAAC,iBAAiB,GAAG,cAAc,CAAC,OAAO,CAAC,MAAM,CAC5D,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAChC,CAAA;QACD,cAAc,CAAC,eAAe,GAAG,cAAc,CAAC,OAAO,CAAC,MAAM,CAC1D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,WAAW,KAAK,UAAU,CAChD,CAAA;QACD,cAAc,CAAC,iBAAiB,GAAG,cAAc,CAAC,OAAO,CAAC,MAAM,CAC5D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,WAAW,KAAK,YAAY,CAClD,CAAA;QACD,cAAc,CAAC,sBAAsB;YACjC,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAA;QAC5C,cAAc,CAAC,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,MAAM,CAC3D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,UAAU,CACtD,CAAA;QACD,cAAc,CAAC,uBAAuB;YAClC,cAAc,CAAC,OAAO,CAAC,MAAM,CACzB,CAAC,MAAM,EAAE,EAAE,CACP,MAAM,CAAC,WAAW,IAAI,MAAM,CAAC,kBAAkB,KAAK,MAAM,CACjE,CAAC,MAAM,GAAG,CAAC,CAAA;QAChB,cAAc,CAAC,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CACzD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAClC,CAAA;QACD,cAAc,CAAC,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CACzD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAClC,CAAA;QACD,cAAc,CAAC,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CACzD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAClC,CAAA;QACD,cAAc,CAAC,aAAa,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CACtD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAC/B,CAAA;QACD,cAAc,CAAC,mBAAmB,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAC5D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,eAAe,CACrC,CAAA;QACD,cAAc,CAAC,eAAe,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CACxD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,WAAW,CACjC,CAAA;QACD,cAAc,CAAC,mBAAmB,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAC5D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,eAAe,CACrC,CAAA;QACD,cAAc,CAAC,oBAAoB,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAC7D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,gBAAgB,CACtC,CAAA;QACD,cAAc,CAAC,sBAAsB,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAC/D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,kBAAkB,CACxC,CAAA;QACD,cAAc,CAAC,cAAc,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CACvD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,CAChC,CAAA;QACD,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE,CAC9C,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CACnD,CAAA;QACD,cAAc,CAAC,aAAa,GAAG,cAAc,CAAC,mBAAmB,EAAE,CAAA;QACnE,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAA;QACtE,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE,CACpD,aAAa,CAAC,KAAK,EAAE,CACxB,CAAA;QACD,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC1C,QAAQ,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE,CAChD,UAAU,CAAC,KAAK,EAAE,CACrB,CAAA;YACD,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE,CACtD,aAAa,CAAC,KAAK,EAAE,CACxB,CAAA;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACO,wBAAwB,CAC9B,cAA8B,EAC9B,eAAiC;QAEjC,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAC1C,6EAA6E;YAC7E,MAAM,qBAAqB,GAAG,eAAe,CAAC,IAAI,CAC9C,CAAC,CAAC,EAAE,EAAE,CACF,CAAC,CAAC,MAAM,KAAK,QAAQ,CAAC,IAAI;gBAC1B,CAAC,OAAO,QAAQ,CAAC,IAAI,KAAK,QAAQ;oBAC9B,CAAC,CAAC,CAAC,UAAU,KAAK,QAAQ,CAAC,IAAI;wBAC3B,CAAC,CAAC,cAAc,KAAK,QAAQ,CAAC,IAAI,CAAC,CAAC,CACnD,CAAA;YACD,IAAI,CAAC,qBAAqB;gBACtB,MAAM,IAAI,YAAY,CAClB,sBAAsB;oBAClB,cAAc,CAAC,IAAI;oBACnB,GAAG;oBACH,QAAQ,CAAC,YAAY;oBACrB,iHAAiH,CACxH,CAAA;YAEL,QAAQ,CAAC,qBAAqB,GAAG,qBAAqB,CAAA;YACtD,QAAQ,CAAC,uBAAuB;gBAC5B,QAAQ,CAAC,4BAA4B,EAAE,CAAA;YAE3C,uDAAuD;YACvD,QAAQ,CAAC,eAAe,GAAG,qBAAqB,CAAC,SAAS,CAAC,IAAI,CAC3D,CAAC,aAAa,EAAE,EAAE,CACd,aAAa,CAAC,YAAY;gBAC1B,QAAQ,CAAC,uBAAuB,CACvC,CAAA;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACO,6BAA6B,CAAC,cAA8B;QAClE,MAAM,mCAAmC,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CACnE,CAAC,EAAE,gBAAgB,EAAE,EAAE,EAAE,CACrB,CAAC,CAAC,gBAAgB;YAClB,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC;YAC/B,gBAAgB,CAAC,MAAM,KAAK,CAAC;YAC7B,gBAAgB,CAAC,CAAC,CAAC;gBACf,cAAc,CAAC,mBAAmB,EAAE,YAAY,CAC3D,CAAA;QAED,sEAAsE;QACtE,kCAAkC;QAClC,IAAI,mCAAmC,EAAE,CAAC;YACtC,OAAM;QACV,CAAC;QAED,cAAc,CAAC,OAAO,CAAC,IAAI,CACvB,IAAI,aAAa,CAAC;YACd,cAAc,EAAE,cAAc;YAC9B,OAAO,EAAE,CAAC,cAAc,CAAC,mBAAoB,CAAC;YAC9C,IAAI,EAAE;gBACF,MAAM,EAAE,cAAc,CAAC,MAAM;gBAC7B,MAAM,EAAE,KAAK;aAChB;SACJ,CAAC,CACL,CAAA;IACL,CAAC;CACJ","file":"EntityMetadataBuilder.js","sourcesContent":["import { EntityMetadata } from \"../metadata/EntityMetadata\"\r\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\r\nimport { IndexMetadata } from \"../metadata/IndexMetadata\"\r\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\r\nimport { EmbeddedMetadata } from \"../metadata/EmbeddedMetadata\"\r\nimport { MetadataArgsStorage } from \"../metadata-args/MetadataArgsStorage\"\r\nimport { EmbeddedMetadataArgs } from \"../metadata-args/EmbeddedMetadataArgs\"\r\nimport { RelationIdMetadata } from \"../metadata/RelationIdMetadata\"\r\nimport { RelationCountMetadata } from \"../metadata/RelationCountMetadata\"\r\nimport { EventListenerTypes } from \"../metadata/types/EventListenerTypes\"\r\nimport { MetadataUtils } from \"./MetadataUtils\"\r\nimport { TableMetadataArgs } from \"../metadata-args/TableMetadataArgs\"\r\nimport { JunctionEntityMetadataBuilder } from \"./JunctionEntityMetadataBuilder\"\r\nimport { ClosureJunctionEntityMetadataBuilder } from \"./ClosureJunctionEntityMetadataBuilder\"\r\nimport { RelationJoinColumnBuilder } from \"./RelationJoinColumnBuilder\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { EntityListenerMetadata } from \"../metadata/EntityListenerMetadata\"\r\nimport { UniqueMetadata } from \"../metadata/UniqueMetadata\"\r\nimport { CheckMetadata } from \"../metadata/CheckMetadata\"\r\nimport { ExclusionMetadata } from \"../metadata/ExclusionMetadata\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { DriverUtils } from \"../driver/DriverUtils\"\r\n\r\n/**\r\n * Builds EntityMetadata objects and all its sub-metadatas.\r\n */\r\nexport class EntityMetadataBuilder {\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Used to build entity metadatas of the junction entities.\r\n     */\r\n    protected junctionEntityMetadataBuilder: JunctionEntityMetadataBuilder\r\n\r\n    /**\r\n     * Used to build entity metadatas of the closure junction entities.\r\n     */\r\n    protected closureJunctionEntityMetadataBuilder: ClosureJunctionEntityMetadataBuilder\r\n\r\n    /**\r\n     * Used to build join columns of the relations.\r\n     */\r\n    protected relationJoinColumnBuilder: RelationJoinColumnBuilder\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        private connection: DataSource,\r\n        private metadataArgsStorage: MetadataArgsStorage,\r\n    ) {\r\n        this.junctionEntityMetadataBuilder = new JunctionEntityMetadataBuilder(\r\n            connection,\r\n        )\r\n        this.closureJunctionEntityMetadataBuilder =\r\n            new ClosureJunctionEntityMetadataBuilder(connection)\r\n        this.relationJoinColumnBuilder = new RelationJoinColumnBuilder(\r\n            connection,\r\n        )\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds a complete entity metadatas for the given entity classes.\r\n     */\r\n    build(entityClasses?: Function[]): EntityMetadata[] {\r\n        // if entity classes to filter entities by are given then do filtering, otherwise use all\r\n        const allTables = entityClasses\r\n            ? this.metadataArgsStorage.filterTables(entityClasses)\r\n            : this.metadataArgsStorage.tables\r\n\r\n        // filter out table metadata args for those we really create entity metadatas and tables in the db\r\n        const realTables = allTables.filter(\r\n            (table) =>\r\n                table.type === \"regular\" ||\r\n                table.type === \"closure\" ||\r\n                table.type === \"entity-child\" ||\r\n                table.type === \"view\",\r\n        )\r\n\r\n        // create entity metadatas for a user defined entities (marked with @Entity decorator or loaded from entity schemas)\r\n        const entityMetadatas = realTables.map((tableArgs) =>\r\n            this.createEntityMetadata(tableArgs),\r\n        )\r\n\r\n        // compute parent entity metadatas for table inheritance\r\n        entityMetadatas.forEach((entityMetadata) =>\r\n            this.computeParentEntityMetadata(entityMetadatas, entityMetadata),\r\n        )\r\n\r\n        // after all metadatas created we set child entity metadatas for table inheritance\r\n        entityMetadatas.forEach((metadata) => {\r\n            metadata.childEntityMetadatas = entityMetadatas.filter(\r\n                (childMetadata) => {\r\n                    return (\r\n                        typeof metadata.target === \"function\" &&\r\n                        typeof childMetadata.target === \"function\" &&\r\n                        MetadataUtils.isInherited(\r\n                            childMetadata.target,\r\n                            metadata.target,\r\n                        )\r\n                    )\r\n                },\r\n            )\r\n        })\r\n\r\n        // build entity metadata (step0), first for non-single-table-inherited entity metadatas (dependant)\r\n        entityMetadatas\r\n            .filter(\r\n                (entityMetadata) => entityMetadata.tableType !== \"entity-child\",\r\n            )\r\n            .forEach((entityMetadata) => entityMetadata.build())\r\n\r\n        // build entity metadata (step0), now for single-table-inherited entity metadatas (dependant)\r\n        entityMetadatas\r\n            .filter(\r\n                (entityMetadata) => entityMetadata.tableType === \"entity-child\",\r\n            )\r\n            .forEach((entityMetadata) => entityMetadata.build())\r\n\r\n        // compute entity metadata columns, relations, etc. first for the regular, non-single-table-inherited entity metadatas\r\n        entityMetadatas\r\n            .filter(\r\n                (entityMetadata) => entityMetadata.tableType !== \"entity-child\",\r\n            )\r\n            .forEach((entityMetadata) =>\r\n                this.computeEntityMetadataStep1(\r\n                    entityMetadatas,\r\n                    entityMetadata,\r\n                ),\r\n            )\r\n\r\n        // then do it for single table inheritance children (since they are depend on their parents to be built)\r\n        entityMetadatas\r\n            .filter(\r\n                (entityMetadata) => entityMetadata.tableType === \"entity-child\",\r\n            )\r\n            .forEach((entityMetadata) =>\r\n                this.computeEntityMetadataStep1(\r\n                    entityMetadatas,\r\n                    entityMetadata,\r\n                ),\r\n            )\r\n\r\n        // calculate entity metadata computed properties and all its sub-metadatas\r\n        entityMetadatas.forEach((entityMetadata) =>\r\n            this.computeEntityMetadataStep2(entityMetadata),\r\n        )\r\n\r\n        // calculate entity metadata's inverse properties\r\n        entityMetadatas.forEach((entityMetadata) =>\r\n            this.computeInverseProperties(entityMetadata, entityMetadatas),\r\n        )\r\n\r\n        // go through all entity metadatas and create foreign keys / junction entity metadatas for their relations\r\n        entityMetadatas\r\n            .filter(\r\n                (entityMetadata) => entityMetadata.tableType !== \"entity-child\",\r\n            )\r\n            .forEach((entityMetadata) => {\r\n                // create entity's relations join columns (for many-to-one and one-to-one owner)\r\n                entityMetadata.relations\r\n                    .filter(\r\n                        (relation) =>\r\n                            relation.isOneToOne || relation.isManyToOne,\r\n                    )\r\n                    .forEach((relation) => {\r\n                        const joinColumns =\r\n                            this.metadataArgsStorage.filterJoinColumns(\r\n                                relation.target,\r\n                                relation.propertyName,\r\n                            )\r\n                        const { foreignKey, columns, uniqueConstraint } =\r\n                            this.relationJoinColumnBuilder.build(\r\n                                joinColumns,\r\n                                relation,\r\n                            ) // create a foreign key based on its metadata args\r\n                        if (foreignKey) {\r\n                            relation.registerForeignKeys(foreignKey) // push it to the relation and thus register there a join column\r\n                            entityMetadata.foreignKeys.push(foreignKey)\r\n                        }\r\n                        if (columns) {\r\n                            relation.registerJoinColumns(columns)\r\n                        }\r\n                        if (uniqueConstraint) {\r\n                            if (\r\n                                DriverUtils.isMySQLFamily(\r\n                                    this.connection.driver,\r\n                                ) ||\r\n                                this.connection.driver.options.type ===\r\n                                    \"aurora-mysql\" ||\r\n                                this.connection.driver.options.type ===\r\n                                    \"mssql\" ||\r\n                                this.connection.driver.options.type === \"sap\" ||\r\n                                this.connection.driver.options.type ===\r\n                                    \"spanner\"\r\n                            ) {\r\n                                const index = new IndexMetadata({\r\n                                    entityMetadata:\r\n                                        uniqueConstraint.entityMetadata,\r\n                                    columns: uniqueConstraint.columns,\r\n                                    args: {\r\n                                        target: uniqueConstraint.target!,\r\n                                        name: uniqueConstraint.name,\r\n                                        unique: true,\r\n                                        synchronize: true,\r\n                                    },\r\n                                })\r\n\r\n                                if (\r\n                                    this.connection.driver.options.type ===\r\n                                    \"mssql\"\r\n                                ) {\r\n                                    index.where = index.columns\r\n                                        .map((column) => {\r\n                                            return `${this.connection.driver.escape(\r\n                                                column.databaseName,\r\n                                            )} IS NOT NULL`\r\n                                        })\r\n                                        .join(\" AND \")\r\n                                }\r\n\r\n                                if (\r\n                                    this.connection.driver.options.type ===\r\n                                    \"spanner\"\r\n                                ) {\r\n                                    index.isNullFiltered = true\r\n                                }\r\n\r\n                                if (relation.embeddedMetadata) {\r\n                                    relation.embeddedMetadata.indices.push(\r\n                                        index,\r\n                                    )\r\n                                } else {\r\n                                    relation.entityMetadata.ownIndices.push(\r\n                                        index,\r\n                                    )\r\n                                }\r\n                                this.computeEntityMetadataStep2(entityMetadata)\r\n                            } else {\r\n                                if (relation.embeddedMetadata) {\r\n                                    relation.embeddedMetadata.uniques.push(\r\n                                        uniqueConstraint,\r\n                                    )\r\n                                } else {\r\n                                    relation.entityMetadata.ownUniques.push(\r\n                                        uniqueConstraint,\r\n                                    )\r\n                                }\r\n                                this.computeEntityMetadataStep2(entityMetadata)\r\n                            }\r\n                        }\r\n\r\n                        if (\r\n                            foreignKey &&\r\n                            this.connection.driver.options.type ===\r\n                                \"cockroachdb\"\r\n                        ) {\r\n                            const index = new IndexMetadata({\r\n                                entityMetadata: relation.entityMetadata,\r\n                                columns: foreignKey.columns,\r\n                                args: {\r\n                                    target: relation.entityMetadata.target!,\r\n                                    synchronize: true,\r\n                                },\r\n                            })\r\n                            if (relation.embeddedMetadata) {\r\n                                relation.embeddedMetadata.indices.push(index)\r\n                            } else {\r\n                                relation.entityMetadata.ownIndices.push(index)\r\n                            }\r\n                            this.computeEntityMetadataStep2(entityMetadata)\r\n                        }\r\n                    })\r\n\r\n                // create junction entity metadatas for entity many-to-many relations\r\n                entityMetadata.relations\r\n                    .filter((relation) => relation.isManyToMany)\r\n                    .forEach((relation) => {\r\n                        const joinTable =\r\n                            this.metadataArgsStorage.findJoinTable(\r\n                                relation.target,\r\n                                relation.propertyName,\r\n                            )!\r\n                        if (!joinTable) return // no join table set - no need to do anything (it means this is many-to-many inverse side)\r\n\r\n                        // here we create a junction entity metadata for a new junction table of many-to-many relation\r\n                        const junctionEntityMetadata =\r\n                            this.junctionEntityMetadataBuilder.build(\r\n                                relation,\r\n                                joinTable,\r\n                            )\r\n                        relation.registerForeignKeys(\r\n                            ...junctionEntityMetadata.foreignKeys,\r\n                        )\r\n                        relation.registerJoinColumns(\r\n                            junctionEntityMetadata.ownIndices[0].columns,\r\n                            junctionEntityMetadata.ownIndices[1].columns,\r\n                        )\r\n                        relation.registerJunctionEntityMetadata(\r\n                            junctionEntityMetadata,\r\n                        )\r\n\r\n                        // compute new entity metadata properties and push it to entity metadatas pool\r\n                        this.computeEntityMetadataStep2(junctionEntityMetadata)\r\n                        this.computeInverseProperties(\r\n                            junctionEntityMetadata,\r\n                            entityMetadatas,\r\n                        )\r\n                        entityMetadatas.push(junctionEntityMetadata)\r\n                    })\r\n            })\r\n\r\n        // update entity metadata depend properties\r\n        entityMetadatas.forEach((entityMetadata) => {\r\n            entityMetadata.relationsWithJoinColumns =\r\n                entityMetadata.relations.filter(\r\n                    (relation) => relation.isWithJoinColumn,\r\n                )\r\n            entityMetadata.hasNonNullableRelations =\r\n                entityMetadata.relationsWithJoinColumns.some(\r\n                    (relation) => !relation.isNullable || relation.isPrimary,\r\n                )\r\n        })\r\n\r\n        // generate closure junction tables for all closure tables\r\n        entityMetadatas\r\n            .filter((metadata) => metadata.treeType === \"closure-table\")\r\n            .forEach((entityMetadata) => {\r\n                const closureJunctionEntityMetadata =\r\n                    this.closureJunctionEntityMetadataBuilder.build(\r\n                        entityMetadata,\r\n                    )\r\n                entityMetadata.closureJunctionTable =\r\n                    closureJunctionEntityMetadata\r\n                this.computeEntityMetadataStep2(closureJunctionEntityMetadata)\r\n                this.computeInverseProperties(\r\n                    closureJunctionEntityMetadata,\r\n                    entityMetadatas,\r\n                )\r\n                entityMetadatas.push(closureJunctionEntityMetadata)\r\n            })\r\n\r\n        // generate keys for tables with single-table inheritance\r\n        entityMetadatas\r\n            .filter(\r\n                (metadata) =>\r\n                    metadata.inheritancePattern === \"STI\" &&\r\n                    metadata.discriminatorColumn,\r\n            )\r\n            .forEach((entityMetadata) =>\r\n                this.createKeysForTableInheritance(entityMetadata),\r\n            )\r\n\r\n        // build all indices (need to do it after relations and their join columns are built)\r\n        entityMetadatas.forEach((entityMetadata) => {\r\n            entityMetadata.indices.forEach((index) =>\r\n                index.build(this.connection.namingStrategy),\r\n            )\r\n        })\r\n\r\n        // build all unique constraints (need to do it after relations and their join columns are built)\r\n        entityMetadatas.forEach((entityMetadata) => {\r\n            entityMetadata.uniques.forEach((unique) =>\r\n                unique.build(this.connection.namingStrategy),\r\n            )\r\n        })\r\n\r\n        // build all check constraints\r\n        entityMetadatas.forEach((entityMetadata) => {\r\n            entityMetadata.checks.forEach((check) =>\r\n                check.build(this.connection.namingStrategy),\r\n            )\r\n        })\r\n\r\n        // build all exclusion constraints\r\n        entityMetadatas.forEach((entityMetadata) => {\r\n            entityMetadata.exclusions.forEach((exclusion) =>\r\n                exclusion.build(this.connection.namingStrategy),\r\n            )\r\n        })\r\n\r\n        // add lazy initializer for entity relations\r\n        entityMetadatas\r\n            .filter((metadata) => typeof metadata.target === \"function\")\r\n            .forEach((entityMetadata) => {\r\n                entityMetadata.relations\r\n                    .filter((relation) => relation.isLazy)\r\n                    .forEach((relation) => {\r\n                        this.connection.relationLoader.enableLazyLoad(\r\n                            relation,\r\n                            (entityMetadata.target as Function).prototype,\r\n                        )\r\n                    })\r\n            })\r\n\r\n        entityMetadatas.forEach((entityMetadata) => {\r\n            entityMetadata.columns.forEach((column) => {\r\n                // const target = column.embeddedMetadata ? column.embeddedMetadata.type : column.target;\r\n                const generated = this.metadataArgsStorage.findGenerated(\r\n                    column.target,\r\n                    column.propertyName,\r\n                )\r\n                if (generated) {\r\n                    column.isGenerated = true\r\n                    column.generationStrategy = generated.strategy\r\n                    if (generated.strategy === \"uuid\") {\r\n                        column.type = \"uuid\"\r\n                    } else if (generated.strategy === \"rowid\") {\r\n                        column.type = \"int\"\r\n                    } else {\r\n                        column.type = column.type || Number\r\n                    }\r\n                    column.build(this.connection)\r\n                    this.computeEntityMetadataStep2(entityMetadata)\r\n                }\r\n            })\r\n        })\r\n\r\n        return entityMetadatas\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates entity metadata from the given table args.\r\n     * Creates column, relation, etc. metadatas for everything this entity metadata owns.\r\n     */\r\n    protected createEntityMetadata(\r\n        tableArgs: TableMetadataArgs,\r\n    ): EntityMetadata {\r\n        // we take all \"inheritance tree\" from a target entity to collect all stored metadata args\r\n        // (by decorators or inside entity schemas). For example for target Post < ContentModel < Unit\r\n        // it will be an array of [Post, ContentModel, Unit] and we can then get all metadata args of those classes\r\n        const inheritanceTree: any[] =\r\n            typeof tableArgs.target === \"function\"\r\n                ? MetadataUtils.getInheritanceTree(tableArgs.target)\r\n                : [tableArgs.target] // todo: implement later here inheritance for string-targets\r\n\r\n        const tableInheritance = this.metadataArgsStorage.findInheritanceType(\r\n            tableArgs.target,\r\n        )\r\n        const tableTree = this.metadataArgsStorage.findTree(tableArgs.target)\r\n\r\n        // if single table inheritance used, we need to copy all children columns in to parent table\r\n        let singleTableChildrenTargets: any[]\r\n        if (\r\n            (tableInheritance && tableInheritance.pattern === \"STI\") ||\r\n            tableArgs.type === \"entity-child\"\r\n        ) {\r\n            singleTableChildrenTargets = this.metadataArgsStorage\r\n                .filterSingleTableChildren(tableArgs.target)\r\n                .map((args) => args.target)\r\n                .filter((target) => typeof target === \"function\")\r\n\r\n            inheritanceTree.push(...singleTableChildrenTargets)\r\n        }\r\n\r\n        return new EntityMetadata({\r\n            connection: this.connection,\r\n            args: tableArgs,\r\n            inheritanceTree: inheritanceTree,\r\n            tableTree: tableTree,\r\n            inheritancePattern: tableInheritance\r\n                ? tableInheritance.pattern\r\n                : undefined,\r\n        })\r\n    }\r\n\r\n    protected computeParentEntityMetadata(\r\n        allEntityMetadatas: EntityMetadata[],\r\n        entityMetadata: EntityMetadata,\r\n    ) {\r\n        // after all metadatas created we set parent entity metadata for table inheritance\r\n        if (entityMetadata.tableType === \"entity-child\") {\r\n            entityMetadata.parentEntityMetadata = allEntityMetadatas.find(\r\n                (allEntityMetadata) => {\r\n                    return (\r\n                        allEntityMetadata.inheritanceTree.indexOf(\r\n                            entityMetadata.target as Function,\r\n                        ) !== -1 &&\r\n                        allEntityMetadata.inheritancePattern === \"STI\"\r\n                    )\r\n                },\r\n            )!\r\n        }\r\n    }\r\n\r\n    protected computeEntityMetadataStep1(\r\n        allEntityMetadatas: EntityMetadata[],\r\n        entityMetadata: EntityMetadata,\r\n    ) {\r\n        const entityInheritance = this.metadataArgsStorage.findInheritanceType(\r\n            entityMetadata.target,\r\n        )\r\n\r\n        const discriminatorValue =\r\n            this.metadataArgsStorage.findDiscriminatorValue(\r\n                entityMetadata.target,\r\n            )\r\n\r\n        if (typeof discriminatorValue !== \"undefined\") {\r\n            entityMetadata.discriminatorValue = discriminatorValue.value\r\n        } else {\r\n            entityMetadata.discriminatorValue = (\r\n                entityMetadata.target as any\r\n            ).name\r\n        }\r\n\r\n        // if single table inheritance is used, we need to mark all embedded columns as nullable\r\n        entityMetadata.embeddeds = this.createEmbeddedsRecursively(\r\n            entityMetadata,\r\n            this.metadataArgsStorage.filterEmbeddeds(\r\n                entityMetadata.inheritanceTree,\r\n            ),\r\n        ).map((embedded: EmbeddedMetadata): EmbeddedMetadata => {\r\n            if (entityMetadata.inheritancePattern === \"STI\") {\r\n                embedded.columns = embedded.columns.map(\r\n                    (column: ColumnMetadata): ColumnMetadata => {\r\n                        column.isNullable = true\r\n                        return column\r\n                    },\r\n                )\r\n            }\r\n            return embedded\r\n        })\r\n\r\n        entityMetadata.ownColumns = this.metadataArgsStorage\r\n            .filterColumns(entityMetadata.inheritanceTree)\r\n            .map((args) => {\r\n                // for single table children we reuse columns created for their parents\r\n                if (entityMetadata.tableType === \"entity-child\")\r\n                    return entityMetadata.parentEntityMetadata.ownColumns.find(\r\n                        (column) => column.propertyName === args.propertyName,\r\n                    )!\r\n\r\n                // for multiple table inheritance we can override default column values\r\n                if (\r\n                    entityMetadata.tableType === \"regular\" &&\r\n                    args.target !== entityMetadata.target\r\n                ) {\r\n                    const childArgs = this.metadataArgsStorage.columns.find(\r\n                        (c) =>\r\n                            c.propertyName === args.propertyName &&\r\n                            c.target === entityMetadata.target,\r\n                    )\r\n                    if (childArgs && childArgs.options.default) {\r\n                        args.options.default = childArgs.options.default\r\n                    }\r\n                }\r\n\r\n                const column = new ColumnMetadata({\r\n                    connection: this.connection,\r\n                    entityMetadata,\r\n                    args,\r\n                })\r\n\r\n                // if single table inheritance used, we need to mark all inherit table columns as nullable\r\n                const columnInSingleTableInheritedChild =\r\n                    allEntityMetadatas.find(\r\n                        (otherEntityMetadata) =>\r\n                            otherEntityMetadata.tableType === \"entity-child\" &&\r\n                            otherEntityMetadata.target === args.target,\r\n                    )\r\n                if (columnInSingleTableInheritedChild) column.isNullable = true\r\n                return column\r\n            })\r\n\r\n        // for table inheritance we need to add a discriminator column\r\n        //\r\n        if (entityInheritance && entityInheritance.column) {\r\n            const discriminatorColumnName =\r\n                entityInheritance.column && entityInheritance.column.name\r\n                    ? entityInheritance.column.name\r\n                    : \"type\"\r\n            let discriminatorColumn = entityMetadata.ownColumns.find(\r\n                (column) => column.propertyName === discriminatorColumnName,\r\n            )\r\n            if (!discriminatorColumn) {\r\n                discriminatorColumn = new ColumnMetadata({\r\n                    connection: this.connection,\r\n                    entityMetadata: entityMetadata,\r\n                    args: {\r\n                        target: entityMetadata.target,\r\n                        mode: \"virtual\",\r\n                        propertyName: discriminatorColumnName,\r\n                        options: entityInheritance.column || {\r\n                            name: discriminatorColumnName,\r\n                            type: \"varchar\",\r\n                            nullable: false,\r\n                        },\r\n                    },\r\n                })\r\n                discriminatorColumn.isVirtual = true\r\n                discriminatorColumn.isDiscriminator = true\r\n                entityMetadata.ownColumns.push(discriminatorColumn)\r\n            } else {\r\n                discriminatorColumn.isDiscriminator = true\r\n            }\r\n        }\r\n\r\n        // add discriminator column to the child entity metadatas\r\n        // discriminator column will not be there automatically since we are creating it in the code above\r\n        if (entityMetadata.tableType === \"entity-child\") {\r\n            const discriminatorColumn =\r\n                entityMetadata.parentEntityMetadata.ownColumns.find(\r\n                    (column) => column.isDiscriminator,\r\n                )\r\n            if (\r\n                discriminatorColumn &&\r\n                !entityMetadata.ownColumns.find(\r\n                    (column) => column === discriminatorColumn,\r\n                )\r\n            ) {\r\n                entityMetadata.ownColumns.push(discriminatorColumn)\r\n            }\r\n            // also copy the inheritance pattern & tree metadata\r\n            // this comes in handy when inheritance and trees are used together\r\n            entityMetadata.inheritancePattern =\r\n                entityMetadata.parentEntityMetadata.inheritancePattern\r\n            if (\r\n                !entityMetadata.treeType &&\r\n                !!entityMetadata.parentEntityMetadata.treeType\r\n            ) {\r\n                entityMetadata.treeType =\r\n                    entityMetadata.parentEntityMetadata.treeType\r\n                entityMetadata.treeOptions =\r\n                    entityMetadata.parentEntityMetadata.treeOptions\r\n                entityMetadata.treeParentRelation =\r\n                    entityMetadata.parentEntityMetadata.treeParentRelation\r\n                entityMetadata.treeLevelColumn =\r\n                    entityMetadata.parentEntityMetadata.treeLevelColumn\r\n            }\r\n        }\r\n\r\n        const { namingStrategy } = this.connection\r\n\r\n        // check if tree is used then we need to add extra columns for specific tree types\r\n        if (entityMetadata.treeType === \"materialized-path\") {\r\n            entityMetadata.ownColumns.push(\r\n                new ColumnMetadata({\r\n                    connection: this.connection,\r\n                    entityMetadata: entityMetadata,\r\n                    materializedPath: true,\r\n                    args: {\r\n                        target: entityMetadata.target,\r\n                        mode: \"virtual\",\r\n                        propertyName: \"mpath\",\r\n                        options: /*tree.column || */ {\r\n                            name: namingStrategy.materializedPathColumnName,\r\n                            type: String,\r\n                            nullable: true,\r\n                            default: \"\",\r\n                        },\r\n                    },\r\n                }),\r\n            )\r\n        } else if (entityMetadata.treeType === \"nested-set\") {\r\n            const { left, right } = namingStrategy.nestedSetColumnNames\r\n            entityMetadata.ownColumns.push(\r\n                new ColumnMetadata({\r\n                    connection: this.connection,\r\n                    entityMetadata: entityMetadata,\r\n                    nestedSetLeft: true,\r\n                    args: {\r\n                        target: entityMetadata.target,\r\n                        mode: \"virtual\",\r\n                        propertyName: left,\r\n                        options: /*tree.column || */ {\r\n                            name: left,\r\n                            type: Number,\r\n                            nullable: false,\r\n                            default: 1,\r\n                        },\r\n                    },\r\n                }),\r\n            )\r\n            entityMetadata.ownColumns.push(\r\n                new ColumnMetadata({\r\n                    connection: this.connection,\r\n                    entityMetadata: entityMetadata,\r\n                    nestedSetRight: true,\r\n                    args: {\r\n                        target: entityMetadata.target,\r\n                        mode: \"virtual\",\r\n                        propertyName: right,\r\n                        options: /*tree.column || */ {\r\n                            name: right,\r\n                            type: Number,\r\n                            nullable: false,\r\n                            default: 2,\r\n                        },\r\n                    },\r\n                }),\r\n            )\r\n        }\r\n\r\n        entityMetadata.ownRelations = this.metadataArgsStorage\r\n            .filterRelations(entityMetadata.inheritanceTree)\r\n            .map((args) => {\r\n                // for single table children we reuse relations created for their parents\r\n                if (entityMetadata.tableType === \"entity-child\") {\r\n                    const parentRelation =\r\n                        entityMetadata.parentEntityMetadata.ownRelations.find(\r\n                            (relation) =>\r\n                                relation.propertyName === args.propertyName,\r\n                        )!\r\n                    const type =\r\n                        typeof args.type === \"function\"\r\n                            ? (args.type as () => any)()\r\n                            : args.type\r\n                    if (parentRelation.type !== type) {\r\n                        const clone = Object.create(parentRelation)\r\n                        clone.type = type\r\n                        return clone\r\n                    }\r\n\r\n                    return parentRelation\r\n                }\r\n\r\n                return new RelationMetadata({ entityMetadata, args })\r\n            })\r\n        entityMetadata.relationIds = this.metadataArgsStorage\r\n            .filterRelationIds(entityMetadata.inheritanceTree)\r\n            .map((args) => {\r\n                // for single table children we reuse relation ids created for their parents\r\n                if (entityMetadata.tableType === \"entity-child\")\r\n                    return entityMetadata.parentEntityMetadata.relationIds.find(\r\n                        (relationId) =>\r\n                            relationId.propertyName === args.propertyName,\r\n                    )!\r\n\r\n                return new RelationIdMetadata({ entityMetadata, args })\r\n            })\r\n        entityMetadata.relationCounts = this.metadataArgsStorage\r\n            .filterRelationCounts(entityMetadata.inheritanceTree)\r\n            .map((args) => {\r\n                // for single table children we reuse relation counts created for their parents\r\n                if (entityMetadata.tableType === \"entity-child\")\r\n                    return entityMetadata.parentEntityMetadata.relationCounts.find(\r\n                        (relationCount) =>\r\n                            relationCount.propertyName === args.propertyName,\r\n                    )!\r\n\r\n                return new RelationCountMetadata({ entityMetadata, args })\r\n            })\r\n        entityMetadata.ownListeners = this.metadataArgsStorage\r\n            .filterListeners(entityMetadata.inheritanceTree)\r\n            .map((args) => {\r\n                return new EntityListenerMetadata({\r\n                    entityMetadata: entityMetadata,\r\n                    args: args,\r\n                })\r\n            })\r\n        entityMetadata.checks = this.metadataArgsStorage\r\n            .filterChecks(entityMetadata.inheritanceTree)\r\n            .map((args) => {\r\n                return new CheckMetadata({ entityMetadata, args })\r\n            })\r\n\r\n        // Only PostgreSQL supports exclusion constraints.\r\n        if (this.connection.driver.options.type === \"postgres\") {\r\n            entityMetadata.exclusions = this.metadataArgsStorage\r\n                .filterExclusions(entityMetadata.inheritanceTree)\r\n                .map((args) => {\r\n                    return new ExclusionMetadata({ entityMetadata, args })\r\n                })\r\n        }\r\n\r\n        if (this.connection.driver.options.type === \"cockroachdb\") {\r\n            entityMetadata.ownIndices = this.metadataArgsStorage\r\n                .filterIndices(entityMetadata.inheritanceTree)\r\n                .filter((args) => !args.unique)\r\n                .map((args) => {\r\n                    return new IndexMetadata({ entityMetadata, args })\r\n                })\r\n\r\n            const uniques = this.metadataArgsStorage\r\n                .filterIndices(entityMetadata.inheritanceTree)\r\n                .filter((args) => args.unique)\r\n                .map((args) => {\r\n                    return new UniqueMetadata({\r\n                        entityMetadata: entityMetadata,\r\n                        args: {\r\n                            target: args.target,\r\n                            name: args.name,\r\n                            columns: args.columns,\r\n                        },\r\n                    })\r\n                })\r\n            entityMetadata.ownUniques.push(...uniques)\r\n        } else {\r\n            entityMetadata.ownIndices = this.metadataArgsStorage\r\n                .filterIndices(entityMetadata.inheritanceTree)\r\n                .map((args) => {\r\n                    return new IndexMetadata({ entityMetadata, args })\r\n                })\r\n        }\r\n\r\n        // This drivers stores unique constraints as unique indices.\r\n        if (\r\n            DriverUtils.isMySQLFamily(this.connection.driver) ||\r\n            this.connection.driver.options.type === \"aurora-mysql\" ||\r\n            this.connection.driver.options.type === \"sap\" ||\r\n            this.connection.driver.options.type === \"spanner\"\r\n        ) {\r\n            const indices = this.metadataArgsStorage\r\n                .filterUniques(entityMetadata.inheritanceTree)\r\n                .map((args) => {\r\n                    return new IndexMetadata({\r\n                        entityMetadata: entityMetadata,\r\n                        args: {\r\n                            target: args.target,\r\n                            name: args.name,\r\n                            columns: args.columns,\r\n                            unique: true,\r\n                            synchronize: true,\r\n                        },\r\n                    })\r\n                })\r\n            entityMetadata.ownIndices.push(...indices)\r\n        } else {\r\n            const uniques = this.metadataArgsStorage\r\n                .filterUniques(entityMetadata.inheritanceTree)\r\n                .map((args) => {\r\n                    return new UniqueMetadata({ entityMetadata, args })\r\n                })\r\n            entityMetadata.ownUniques.push(...uniques)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates from the given embedded metadata args real embedded metadatas with its columns and relations,\r\n     * and does the same for all its sub-embeddeds (goes recursively).\r\n     */\r\n    protected createEmbeddedsRecursively(\r\n        entityMetadata: EntityMetadata,\r\n        embeddedArgs: EmbeddedMetadataArgs[],\r\n    ): EmbeddedMetadata[] {\r\n        return embeddedArgs.map((embeddedArgs) => {\r\n            const embeddedMetadata = new EmbeddedMetadata({\r\n                entityMetadata: entityMetadata,\r\n                args: embeddedArgs,\r\n            })\r\n            const targets: any[] =\r\n                typeof embeddedMetadata.type === \"function\"\r\n                    ? MetadataUtils.getInheritanceTree(embeddedMetadata.type)\r\n                    : [embeddedMetadata.type] // todo: implement later here inheritance for string-targets\r\n\r\n            embeddedMetadata.columns = this.metadataArgsStorage\r\n                .filterColumns(targets)\r\n                .map((args) => {\r\n                    return new ColumnMetadata({\r\n                        connection: this.connection,\r\n                        entityMetadata,\r\n                        embeddedMetadata,\r\n                        args,\r\n                    })\r\n                })\r\n            embeddedMetadata.relations = this.metadataArgsStorage\r\n                .filterRelations(targets)\r\n                .map((args) => {\r\n                    return new RelationMetadata({\r\n                        entityMetadata,\r\n                        embeddedMetadata,\r\n                        args,\r\n                    })\r\n                })\r\n            embeddedMetadata.listeners = this.metadataArgsStorage\r\n                .filterListeners(targets)\r\n                .map((args) => {\r\n                    return new EntityListenerMetadata({\r\n                        entityMetadata,\r\n                        embeddedMetadata,\r\n                        args,\r\n                    })\r\n                })\r\n            embeddedMetadata.indices = this.metadataArgsStorage\r\n                .filterIndices(targets)\r\n                .map((args) => {\r\n                    return new IndexMetadata({\r\n                        entityMetadata,\r\n                        embeddedMetadata,\r\n                        args,\r\n                    })\r\n                })\r\n            embeddedMetadata.uniques = this.metadataArgsStorage\r\n                .filterUniques(targets)\r\n                .map((args) => {\r\n                    return new UniqueMetadata({\r\n                        entityMetadata,\r\n                        embeddedMetadata,\r\n                        args,\r\n                    })\r\n                })\r\n            embeddedMetadata.relationIds = this.metadataArgsStorage\r\n                .filterRelationIds(targets)\r\n                .map((args) => {\r\n                    return new RelationIdMetadata({ entityMetadata, args })\r\n                })\r\n            embeddedMetadata.relationCounts = this.metadataArgsStorage\r\n                .filterRelationCounts(targets)\r\n                .map((args) => {\r\n                    return new RelationCountMetadata({ entityMetadata, args })\r\n                })\r\n            embeddedMetadata.embeddeds = this.createEmbeddedsRecursively(\r\n                entityMetadata,\r\n                this.metadataArgsStorage.filterEmbeddeds(targets),\r\n            )\r\n            embeddedMetadata.embeddeds.forEach(\r\n                (subEmbedded) =>\r\n                    (subEmbedded.parentEmbeddedMetadata = embeddedMetadata),\r\n            )\r\n            entityMetadata.allEmbeddeds.push(embeddedMetadata)\r\n            return embeddedMetadata\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Computes all entity metadata's computed properties, and all its sub-metadatas (relations, columns, embeds, etc).\r\n     */\r\n    protected computeEntityMetadataStep2(entityMetadata: EntityMetadata) {\r\n        entityMetadata.embeddeds.forEach((embedded) =>\r\n            embedded.build(this.connection),\r\n        )\r\n        entityMetadata.embeddeds.forEach((embedded) => {\r\n            embedded.columnsFromTree.forEach((column) =>\r\n                column.build(this.connection),\r\n            )\r\n            embedded.relationsFromTree.forEach((relation) => relation.build())\r\n        })\r\n        entityMetadata.ownColumns.forEach((column) =>\r\n            column.build(this.connection),\r\n        )\r\n        entityMetadata.ownRelations.forEach((relation) => relation.build())\r\n        entityMetadata.relations = entityMetadata.embeddeds.reduce(\r\n            (relations, embedded) =>\r\n                relations.concat(embedded.relationsFromTree),\r\n            entityMetadata.ownRelations,\r\n        )\r\n        entityMetadata.eagerRelations = entityMetadata.relations.filter(\r\n            (relation) => relation.isEager,\r\n        )\r\n        entityMetadata.lazyRelations = entityMetadata.relations.filter(\r\n            (relation) => relation.isLazy,\r\n        )\r\n        entityMetadata.oneToOneRelations = entityMetadata.relations.filter(\r\n            (relation) => relation.isOneToOne,\r\n        )\r\n        entityMetadata.oneToManyRelations = entityMetadata.relations.filter(\r\n            (relation) => relation.isOneToMany,\r\n        )\r\n        entityMetadata.manyToOneRelations = entityMetadata.relations.filter(\r\n            (relation) => relation.isManyToOne,\r\n        )\r\n        entityMetadata.manyToManyRelations = entityMetadata.relations.filter(\r\n            (relation) => relation.isManyToMany,\r\n        )\r\n        entityMetadata.ownerOneToOneRelations = entityMetadata.relations.filter(\r\n            (relation) => relation.isOneToOneOwner,\r\n        )\r\n        entityMetadata.ownerManyToManyRelations =\r\n            entityMetadata.relations.filter(\r\n                (relation) => relation.isManyToManyOwner,\r\n            )\r\n        entityMetadata.treeParentRelation = entityMetadata.relations.find(\r\n            (relation) => relation.isTreeParent,\r\n        )\r\n        entityMetadata.treeChildrenRelation = entityMetadata.relations.find(\r\n            (relation) => relation.isTreeChildren,\r\n        )\r\n        entityMetadata.columns = entityMetadata.embeddeds.reduce(\r\n            (columns, embedded) => columns.concat(embedded.columnsFromTree),\r\n            entityMetadata.ownColumns,\r\n        )\r\n        entityMetadata.listeners = entityMetadata.embeddeds.reduce(\r\n            (listeners, embedded) =>\r\n                listeners.concat(embedded.listenersFromTree),\r\n            entityMetadata.ownListeners,\r\n        )\r\n        entityMetadata.afterLoadListeners = entityMetadata.listeners.filter(\r\n            (listener) => listener.type === EventListenerTypes.AFTER_LOAD,\r\n        )\r\n        entityMetadata.afterInsertListeners = entityMetadata.listeners.filter(\r\n            (listener) => listener.type === EventListenerTypes.AFTER_INSERT,\r\n        )\r\n        entityMetadata.afterUpdateListeners = entityMetadata.listeners.filter(\r\n            (listener) => listener.type === EventListenerTypes.AFTER_UPDATE,\r\n        )\r\n        entityMetadata.afterRemoveListeners = entityMetadata.listeners.filter(\r\n            (listener) => listener.type === EventListenerTypes.AFTER_REMOVE,\r\n        )\r\n        entityMetadata.afterSoftRemoveListeners =\r\n            entityMetadata.listeners.filter(\r\n                (listener) =>\r\n                    listener.type === EventListenerTypes.AFTER_SOFT_REMOVE,\r\n            )\r\n        entityMetadata.afterRecoverListeners = entityMetadata.listeners.filter(\r\n            (listener) => listener.type === EventListenerTypes.AFTER_RECOVER,\r\n        )\r\n        entityMetadata.beforeInsertListeners = entityMetadata.listeners.filter(\r\n            (listener) => listener.type === EventListenerTypes.BEFORE_INSERT,\r\n        )\r\n        entityMetadata.beforeUpdateListeners = entityMetadata.listeners.filter(\r\n            (listener) => listener.type === EventListenerTypes.BEFORE_UPDATE,\r\n        )\r\n        entityMetadata.beforeRemoveListeners = entityMetadata.listeners.filter(\r\n            (listener) => listener.type === EventListenerTypes.BEFORE_REMOVE,\r\n        )\r\n        entityMetadata.beforeSoftRemoveListeners =\r\n            entityMetadata.listeners.filter(\r\n                (listener) =>\r\n                    listener.type === EventListenerTypes.BEFORE_SOFT_REMOVE,\r\n            )\r\n        entityMetadata.beforeRecoverListeners = entityMetadata.listeners.filter(\r\n            (listener) => listener.type === EventListenerTypes.BEFORE_RECOVER,\r\n        )\r\n        entityMetadata.indices = entityMetadata.embeddeds.reduce(\r\n            (indices, embedded) => indices.concat(embedded.indicesFromTree),\r\n            entityMetadata.ownIndices,\r\n        )\r\n        entityMetadata.uniques = entityMetadata.embeddeds.reduce(\r\n            (uniques, embedded) => uniques.concat(embedded.uniquesFromTree),\r\n            entityMetadata.ownUniques,\r\n        )\r\n        entityMetadata.primaryColumns = entityMetadata.columns.filter(\r\n            (column) => column.isPrimary,\r\n        )\r\n        entityMetadata.nonVirtualColumns = entityMetadata.columns.filter(\r\n            (column) => !column.isVirtual,\r\n        )\r\n        entityMetadata.ancestorColumns = entityMetadata.columns.filter(\r\n            (column) => column.closureType === \"ancestor\",\r\n        )\r\n        entityMetadata.descendantColumns = entityMetadata.columns.filter(\r\n            (column) => column.closureType === \"descendant\",\r\n        )\r\n        entityMetadata.hasMultiplePrimaryKeys =\r\n            entityMetadata.primaryColumns.length > 1\r\n        entityMetadata.generatedColumns = entityMetadata.columns.filter(\r\n            (column) => column.isGenerated || column.isObjectId,\r\n        )\r\n        entityMetadata.hasUUIDGeneratedColumns =\r\n            entityMetadata.columns.filter(\r\n                (column) =>\r\n                    column.isGenerated || column.generationStrategy === \"uuid\",\r\n            ).length > 0\r\n        entityMetadata.createDateColumn = entityMetadata.columns.find(\r\n            (column) => column.isCreateDate,\r\n        )\r\n        entityMetadata.updateDateColumn = entityMetadata.columns.find(\r\n            (column) => column.isUpdateDate,\r\n        )\r\n        entityMetadata.deleteDateColumn = entityMetadata.columns.find(\r\n            (column) => column.isDeleteDate,\r\n        )\r\n        entityMetadata.versionColumn = entityMetadata.columns.find(\r\n            (column) => column.isVersion,\r\n        )\r\n        entityMetadata.discriminatorColumn = entityMetadata.columns.find(\r\n            (column) => column.isDiscriminator,\r\n        )\r\n        entityMetadata.treeLevelColumn = entityMetadata.columns.find(\r\n            (column) => column.isTreeLevel,\r\n        )\r\n        entityMetadata.nestedSetLeftColumn = entityMetadata.columns.find(\r\n            (column) => column.isNestedSetLeft,\r\n        )\r\n        entityMetadata.nestedSetRightColumn = entityMetadata.columns.find(\r\n            (column) => column.isNestedSetRight,\r\n        )\r\n        entityMetadata.materializedPathColumn = entityMetadata.columns.find(\r\n            (column) => column.isMaterializedPath,\r\n        )\r\n        entityMetadata.objectIdColumn = entityMetadata.columns.find(\r\n            (column) => column.isObjectId,\r\n        )\r\n        entityMetadata.foreignKeys.forEach((foreignKey) =>\r\n            foreignKey.build(this.connection.namingStrategy),\r\n        )\r\n        entityMetadata.propertiesMap = entityMetadata.createPropertiesMap()\r\n        entityMetadata.relationIds.forEach((relationId) => relationId.build())\r\n        entityMetadata.relationCounts.forEach((relationCount) =>\r\n            relationCount.build(),\r\n        )\r\n        entityMetadata.embeddeds.forEach((embedded) => {\r\n            embedded.relationIdsFromTree.forEach((relationId) =>\r\n                relationId.build(),\r\n            )\r\n            embedded.relationCountsFromTree.forEach((relationCount) =>\r\n                relationCount.build(),\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Computes entity metadata's relations inverse side properties.\r\n     */\r\n    protected computeInverseProperties(\r\n        entityMetadata: EntityMetadata,\r\n        entityMetadatas: EntityMetadata[],\r\n    ) {\r\n        entityMetadata.relations.forEach((relation) => {\r\n            // compute inverse side (related) entity metadatas for all relation metadatas\r\n            const inverseEntityMetadata = entityMetadatas.find(\r\n                (m) =>\r\n                    m.target === relation.type ||\r\n                    (typeof relation.type === \"string\" &&\r\n                        (m.targetName === relation.type ||\r\n                            m.givenTableName === relation.type)),\r\n            )\r\n            if (!inverseEntityMetadata)\r\n                throw new TypeORMError(\r\n                    \"Entity metadata for \" +\r\n                        entityMetadata.name +\r\n                        \"#\" +\r\n                        relation.propertyPath +\r\n                        \" was not found. Check if you specified a correct entity object and if it's connected in the connection options.\",\r\n                )\r\n\r\n            relation.inverseEntityMetadata = inverseEntityMetadata\r\n            relation.inverseSidePropertyPath =\r\n                relation.buildInverseSidePropertyPath()\r\n\r\n            // and compute inverse relation and mark if it has such\r\n            relation.inverseRelation = inverseEntityMetadata.relations.find(\r\n                (foundRelation) =>\r\n                    foundRelation.propertyPath ===\r\n                    relation.inverseSidePropertyPath,\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Creates indices for the table of single table inheritance.\r\n     */\r\n    protected createKeysForTableInheritance(entityMetadata: EntityMetadata) {\r\n        const isDiscriminatorColumnAlreadyIndexed = entityMetadata.indices.some(\r\n            ({ givenColumnNames }) =>\r\n                !!givenColumnNames &&\r\n                Array.isArray(givenColumnNames) &&\r\n                givenColumnNames.length === 1 &&\r\n                givenColumnNames[0] ===\r\n                    entityMetadata.discriminatorColumn?.databaseName,\r\n        )\r\n\r\n        // If the discriminator column is already indexed, there is no need to\r\n        // add another index on top of it.\r\n        if (isDiscriminatorColumnAlreadyIndexed) {\r\n            return\r\n        }\r\n\r\n        entityMetadata.indices.push(\r\n            new IndexMetadata({\r\n                entityMetadata: entityMetadata,\r\n                columns: [entityMetadata.discriminatorColumn!],\r\n                args: {\r\n                    target: entityMetadata.target,\r\n                    unique: false,\r\n                },\r\n            }),\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":".."}
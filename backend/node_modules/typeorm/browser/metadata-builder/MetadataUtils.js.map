{"version":3,"sources":["../browser/src/metadata-builder/MetadataUtils.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM,OAAO,aAAa;IACtB;;;;;OAKG;IACH,MAAM,CAAC,kBAAkB,CAAC,MAAgB;QACtC,MAAM,IAAI,GAAe,CAAC,MAAM,CAAC,CAAA;QACjC,MAAM,cAAc,GAAG,CAAC,MAAgB,EAAQ,EAAE;YAC9C,MAAM,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;YAC3C,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE,CAAC;gBACtB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;gBAChB,cAAc,CAAC,KAAK,CAAC,CAAA;YACzB,CAAC;QACL,CAAC,CAAA;QACD,cAAc,CAAC,MAAM,CAAC,CAAA;QACtB,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,WAAW,CAAC,OAAiB,EAAE,OAAiB;QACnD,OAAO,OAAO,CAAC,SAAS,YAAY,OAAO,CAAA;IAC/C,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,cAAc,CACjB,KAAU,EACV,OAAe;QAEf,IAAI,CAAC,OAAO;YAAE,OAAO,KAAK,CAAA;QAC1B,OAAO,KAAK,CAAC,MAAM,CACf,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAC/D,CAAA;IACL,CAAC;CACJ","file":"MetadataUtils.js","sourcesContent":["/**\r\n * Metadata args utility functions.\r\n */\r\nexport class MetadataUtils {\r\n    /**\r\n     * Gets given's entity all inherited classes.\r\n     * Gives in order from parents to children.\r\n     * For example Post extends ContentModel which extends Unit it will give\r\n     * [Unit, ContentModel, Post]\r\n     */\r\n    static getInheritanceTree(entity: Function): Function[] {\r\n        const tree: Function[] = [entity]\r\n        const getPrototypeOf = (object: Function): void => {\r\n            const proto = Object.getPrototypeOf(object)\r\n            if (proto && proto.name) {\r\n                tree.push(proto)\r\n                getPrototypeOf(proto)\r\n            }\r\n        }\r\n        getPrototypeOf(entity)\r\n        return tree\r\n    }\r\n\r\n    /**\r\n     * Checks if this table is inherited from another table.\r\n     */\r\n    static isInherited(target1: Function, target2: Function) {\r\n        return target1.prototype instanceof target2\r\n    }\r\n\r\n    /**\r\n     * Filters given array of targets by a given classes.\r\n     * If classes are not given, then it returns array itself.\r\n     */\r\n    static filterByTarget<T extends { target?: any }>(\r\n        array: T[],\r\n        classes?: any[],\r\n    ): T[] {\r\n        if (!classes) return array\r\n        return array.filter(\r\n            (item) => item.target && classes.indexOf(item.target) !== -1,\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":".."}
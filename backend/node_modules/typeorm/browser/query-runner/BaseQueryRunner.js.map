{"version":3,"sources":["../browser/src/query-runner/BaseQueryRunner.ts"],"names":[],"mappings":"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","file":"BaseQueryRunner.js","sourcesContent":["import { PostgresConnectionOptions } from \"../driver/postgres/PostgresConnectionOptions\"\r\nimport { Query } from \"../driver/Query\"\r\nimport { SqlInMemory } from \"../driver/SqlInMemory\"\r\nimport { SqlServerConnectionOptions } from \"../driver/sqlserver/SqlServerConnectionOptions\"\r\nimport { TableIndex } from \"../schema-builder/table/TableIndex\"\r\nimport { View } from \"../schema-builder/view/View\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { Table } from \"../schema-builder/table/Table\"\r\nimport { EntityManager } from \"../entity-manager/EntityManager\"\r\nimport { TableColumn } from \"../schema-builder/table/TableColumn\"\r\nimport { Broadcaster } from \"../subscriber/Broadcaster\"\r\nimport { ReplicationMode } from \"../driver/types/ReplicationMode\"\r\nimport { TypeORMError } from \"../error/TypeORMError\"\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\r\nimport { TableForeignKey } from \"../schema-builder/table/TableForeignKey\"\r\nimport { OrmUtils } from \"../util/OrmUtils\"\r\nimport { MetadataTableType } from \"../driver/types/MetadataTableType\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\n\r\nexport abstract class BaseQueryRunner {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by this query runner.\r\n     */\r\n    connection: DataSource\r\n\r\n    /**\r\n     * Entity manager working only with current query runner.\r\n     */\r\n    manager: EntityManager\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     */\r\n    isReleased = false\r\n\r\n    /**\r\n     * Indicates if transaction is in progress.\r\n     */\r\n    isTransactionActive = false\r\n\r\n    /**\r\n     * Stores temporarily user data.\r\n     * Useful for sharing data with subscribers.\r\n     */\r\n    data = {}\r\n\r\n    /**\r\n     * All synchronized tables in the database.\r\n     */\r\n    loadedTables: Table[] = []\r\n\r\n    /**\r\n     * All synchronized views in the database.\r\n     */\r\n    loadedViews: View[] = []\r\n\r\n    /**\r\n     * Broadcaster used on this query runner to broadcast entity events.\r\n     */\r\n    broadcaster: Broadcaster\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Real database connection from a connection pool used to perform queries.\r\n     */\r\n    protected databaseConnection: any\r\n\r\n    /**\r\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\r\n     */\r\n    protected sqlMemoryMode: boolean = false\r\n\r\n    /**\r\n     * Sql-s stored if \"sql in memory\" mode is enabled.\r\n     */\r\n    protected sqlInMemory: SqlInMemory = new SqlInMemory()\r\n\r\n    /**\r\n     * Mode in which query runner executes.\r\n     * Used for replication.\r\n     * If replication is not setup its value is ignored.\r\n     */\r\n    protected mode: ReplicationMode\r\n\r\n    /**\r\n     * current depth of transaction.\r\n     * for transactionDepth > 0 will use SAVEPOINT to start and commit/rollback transaction blocks\r\n     */\r\n    protected transactionDepth = 0\r\n\r\n    private cachedTablePaths: Record<string, string> = {}\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Abstract Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    abstract query(\r\n        query: string,\r\n        parameters?: any[],\r\n        useStructuredResult?: boolean,\r\n    ): Promise<any>\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Abstract Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected abstract loadTables(tablePaths?: string[]): Promise<Table[]>\r\n\r\n    protected abstract loadViews(tablePaths?: string[]): Promise<View[]>\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async getTable(tablePath: string): Promise<Table | undefined> {\r\n        this.loadedTables = await this.loadTables([tablePath])\r\n        return this.loadedTables.length > 0 ? this.loadedTables[0] : undefined\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database.\r\n     */\r\n    async getTables(tableNames?: string[]): Promise<Table[]> {\r\n        if (!tableNames) {\r\n            // Don't cache in this case.\r\n            // This is the new case & isn't used anywhere else anyway.\r\n            return await this.loadTables(tableNames)\r\n        }\r\n\r\n        this.loadedTables = await this.loadTables(tableNames)\r\n        return this.loadedTables\r\n    }\r\n\r\n    /**\r\n     * Loads given view's data from the database.\r\n     */\r\n    async getView(viewPath: string): Promise<View | undefined> {\r\n        this.loadedViews = await this.loadViews([viewPath])\r\n        return this.loadedViews.length > 0 ? this.loadedViews[0] : undefined\r\n    }\r\n\r\n    /**\r\n     * Loads given view's data from the database.\r\n     */\r\n    async getViews(viewPaths?: string[]): Promise<View[]> {\r\n        this.loadedViews = await this.loadViews(viewPaths)\r\n        return this.loadedViews\r\n    }\r\n\r\n    /**\r\n     * Enables special query runner mode in which sql queries won't be executed,\r\n     * instead they will be memorized into a special variable inside query runner.\r\n     * You can get memorized sql using getMemorySql() method.\r\n     */\r\n    enableSqlMemory(): void {\r\n        this.sqlInMemory = new SqlInMemory()\r\n        this.sqlMemoryMode = true\r\n    }\r\n\r\n    /**\r\n     * Disables special query runner mode in which sql queries won't be executed\r\n     * started by calling enableSqlMemory() method.\r\n     *\r\n     * Previously memorized sql will be flushed.\r\n     */\r\n    disableSqlMemory(): void {\r\n        this.sqlInMemory = new SqlInMemory()\r\n        this.sqlMemoryMode = false\r\n    }\r\n\r\n    /**\r\n     * Flushes all memorized sqls.\r\n     */\r\n    clearSqlMemory(): void {\r\n        this.sqlInMemory = new SqlInMemory()\r\n    }\r\n\r\n    /**\r\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\r\n     */\r\n    getMemorySql(): SqlInMemory {\r\n        return this.sqlInMemory\r\n    }\r\n\r\n    /**\r\n     * Executes up sql queries.\r\n     */\r\n    async executeMemoryUpSql(): Promise<void> {\r\n        for (const { query, parameters } of this.sqlInMemory.upQueries) {\r\n            await this.query(query, parameters)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes down sql queries.\r\n     */\r\n    async executeMemoryDownSql(): Promise<void> {\r\n        for (const {\r\n            query,\r\n            parameters,\r\n        } of this.sqlInMemory.downQueries.reverse()) {\r\n            await this.query(query, parameters)\r\n        }\r\n    }\r\n\r\n    getReplicationMode(): ReplicationMode {\r\n        return this.mode\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets view from previously loaded views, otherwise loads it from database.\r\n     */\r\n    protected async getCachedView(viewName: string): Promise<View> {\r\n        const view = this.loadedViews.find((view) => view.name === viewName)\r\n        if (view) return view\r\n\r\n        const foundViews = await this.loadViews([viewName])\r\n        if (foundViews.length > 0) {\r\n            this.loadedViews.push(foundViews[0])\r\n            return foundViews[0]\r\n        } else {\r\n            throw new TypeORMError(`View \"${viewName}\" does not exist.`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets table from previously loaded tables, otherwise loads it from database.\r\n     */\r\n    protected async getCachedTable(tableName: string): Promise<Table> {\r\n        if (tableName in this.cachedTablePaths) {\r\n            const tablePath = this.cachedTablePaths[tableName]\r\n            const table = this.loadedTables.find(\r\n                (table) => this.getTablePath(table) === tablePath,\r\n            )\r\n\r\n            if (table) {\r\n                return table\r\n            }\r\n        }\r\n\r\n        const foundTables = await this.loadTables([tableName])\r\n\r\n        if (foundTables.length > 0) {\r\n            const foundTablePath = this.getTablePath(foundTables[0])\r\n\r\n            const cachedTable = this.loadedTables.find(\r\n                (table) => this.getTablePath(table) === foundTablePath,\r\n            )\r\n\r\n            if (!cachedTable) {\r\n                this.cachedTablePaths[tableName] = this.getTablePath(\r\n                    foundTables[0],\r\n                )\r\n                this.loadedTables.push(foundTables[0])\r\n                return foundTables[0]\r\n            } else {\r\n                return cachedTable\r\n            }\r\n        } else {\r\n            throw new TypeORMError(`Table \"${tableName}\" does not exist.`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Replaces loaded table with given changed table.\r\n     */\r\n    protected replaceCachedTable(table: Table, changedTable: Table): void {\r\n        const oldTablePath = this.getTablePath(table)\r\n        const foundTable = this.loadedTables.find(\r\n            (loadedTable) => this.getTablePath(loadedTable) === oldTablePath,\r\n        )\r\n\r\n        // Clean up the lookup cache..\r\n        for (const [key, cachedPath] of Object.entries(this.cachedTablePaths)) {\r\n            if (cachedPath === oldTablePath) {\r\n                this.cachedTablePaths[key] = this.getTablePath(changedTable)\r\n            }\r\n        }\r\n\r\n        if (foundTable) {\r\n            foundTable.database = changedTable.database\r\n            foundTable.schema = changedTable.schema\r\n            foundTable.name = changedTable.name\r\n            foundTable.columns = changedTable.columns\r\n            foundTable.indices = changedTable.indices\r\n            foundTable.foreignKeys = changedTable.foreignKeys\r\n            foundTable.uniques = changedTable.uniques\r\n            foundTable.checks = changedTable.checks\r\n            foundTable.justCreated = changedTable.justCreated\r\n            foundTable.engine = changedTable.engine\r\n            foundTable.comment = changedTable.comment\r\n        }\r\n    }\r\n\r\n    protected getTablePath(\r\n        target: EntityMetadata | Table | View | TableForeignKey | string,\r\n    ): string {\r\n        const parsed = this.connection.driver.parseTableName(target)\r\n\r\n        return this.connection.driver.buildTableName(\r\n            parsed.tableName,\r\n            parsed.schema,\r\n            parsed.database,\r\n        )\r\n    }\r\n\r\n    protected getTypeormMetadataTableName(): string {\r\n        const options = <\r\n            SqlServerConnectionOptions | PostgresConnectionOptions\r\n        >this.connection.driver.options\r\n        return this.connection.driver.buildTableName(\r\n            this.connection.metadataTableName,\r\n            options.schema,\r\n            options.database,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Generates SQL query to select record from typeorm metadata table.\r\n     */\r\n    protected selectTypeormMetadataSql({\r\n        database,\r\n        schema,\r\n        table,\r\n        type,\r\n        name,\r\n    }: {\r\n        database?: string\r\n        schema?: string\r\n        table?: string\r\n        type: MetadataTableType\r\n        name: string\r\n    }): Query {\r\n        const qb = this.connection.createQueryBuilder()\r\n        const selectQb = qb\r\n            .select()\r\n            .from(this.getTypeormMetadataTableName(), \"t\")\r\n            .where(`${qb.escape(\"type\")} = :type`, { type })\r\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\r\n\r\n        if (database) {\r\n            selectQb.andWhere(`${qb.escape(\"database\")} = :database`, {\r\n                database,\r\n            })\r\n        }\r\n\r\n        if (schema) {\r\n            selectQb.andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\r\n        }\r\n\r\n        if (table) {\r\n            selectQb.andWhere(`${qb.escape(\"table\")} = :table`, { table })\r\n        }\r\n\r\n        const [query, parameters] = selectQb.getQueryAndParameters()\r\n        return new Query(query, parameters)\r\n    }\r\n\r\n    /**\r\n     * Generates SQL query to insert a record into typeorm metadata table.\r\n     */\r\n    protected insertTypeormMetadataSql({\r\n        database,\r\n        schema,\r\n        table,\r\n        type,\r\n        name,\r\n        value,\r\n    }: {\r\n        database?: string\r\n        schema?: string\r\n        table?: string\r\n        type: MetadataTableType\r\n        name: string\r\n        value?: string\r\n    }): Query {\r\n        const [query, parameters] = this.connection\r\n            .createQueryBuilder()\r\n            .insert()\r\n            .into(this.getTypeormMetadataTableName())\r\n            .values({\r\n                database: database,\r\n                schema: schema,\r\n                table: table,\r\n                type: type,\r\n                name: name,\r\n                value: value,\r\n            })\r\n            .getQueryAndParameters()\r\n\r\n        return new Query(query, parameters)\r\n    }\r\n\r\n    /**\r\n     * Generates SQL query to delete a record from typeorm metadata table.\r\n     */\r\n    protected deleteTypeormMetadataSql({\r\n        database,\r\n        schema,\r\n        table,\r\n        type,\r\n        name,\r\n    }: {\r\n        database?: string\r\n        schema?: string\r\n        table?: string\r\n        type: MetadataTableType\r\n        name: string\r\n    }): Query {\r\n        const qb = this.connection.createQueryBuilder()\r\n        const deleteQb = qb\r\n            .delete()\r\n            .from(this.getTypeormMetadataTableName())\r\n            .where(`${qb.escape(\"type\")} = :type`, { type })\r\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\r\n\r\n        if (database) {\r\n            deleteQb.andWhere(`${qb.escape(\"database\")} = :database`, {\r\n                database,\r\n            })\r\n        }\r\n\r\n        if (schema) {\r\n            deleteQb.andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\r\n        }\r\n\r\n        if (table) {\r\n            deleteQb.andWhere(`${qb.escape(\"table\")} = :table`, { table })\r\n        }\r\n\r\n        const [query, parameters] = deleteQb.getQueryAndParameters()\r\n        return new Query(query, parameters)\r\n    }\r\n\r\n    /**\r\n     * Checks if at least one of column properties was changed.\r\n     * Does not checks column type, length and autoincrement, because these properties changes separately.\r\n     */\r\n    protected isColumnChanged(\r\n        oldColumn: TableColumn,\r\n        newColumn: TableColumn,\r\n        checkDefault?: boolean,\r\n        checkComment?: boolean,\r\n        checkEnum = true,\r\n    ): boolean {\r\n        // this logs need to debug issues in column change detection. Do not delete it!\r\n\r\n        // console.log(\"charset ---------------\");\r\n        // console.log(oldColumn.charset !== newColumn.charset);\r\n        // console.log(oldColumn.charset, newColumn.charset);\r\n        // console.log(\"collation ---------------\");\r\n        // console.log(oldColumn.collation !== newColumn.collation);\r\n        // console.log(oldColumn.collation, newColumn.collation);\r\n        // console.log(\"precision ---------------\");\r\n        // console.log(oldColumn.precision !== newColumn.precision);\r\n        // console.log(oldColumn.precision, newColumn.precision);\r\n        // console.log(\"scale ---------------\");\r\n        // console.log(oldColumn.scale !== newColumn.scale);\r\n        // console.log(oldColumn.scale, newColumn.scale);\r\n        // console.log(\"default ---------------\");\r\n        // console.log((checkDefault && oldColumn.default !== newColumn.default));\r\n        // console.log(oldColumn.default, newColumn.default);\r\n        // console.log(\"isNullable ---------------\");\r\n        // console.log(oldColumn.isNullable !== newColumn.isNullable);\r\n        // console.log(oldColumn.isNullable, newColumn.isNullable);\r\n        // console.log(\"comment ---------------\");\r\n        // console.log((checkComment && oldColumn.comment !== newColumn.comment));\r\n        // console.log(oldColumn.comment, newColumn.comment);\r\n        // console.log(\"enum ---------------\");\r\n        // console.log(!OrmUtils.isArraysEqual(oldColumn.enum || [], newColumn.enum || []));\r\n        // console.log(oldColumn.enum, newColumn.enum);\r\n\r\n        return (\r\n            oldColumn.charset !== newColumn.charset ||\r\n            oldColumn.collation !== newColumn.collation ||\r\n            oldColumn.precision !== newColumn.precision ||\r\n            oldColumn.scale !== newColumn.scale ||\r\n            oldColumn.width !== newColumn.width || // MySQL only\r\n            oldColumn.zerofill !== newColumn.zerofill || // MySQL only\r\n            oldColumn.unsigned !== newColumn.unsigned || // MySQL only\r\n            oldColumn.asExpression !== newColumn.asExpression ||\r\n            (checkDefault && oldColumn.default !== newColumn.default) ||\r\n            oldColumn.onUpdate !== newColumn.onUpdate || // MySQL only\r\n            oldColumn.isNullable !== newColumn.isNullable ||\r\n            (checkComment && oldColumn.comment !== newColumn.comment) ||\r\n            (checkEnum && this.isEnumChanged(oldColumn, newColumn))\r\n        )\r\n    }\r\n\r\n    protected isEnumChanged(oldColumn: TableColumn, newColumn: TableColumn) {\r\n        return !OrmUtils.isArraysEqual(\r\n            oldColumn.enum || [],\r\n            newColumn.enum || [],\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if column length is by default.\r\n     */\r\n    protected isDefaultColumnLength(\r\n        table: Table,\r\n        column: TableColumn,\r\n        length: string,\r\n    ): boolean {\r\n        // if table have metadata, we check if length is specified in column metadata\r\n        if (this.connection.hasMetadata(table.name)) {\r\n            const metadata = this.connection.getMetadata(table.name)\r\n            const columnMetadata = metadata.findColumnWithDatabaseName(\r\n                column.name,\r\n            )\r\n\r\n            if (columnMetadata) {\r\n                const columnMetadataLength =\r\n                    this.connection.driver.getColumnLength(columnMetadata)\r\n                if (columnMetadataLength) return false\r\n            }\r\n        }\r\n\r\n        if (\r\n            this.connection.driver.dataTypeDefaults &&\r\n            this.connection.driver.dataTypeDefaults[column.type] &&\r\n            this.connection.driver.dataTypeDefaults[column.type].length\r\n        ) {\r\n            return (\r\n                this.connection.driver.dataTypeDefaults[\r\n                    column.type\r\n                ].length!.toString() === length.toString()\r\n            )\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Checks if column precision is by default.\r\n     */\r\n    protected isDefaultColumnPrecision(\r\n        table: Table,\r\n        column: TableColumn,\r\n        precision: number,\r\n    ): boolean {\r\n        // if table have metadata, we check if length is specified in column metadata\r\n        if (this.connection.hasMetadata(table.name)) {\r\n            const metadata = this.connection.getMetadata(table.name)\r\n            const columnMetadata = metadata.findColumnWithDatabaseName(\r\n                column.name,\r\n            )\r\n            if (\r\n                columnMetadata &&\r\n                columnMetadata.precision !== null &&\r\n                columnMetadata.precision !== undefined\r\n            )\r\n                return false\r\n        }\r\n\r\n        if (\r\n            this.connection.driver.dataTypeDefaults &&\r\n            this.connection.driver.dataTypeDefaults[column.type] &&\r\n            this.connection.driver.dataTypeDefaults[column.type].precision !==\r\n                null &&\r\n            this.connection.driver.dataTypeDefaults[column.type].precision !==\r\n                undefined\r\n        )\r\n            return (\r\n                this.connection.driver.dataTypeDefaults[column.type]\r\n                    .precision === precision\r\n            )\r\n\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Checks if column scale is by default.\r\n     */\r\n    protected isDefaultColumnScale(\r\n        table: Table,\r\n        column: TableColumn,\r\n        scale: number,\r\n    ): boolean {\r\n        // if table have metadata, we check if length is specified in column metadata\r\n        if (this.connection.hasMetadata(table.name)) {\r\n            const metadata = this.connection.getMetadata(table.name)\r\n            const columnMetadata = metadata.findColumnWithDatabaseName(\r\n                column.name,\r\n            )\r\n            if (\r\n                columnMetadata &&\r\n                columnMetadata.scale !== null &&\r\n                columnMetadata.scale !== undefined\r\n            )\r\n                return false\r\n        }\r\n\r\n        if (\r\n            this.connection.driver.dataTypeDefaults &&\r\n            this.connection.driver.dataTypeDefaults[column.type] &&\r\n            this.connection.driver.dataTypeDefaults[column.type].scale !==\r\n                null &&\r\n            this.connection.driver.dataTypeDefaults[column.type].scale !==\r\n                undefined\r\n        )\r\n            return (\r\n                this.connection.driver.dataTypeDefaults[column.type].scale ===\r\n                scale\r\n            )\r\n\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Executes sql used special for schema build.\r\n     */\r\n    protected async executeQueries(\r\n        upQueries: Query | Query[],\r\n        downQueries: Query | Query[],\r\n    ): Promise<void> {\r\n        if (InstanceChecker.isQuery(upQueries)) upQueries = [upQueries]\r\n        if (InstanceChecker.isQuery(downQueries)) downQueries = [downQueries]\r\n\r\n        this.sqlInMemory.upQueries.push(...upQueries)\r\n        this.sqlInMemory.downQueries.push(...downQueries)\r\n\r\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\r\n        if (this.sqlMemoryMode === true)\r\n            return Promise.resolve() as Promise<any>\r\n\r\n        for (const { query, parameters } of upQueries) {\r\n            await this.query(query, parameters)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generated an index name for a table and index\r\n     */\r\n    protected generateIndexName(\r\n        table: Table | View,\r\n        index: TableIndex,\r\n    ): string {\r\n        // new index may be passed without name. In this case we generate index name manually.\r\n        return this.connection.namingStrategy.indexName(\r\n            table,\r\n            index.columnNames,\r\n            index.where,\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":".."}
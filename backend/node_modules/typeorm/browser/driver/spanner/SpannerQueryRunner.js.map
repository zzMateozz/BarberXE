{"version":3,"sources":["../browser/src/driver/spanner/SpannerQueryRunner.ts"],"names":[],"mappings":"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","file":"SpannerQueryRunner.js","sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\r\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\r\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\r\nimport { ColumnType } from \"../types/ColumnTypes\"\r\nimport { ReadStream } from \"../../platform/PlatformTools\"\r\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\r\nimport { Table } from \"../../schema-builder/table/Table\"\r\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\r\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\r\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\r\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\r\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\r\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\r\nimport { View } from \"../../schema-builder/view/View\"\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\r\nimport { OrmUtils } from \"../../util/OrmUtils\"\r\nimport { Query } from \"../Query\"\r\nimport { IsolationLevel } from \"../types/IsolationLevel\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { TypeORMError } from \"../../error\"\r\nimport { QueryResult } from \"../../query-runner/QueryResult\"\r\nimport { MetadataTableType } from \"../types/MetadataTableType\"\r\nimport { SpannerDriver } from \"./SpannerDriver\"\r\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\r\n\r\n/**\r\n * Runs queries on a single postgres database connection.\r\n */\r\nexport class SpannerQueryRunner extends BaseQueryRunner implements QueryRunner {\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: SpannerDriver\r\n\r\n    /**\r\n     * Real database connection from a connection pool used to perform queries.\r\n     */\r\n    protected session?: any\r\n\r\n    /**\r\n     * Transaction currently executed by this session.\r\n     */\r\n    protected sessionTransaction?: any\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: SpannerDriver, mode: ReplicationMode) {\r\n        super()\r\n        this.driver = driver\r\n        this.connection = driver.connection\r\n        this.mode = mode\r\n        this.broadcaster = new Broadcaster(this)\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    async connect(): Promise<any> {\r\n        if (this.session) {\r\n            return Promise.resolve(this.session)\r\n        }\r\n\r\n        const [session] = await this.driver.instanceDatabase.createSession({})\r\n        this.session = session\r\n        this.sessionTransaction = await session.transaction()\r\n        return this.session\r\n    }\r\n\r\n    /**\r\n     * Releases used database connection.\r\n     * You cannot use query runner methods once its released.\r\n     */\r\n    async release(): Promise<void> {\r\n        this.isReleased = true\r\n        if (this.session) {\r\n            await this.session.delete()\r\n        }\r\n        this.session = undefined\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        this.isTransactionActive = true\r\n        try {\r\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\r\n        } catch (err) {\r\n            this.isTransactionActive = false\r\n            throw err\r\n        }\r\n\r\n        await this.connect()\r\n        await this.sessionTransaction.begin()\r\n        this.connection.logger.logQuery(\"START TRANSACTION\")\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive || !this.sessionTransaction)\r\n            throw new TransactionNotStartedError()\r\n\r\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\r\n\r\n        await this.sessionTransaction.commit()\r\n        this.connection.logger.logQuery(\"COMMIT\")\r\n        this.isTransactionActive = false\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive || !this.sessionTransaction)\r\n            throw new TransactionNotStartedError()\r\n\r\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\r\n\r\n        await this.sessionTransaction.rollback()\r\n        this.connection.logger.logQuery(\"ROLLBACK\")\r\n        this.isTransactionActive = false\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(\r\n        query: string,\r\n        parameters?: any[],\r\n        useStructuredResult: boolean = false,\r\n    ): Promise<any> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        const broadcasterResult = new BroadcasterResult()\r\n\r\n        try {\r\n            const queryStartTime = +new Date()\r\n            await this.connect()\r\n            let rawResult:\r\n                | [\r\n                      any[],\r\n                      {\r\n                          queryPlan: null\r\n                          queryStats: null\r\n                          rowCountExact: string\r\n                          rowCount: string\r\n                      },\r\n                      { rowType: { fields: [] }; transaction: null },\r\n                  ]\r\n                | undefined = undefined\r\n            const isSelect = query.startsWith(\"SELECT\")\r\n            const executor =\r\n                isSelect && !this.isTransactionActive\r\n                    ? this.driver.instanceDatabase\r\n                    : this.sessionTransaction\r\n\r\n            if (!this.isTransactionActive && !isSelect) {\r\n                await this.sessionTransaction.begin()\r\n            }\r\n\r\n            try {\r\n                this.driver.connection.logger.logQuery(query, parameters, this)\r\n                this.broadcaster.broadcastBeforeQueryEvent(\r\n                    broadcasterResult,\r\n                    query,\r\n                    parameters,\r\n                )\r\n\r\n                rawResult = await executor.run({\r\n                    sql: query,\r\n                    params: parameters\r\n                        ? parameters.reduce((params, value, index) => {\r\n                              params[\"param\" + index] = value\r\n                              return params\r\n                          }, {} as ObjectLiteral)\r\n                        : undefined,\r\n                    json: true,\r\n                })\r\n                if (!this.isTransactionActive && !isSelect) {\r\n                    await this.sessionTransaction.commit()\r\n                }\r\n            } catch (error) {\r\n                try {\r\n                    // we throw original error even if rollback thrown an error\r\n                    if (!this.isTransactionActive && !isSelect)\r\n                        await this.sessionTransaction.rollback()\r\n                } catch (rollbackError) {}\r\n                throw error\r\n            }\r\n\r\n            // log slow queries if maxQueryExecution time is set\r\n            const maxQueryExecutionTime =\r\n                this.driver.options.maxQueryExecutionTime\r\n            const queryEndTime = +new Date()\r\n            const queryExecutionTime = queryEndTime - queryStartTime\r\n\r\n            this.broadcaster.broadcastAfterQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n                true,\r\n                queryExecutionTime,\r\n                rawResult,\r\n                undefined,\r\n            )\r\n\r\n            if (\r\n                maxQueryExecutionTime &&\r\n                queryExecutionTime > maxQueryExecutionTime\r\n            )\r\n                this.driver.connection.logger.logQuerySlow(\r\n                    queryExecutionTime,\r\n                    query,\r\n                    parameters,\r\n                    this,\r\n                )\r\n\r\n            const result = new QueryResult()\r\n\r\n            result.raw = rawResult\r\n            result.records = rawResult ? rawResult[0] : []\r\n            if (rawResult && rawResult[1] && rawResult[1].rowCountExact) {\r\n                result.affected = parseInt(rawResult[1].rowCountExact)\r\n            }\r\n\r\n            if (!useStructuredResult) {\r\n                return result.records\r\n            }\r\n\r\n            return result\r\n        } catch (err) {\r\n            this.driver.connection.logger.logQueryError(\r\n                err,\r\n                query,\r\n                parameters,\r\n                this,\r\n            )\r\n            this.broadcaster.broadcastAfterQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n                false,\r\n                undefined,\r\n                undefined,\r\n                err,\r\n            )\r\n            throw new QueryFailedError(query, parameters, err)\r\n        } finally {\r\n            await broadcasterResult.wait()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update database schema.\r\n     * Used for creating/altering/dropping tables, columns, indexes, etc.\r\n     *\r\n     * DDL changing queries should be executed by `updateSchema()` method.\r\n     */\r\n    async updateDDL(query: string, parameters?: any[]): Promise<void> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        this.driver.connection.logger.logQuery(query, parameters, this)\r\n        try {\r\n            const queryStartTime = +new Date()\r\n            const [operation] = await this.driver.instanceDatabase.updateSchema(\r\n                query,\r\n            )\r\n            await operation.promise()\r\n            // log slow queries if maxQueryExecution time is set\r\n            const maxQueryExecutionTime =\r\n                this.driver.options.maxQueryExecutionTime\r\n            const queryEndTime = +new Date()\r\n            const queryExecutionTime = queryEndTime - queryStartTime\r\n            if (\r\n                maxQueryExecutionTime &&\r\n                queryExecutionTime > maxQueryExecutionTime\r\n            )\r\n                this.driver.connection.logger.logQuerySlow(\r\n                    queryExecutionTime,\r\n                    query,\r\n                    parameters,\r\n                    this,\r\n                )\r\n        } catch (err) {\r\n            this.driver.connection.logger.logQueryError(\r\n                err,\r\n                query,\r\n                parameters,\r\n                this,\r\n            )\r\n            throw new QueryFailedError(query, parameters, err)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    async stream(\r\n        query: string,\r\n        parameters?: any[],\r\n        onEnd?: Function,\r\n        onError?: Function,\r\n    ): Promise<ReadStream> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        try {\r\n            this.driver.connection.logger.logQuery(query, parameters, this)\r\n            const request = {\r\n                sql: query,\r\n                params: parameters\r\n                    ? parameters.reduce((params, value, index) => {\r\n                          params[\"param\" + index] = value\r\n                          return params\r\n                      }, {} as ObjectLiteral)\r\n                    : undefined,\r\n                json: true,\r\n            }\r\n            const stream = this.driver.instanceDatabase.runStream(request)\r\n\r\n            if (onEnd) {\r\n                stream.on(\"end\", onEnd)\r\n            }\r\n\r\n            if (onError) {\r\n                stream.on(\"error\", onError)\r\n            }\r\n\r\n            return stream\r\n        } catch (err) {\r\n            this.driver.connection.logger.logQueryError(\r\n                err,\r\n                query,\r\n                parameters,\r\n                this,\r\n            )\r\n            throw new QueryFailedError(query, parameters, err)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all available database names including system databases.\r\n     */\r\n    async getDatabases(): Promise<string[]> {\r\n        return Promise.resolve([])\r\n    }\r\n\r\n    /**\r\n     * Returns all available schema names including system schemas.\r\n     * If database parameter specified, returns schemas of that database.\r\n     */\r\n    async getSchemas(database?: string): Promise<string[]> {\r\n        return Promise.resolve([])\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        throw new TypeORMError(\r\n            `Check database queries are not supported by Spanner driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Loads currently using database\r\n     */\r\n    async getCurrentDatabase(): Promise<string> {\r\n        throw new TypeORMError(\r\n            `Check database queries are not supported by Spanner driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if schema with the given name exist.\r\n     */\r\n    async hasSchema(schema: string): Promise<boolean> {\r\n        const result = await this.query(\r\n            `SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '${schema}'`,\r\n        )\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Loads currently using database schema\r\n     */\r\n    async getCurrentSchema(): Promise<string> {\r\n        throw new TypeORMError(\r\n            `Check schema queries are not supported by Spanner driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\r\n        const tableName =\r\n            tableOrName instanceof Table ? tableOrName.name : tableOrName\r\n        const sql =\r\n            `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\r\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE' ` +\r\n            `AND \\`TABLE_NAME\\` = '${tableName}'`\r\n        const result = await this.query(sql)\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(\r\n        tableOrName: Table | string,\r\n        columnName: string,\r\n    ): Promise<boolean> {\r\n        const tableName =\r\n            tableOrName instanceof Table ? tableOrName.name : tableOrName\r\n        const sql =\r\n            `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` ` +\r\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' ` +\r\n            `AND \\`TABLE_NAME\\` = '${tableName}' AND \\`COLUMN_NAME\\` = '${columnName}'`\r\n        const result = await this.query(sql)\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Creates a new database.\r\n     * Note: Spanner does not support database creation inside a transaction block.\r\n     */\r\n    async createDatabase(\r\n        database: string,\r\n        ifNotExist?: boolean,\r\n    ): Promise<void> {\r\n        if (ifNotExist) {\r\n            const databaseAlreadyExists = await this.hasDatabase(database)\r\n\r\n            if (databaseAlreadyExists) return Promise.resolve()\r\n        }\r\n\r\n        const up = `CREATE DATABASE \"${database}\"`\r\n        const down = `DROP DATABASE \"${database}\"`\r\n        await this.executeQueries(new Query(up), new Query(down))\r\n    }\r\n\r\n    /**\r\n     * Drops database.\r\n     * Note: Spanner does not support database dropping inside a transaction block.\r\n     */\r\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\r\n        const up = ifExist\r\n            ? `DROP DATABASE IF EXISTS \"${database}\"`\r\n            : `DROP DATABASE \"${database}\"`\r\n        const down = `CREATE DATABASE \"${database}\"`\r\n        await this.executeQueries(new Query(up), new Query(down))\r\n    }\r\n\r\n    /**\r\n     * Creates a new table schema.\r\n     */\r\n    async createSchema(\r\n        schemaPath: string,\r\n        ifNotExist?: boolean,\r\n    ): Promise<void> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Drops table schema.\r\n     */\r\n    async dropSchema(\r\n        schemaPath: string,\r\n        ifExist?: boolean,\r\n        isCascade?: boolean,\r\n    ): Promise<void> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Creates a new table.\r\n     */\r\n    async createTable(\r\n        table: Table,\r\n        ifNotExist: boolean = false,\r\n        createForeignKeys: boolean = true,\r\n        createIndices: boolean = true,\r\n    ): Promise<void> {\r\n        if (ifNotExist) {\r\n            const isTableExist = await this.hasTable(table)\r\n            if (isTableExist) return Promise.resolve()\r\n        }\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        upQueries.push(this.createTableSql(table, createForeignKeys))\r\n        downQueries.push(this.dropTableSql(table))\r\n\r\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\r\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\r\n        if (createForeignKeys)\r\n            table.foreignKeys.forEach((foreignKey) =>\r\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\r\n            )\r\n\r\n        if (createIndices) {\r\n            table.indices.forEach((index) => {\r\n                // new index may be passed without name. In this case we generate index name manually.\r\n                if (!index.name)\r\n                    index.name = this.connection.namingStrategy.indexName(\r\n                        table,\r\n                        index.columnNames,\r\n                        index.where,\r\n                    )\r\n                upQueries.push(this.createIndexSql(table, index))\r\n                downQueries.push(this.dropIndexSql(table, index))\r\n            })\r\n        }\r\n\r\n        // if table has column with generated type, we must add the expression to the metadata table\r\n        const generatedColumns = table.columns.filter(\r\n            (column) => column.generatedType && column.asExpression,\r\n        )\r\n\r\n        for (const column of generatedColumns) {\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                table: table.name,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                table: table.name,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n\r\n            upQueries.push(insertQuery)\r\n            downQueries.push(deleteQuery)\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(\r\n        target: Table | string,\r\n        ifExist?: boolean,\r\n        dropForeignKeys: boolean = true,\r\n        dropIndices: boolean = true,\r\n    ): Promise<void> {\r\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\r\n        // to perform drop queries for foreign keys and indices.\r\n        if (ifExist) {\r\n            const isTableExist = await this.hasTable(target)\r\n            if (!isTableExist) return Promise.resolve()\r\n        }\r\n\r\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\r\n        const createForeignKeys: boolean = dropForeignKeys\r\n        const tablePath = this.getTablePath(target)\r\n        const table = await this.getCachedTable(tablePath)\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        if (dropIndices) {\r\n            table.indices.forEach((index) => {\r\n                upQueries.push(this.dropIndexSql(table, index))\r\n                downQueries.push(this.createIndexSql(table, index))\r\n            })\r\n        }\r\n\r\n        if (dropForeignKeys)\r\n            table.foreignKeys.forEach((foreignKey) =>\r\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\r\n            )\r\n\r\n        upQueries.push(this.dropTableSql(table))\r\n        downQueries.push(this.createTableSql(table, createForeignKeys))\r\n\r\n        // if table had columns with generated type, we must remove the expression from the metadata table\r\n        const generatedColumns = table.columns.filter(\r\n            (column) => column.generatedType && column.asExpression,\r\n        )\r\n\r\n        for (const column of generatedColumns) {\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                table: table.name,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                table: table.name,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            upQueries.push(deleteQuery)\r\n            downQueries.push(insertQuery)\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Creates a new view.\r\n     */\r\n    async createView(view: View): Promise<void> {\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n        upQueries.push(this.createViewSql(view))\r\n        upQueries.push(await this.insertViewDefinitionSql(view))\r\n        downQueries.push(this.dropViewSql(view))\r\n        downQueries.push(await this.deleteViewDefinitionSql(view))\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Drops the view.\r\n     */\r\n    async dropView(target: View | string): Promise<void> {\r\n        const viewName = target instanceof View ? target.name : target\r\n        const view = await this.getCachedView(viewName)\r\n\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n        upQueries.push(await this.deleteViewDefinitionSql(view))\r\n        upQueries.push(this.dropViewSql(view))\r\n        downQueries.push(await this.insertViewDefinitionSql(view))\r\n        downQueries.push(this.createViewSql(view))\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Renames the given table.\r\n     */\r\n    async renameTable(\r\n        oldTableOrName: Table | string,\r\n        newTableName: string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Rename table queries are not supported by Spanner driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(\r\n        tableOrName: Table | string,\r\n        column: TableColumn,\r\n    ): Promise<void> {\r\n        const table =\r\n            tableOrName instanceof Table\r\n                ? tableOrName\r\n                : await this.getCachedTable(tableOrName)\r\n        const clonedTable = table.clone()\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        upQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} ADD ${this.buildCreateColumnSql(column)}`,\r\n            ),\r\n        )\r\n        downQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} DROP COLUMN ${this.driver.escape(column.name)}`,\r\n            ),\r\n        )\r\n\r\n        // create column index\r\n        const columnIndex = clonedTable.indices.find(\r\n            (index) =>\r\n                index.columnNames.length === 1 &&\r\n                index.columnNames[0] === column.name,\r\n        )\r\n        if (columnIndex) {\r\n            upQueries.push(this.createIndexSql(table, columnIndex))\r\n            downQueries.push(this.dropIndexSql(table, columnIndex))\r\n        } else if (column.isUnique) {\r\n            const uniqueIndex = new TableIndex({\r\n                name: this.connection.namingStrategy.indexName(table, [\r\n                    column.name,\r\n                ]),\r\n                columnNames: [column.name],\r\n                isUnique: true,\r\n            })\r\n            clonedTable.indices.push(uniqueIndex)\r\n            clonedTable.uniques.push(\r\n                new TableUnique({\r\n                    name: uniqueIndex.name,\r\n                    columnNames: uniqueIndex.columnNames,\r\n                }),\r\n            )\r\n\r\n            upQueries.push(this.createIndexSql(table, uniqueIndex))\r\n            downQueries.push(this.dropIndexSql(table, uniqueIndex))\r\n        }\r\n\r\n        if (column.generatedType && column.asExpression) {\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                table: table.name,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                table: table.name,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n\r\n            upQueries.push(insertQuery)\r\n            downQueries.push(deleteQuery)\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n\r\n        clonedTable.addColumn(column)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[],\r\n    ): Promise<void> {\r\n        for (const column of columns) {\r\n            await this.addColumn(tableOrName, column)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(\r\n        tableOrName: Table | string,\r\n        oldTableColumnOrName: TableColumn | string,\r\n        newTableColumnOrName: TableColumn | string,\r\n    ): Promise<void> {\r\n        const table =\r\n            tableOrName instanceof Table\r\n                ? tableOrName\r\n                : await this.getCachedTable(tableOrName)\r\n        const oldColumn =\r\n            oldTableColumnOrName instanceof TableColumn\r\n                ? oldTableColumnOrName\r\n                : table.columns.find((c) => c.name === oldTableColumnOrName)\r\n        if (!oldColumn)\r\n            throw new TypeORMError(\r\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\r\n            )\r\n\r\n        let newColumn\r\n        if (newTableColumnOrName instanceof TableColumn) {\r\n            newColumn = newTableColumnOrName\r\n        } else {\r\n            newColumn = oldColumn.clone()\r\n            newColumn.name = newTableColumnOrName\r\n        }\r\n\r\n        return this.changeColumn(table, oldColumn, newColumn)\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(\r\n        tableOrName: Table | string,\r\n        oldTableColumnOrName: TableColumn | string,\r\n        newColumn: TableColumn,\r\n    ): Promise<void> {\r\n        const table =\r\n            tableOrName instanceof Table\r\n                ? tableOrName\r\n                : await this.getCachedTable(tableOrName)\r\n        let clonedTable = table.clone()\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        const oldColumn =\r\n            oldTableColumnOrName instanceof TableColumn\r\n                ? oldTableColumnOrName\r\n                : table.columns.find(\r\n                      (column) => column.name === oldTableColumnOrName,\r\n                  )\r\n        if (!oldColumn)\r\n            throw new TypeORMError(\r\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\r\n            )\r\n\r\n        if (\r\n            oldColumn.name !== newColumn.name ||\r\n            oldColumn.type !== newColumn.type ||\r\n            oldColumn.length !== newColumn.length ||\r\n            oldColumn.isArray !== newColumn.isArray ||\r\n            oldColumn.generatedType !== newColumn.generatedType ||\r\n            oldColumn.asExpression !== newColumn.asExpression\r\n        ) {\r\n            // To avoid data conversion, we just recreate column\r\n            await this.dropColumn(table, oldColumn)\r\n            await this.addColumn(table, newColumn)\r\n\r\n            // update cloned table\r\n            clonedTable = table.clone()\r\n        } else {\r\n            if (\r\n                newColumn.precision !== oldColumn.precision ||\r\n                newColumn.scale !== oldColumn.scale\r\n            ) {\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${\r\n                            newColumn.name\r\n                        }\" TYPE ${this.driver.createFullType(newColumn)}`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${\r\n                            newColumn.name\r\n                        }\" TYPE ${this.driver.createFullType(oldColumn)}`,\r\n                    ),\r\n                )\r\n            }\r\n\r\n            if (oldColumn.isNullable !== newColumn.isNullable) {\r\n                if (newColumn.isNullable) {\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`,\r\n                        ),\r\n                    )\r\n                } else {\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`,\r\n                        ),\r\n                    )\r\n                }\r\n            }\r\n\r\n            if (newColumn.isUnique !== oldColumn.isUnique) {\r\n                if (newColumn.isUnique === true) {\r\n                    const uniqueIndex = new TableIndex({\r\n                        name: this.connection.namingStrategy.indexName(table, [\r\n                            newColumn.name,\r\n                        ]),\r\n                        columnNames: [newColumn.name],\r\n                        isUnique: true,\r\n                    })\r\n                    clonedTable.indices.push(uniqueIndex)\r\n                    clonedTable.uniques.push(\r\n                        new TableUnique({\r\n                            name: uniqueIndex.name,\r\n                            columnNames: uniqueIndex.columnNames,\r\n                        }),\r\n                    )\r\n\r\n                    upQueries.push(this.createIndexSql(table, uniqueIndex))\r\n                    downQueries.push(this.dropIndexSql(table, uniqueIndex))\r\n                } else {\r\n                    const uniqueIndex = clonedTable.indices.find((index) => {\r\n                        return (\r\n                            index.columnNames.length === 1 &&\r\n                            index.isUnique === true &&\r\n                            !!index.columnNames.find(\r\n                                (columnName) => columnName === newColumn.name,\r\n                            )\r\n                        )\r\n                    })\r\n                    clonedTable.indices.splice(\r\n                        clonedTable.indices.indexOf(uniqueIndex!),\r\n                        1,\r\n                    )\r\n\r\n                    const tableUnique = clonedTable.uniques.find(\r\n                        (unique) => unique.name === uniqueIndex!.name,\r\n                    )\r\n                    clonedTable.uniques.splice(\r\n                        clonedTable.uniques.indexOf(tableUnique!),\r\n                        1,\r\n                    )\r\n\r\n                    upQueries.push(this.dropIndexSql(table, uniqueIndex!))\r\n                    downQueries.push(this.createIndexSql(table, uniqueIndex!))\r\n                }\r\n            }\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(\r\n        tableOrName: Table | string,\r\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\r\n    ): Promise<void> {\r\n        for (const { oldColumn, newColumn } of changedColumns) {\r\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(\r\n        tableOrName: Table | string,\r\n        columnOrName: TableColumn | string,\r\n    ): Promise<void> {\r\n        const table =\r\n            tableOrName instanceof Table\r\n                ? tableOrName\r\n                : await this.getCachedTable(tableOrName)\r\n        const column =\r\n            columnOrName instanceof TableColumn\r\n                ? columnOrName\r\n                : table.findColumnByName(columnOrName)\r\n        if (!column)\r\n            throw new TypeORMError(\r\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\r\n            )\r\n\r\n        const clonedTable = table.clone()\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        // drop column index\r\n        const columnIndex = clonedTable.indices.find(\r\n            (index) =>\r\n                index.columnNames.length === 1 &&\r\n                index.columnNames[0] === column.name,\r\n        )\r\n        if (columnIndex) {\r\n            clonedTable.indices.splice(\r\n                clonedTable.indices.indexOf(columnIndex),\r\n                1,\r\n            )\r\n            upQueries.push(this.dropIndexSql(table, columnIndex))\r\n            downQueries.push(this.createIndexSql(table, columnIndex))\r\n        }\r\n\r\n        // drop column check\r\n        const columnCheck = clonedTable.checks.find(\r\n            (check) =>\r\n                !!check.columnNames &&\r\n                check.columnNames.length === 1 &&\r\n                check.columnNames[0] === column.name,\r\n        )\r\n        if (columnCheck) {\r\n            clonedTable.checks.splice(\r\n                clonedTable.checks.indexOf(columnCheck),\r\n                1,\r\n            )\r\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck))\r\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck))\r\n        }\r\n\r\n        upQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} DROP COLUMN ${this.driver.escape(column.name)}`,\r\n            ),\r\n        )\r\n        downQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} ADD ${this.buildCreateColumnSql(column)}`,\r\n            ),\r\n        )\r\n\r\n        if (column.generatedType && column.asExpression) {\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                table: table.name,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                table: table.name,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            upQueries.push(deleteQuery)\r\n            downQueries.push(insertQuery)\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n\r\n        clonedTable.removeColumn(column)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[] | string[],\r\n    ): Promise<void> {\r\n        for (const column of columns) {\r\n            await this.dropColumn(tableOrName, column)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     *\r\n     * Not supported in Spanner.\r\n     * @see https://cloud.google.com/spanner/docs/schema-and-data-model#notes_about_key_columns\r\n     */\r\n    async createPrimaryKey(\r\n        tableOrName: Table | string,\r\n        columnNames: string[],\r\n    ): Promise<void> {\r\n        throw new Error(\r\n            \"The keys of a table can't change; you can't add a key column to an existing table or remove a key column from an existing table.\",\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Updates composite primary keys.\r\n     */\r\n    async updatePrimaryKeys(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[],\r\n    ): Promise<void> {\r\n        throw new Error(\r\n            \"The keys of a table can't change; you can't add a key column to an existing table or remove a key column from an existing table.\",\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     *\r\n     * Not supported in Spanner.\r\n     * @see https://cloud.google.com/spanner/docs/schema-and-data-model#notes_about_key_columns\r\n     */\r\n    async dropPrimaryKey(tableOrName: Table | string): Promise<void> {\r\n        throw new Error(\r\n            \"The keys of a table can't change; you can't add a key column to an existing table or remove a key column from an existing table.\",\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates new unique constraint.\r\n     */\r\n    async createUniqueConstraint(\r\n        tableOrName: Table | string,\r\n        uniqueConstraint: TableUnique,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Spanner does not support unique constraints. Use unique index instead.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates new unique constraints.\r\n     */\r\n    async createUniqueConstraints(\r\n        tableOrName: Table | string,\r\n        uniqueConstraints: TableUnique[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Spanner does not support unique constraints. Use unique index instead.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops unique constraint.\r\n     */\r\n    async dropUniqueConstraint(\r\n        tableOrName: Table | string,\r\n        uniqueOrName: TableUnique | string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Spanner does not support unique constraints. Use unique index instead.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops unique constraints.\r\n     */\r\n    async dropUniqueConstraints(\r\n        tableOrName: Table | string,\r\n        uniqueConstraints: TableUnique[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Spanner does not support unique constraints. Use unique index instead.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates new check constraint.\r\n     */\r\n    async createCheckConstraint(\r\n        tableOrName: Table | string,\r\n        checkConstraint: TableCheck,\r\n    ): Promise<void> {\r\n        const table =\r\n            tableOrName instanceof Table\r\n                ? tableOrName\r\n                : await this.getCachedTable(tableOrName)\r\n\r\n        // new check constraint may be passed without name. In this case we generate unique name manually.\r\n        if (!checkConstraint.name)\r\n            checkConstraint.name =\r\n                this.connection.namingStrategy.checkConstraintName(\r\n                    table,\r\n                    checkConstraint.expression!,\r\n                )\r\n\r\n        const up = this.createCheckConstraintSql(table, checkConstraint)\r\n        const down = this.dropCheckConstraintSql(table, checkConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.addCheckConstraint(checkConstraint)\r\n    }\r\n\r\n    /**\r\n     * Creates new check constraints.\r\n     */\r\n    async createCheckConstraints(\r\n        tableOrName: Table | string,\r\n        checkConstraints: TableCheck[],\r\n    ): Promise<void> {\r\n        const promises = checkConstraints.map((checkConstraint) =>\r\n            this.createCheckConstraint(tableOrName, checkConstraint),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Drops check constraint.\r\n     */\r\n    async dropCheckConstraint(\r\n        tableOrName: Table | string,\r\n        checkOrName: TableCheck | string,\r\n    ): Promise<void> {\r\n        const table =\r\n            tableOrName instanceof Table\r\n                ? tableOrName\r\n                : await this.getCachedTable(tableOrName)\r\n        const checkConstraint =\r\n            checkOrName instanceof TableCheck\r\n                ? checkOrName\r\n                : table.checks.find((c) => c.name === checkOrName)\r\n        if (!checkConstraint)\r\n            throw new TypeORMError(\r\n                `Supplied check constraint was not found in table ${table.name}`,\r\n            )\r\n\r\n        const up = this.dropCheckConstraintSql(table, checkConstraint)\r\n        const down = this.createCheckConstraintSql(table, checkConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.removeCheckConstraint(checkConstraint)\r\n    }\r\n\r\n    /**\r\n     * Drops check constraints.\r\n     */\r\n    async dropCheckConstraints(\r\n        tableOrName: Table | string,\r\n        checkConstraints: TableCheck[],\r\n    ): Promise<void> {\r\n        const promises = checkConstraints.map((checkConstraint) =>\r\n            this.dropCheckConstraint(tableOrName, checkConstraint),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Creates new exclusion constraint.\r\n     */\r\n    async createExclusionConstraint(\r\n        tableOrName: Table | string,\r\n        exclusionConstraint: TableExclusion,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Spanner does not support exclusion constraints.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates new exclusion constraints.\r\n     */\r\n    async createExclusionConstraints(\r\n        tableOrName: Table | string,\r\n        exclusionConstraints: TableExclusion[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Spanner does not support exclusion constraints.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraint.\r\n     */\r\n    async dropExclusionConstraint(\r\n        tableOrName: Table | string,\r\n        exclusionOrName: TableExclusion | string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Spanner does not support exclusion constraints.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraints.\r\n     */\r\n    async dropExclusionConstraints(\r\n        tableOrName: Table | string,\r\n        exclusionConstraints: TableExclusion[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Spanner does not support exclusion constraints.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(\r\n        tableOrName: Table | string,\r\n        foreignKey: TableForeignKey,\r\n    ): Promise<void> {\r\n        const table =\r\n            tableOrName instanceof Table\r\n                ? tableOrName\r\n                : await this.getCachedTable(tableOrName)\r\n\r\n        // new FK may be passed without name. In this case we generate FK name manually.\r\n        if (!foreignKey.name)\r\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\r\n                table,\r\n                foreignKey.columnNames,\r\n                this.getTablePath(foreignKey),\r\n                foreignKey.referencedColumnNames,\r\n            )\r\n\r\n        const up = this.createForeignKeySql(table, foreignKey)\r\n        const down = this.dropForeignKeySql(table, foreignKey)\r\n        await this.executeQueries(up, down)\r\n        table.addForeignKey(foreignKey)\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(\r\n        tableOrName: Table | string,\r\n        foreignKeys: TableForeignKey[],\r\n    ): Promise<void> {\r\n        for (const foreignKey of foreignKeys) {\r\n            await this.createForeignKey(tableOrName, foreignKey)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(\r\n        tableOrName: Table | string,\r\n        foreignKeyOrName: TableForeignKey | string,\r\n    ): Promise<void> {\r\n        const table =\r\n            tableOrName instanceof Table\r\n                ? tableOrName\r\n                : await this.getCachedTable(tableOrName)\r\n        const foreignKey =\r\n            foreignKeyOrName instanceof TableForeignKey\r\n                ? foreignKeyOrName\r\n                : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\r\n        if (!foreignKey)\r\n            throw new TypeORMError(\r\n                `Supplied foreign key was not found in table ${table.name}`,\r\n            )\r\n\r\n        const up = this.dropForeignKeySql(table, foreignKey)\r\n        const down = this.createForeignKeySql(table, foreignKey)\r\n        await this.executeQueries(up, down)\r\n        table.removeForeignKey(foreignKey)\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(\r\n        tableOrName: Table | string,\r\n        foreignKeys: TableForeignKey[],\r\n    ): Promise<void> {\r\n        for (const foreignKey of foreignKeys) {\r\n            await this.dropForeignKey(tableOrName, foreignKey)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(\r\n        tableOrName: Table | string,\r\n        index: TableIndex,\r\n    ): Promise<void> {\r\n        const table =\r\n            tableOrName instanceof Table\r\n                ? tableOrName\r\n                : await this.getCachedTable(tableOrName)\r\n\r\n        // new index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name) index.name = this.generateIndexName(table, index)\r\n\r\n        const up = this.createIndexSql(table, index)\r\n        const down = this.dropIndexSql(table, index)\r\n        await this.executeQueries(up, down)\r\n        table.addIndex(index)\r\n    }\r\n\r\n    /**\r\n     * Creates a new indices\r\n     */\r\n    async createIndices(\r\n        tableOrName: Table | string,\r\n        indices: TableIndex[],\r\n    ): Promise<void> {\r\n        for (const index of indices) {\r\n            await this.createIndex(tableOrName, index)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(\r\n        tableOrName: Table | string,\r\n        indexOrName: TableIndex | string,\r\n    ): Promise<void> {\r\n        const table =\r\n            tableOrName instanceof Table\r\n                ? tableOrName\r\n                : await this.getCachedTable(tableOrName)\r\n        const index =\r\n            indexOrName instanceof TableIndex\r\n                ? indexOrName\r\n                : table.indices.find((i) => i.name === indexOrName)\r\n        if (!index)\r\n            throw new TypeORMError(\r\n                `Supplied index ${indexOrName} was not found in table ${table.name}`,\r\n            )\r\n\r\n        // new index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name) index.name = this.generateIndexName(table, index)\r\n\r\n        const up = this.dropIndexSql(table, index)\r\n        const down = this.createIndexSql(table, index)\r\n        await this.executeQueries(up, down)\r\n        table.removeIndex(index)\r\n    }\r\n\r\n    /**\r\n     * Drops an indices from the table.\r\n     */\r\n    async dropIndices(\r\n        tableOrName: Table | string,\r\n        indices: TableIndex[],\r\n    ): Promise<void> {\r\n        for (const index of indices) {\r\n            await this.dropIndex(tableOrName, index)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all table contents.\r\n     * Spanner does not support TRUNCATE TABLE statement, so we use DELETE FROM.\r\n     */\r\n    async clearTable(tableName: string): Promise<void> {\r\n        await this.query(`DELETE FROM ${this.escapePath(tableName)} WHERE true`)\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        // drop index queries\r\n        const selectIndexDropsQuery =\r\n            `SELECT concat('DROP INDEX \\`', INDEX_NAME, '\\`') AS \\`query\\` ` +\r\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`INDEXES\\` ` +\r\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`INDEX_TYPE\\` = 'INDEX' AND \\`SPANNER_IS_MANAGED\\` = false`\r\n        const dropIndexQueries: ObjectLiteral[] = await this.query(\r\n            selectIndexDropsQuery,\r\n        )\r\n\r\n        // drop foreign key queries\r\n        const selectFKDropsQuery =\r\n            `SELECT concat('ALTER TABLE \\`', TABLE_NAME, '\\`', ' DROP CONSTRAINT \\`', CONSTRAINT_NAME, '\\`') AS \\`query\\` ` +\r\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` ` +\r\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`CONSTRAINT_TYPE\\` = 'FOREIGN KEY'`\r\n        const dropFKQueries: ObjectLiteral[] = await this.query(\r\n            selectFKDropsQuery,\r\n        )\r\n\r\n        // drop view queries\r\n        // const selectViewDropsQuery = `SELECT concat('DROP VIEW \\`', TABLE_NAME, '\\`') AS \\`query\\` FROM \\`INFORMATION_SCHEMA\\`.\\`VIEWS\\``\r\n        // const dropViewQueries: ObjectLiteral[] = await this.query(\r\n        //     selectViewDropsQuery,\r\n        // )\r\n\r\n        // drop table queries\r\n        const dropTablesQuery =\r\n            `SELECT concat('DROP TABLE \\`', TABLE_NAME, '\\`') AS \\`query\\` ` +\r\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\r\n            `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE'`\r\n        const dropTableQueries: ObjectLiteral[] = await this.query(\r\n            dropTablesQuery,\r\n        )\r\n\r\n        if (\r\n            !dropIndexQueries.length &&\r\n            !dropFKQueries.length &&\r\n            // !dropViewQueries.length &&\r\n            !dropTableQueries.length\r\n        )\r\n            return\r\n\r\n        const isAnotherTransactionActive = this.isTransactionActive\r\n        if (!isAnotherTransactionActive) await this.startTransaction()\r\n        try {\r\n            for (let query of dropIndexQueries) {\r\n                await this.updateDDL(query[\"query\"])\r\n            }\r\n            for (let query of dropFKQueries) {\r\n                await this.updateDDL(query[\"query\"])\r\n            }\r\n\r\n            // for (let query of dropViewQueries) {\r\n            //     await this.updateDDL(query[\"query\"])\r\n            // }\r\n\r\n            for (let query of dropTableQueries) {\r\n                await this.updateDDL(query[\"query\"])\r\n            }\r\n\r\n            await this.commitTransaction()\r\n        } catch (error) {\r\n            try {\r\n                // we throw original error even if rollback thrown an error\r\n                if (!isAnotherTransactionActive)\r\n                    await this.rollbackTransaction()\r\n            } catch (rollbackError) {}\r\n            throw error\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Override Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes up sql queries.\r\n     */\r\n    async executeMemoryUpSql(): Promise<void> {\r\n        for (const { query, parameters } of this.sqlInMemory.upQueries) {\r\n            if (this.isDMLQuery(query)) {\r\n                await this.query(query, parameters)\r\n            } else {\r\n                await this.updateDDL(query, parameters)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes down sql queries.\r\n     */\r\n    async executeMemoryDownSql(): Promise<void> {\r\n        for (const {\r\n            query,\r\n            parameters,\r\n        } of this.sqlInMemory.downQueries.reverse()) {\r\n            if (this.isDMLQuery(query)) {\r\n                await this.query(query, parameters)\r\n            } else {\r\n                await this.updateDDL(query, parameters)\r\n            }\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected async loadViews(viewNames?: string[]): Promise<View[]> {\r\n        // const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\r\n        // if (!hasTable) {\r\n        //     return []\r\n        // }\r\n        //\r\n        // if (!viewNames) {\r\n        //     viewNames = []\r\n        // }\r\n        //\r\n        // const escapedViewNames = viewNames\r\n        //     .map((viewName) => `'${viewName}'`)\r\n        //     .join(\", \")\r\n        //\r\n        // const query =\r\n        //     `SELECT \\`T\\`.*, \\`V\\`.\\`VIEW_DEFINITION\\` FROM ${this.escapePath(\r\n        //         this.getTypeormMetadataTableName(),\r\n        //     )} \\`T\\` ` +\r\n        //     `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`VIEWS\\` \\`V\\` ON \\`V\\`.\\`TABLE_NAME\\` = \\`T\\`.\\`NAME\\` ` +\r\n        //     `WHERE \\`T\\`.\\`TYPE\\` = '${MetadataTableType.VIEW}' ${\r\n        //         viewNames.length\r\n        //             ? ` AND \\`T\\`.\\`NAME\\` IN (${escapedViewNames})`\r\n        //             : \"\"\r\n        //     }`\r\n        // const dbViews = await this.query(query)\r\n        // return dbViews.map((dbView: any) => {\r\n        //     const view = new View()\r\n        //     view.database = dbView[\"NAME\"]\r\n        //     view.name = this.driver.buildTableName(dbView[\"NAME\"])\r\n        //     view.expression = dbView[\"NAME\"]\r\n        //     return view\r\n        // })\r\n\r\n        return Promise.resolve([])\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\r\n        if (tableNames && tableNames.length === 0) {\r\n            return []\r\n        }\r\n\r\n        const dbTables: { TABLE_NAME: string }[] = []\r\n\r\n        if (!tableNames || !tableNames.length) {\r\n            // Since we don't have any of this data we have to do a scan\r\n            const tablesSql =\r\n                `SELECT \\`TABLE_NAME\\` ` +\r\n                `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\r\n                `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE'`\r\n            dbTables.push(...(await this.query(tablesSql)))\r\n        } else {\r\n            const tablesSql =\r\n                `SELECT \\`TABLE_NAME\\` ` +\r\n                `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLES\\` ` +\r\n                `WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_TYPE\\` = 'BASE TABLE' ` +\r\n                `AND \\`TABLE_NAME\\` IN (${tableNames\r\n                    .map((tableName) => `'${tableName}'`)\r\n                    .join(\", \")})`\r\n\r\n            dbTables.push(...(await this.query(tablesSql)))\r\n        }\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (!dbTables.length) return []\r\n\r\n        const loadedTableNames = dbTables\r\n            .map((dbTable) => `'${dbTable.TABLE_NAME}'`)\r\n            .join(\", \")\r\n\r\n        const columnsSql = `SELECT * FROM \\`INFORMATION_SCHEMA\\`.\\`COLUMNS\\` WHERE \\`TABLE_CATALOG\\` = '' AND \\`TABLE_SCHEMA\\` = '' AND \\`TABLE_NAME\\` IN (${loadedTableNames})`\r\n\r\n        const primaryKeySql =\r\n            `SELECT \\`KCU\\`.\\`TABLE_NAME\\`, \\`KCU\\`.\\`COLUMN_NAME\\` ` +\r\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` \\`TC\\` ` +\r\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`KCU\\` ON \\`KCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\r\n            `WHERE \\`TC\\`.\\`TABLE_CATALOG\\` = '' AND \\`TC\\`.\\`TABLE_SCHEMA\\` = '' AND \\`TC\\`.\\`CONSTRAINT_TYPE\\` = 'PRIMARY KEY' ` +\r\n            `AND \\`TC\\`.\\`TABLE_NAME\\` IN (${loadedTableNames})`\r\n\r\n        const indicesSql =\r\n            `SELECT \\`I\\`.\\`TABLE_NAME\\`, \\`I\\`.\\`INDEX_NAME\\`, \\`I\\`.\\`IS_UNIQUE\\`, \\`I\\`.\\`IS_NULL_FILTERED\\`, \\`IC\\`.\\`COLUMN_NAME\\` ` +\r\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`INDEXES\\` \\`I\\` ` +\r\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`INDEX_COLUMNS\\` \\`IC\\` ON \\`IC\\`.\\`INDEX_NAME\\` = \\`I\\`.\\`INDEX_NAME\\` ` +\r\n            `AND \\`IC\\`.\\`TABLE_NAME\\` = \\`I\\`.\\`TABLE_NAME\\` ` +\r\n            `WHERE \\`I\\`.\\`TABLE_CATALOG\\` = '' AND \\`I\\`.\\`TABLE_SCHEMA\\` = '' AND \\`I\\`.\\`TABLE_NAME\\` IN (${loadedTableNames}) ` +\r\n            `AND \\`I\\`.\\`INDEX_TYPE\\` = 'INDEX' AND \\`I\\`.\\`SPANNER_IS_MANAGED\\` = false`\r\n\r\n        const checksSql =\r\n            `SELECT \\`TC\\`.\\`TABLE_NAME\\`, \\`TC\\`.\\`CONSTRAINT_NAME\\`, \\`CC\\`.\\`CHECK_CLAUSE\\`, \\`CCU\\`.\\`COLUMN_NAME\\`` +\r\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` \\`TC\\` ` +\r\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CONSTRAINT_COLUMN_USAGE\\` \\`CCU\\` ON \\`CCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\r\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CHECK_CONSTRAINTS\\` \\`CC\\` ON \\`CC\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\r\n            `WHERE \\`TC\\`.\\`TABLE_CATALOG\\` = '' AND \\`TC\\`.\\`TABLE_SCHEMA\\` = '' AND \\`TC\\`.\\`CONSTRAINT_TYPE\\` = 'CHECK' ` +\r\n            `AND \\`TC\\`.\\`TABLE_NAME\\` IN (${loadedTableNames}) AND \\`TC\\`.\\`CONSTRAINT_NAME\\` NOT LIKE 'CK_IS_NOT_NULL%'`\r\n\r\n        const foreignKeysSql =\r\n            `SELECT \\`TC\\`.\\`TABLE_NAME\\`, \\`TC\\`.\\`CONSTRAINT_NAME\\`, \\`KCU\\`.\\`COLUMN_NAME\\`, ` +\r\n            `\\`CTU\\`.\\`TABLE_NAME\\` AS \\`REFERENCED_TABLE_NAME\\`, \\`CCU\\`.\\`COLUMN_NAME\\` AS \\`REFERENCED_COLUMN_NAME\\`, ` +\r\n            `\\`RC\\`.\\`UPDATE_RULE\\`, \\`RC\\`.\\`DELETE_RULE\\` ` +\r\n            `FROM \\`INFORMATION_SCHEMA\\`.\\`TABLE_CONSTRAINTS\\` \\`TC\\` ` +\r\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`KEY_COLUMN_USAGE\\` \\`KCU\\` ON \\`KCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\r\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CONSTRAINT_TABLE_USAGE\\` \\`CTU\\` ON \\`CTU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\r\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`REFERENTIAL_CONSTRAINTS\\` \\`RC\\` ON \\`RC\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\r\n            `INNER JOIN \\`INFORMATION_SCHEMA\\`.\\`CONSTRAINT_COLUMN_USAGE\\` \\`CCU\\` ON \\`CCU\\`.\\`CONSTRAINT_NAME\\` = \\`TC\\`.\\`CONSTRAINT_NAME\\` ` +\r\n            `WHERE \\`TC\\`.\\`TABLE_CATALOG\\` = '' AND \\`TC\\`.\\`TABLE_SCHEMA\\` = '' AND \\`TC\\`.\\`CONSTRAINT_TYPE\\` = 'FOREIGN KEY' ` +\r\n            `AND \\`TC\\`.\\`TABLE_NAME\\` IN (${loadedTableNames})`\r\n\r\n        const [\r\n            dbColumns,\r\n            dbPrimaryKeys,\r\n            dbIndices,\r\n            dbChecks,\r\n            dbForeignKeys,\r\n        ]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(columnsSql),\r\n            this.query(primaryKeySql),\r\n            this.query(indicesSql),\r\n            this.query(checksSql),\r\n            this.query(foreignKeysSql),\r\n        ])\r\n\r\n        // create tables for loaded tables\r\n        return Promise.all(\r\n            dbTables.map(async (dbTable) => {\r\n                const table = new Table()\r\n\r\n                table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"])\r\n\r\n                // create columns from the loaded columns\r\n                table.columns = await Promise.all(\r\n                    dbColumns\r\n                        .filter(\r\n                            (dbColumn) =>\r\n                                dbColumn[\"TABLE_NAME\"] ===\r\n                                dbTable[\"TABLE_NAME\"],\r\n                        )\r\n                        .map(async (dbColumn) => {\r\n                            const columnUniqueIndices = dbIndices.filter(\r\n                                (dbIndex) => {\r\n                                    return (\r\n                                        dbIndex[\"TABLE_NAME\"] ===\r\n                                            dbTable[\"TABLE_NAME\"] &&\r\n                                        dbIndex[\"COLUMN_NAME\"] ===\r\n                                            dbColumn[\"COLUMN_NAME\"] &&\r\n                                        dbIndex[\"IS_UNIQUE\"] === true\r\n                                    )\r\n                                },\r\n                            )\r\n\r\n                            const tableMetadata =\r\n                                this.connection.entityMetadatas.find(\r\n                                    (metadata) =>\r\n                                        this.getTablePath(table) ===\r\n                                        this.getTablePath(metadata),\r\n                                )\r\n                            const hasIgnoredIndex =\r\n                                columnUniqueIndices.length > 0 &&\r\n                                tableMetadata &&\r\n                                tableMetadata.indices.some((index) => {\r\n                                    return columnUniqueIndices.some(\r\n                                        (uniqueIndex) => {\r\n                                            return (\r\n                                                index.name ===\r\n                                                    uniqueIndex[\"INDEX_NAME\"] &&\r\n                                                index.synchronize === false\r\n                                            )\r\n                                        },\r\n                                    )\r\n                                })\r\n\r\n                            const isConstraintComposite =\r\n                                columnUniqueIndices.every((uniqueIndex) => {\r\n                                    return dbIndices.some(\r\n                                        (dbIndex) =>\r\n                                            dbIndex[\"INDEX_NAME\"] ===\r\n                                                uniqueIndex[\"INDEX_NAME\"] &&\r\n                                            dbIndex[\"COLUMN_NAME\"] !==\r\n                                                dbColumn[\"COLUMN_NAME\"],\r\n                                    )\r\n                                })\r\n\r\n                            const tableColumn = new TableColumn()\r\n                            tableColumn.name = dbColumn[\"COLUMN_NAME\"]\r\n\r\n                            let fullType =\r\n                                dbColumn[\"SPANNER_TYPE\"].toLowerCase()\r\n                            if (fullType.indexOf(\"array\") !== -1) {\r\n                                tableColumn.isArray = true\r\n                                fullType = fullType.substring(\r\n                                    fullType.indexOf(\"<\") + 1,\r\n                                    fullType.indexOf(\">\"),\r\n                                )\r\n                            }\r\n\r\n                            if (fullType.indexOf(\"(\") !== -1) {\r\n                                tableColumn.type = fullType.substring(\r\n                                    0,\r\n                                    fullType.indexOf(\"(\"),\r\n                                )\r\n                            } else {\r\n                                tableColumn.type = fullType\r\n                            }\r\n\r\n                            if (\r\n                                this.driver.withLengthColumnTypes.indexOf(\r\n                                    tableColumn.type as ColumnType,\r\n                                ) !== -1\r\n                            ) {\r\n                                tableColumn.length = fullType.substring(\r\n                                    fullType.indexOf(\"(\") + 1,\r\n                                    fullType.indexOf(\")\"),\r\n                                )\r\n                            }\r\n\r\n                            if (dbColumn[\"IS_GENERATED\"] === \"ALWAYS\") {\r\n                                tableColumn.asExpression =\r\n                                    dbColumn[\"GENERATION_EXPRESSION\"]\r\n                                tableColumn.generatedType = \"STORED\"\r\n\r\n                                // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\r\n                                const asExpressionQuery =\r\n                                    this.selectTypeormMetadataSql({\r\n                                        table: dbTable[\"TABLE_NAME\"],\r\n                                        type: MetadataTableType.GENERATED_COLUMN,\r\n                                        name: tableColumn.name,\r\n                                    })\r\n\r\n                                const results = await this.query(\r\n                                    asExpressionQuery.query,\r\n                                    asExpressionQuery.parameters,\r\n                                )\r\n\r\n                                if (results[0] && results[0].value) {\r\n                                    tableColumn.asExpression = results[0].value\r\n                                } else {\r\n                                    tableColumn.asExpression = \"\"\r\n                                }\r\n                            }\r\n\r\n                            tableColumn.isUnique =\r\n                                columnUniqueIndices.length > 0 &&\r\n                                !hasIgnoredIndex &&\r\n                                !isConstraintComposite\r\n                            tableColumn.isNullable =\r\n                                dbColumn[\"IS_NULLABLE\"] === \"YES\"\r\n                            tableColumn.isPrimary = dbPrimaryKeys.some(\r\n                                (dbPrimaryKey) => {\r\n                                    return (\r\n                                        dbPrimaryKey[\"TABLE_NAME\"] ===\r\n                                            dbColumn[\"TABLE_NAME\"] &&\r\n                                        dbPrimaryKey[\"COLUMN_NAME\"] ===\r\n                                            dbColumn[\"COLUMN_NAME\"]\r\n                                    )\r\n                                },\r\n                            )\r\n\r\n                            return tableColumn\r\n                        }),\r\n                )\r\n\r\n                const tableForeignKeys = dbForeignKeys.filter(\r\n                    (dbForeignKey) => {\r\n                        return (\r\n                            dbForeignKey[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"]\r\n                        )\r\n                    },\r\n                )\r\n\r\n                table.foreignKeys = OrmUtils.uniq(\r\n                    tableForeignKeys,\r\n                    (dbForeignKey) => dbForeignKey[\"CONSTRAINT_NAME\"],\r\n                ).map((dbForeignKey) => {\r\n                    const foreignKeys = tableForeignKeys.filter(\r\n                        (dbFk) =>\r\n                            dbFk[\"CONSTRAINT_NAME\"] ===\r\n                            dbForeignKey[\"CONSTRAINT_NAME\"],\r\n                    )\r\n                    return new TableForeignKey({\r\n                        name: dbForeignKey[\"CONSTRAINT_NAME\"],\r\n                        columnNames: OrmUtils.uniq(\r\n                            foreignKeys.map((dbFk) => dbFk[\"COLUMN_NAME\"]),\r\n                        ),\r\n                        referencedDatabase:\r\n                            dbForeignKey[\"REFERENCED_TABLE_SCHEMA\"],\r\n                        referencedTableName:\r\n                            dbForeignKey[\"REFERENCED_TABLE_NAME\"],\r\n                        referencedColumnNames: OrmUtils.uniq(\r\n                            foreignKeys.map(\r\n                                (dbFk) => dbFk[\"REFERENCED_COLUMN_NAME\"],\r\n                            ),\r\n                        ),\r\n                        onDelete: dbForeignKey[\"DELETE_RULE\"],\r\n                        onUpdate: dbForeignKey[\"UPDATE_RULE\"],\r\n                    })\r\n                })\r\n\r\n                const tableIndices = dbIndices.filter(\r\n                    (dbIndex) =>\r\n                        dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"],\r\n                )\r\n\r\n                table.indices = OrmUtils.uniq(\r\n                    tableIndices,\r\n                    (dbIndex) => dbIndex[\"INDEX_NAME\"],\r\n                ).map((constraint) => {\r\n                    const indices = tableIndices.filter((index) => {\r\n                        return index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]\r\n                    })\r\n\r\n                    return new TableIndex(<TableIndexOptions>{\r\n                        table: table,\r\n                        name: constraint[\"INDEX_NAME\"],\r\n                        columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\r\n                        isUnique: constraint[\"IS_UNIQUE\"],\r\n                        isNullFiltered: constraint[\"IS_NULL_FILTERED\"],\r\n                    })\r\n                })\r\n\r\n                const tableChecks = dbChecks.filter(\r\n                    (dbCheck) =>\r\n                        dbCheck[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"],\r\n                )\r\n\r\n                table.checks = OrmUtils.uniq(\r\n                    tableChecks,\r\n                    (dbIndex) => dbIndex[\"CONSTRAINT_NAME\"],\r\n                ).map((constraint) => {\r\n                    const checks = tableChecks.filter(\r\n                        (dbC) =>\r\n                            dbC[\"CONSTRAINT_NAME\"] ===\r\n                            constraint[\"CONSTRAINT_NAME\"],\r\n                    )\r\n                    return new TableCheck({\r\n                        name: constraint[\"CONSTRAINT_NAME\"],\r\n                        columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\r\n                        expression: constraint[\"CHECK_CLAUSE\"],\r\n                    })\r\n                })\r\n\r\n                return table\r\n            }),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create table sql.\r\n     */\r\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\r\n        const columnDefinitions = table.columns\r\n            .map((column) => this.buildCreateColumnSql(column))\r\n            .join(\", \")\r\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\r\n\r\n        // we create unique indexes instead of unique constraints, because Spanner does not have unique constraints.\r\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\r\n        table.columns\r\n            .filter((column) => column.isUnique)\r\n            .forEach((column) => {\r\n                const isUniqueIndexExist = table.indices.some((index) => {\r\n                    return (\r\n                        index.columnNames.length === 1 &&\r\n                        !!index.isUnique &&\r\n                        index.columnNames.indexOf(column.name) !== -1\r\n                    )\r\n                })\r\n                const isUniqueConstraintExist = table.uniques.some((unique) => {\r\n                    return (\r\n                        unique.columnNames.length === 1 &&\r\n                        unique.columnNames.indexOf(column.name) !== -1\r\n                    )\r\n                })\r\n                if (!isUniqueIndexExist && !isUniqueConstraintExist)\r\n                    table.indices.push(\r\n                        new TableIndex({\r\n                            name: this.connection.namingStrategy.uniqueConstraintName(\r\n                                table,\r\n                                [column.name],\r\n                            ),\r\n                            columnNames: [column.name],\r\n                            isUnique: true,\r\n                        }),\r\n                    )\r\n            })\r\n\r\n        // as Spanner does not have unique constraints, we must create table indices from table uniques and mark them as unique.\r\n        if (table.uniques.length > 0) {\r\n            table.uniques.forEach((unique) => {\r\n                const uniqueExist = table.indices.some(\r\n                    (index) => index.name === unique.name,\r\n                )\r\n                if (!uniqueExist) {\r\n                    table.indices.push(\r\n                        new TableIndex({\r\n                            name: unique.name,\r\n                            columnNames: unique.columnNames,\r\n                            isUnique: true,\r\n                        }),\r\n                    )\r\n                }\r\n            })\r\n        }\r\n\r\n        if (table.checks.length > 0) {\r\n            const checksSql = table.checks\r\n                .map((check) => {\r\n                    const checkName = check.name\r\n                        ? check.name\r\n                        : this.connection.namingStrategy.checkConstraintName(\r\n                              table,\r\n                              check.expression!,\r\n                          )\r\n                    return `CONSTRAINT \\`${checkName}\\` CHECK (${check.expression})`\r\n                })\r\n                .join(\", \")\r\n\r\n            sql += `, ${checksSql}`\r\n        }\r\n\r\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\r\n            const foreignKeysSql = table.foreignKeys\r\n                .map((fk) => {\r\n                    const columnNames = fk.columnNames\r\n                        .map((columnName) => `\\`${columnName}\\``)\r\n                        .join(\", \")\r\n                    if (!fk.name)\r\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\r\n                            table,\r\n                            fk.columnNames,\r\n                            this.getTablePath(fk),\r\n                            fk.referencedColumnNames,\r\n                        )\r\n                    const referencedColumnNames = fk.referencedColumnNames\r\n                        .map((columnName) => `\\`${columnName}\\``)\r\n                        .join(\", \")\r\n\r\n                    return `CONSTRAINT \\`${\r\n                        fk.name\r\n                    }\\` FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\r\n                        this.getTablePath(fk),\r\n                    )} (${referencedColumnNames})`\r\n                })\r\n                .join(\", \")\r\n\r\n            sql += `, ${foreignKeysSql}`\r\n        }\r\n\r\n        sql += `)`\r\n\r\n        const primaryColumns = table.columns.filter(\r\n            (column) => column.isPrimary,\r\n        )\r\n        if (primaryColumns.length > 0) {\r\n            const columnNames = primaryColumns\r\n                .map((column) => this.driver.escape(column.name))\r\n                .join(\", \")\r\n            sql += ` PRIMARY KEY (${columnNames})`\r\n        }\r\n\r\n        return new Query(sql)\r\n    }\r\n\r\n    /**\r\n     * Builds drop table sql.\r\n     */\r\n    protected dropTableSql(tableOrPath: Table | string): Query {\r\n        return new Query(`DROP TABLE ${this.escapePath(tableOrPath)}`)\r\n    }\r\n\r\n    protected createViewSql(view: View): Query {\r\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\"\r\n        const viewName = this.escapePath(view)\r\n\r\n        const expression =\r\n            typeof view.expression === \"string\"\r\n                ? view.expression\r\n                : view.expression(this.connection).getQuery()\r\n        return new Query(\r\n            `CREATE ${materializedClause}VIEW ${viewName} SQL SECURITY INVOKER AS ${expression}`,\r\n        )\r\n    }\r\n\r\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\r\n        let { schema, tableName: name } = this.driver.parseTableName(view)\r\n\r\n        const type = view.materialized\r\n            ? MetadataTableType.MATERIALIZED_VIEW\r\n            : MetadataTableType.VIEW\r\n        const expression =\r\n            typeof view.expression === \"string\"\r\n                ? view.expression.trim()\r\n                : view.expression(this.connection).getQuery()\r\n        return this.insertTypeormMetadataSql({\r\n            type,\r\n            schema,\r\n            name,\r\n            value: expression,\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Builds drop view sql.\r\n     */\r\n    protected dropViewSql(view: View): Query {\r\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\"\r\n        return new Query(\r\n            `DROP ${materializedClause}VIEW ${this.escapePath(view)}`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds remove view sql.\r\n     */\r\n    protected async deleteViewDefinitionSql(view: View): Promise<Query> {\r\n        let { schema, tableName: name } = this.driver.parseTableName(view)\r\n\r\n        const type = view.materialized\r\n            ? MetadataTableType.MATERIALIZED_VIEW\r\n            : MetadataTableType.VIEW\r\n        return this.deleteTypeormMetadataSql({ type, schema, name })\r\n    }\r\n\r\n    /**\r\n     * Builds create index sql.\r\n     */\r\n    protected createIndexSql(table: Table, index: TableIndex): Query {\r\n        const columns = index.columnNames\r\n            .map((columnName) => this.driver.escape(columnName))\r\n            .join(\", \")\r\n        let indexType = \"\"\r\n        if (index.isUnique) indexType += \"UNIQUE \"\r\n        if (index.isNullFiltered) indexType += \"NULL_FILTERED \"\r\n\r\n        return new Query(\r\n            `CREATE ${indexType}INDEX \\`${index.name}\\` ON ${this.escapePath(\r\n                table,\r\n            )} (${columns})`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds drop index sql.\r\n     */\r\n    protected dropIndexSql(\r\n        table: Table,\r\n        indexOrName: TableIndex | string,\r\n    ): Query {\r\n        let indexName =\r\n            indexOrName instanceof TableIndex ? indexOrName.name : indexOrName\r\n        return new Query(`DROP INDEX \\`${indexName}\\``)\r\n    }\r\n\r\n    /**\r\n     * Builds create check constraint sql.\r\n     */\r\n    protected createCheckConstraintSql(\r\n        table: Table,\r\n        checkConstraint: TableCheck,\r\n    ): Query {\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \\`${\r\n                checkConstraint.name\r\n            }\\` CHECK (${checkConstraint.expression})`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds drop check constraint sql.\r\n     */\r\n    protected dropCheckConstraintSql(\r\n        table: Table,\r\n        checkOrName: TableCheck | string,\r\n    ): Query {\r\n        const checkName =\r\n            checkOrName instanceof TableCheck ? checkOrName.name : checkOrName\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \\`${checkName}\\``,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create foreign key sql.\r\n     */\r\n    protected createForeignKeySql(\r\n        table: Table,\r\n        foreignKey: TableForeignKey,\r\n    ): Query {\r\n        const columnNames = foreignKey.columnNames\r\n            .map((column) => this.driver.escape(column))\r\n            .join(\", \")\r\n        const referencedColumnNames = foreignKey.referencedColumnNames\r\n            .map((column) => this.driver.escape(column))\r\n            .join(\",\")\r\n        let sql =\r\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \\`${\r\n                foreignKey.name\r\n            }\\` FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES ${this.escapePath(\r\n                this.getTablePath(foreignKey),\r\n            )} (${referencedColumnNames})`\r\n\r\n        return new Query(sql)\r\n    }\r\n\r\n    /**\r\n     * Builds drop foreign key sql.\r\n     */\r\n    protected dropForeignKeySql(\r\n        table: Table,\r\n        foreignKeyOrName: TableForeignKey | string,\r\n    ): Query {\r\n        const foreignKeyName =\r\n            foreignKeyOrName instanceof TableForeignKey\r\n                ? foreignKeyOrName.name\r\n                : foreignKeyOrName\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \\`${foreignKeyName}\\``,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Escapes given table or view path.\r\n     */\r\n    protected escapePath(target: Table | View | string): string {\r\n        const { tableName } = this.driver.parseTableName(target)\r\n        return `\\`${tableName}\\``\r\n    }\r\n\r\n    /**\r\n     * Builds a part of query to create/change a column.\r\n     */\r\n    protected buildCreateColumnSql(column: TableColumn) {\r\n        let c = `${this.driver.escape(\r\n            column.name,\r\n        )} ${this.connection.driver.createFullType(column)}`\r\n\r\n        // Spanner supports only STORED generated column type\r\n        if (column.generatedType === \"STORED\" && column.asExpression) {\r\n            c += ` AS (${column.asExpression}) STORED`\r\n        } else {\r\n            if (!column.isNullable) c += \" NOT NULL\"\r\n        }\r\n\r\n        return c\r\n    }\r\n\r\n    /**\r\n     * Executes sql used special for schema build.\r\n     */\r\n    protected async executeQueries(\r\n        upQueries: Query | Query[],\r\n        downQueries: Query | Query[],\r\n    ): Promise<void> {\r\n        if (upQueries instanceof Query) upQueries = [upQueries]\r\n        if (downQueries instanceof Query) downQueries = [downQueries]\r\n\r\n        this.sqlInMemory.upQueries.push(...upQueries)\r\n        this.sqlInMemory.downQueries.push(...downQueries)\r\n\r\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\r\n        if (this.sqlMemoryMode === true)\r\n            return Promise.resolve() as Promise<any>\r\n\r\n        for (const { query, parameters } of upQueries) {\r\n            if (this.isDMLQuery(query)) {\r\n                await this.query(query, parameters)\r\n            } else {\r\n                await this.updateDDL(query, parameters)\r\n            }\r\n        }\r\n    }\r\n\r\n    protected isDMLQuery(query: string): boolean {\r\n        return (\r\n            query.startsWith(\"INSERT\") ||\r\n            query.startsWith(\"UPDATE\") ||\r\n            query.startsWith(\"DELETE\")\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Change table comment.\r\n     */\r\n    changeTableComment(\r\n        tableOrName: Table | string,\r\n        comment?: string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `spanner driver does not support change table comment.`,\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../browser/src/driver/aurora-mysql/AuroraMysqlDriver.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAA;AAE5C,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAA;AAGjE,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAA;AAChD,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAA;AAE5D,OAAO,EAAE,kBAAkB,EAAE,MAAM,yCAAyC,CAAA;AAQ5E,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAA;AAC9C,OAAO,EAAE,sBAAsB,EAAE,MAAM,mCAAmC,CAAA;AAE1E,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAA;AAI1C,OAAO,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAA;AAG5D;;GAEG;AACH,MAAM,OAAO,iBAAiB;IAgS1B,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,UAAsB;QAxPlC;;WAEG;QACH,iBAAY,GAAY,KAAK,CAAA;QAE7B;;WAEG;QACH,gBAAW,GAAG,IAAI,CAAA;QAElB;;WAEG;QACH,uBAAkB,GAAG,QAAiB,CAAA;QAEtC;;;;;WAKG;QACH,uBAAkB,GAAiB;YAC/B,gBAAgB;YAChB,KAAK;YACL,KAAK;YACL,SAAS,EAAE,kBAAkB;YAC7B,SAAS;YACT,UAAU;YACV,WAAW;YACX,QAAQ;YACR,OAAO;YACP,QAAQ;YACR,kBAAkB,EAAE,qBAAqB;YACzC,MAAM,EAAE,qBAAqB;YAC7B,SAAS;YACT,KAAK,EAAE,sBAAsB;YAC7B,SAAS,EAAE,sBAAsB;YACjC,OAAO,EAAE,sBAAsB;YAC/B,MAAM,EAAE,sBAAsB;YAC9B,SAAS,EAAE,sBAAsB;YACjC,sBAAsB;YACtB,MAAM;YACN,UAAU;YACV,WAAW;YACX,MAAM;YACN,MAAM;YACN,eAAe;YACf,MAAM;YACN,OAAO,EAAE,4BAA4B;YACrC,eAAe;YACf,SAAS;YACT,UAAU,EAAE,+BAA+B;YAC3C,kBAAkB;YAClB,MAAM;YACN,MAAM;YACN,UAAU;YACV,UAAU;YACV,YAAY;YACZ,YAAY;YACZ,UAAU;YACV,UAAU;YACV,MAAM;YACN,KAAK;YACL,QAAQ;YACR,WAAW;YACX,iBAAiB;YACjB,MAAM;YACN,qBAAqB;YACrB,UAAU;YACV,OAAO;YACP,YAAY;YACZ,SAAS;YACT,YAAY;YACZ,iBAAiB;YACjB,cAAc;YACd,oBAAoB;SACvB,CAAA;QAED;;WAEG;QACH,yBAAoB,GAAiB,CAAC,yBAAyB,CAAC,CAAA;QAEhE;;WAEG;QACH,iBAAY,GAAiB;YACzB,UAAU;YACV,OAAO;YACP,YAAY;YACZ,SAAS;YACT,YAAY;YACZ,iBAAiB;YACjB,cAAc;YACd,oBAAoB;SACvB,CAAA;QAED;;WAEG;QACH,0BAAqB,GAAiB;YAClC,MAAM;YACN,SAAS;YACT,UAAU;YACV,QAAQ;YACR,WAAW;SACd,CAAA;QAED;;WAEG;QACH,yBAAoB,GAAiB;YACjC,KAAK;YACL,SAAS;YACT,UAAU;YACV,WAAW;YACX,KAAK;YACL,SAAS;YACT,QAAQ;SACX,CAAA;QAED;;WAEG;QACH,6BAAwB,GAAiB;YACrC,SAAS;YACT,KAAK;YACL,SAAS;YACT,OAAO;YACP,OAAO;YACP,QAAQ;YACR,kBAAkB;YAClB,MAAM;YACN,MAAM;YACN,UAAU;YACV,WAAW;SACd,CAAA;QAED;;WAEG;QACH,yBAAoB,GAAiB;YACjC,SAAS;YACT,KAAK;YACL,SAAS;YACT,OAAO;YACP,OAAO;YACP,QAAQ;YACR,kBAAkB;YAClB,MAAM;SACT,CAAA;QAED;;WAEG;QACH,6BAAwB,GAAiB;YACrC,KAAK;YACL,SAAS;YACT,UAAU;YACV,SAAS;YACT,WAAW;YACX,QAAQ;YACR,SAAS;YACT,KAAK;YACL,SAAS;YACT,OAAO;YACP,OAAO;YACP,QAAQ;YACR,kBAAkB;YAClB,MAAM;SACT,CAAA;QAED;;;WAGG;QACH,oBAAe,GAAsB;YACjC,UAAU,EAAE,UAAU;YACtB,mBAAmB,EAAE,CAAC;YACtB,iBAAiB,EAAE,sBAAsB;YACzC,UAAU,EAAE,UAAU;YACtB,mBAAmB,EAAE,CAAC;YACtB,iBAAiB,EAAE,sBAAsB;YACzC,UAAU,EAAE,UAAU;YACtB,mBAAmB,EAAE,CAAC;YACtB,kBAAkB,EAAE,IAAI;YACxB,OAAO,EAAE,KAAK;YACd,SAAS,EAAE,KAAK;YAChB,WAAW,EAAE,KAAK;YAClB,aAAa,EAAE,SAAS;YACxB,kBAAkB,EAAE,QAAQ;YAC5B,OAAO,EAAE,KAAK;YACd,eAAe,EAAE,SAAS;YAC1B,SAAS,EAAE,QAAQ;YACnB,aAAa,EAAE,KAAK;YACpB,UAAU,EAAE,MAAM;YAClB,WAAW,EAAE,MAAM;YACnB,YAAY,EAAE,SAAS;YACvB,gBAAgB,EAAE,SAAS;YAC3B,cAAc,EAAE,SAAS;YACzB,aAAa,EAAE,SAAS;YACxB,YAAY,EAAE,SAAS;YACvB,aAAa,EAAE,MAAM;SACxB,CAAA;QAED;;;WAGG;QACH,qBAAgB,GAAqB;YACjC,OAAO,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE;YACxB,QAAQ,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE;YACzB,kBAAkB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE;YACnC,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE;YACnB,MAAM,EAAE,EAAE,MAAM,EAAE,CAAC,EAAE;YACrB,SAAS,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE;YAC1B,OAAO,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;YACpC,GAAG,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;YAChC,OAAO,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;YACpC,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;YAClC,KAAK,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;YACxB,MAAM,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE;YACzB,IAAI,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;YACtB,QAAQ,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;YAC1B,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE;YAC3B,GAAG,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;YACjB,GAAG,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE;YAClB,OAAO,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE;YACtB,OAAO,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;YACrB,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;YACtB,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE;YACvB,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE;SACxB,CAAA;QAED;;;WAGG;QACH,mBAAc,GAAG,EAAE,CAAA;QAEnB,oBAAe,GAAoB;YAC/B,OAAO,EAAE,KAAK;SACjB,CAAA;QAOG,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,OAAuC,CAAA;QAEjE,qBAAqB;QACrB,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAEvB,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,aAAa,CAChC,IAAI,CAAC,OAAO,CAAC,MAAM,EACnB,IAAI,CAAC,OAAO,CAAC,SAAS,EACtB,IAAI,CAAC,OAAO,CAAC,WAAW,EACxB,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrB,CAAC,KAAa,EAAE,UAAkB,EAAE,EAAE,CAClC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,EACtD,IAAI,CAAC,OAAO,CAAC,oBAAoB,EACjC,IAAI,CAAC,OAAO,CAAC,aAAa,CAC7B,CAAA;QAED,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAA;QAErE,kDAAkD;QAClD,oDAAoD;QACpD,iHAAiH;QACjH,gEAAgE;QAChE,8BAA8B;QAC9B,qDAAqD;QACrD,8BAA8B;QAC9B,qDAAqD;QACrD,gHAAgH;QAChH,2EAA2E;IAC/E,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,KAAK,CAAC,OAAO;QACT,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACjB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAA;YAE1D,IAAI,CAAC,QAAQ,GAAG,MAAM,WAAW,CAAC,kBAAkB,EAAE,CAAA;YAEtD,MAAM,WAAW,CAAC,OAAO,EAAE,CAAA;QAC/B,CAAC;IACL,CAAC;IAED;;OAEG;IACH,YAAY;QACR,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU,KAAmB,CAAC;IAEpC;;OAEG;IACH,mBAAmB;QACf,OAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IAClD,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,IAAqB;QACnC,OAAO,IAAI,sBAAsB,CAC7B,IAAI,EACJ,IAAI,IAAI,CAAC,aAAa,CAClB,IAAI,CAAC,OAAO,CAAC,MAAM,EACnB,IAAI,CAAC,OAAO,CAAC,SAAS,EACtB,IAAI,CAAC,OAAO,CAAC,WAAW,EACxB,IAAI,CAAC,OAAO,CAAC,QAAQ,EACrB,CAAC,KAAa,EAAE,UAAkB,EAAE,EAAE,CAClC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,EACtD,IAAI,CAAC,OAAO,CAAC,oBAAoB,EACjC,IAAI,CAAC,OAAO,CAAC,aAAa,CAC7B,CACJ,CAAA;IACL,CAAC;IAED;;;OAGG;IACH,yBAAyB,CACrB,GAAW,EACX,UAAyB,EACzB,gBAA+B;QAE/B,MAAM,iBAAiB,GAAU,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAC9D,CAAC,GAAG,EAAE,EAAE,CAAC,gBAAgB,CAAC,GAAG,CAAC,CACjC,CAAA;QACD,IAAI,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM;YAC9C,OAAO,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAA;QAEnC,GAAG,GAAG,GAAG,CAAC,OAAO,CACb,6BAA6B,EAC7B,CAAC,IAAI,EAAE,OAAe,EAAE,GAAW,EAAU,EAAE;YAC3C,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE,CAAC;gBAClC,OAAO,IAAI,CAAA;YACf,CAAC;YAED,IAAI,KAAK,GAAQ,UAAU,CAAC,GAAG,CAAC,CAAA;YAEhC,IAAI,OAAO,EAAE,CAAC;gBACV,OAAO,KAAK;qBACP,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE;oBACZ,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;oBACzB,OAAO,IAAI,CAAC,eAAe,CACvB,GAAG,EACH,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAC/B,CAAA;gBACL,CAAC,CAAC;qBACD,IAAI,CAAC,IAAI,CAAC,CAAA;YACnB,CAAC;YAED,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE,CAAC;gBAC9B,OAAO,KAAK,EAAE,CAAA;YAClB,CAAC;YAED,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAC7B,OAAO,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;QAClE,CAAC,CACJ,CAAA,CAAC,kEAAkE;QACpE,OAAO,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAA;IACnC,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,UAAkB;QACrB,OAAO,GAAG,GAAG,UAAU,GAAG,GAAG,CAAA;IACjC,CAAC;IAED;;;OAGG;IACH,cAAc,CACV,SAAiB,EACjB,MAAe,EACf,QAAiB;QAEjB,IAAI,SAAS,GAAG,CAAC,SAAS,CAAC,CAAA;QAE3B,IAAI,QAAQ,EAAE,CAAC;YACX,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAA;QAC/B,CAAC;QAED,OAAO,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC9B,CAAC;IAED;;OAEG;IACH,cAAc,CACV,MAAgE;QAEhE,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAA;QACpC,MAAM,YAAY,GAAG,SAAS,CAAA;QAE9B,IAAI,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;YACpE,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;YAE/C,OAAO;gBACH,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,IAAI,cAAc;gBAC9D,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,IAAI,YAAY;gBACtD,SAAS,EAAE,MAAM,CAAC,SAAS;aAC9B,CAAA;QACL,CAAC;QAED,IAAI,eAAe,CAAC,iBAAiB,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAA;YAE9D,OAAO;gBACH,QAAQ,EACJ,MAAM,CAAC,kBAAkB;oBACzB,MAAM,CAAC,QAAQ;oBACf,cAAc;gBAClB,MAAM,EACF,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,MAAM,IAAI,YAAY;gBAC5D,SAAS,EAAE,MAAM,CAAC,SAAS;aAC9B,CAAA;QACL,CAAC;QAED,IAAI,eAAe,CAAC,gBAAgB,CAAC,MAAM,CAAC,EAAE,CAAC;YAC3C,2CAA2C;YAE3C,OAAO;gBACH,QAAQ,EAAE,MAAM,CAAC,QAAQ,IAAI,cAAc;gBAC3C,MAAM,EAAE,MAAM,CAAC,MAAM,IAAI,YAAY;gBACrC,SAAS,EAAE,MAAM,CAAC,SAAS;aAC9B,CAAA;QACL,CAAC;QAED,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAE/B,OAAO;YACH,QAAQ,EACJ,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,cAAc;YAC/D,MAAM,EAAE,YAAY;YACpB,SAAS,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;SACpD,CAAA;IACL,CAAC;IAED;;OAEG;IACH,sBAAsB,CAAC,KAAU,EAAE,cAA8B;QAC7D,IAAI,cAAc,CAAC,WAAW;YAC1B,KAAK,GAAG,sBAAsB,CAAC,WAAW,CACtC,cAAc,CAAC,WAAW,EAC1B,KAAK,CACR,CAAA;QAEL,IACI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa;YAC3B,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,KAAK,KAAK,EACrD,CAAC;YACC,OAAO,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAA;QACpE,CAAC;QAED,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS;YAAE,OAAO,KAAK,CAAA;QAEvD,IAAI,cAAc,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YAClC,OAAO,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;QACjC,CAAC;aAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,OAAO,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QACjD,CAAC;aAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,OAAO,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QACjD,CAAC;aAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QAChC,CAAC;aAAM,IACH,cAAc,CAAC,IAAI,KAAK,WAAW;YACnC,cAAc,CAAC,IAAI,KAAK,UAAU;YAClC,cAAc,CAAC,IAAI,KAAK,IAAI,EAC9B,CAAC;YACC,OAAO,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAA;QAC3C,CAAC;aAAM,IACH,cAAc,CAAC,IAAI,KAAK,cAAc;YACtC,cAAc,CAAC,IAAI,KAAK,KAAK,EAC/B,CAAC;YACC,OAAO,SAAS,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAA;QAC/C,CAAC;aAAM,IAAI,cAAc,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAC/C,OAAO,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;QAC9C,CAAC;aAAM,IACH,cAAc,CAAC,IAAI,KAAK,MAAM;YAC9B,cAAc,CAAC,IAAI,KAAK,aAAa,EACvC,CAAC;YACC,OAAO,EAAE,GAAG,KAAK,CAAA;QACrB,CAAC;QAED,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG;IACH,oBAAoB,CAAC,KAAU,EAAE,cAA8B;QAC3D,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS;YACrC,OAAO,cAAc,CAAC,WAAW;gBAC7B,CAAC,CAAC,sBAAsB,CAAC,aAAa,CAChC,cAAc,CAAC,WAAW,EAC1B,KAAK,CACR;gBACH,CAAC,CAAC,KAAK,CAAA;QAEf,IACI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa;YAC3B,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,cAAc,KAAK,KAAK,EACrD,CAAC;YACC,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAA;QAClE,CAAC;QAED,IACI,cAAc,CAAC,IAAI,KAAK,OAAO;YAC/B,cAAc,CAAC,IAAI,KAAK,MAAM;YAC9B,cAAc,CAAC,IAAI,KAAK,SAAS,EACnC,CAAC;YACC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAA;QAChC,CAAC;aAAM,IACH,cAAc,CAAC,IAAI,KAAK,UAAU;YAClC,cAAc,CAAC,IAAI,KAAK,IAAI,EAC9B,CAAC;YACC,KAAK,GAAG,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QAClD,CAAC;aAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,KAAK,GAAG,SAAS,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAA;QAClD,CAAC;aAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;QACjE,CAAC;aAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,KAAK,GAAG,SAAS,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAA;QAC9C,CAAC;aAAM,IACH,cAAc,CAAC,IAAI,KAAK,cAAc;YACtC,cAAc,CAAC,IAAI,KAAK,KAAK,EAC/B,CAAC;YACC,KAAK,GAAG,SAAS,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAA;QAChD,CAAC;aAAM,IAAI,cAAc,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YAC/C,KAAK,GAAG,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;QAC/C,CAAC;aAAM,IACH,CAAC,cAAc,CAAC,IAAI,KAAK,MAAM;YAC3B,cAAc,CAAC,IAAI,KAAK,aAAa,CAAC;YAC1C,cAAc,CAAC,IAAI;YACnB,CAAC,KAAK,CAAC,KAAK,CAAC;YACb,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EACnD,CAAC;YACC,4DAA4D;YAC5D,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAA;QAC3B,CAAC;aAAM,IAAI,cAAc,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YACxC,8BAA8B;YAC9B,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;QACpD,CAAC;QAED,IAAI,cAAc,CAAC,WAAW;YAC1B,KAAK,GAAG,sBAAsB,CAAC,aAAa,CACxC,cAAc,CAAC,WAAW,EAC1B,KAAK,CACR,CAAA;QAEL,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,MAKb;QACG,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YACtD,OAAO,KAAK,CAAA;QAChB,CAAC;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAChC,OAAO,SAAS,CAAA;QACpB,CAAC;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC;YAC9B,OAAO,UAAU,CAAA;QACrB,CAAC;aAAM,IAAK,MAAM,CAAC,IAAY,KAAK,MAAM,EAAE,CAAC;YACzC,OAAO,MAAM,CAAA;QACjB,CAAC;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;YACjC,OAAO,SAAS,CAAA;QACpB,CAAC;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;YAChC,OAAO,SAAS,CAAA;QACpB,CAAC;aAAM,IACH,MAAM,CAAC,IAAI,KAAK,cAAc;YAC9B,MAAM,CAAC,IAAI,KAAK,aAAa,EAC/B,CAAC;YACC,OAAO,MAAM,CAAA;QACjB,CAAC;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YACvC,OAAO,MAAM,CAAA;QACjB,CAAC;aAAM,IACH,MAAM,CAAC,IAAI,KAAK,kBAAkB;YAClC,MAAM,CAAC,IAAI,KAAK,MAAM,EACxB,CAAC;YACC,OAAO,QAAQ,CAAA;QACnB,CAAC;aAAM,IACH,MAAM,CAAC,IAAI,KAAK,KAAK;YACrB,MAAM,CAAC,IAAI,KAAK,SAAS;YACzB,MAAM,CAAC,IAAI,KAAK,OAAO,EACzB,CAAC;YACC,OAAO,SAAS,CAAA;QACpB,CAAC;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YAC7D,OAAO,SAAS,CAAA;QACpB,CAAC;aAAM,IACH,MAAM,CAAC,IAAI,KAAK,UAAU;YAC1B,MAAM,CAAC,IAAI,KAAK,kBAAkB,EACpC,CAAC;YACC,OAAO,SAAS,CAAA;QACpB,CAAC;aAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,MAAM,CAAC,IAAI,KAAK,eAAe,EAAE,CAAC;YACpE,OAAO,MAAM,CAAA;QACjB,CAAC;aAAM,CAAC;YACJ,OAAQ,MAAM,CAAC,IAAe,IAAI,EAAE,CAAA;QACxC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,gBAAgB,CAAC,cAA8B;QAC3C,MAAM,YAAY,GAAG,cAAc,CAAC,OAAO,CAAA;QAE3C,IAAI,YAAY,KAAK,IAAI,EAAE,CAAC;YACxB,OAAO,SAAS,CAAA;QACpB,CAAC;QAED,IACI,CAAC,cAAc,CAAC,IAAI,KAAK,MAAM;YAC3B,cAAc,CAAC,IAAI,KAAK,aAAa,CAAC;YAC1C,YAAY,KAAK,SAAS,EAC5B,CAAC;YACC,OAAO,IAAI,YAAY,GAAG,CAAA;QAC9B,CAAC;QAED,IAAI,cAAc,CAAC,IAAI,KAAK,KAAK,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAC9D,OAAO,IAAI,SAAS,CAAC,mBAAmB,CAAC,YAAY,CAAC,GAAG,CAAA;QAC7D,CAAC;QAED,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO,GAAG,YAAY,EAAE,CAAA;QAC5B,CAAC;QAED,IAAI,OAAO,YAAY,KAAK,SAAS,EAAE,CAAC;YACpC,OAAO,YAAY,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAA;QACnC,CAAC;QAED,IAAI,OAAO,YAAY,KAAK,UAAU,EAAE,CAAC;YACrC,OAAO,YAAY,EAAE,CAAA;QACzB,CAAC;QAED,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE,CAAC;YACnC,OAAO,IAAI,YAAY,GAAG,CAAA;QAC9B,CAAC;QAED,IAAI,YAAY,KAAK,SAAS,EAAE,CAAC;YAC7B,OAAO,SAAS,CAAA;QACpB,CAAC;QAED,OAAO,GAAG,YAAY,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,MAAsB;QACpC,OAAO,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CACrC,CAAC,GAAG,EAAE,EAAE,CACJ,GAAG,CAAC,QAAQ;YACZ,GAAG,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC;YACxB,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM,CAChC,CAAA;IACL,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,MAAoC;QAChD,IAAI,MAAM,CAAC,MAAM;YAAE,OAAO,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAA;QAElD;;WAEG;QACH,IAAI,MAAM,CAAC,kBAAkB,KAAK,MAAM;YAAE,OAAO,IAAI,CAAA;QAErD,QAAQ,MAAM,CAAC,IAAI,EAAE,CAAC;YAClB,KAAK,MAAM,CAAC;YACZ,KAAK,SAAS,CAAC;YACf,KAAK,UAAU,CAAC;YAChB,KAAK,kBAAkB;gBACnB,OAAO,KAAK,CAAA;YAChB,KAAK,WAAW;gBACZ,OAAO,KAAK,CAAA;YAChB;gBACI,OAAO,EAAE,CAAA;QACjB,CAAC;IACL,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,MAAmB;QAC9B,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAA;QAEtB,6HAA6H;QAC7H,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAAE,CAAC;YAC/B,IAAI,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,CAAA;QAC/C,CAAC;aAAM,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;YACtB,IAAI,IAAI,IAAI,MAAM,CAAC,KAAK,GAAG,CAAA;QAC/B,CAAC;aAAM,IACH,MAAM,CAAC,SAAS,KAAK,IAAI;YACzB,MAAM,CAAC,SAAS,KAAK,SAAS;YAC9B,MAAM,CAAC,KAAK,KAAK,IAAI;YACrB,MAAM,CAAC,KAAK,KAAK,SAAS,EAC5B,CAAC;YACC,IAAI,IAAI,IAAI,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,KAAK,GAAG,CAAA;QACnD,CAAC;aAAM,IACH,MAAM,CAAC,SAAS,KAAK,IAAI;YACzB,MAAM,CAAC,SAAS,KAAK,SAAS,EAChC,CAAC;YACC,IAAI,IAAI,IAAI,MAAM,CAAC,SAAS,GAAG,CAAA;QACnC,CAAC;QAED,IAAI,MAAM,CAAC,OAAO;YAAE,IAAI,IAAI,QAAQ,CAAA;QAEpC,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;;;OAIG;IACH,sBAAsB;QAClB,OAAO,IAAI,OAAO,CAAM,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YACjC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,CAAC,WAAW,CAAC,aAAa,CAC1B,QAAQ,EACR,CAAC,GAAQ,EAAE,YAAiB,EAAE,EAAE;oBAC5B,GAAG;wBACC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;wBACX,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAA;gBACpD,CAAC,CACJ,CAAA;YACL,CAAC;iBAAM,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC;gBACnB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAQ,EAAE,YAAiB,EAAE,EAAE;oBACpD,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAA;gBAChE,CAAC,CAAC,CAAA;YACN,CAAC;iBAAM,CAAC;gBACJ,IAAI,CACA,IAAI,YAAY,CACZ,mDAAmD,CACtD,CACJ,CAAA;YACL,CAAC;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;;;OAIG;IACH,qBAAqB;QACjB,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,OAAO,IAAI,CAAC,sBAAsB,EAAE,CAAA;QAE3D,OAAO,IAAI,OAAO,CAAM,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;YACjC,IAAI,CAAC,WAAW,CAAC,aAAa,CAC1B,QAAQ,EACR,CAAC,GAAQ,EAAE,YAAiB,EAAE,EAAE;gBAC5B,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAA;YAChE,CAAC,CACJ,CAAA;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACH,kBAAkB,CACd,QAAwB,EACxB,YAAiB,EACjB,WAAmB;QAEnB,MAAM,YAAY,GAAG,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CACjD,CAAC,GAAG,EAAE,eAAe,EAAE,EAAE;YACrB,IAAI,KAAU,CAAA;YACd,IACI,eAAe,CAAC,kBAAkB,KAAK,WAAW;gBAClD,YAAY,CAAC,QAAQ,EACvB,CAAC;gBACC,qEAAqE;gBACrE,qEAAqE;gBACrE,KAAK,GAAG,YAAY,CAAC,QAAQ,GAAG,WAAW,CAAA;gBAC3C,8DAA8D;gBAC9D,sEAAsE;gBACtE,uDAAuD;YAC3D,CAAC;YAED,OAAO,QAAQ,CAAC,SAAS,CACrB,GAAG,EACH,eAAe,CAAC,cAAc,CAAC,KAAK,CAAC,CACxC,CAAA;QACL,CAAC,EACD,EAAmB,CACtB,CAAA;QAED,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS,CAAA;IAC1E,CAAC;IAED;;;OAGG;IACH,kBAAkB,CACd,YAA2B,EAC3B,eAAiC;QAEjC,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC,cAAc,EAAE,EAAE;YAC7C,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CACjC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,cAAc,CAAC,YAAY,CAChD,CAAA;YACD,IAAI,CAAC,WAAW;gBAAE,OAAO,KAAK,CAAA,CAAC,4DAA4D;YAE3F,kEAAkE;YAClE,uEAAuE;YACvE,8EAA8E;YAC9E,qEAAqE;YACrE,kEAAkE;YAClE,8EAA8E;YAC9E,kEAAkE;YAClE,2EAA2E;YAC3E,2EAA2E;YAC3E,uFAAuF;YACvF,0FAA0F;YAC1F,4FAA4F;YAC5F,wEAAwE;YACxE,+DAA+D;YAC/D,2HAA2H;YAC3H,2EAA2E;YAC3E,8EAA8E;YAC9E,iFAAiF;YACjF,0FAA0F;YAC1F,oFAAoF;YACpF,yHAAyH;YACzH,6DAA6D;YAE7D,IAAI,oBAAoB,GAAG,cAAc,CAAC,MAAM,CAAA;YAChD,IACI,CAAC,oBAAoB;gBACrB,cAAc,CAAC,kBAAkB,KAAK,MAAM,EAC9C,CAAC;gBACC,eAAe;gBACf,oBAAoB,GAAG,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAA;YAC/D,CAAC;YAED,OAAO,CACH,WAAW,CAAC,IAAI,KAAK,cAAc,CAAC,YAAY;gBAChD,WAAW,CAAC,IAAI,KAAK,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC;gBACvD,WAAW,CAAC,MAAM,KAAK,oBAAoB;gBAC3C,WAAW,CAAC,KAAK,KAAK,cAAc,CAAC,KAAK;gBAC1C,WAAW,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS;gBAClD,WAAW,CAAC,KAAK,KAAK,cAAc,CAAC,KAAK;gBAC1C,WAAW,CAAC,QAAQ,KAAK,cAAc,CAAC,QAAQ;gBAChD,WAAW,CAAC,QAAQ,KAAK,cAAc,CAAC,QAAQ;gBAChD,WAAW,CAAC,YAAY,KAAK,cAAc,CAAC,YAAY;gBACxD,WAAW,CAAC,aAAa,KAAK,cAAc,CAAC,aAAa;gBAC1D,WAAW,CAAC,OAAO;oBACf,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,CAAC;gBAC9C,CAAC,IAAI,CAAC,oBAAoB,CACtB,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,EACrC,WAAW,CAAC,OAAO,CACtB;gBACD,CAAC,WAAW,CAAC,IAAI;oBACb,cAAc,CAAC,IAAI;oBACnB,CAAC,QAAQ,CAAC,aAAa,CACnB,WAAW,CAAC,IAAI,EAChB,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,CAC7C,CAAC;gBACN,WAAW,CAAC,QAAQ,KAAK,cAAc,CAAC,QAAQ;gBAChD,WAAW,CAAC,SAAS,KAAK,cAAc,CAAC,SAAS;gBAClD,WAAW,CAAC,UAAU,KAAK,cAAc,CAAC,UAAU;gBACpD,WAAW,CAAC,QAAQ;oBAChB,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC;gBAC1C,CAAC,cAAc,CAAC,kBAAkB,KAAK,MAAM;oBACzC,WAAW,CAAC,WAAW,KAAK,cAAc,CAAC,WAAW,CAAC,CAC9D,CAAA;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACH,uBAAuB;QACnB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG;IACH,yBAAyB;QACrB,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;OAEG;IACH,6BAA6B;QACzB,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;OAEG;IACH,eAAe,CAAC,aAAqB,EAAE,KAAa;QAChD,OAAO,GAAG,CAAA;IACd,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACO,gBAAgB;QACtB,MAAM,aAAa,GACf,IAAI,CAAC,OAAO,CAAC,MAAM;YACnB,aAAa,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAA;QACxD,IAAI,CAAC,aAAa,GAAG,aAAa,CAAA;QAElC,qGAAqG;QACrG,4EAA4E;QAC5E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,IAAI,IAAI,CAAC,aAAa,CAAA;IACzE,CAAC;IAED;;OAEG;IACO,uBAAuB,CAC7B,OAAqC,EACrC,WAAoD;QAEpD,WAAW,GAAG,MAAM,CAAC,MAAM,CACvB,EAAE,EACF,WAAW,EACX,WAAW,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAC9C,CAAA,CAAC,yBAAyB;QAE3B,0CAA0C;QAC1C,OAAO,MAAM,CAAC,MAAM,CAChB,EAAE,EACF;YACI,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,QAAQ,EAAE,OAAO,CAAC,QAAQ;YAC1B,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,IAAI,EAAE,OAAO,CAAC,IAAI;SACrB,EACD;YACI,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,IAAI,EAAE,WAAW,CAAC,QAAQ;YAC1B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,GAAG,EAAE,OAAO,CAAC,GAAG;SACnB,EAED,OAAO,CAAC,KAAK,IAAI,EAAE,CACtB,CAAA;IACL,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,UAAU,CAAC,iBAAsB;QAC7C,OAAO,EAAE,CAAA;IACb,CAAC;IAED;;OAEG;IACK,mBAAmB,CAAC,UAAe;QACvC,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAA;QAClC;;;WAGG;QACH,IAAI,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7C,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAU,EAAE,EAAE,CAClC,MAAM,CAAC,GAAG,CACN,MAAM,EACN,qCAAqC,KAAK,EAAE,CAC/C,CACJ,CAAA;QACL,CAAC;QACD,OAAO,UAAU,CAAA;IACrB,CAAC;IAED;;OAEG;IACO,oBAAoB,CAC1B,mBAAuC,EACvC,aAAiC;QAEjC,IACI,OAAO,mBAAmB,KAAK,QAAQ;YACvC,OAAO,aAAa,KAAK,QAAQ,EACnC,CAAC;YACC,qGAAqG;YACrG,0EAA0E;YAC1E,mBAAmB,GAAG,mBAAmB,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAA;YACjE,aAAa,GAAG,aAAa,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAA;QACzD,CAAC;QAED,OAAO,mBAAmB,KAAK,aAAa,CAAA;IAChD,CAAC;IAED;;OAEG;IACO,aAAa,CAAC,OAAgB;QACpC,IAAI,CAAC,OAAO;YAAE,OAAO,OAAO,CAAA;QAE5B,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAA,CAAC,wCAAwC;QAEjF,OAAO,OAAO,CAAA;IAClB,CAAC;CACJ","file":"AuroraMysqlDriver.js","sourcesContent":["import { Driver } from \"../Driver\"\r\nimport { DriverUtils } from \"../DriverUtils\"\r\nimport { CteCapabilities } from \"../types/CteCapabilities\"\r\nimport { AuroraMysqlQueryRunner } from \"./AuroraMysqlQueryRunner\"\r\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\r\nimport { DateUtils } from \"../../util/DateUtils\"\r\nimport { PlatformTools } from \"../../platform/PlatformTools\"\r\nimport { DataSource } from \"../../data-source\"\r\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\r\nimport { AuroraMysqlConnectionOptions } from \"./AuroraMysqlConnectionOptions\"\r\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\r\nimport { ColumnType } from \"../types/ColumnTypes\"\r\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\r\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\r\nimport { AuroraMysqlConnectionCredentialsOptions } from \"./AuroraMysqlConnectionCredentialsOptions\"\r\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\r\nimport { OrmUtils } from \"../../util/OrmUtils\"\r\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { TypeORMError } from \"../../error\"\r\nimport { Table } from \"../../schema-builder/table/Table\"\r\nimport { View } from \"../../schema-builder/view/View\"\r\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\r\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\r\nimport { UpsertType } from \"../types/UpsertType\"\r\n\r\n/**\r\n * Organizes communication with MySQL DBMS.\r\n */\r\nexport class AuroraMysqlDriver implements Driver {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    connection: DataSource\r\n\r\n    /**\r\n     * Aurora Data API underlying library.\r\n     */\r\n    DataApiDriver: any\r\n\r\n    client: any\r\n\r\n    /**\r\n     * Connection pool.\r\n     * Used in non-replication mode.\r\n     */\r\n    pool: any\r\n\r\n    /**\r\n     * Pool cluster used in replication mode.\r\n     */\r\n    poolCluster: any\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: AuroraMysqlConnectionOptions\r\n\r\n    /**\r\n     * Database name used to perform all write queries.\r\n     */\r\n    database?: string\r\n\r\n    /**\r\n     * Schema name used to perform all write queries.\r\n     */\r\n    schema?: string\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean = false\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport = true\r\n\r\n    /**\r\n     * Represent transaction support by this driver\r\n     */\r\n    transactionSupport = \"nested\" as const\r\n\r\n    /**\r\n     * Gets list of supported column data types by a driver.\r\n     *\r\n     * @see https://www.tutorialspoint.com/mysql/mysql-data-types.htm\r\n     * @see https://dev.mysql.com/doc/refman/8.0/en/data-types.html\r\n     */\r\n    supportedDataTypes: ColumnType[] = [\r\n        // numeric types\r\n        \"bit\",\r\n        \"int\",\r\n        \"integer\", // synonym for int\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"mediumint\",\r\n        \"bigint\",\r\n        \"float\",\r\n        \"double\",\r\n        \"double precision\", // synonym for double\r\n        \"real\", // synonym for double\r\n        \"decimal\",\r\n        \"dec\", // synonym for decimal\r\n        \"numeric\", // synonym for decimal\r\n        \"fixed\", // synonym for decimal\r\n        \"bool\", // synonym for tinyint\r\n        \"boolean\", // synonym for tinyint\r\n        // date and time types\r\n        \"date\",\r\n        \"datetime\",\r\n        \"timestamp\",\r\n        \"time\",\r\n        \"year\",\r\n        // string types\r\n        \"char\",\r\n        \"nchar\", // synonym for national char\r\n        \"national char\",\r\n        \"varchar\",\r\n        \"nvarchar\", // synonym for national varchar\r\n        \"national varchar\",\r\n        \"blob\",\r\n        \"text\",\r\n        \"tinyblob\",\r\n        \"tinytext\",\r\n        \"mediumblob\",\r\n        \"mediumtext\",\r\n        \"longblob\",\r\n        \"longtext\",\r\n        \"enum\",\r\n        \"set\",\r\n        \"binary\",\r\n        \"varbinary\",\r\n        // json data type\r\n        \"json\",\r\n        // spatial data types\r\n        \"geometry\",\r\n        \"point\",\r\n        \"linestring\",\r\n        \"polygon\",\r\n        \"multipoint\",\r\n        \"multilinestring\",\r\n        \"multipolygon\",\r\n        \"geometrycollection\",\r\n    ]\r\n\r\n    /**\r\n     * Returns type of upsert supported by driver if any\r\n     */\r\n    supportedUpsertTypes: UpsertType[] = [\"on-duplicate-key-update\"]\r\n\r\n    /**\r\n     * Gets list of spatial column data types.\r\n     */\r\n    spatialTypes: ColumnType[] = [\r\n        \"geometry\",\r\n        \"point\",\r\n        \"linestring\",\r\n        \"polygon\",\r\n        \"multipoint\",\r\n        \"multilinestring\",\r\n        \"multipolygon\",\r\n        \"geometrycollection\",\r\n    ]\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[] = [\r\n        \"char\",\r\n        \"varchar\",\r\n        \"nvarchar\",\r\n        \"binary\",\r\n        \"varbinary\",\r\n    ]\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withWidthColumnTypes: ColumnType[] = [\r\n        \"bit\",\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"mediumint\",\r\n        \"int\",\r\n        \"integer\",\r\n        \"bigint\",\r\n    ]\r\n\r\n    /**\r\n     * Gets list of column data types that support precision by a driver.\r\n     */\r\n    withPrecisionColumnTypes: ColumnType[] = [\r\n        \"decimal\",\r\n        \"dec\",\r\n        \"numeric\",\r\n        \"fixed\",\r\n        \"float\",\r\n        \"double\",\r\n        \"double precision\",\r\n        \"real\",\r\n        \"time\",\r\n        \"datetime\",\r\n        \"timestamp\",\r\n    ]\r\n\r\n    /**\r\n     * Gets list of column data types that supports scale by a driver.\r\n     */\r\n    withScaleColumnTypes: ColumnType[] = [\r\n        \"decimal\",\r\n        \"dec\",\r\n        \"numeric\",\r\n        \"fixed\",\r\n        \"float\",\r\n        \"double\",\r\n        \"double precision\",\r\n        \"real\",\r\n    ]\r\n\r\n    /**\r\n     * Gets list of column data types that supports UNSIGNED and ZEROFILL attributes.\r\n     */\r\n    unsignedAndZerofillTypes: ColumnType[] = [\r\n        \"int\",\r\n        \"integer\",\r\n        \"smallint\",\r\n        \"tinyint\",\r\n        \"mediumint\",\r\n        \"bigint\",\r\n        \"decimal\",\r\n        \"dec\",\r\n        \"numeric\",\r\n        \"fixed\",\r\n        \"float\",\r\n        \"double\",\r\n        \"double precision\",\r\n        \"real\",\r\n    ]\r\n\r\n    /**\r\n     * ORM has special columns and we need to know what database column types should be for those columns.\r\n     * Column types are driver dependant.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"datetime\",\r\n        createDatePrecision: 6,\r\n        createDateDefault: \"CURRENT_TIMESTAMP(6)\",\r\n        updateDate: \"datetime\",\r\n        updateDatePrecision: 6,\r\n        updateDateDefault: \"CURRENT_TIMESTAMP(6)\",\r\n        deleteDate: \"datetime\",\r\n        deleteDatePrecision: 6,\r\n        deleteDateNullable: true,\r\n        version: \"int\",\r\n        treeLevel: \"int\",\r\n        migrationId: \"int\",\r\n        migrationName: \"varchar\",\r\n        migrationTimestamp: \"bigint\",\r\n        cacheId: \"int\",\r\n        cacheIdentifier: \"varchar\",\r\n        cacheTime: \"bigint\",\r\n        cacheDuration: \"int\",\r\n        cacheQuery: \"text\",\r\n        cacheResult: \"text\",\r\n        metadataType: \"varchar\",\r\n        metadataDatabase: \"varchar\",\r\n        metadataSchema: \"varchar\",\r\n        metadataTable: \"varchar\",\r\n        metadataName: \"varchar\",\r\n        metadataValue: \"text\",\r\n    }\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults = {\r\n        varchar: { length: 255 },\r\n        nvarchar: { length: 255 },\r\n        \"national varchar\": { length: 255 },\r\n        char: { length: 1 },\r\n        binary: { length: 1 },\r\n        varbinary: { length: 255 },\r\n        decimal: { precision: 10, scale: 0 },\r\n        dec: { precision: 10, scale: 0 },\r\n        numeric: { precision: 10, scale: 0 },\r\n        fixed: { precision: 10, scale: 0 },\r\n        float: { precision: 12 },\r\n        double: { precision: 22 },\r\n        time: { precision: 0 },\r\n        datetime: { precision: 0 },\r\n        timestamp: { precision: 0 },\r\n        bit: { width: 1 },\r\n        int: { width: 11 },\r\n        integer: { width: 11 },\r\n        tinyint: { width: 4 },\r\n        smallint: { width: 6 },\r\n        mediumint: { width: 9 },\r\n        bigint: { width: 20 },\r\n    }\r\n\r\n    /**\r\n     * Max length allowed by MySQL for aliases.\r\n     * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\r\n     */\r\n    maxAliasLength = 63\r\n\r\n    cteCapabilities: CteCapabilities = {\r\n        enabled: false,\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: DataSource) {\r\n        this.connection = connection\r\n        this.options = connection.options as AuroraMysqlConnectionOptions\r\n\r\n        // load mysql package\r\n        this.loadDependencies()\r\n\r\n        this.client = new this.DataApiDriver(\r\n            this.options.region,\r\n            this.options.secretArn,\r\n            this.options.resourceArn,\r\n            this.options.database,\r\n            (query: string, parameters?: any[]) =>\r\n                this.connection.logger.logQuery(query, parameters),\r\n            this.options.serviceConfigOptions,\r\n            this.options.formatOptions,\r\n        )\r\n\r\n        this.database = DriverUtils.buildDriverOptions(this.options).database\r\n\r\n        // validate options to make sure everything is set\r\n        // todo: revisit validation with replication in mind\r\n        // if (!(this.options.host || (this.options.extra && this.options.extra.socketPath)) && !this.options.socketPath)\r\n        //     throw new DriverOptionNotSetError(\"socketPath and host\");\r\n        // if (!this.options.username)\r\n        //     throw new DriverOptionNotSetError(\"username\");\r\n        // if (!this.options.database)\r\n        //     throw new DriverOptionNotSetError(\"database\");\r\n        // todo: check what is going on when connection is setup without database and how to connect to a database then?\r\n        // todo: provide options to auto-create a database if it does not exist yet\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<void> {\r\n        if (!this.database) {\r\n            const queryRunner = await this.createQueryRunner(\"master\")\r\n\r\n            this.database = await queryRunner.getCurrentDatabase()\r\n\r\n            await queryRunner.release()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\r\n     */\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {}\r\n\r\n    /**\r\n     * Creates a schema builder used to build and sync a schema.\r\n     */\r\n    createSchemaBuilder() {\r\n        return new RdbmsSchemaBuilder(this.connection)\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode) {\r\n        return new AuroraMysqlQueryRunner(\r\n            this,\r\n            new this.DataApiDriver(\r\n                this.options.region,\r\n                this.options.secretArn,\r\n                this.options.resourceArn,\r\n                this.options.database,\r\n                (query: string, parameters?: any[]) =>\r\n                    this.connection.logger.logQuery(query, parameters),\r\n                this.options.serviceConfigOptions,\r\n                this.options.formatOptions,\r\n            ),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(\r\n        sql: string,\r\n        parameters: ObjectLiteral,\r\n        nativeParameters: ObjectLiteral,\r\n    ): [string, any[]] {\r\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\r\n            (key) => nativeParameters[key],\r\n        )\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, escapedParameters]\r\n\r\n        sql = sql.replace(\r\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\r\n            (full, isArray: string, key: string): string => {\r\n                if (!parameters.hasOwnProperty(key)) {\r\n                    return full\r\n                }\r\n\r\n                let value: any = parameters[key]\r\n\r\n                if (isArray) {\r\n                    return value\r\n                        .map((v: any) => {\r\n                            escapedParameters.push(v)\r\n                            return this.createParameter(\r\n                                key,\r\n                                escapedParameters.length - 1,\r\n                            )\r\n                        })\r\n                        .join(\", \")\r\n                }\r\n\r\n                if (typeof value === \"function\") {\r\n                    return value()\r\n                }\r\n\r\n                escapedParameters.push(value)\r\n                return this.createParameter(key, escapedParameters.length - 1)\r\n            },\r\n        ) // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters]\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return \"`\" + columnName + \"`\"\r\n    }\r\n\r\n    /**\r\n     * Build full table name with database name, schema name and table name.\r\n     * E.g. myDB.mySchema.myTable\r\n     */\r\n    buildTableName(\r\n        tableName: string,\r\n        schema?: string,\r\n        database?: string,\r\n    ): string {\r\n        let tablePath = [tableName]\r\n\r\n        if (database) {\r\n            tablePath.unshift(database)\r\n        }\r\n\r\n        return tablePath.join(\".\")\r\n    }\r\n\r\n    /**\r\n     * Parse a target table name or other types and return a normalized table definition.\r\n     */\r\n    parseTableName(\r\n        target: EntityMetadata | Table | View | TableForeignKey | string,\r\n    ): { database?: string; schema?: string; tableName: string } {\r\n        const driverDatabase = this.database\r\n        const driverSchema = undefined\r\n\r\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\r\n            const parsed = this.parseTableName(target.name)\r\n\r\n            return {\r\n                database: target.database || parsed.database || driverDatabase,\r\n                schema: target.schema || parsed.schema || driverSchema,\r\n                tableName: parsed.tableName,\r\n            }\r\n        }\r\n\r\n        if (InstanceChecker.isTableForeignKey(target)) {\r\n            const parsed = this.parseTableName(target.referencedTableName)\r\n\r\n            return {\r\n                database:\r\n                    target.referencedDatabase ||\r\n                    parsed.database ||\r\n                    driverDatabase,\r\n                schema:\r\n                    target.referencedSchema || parsed.schema || driverSchema,\r\n                tableName: parsed.tableName,\r\n            }\r\n        }\r\n\r\n        if (InstanceChecker.isEntityMetadata(target)) {\r\n            // EntityMetadata tableName is never a path\r\n\r\n            return {\r\n                database: target.database || driverDatabase,\r\n                schema: target.schema || driverSchema,\r\n                tableName: target.tableName,\r\n            }\r\n        }\r\n\r\n        const parts = target.split(\".\")\r\n\r\n        return {\r\n            database:\r\n                (parts.length > 1 ? parts[0] : undefined) || driverDatabase,\r\n            schema: driverSchema,\r\n            tableName: parts.length > 1 ? parts[1] : parts[0],\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformTo(\r\n                columnMetadata.transformer,\r\n                value,\r\n            )\r\n\r\n        if (\r\n            !this.options.formatOptions ||\r\n            this.options.formatOptions.castParameters !== false\r\n        ) {\r\n            return this.client.preparePersistentValue(value, columnMetadata)\r\n        }\r\n\r\n        if (value === null || value === undefined) return value\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            return value === true ? 1 : 0\r\n        } else if (columnMetadata.type === \"date\") {\r\n            return DateUtils.mixedDateToDateString(value)\r\n        } else if (columnMetadata.type === \"time\") {\r\n            return DateUtils.mixedDateToTimeString(value)\r\n        } else if (columnMetadata.type === \"json\") {\r\n            return JSON.stringify(value)\r\n        } else if (\r\n            columnMetadata.type === \"timestamp\" ||\r\n            columnMetadata.type === \"datetime\" ||\r\n            columnMetadata.type === Date\r\n        ) {\r\n            return DateUtils.mixedDateToDate(value)\r\n        } else if (\r\n            columnMetadata.type === \"simple-array\" ||\r\n            columnMetadata.type === \"set\"\r\n        ) {\r\n            return DateUtils.simpleArrayToString(value)\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            return DateUtils.simpleJsonToString(value)\r\n        } else if (\r\n            columnMetadata.type === \"enum\" ||\r\n            columnMetadata.type === \"simple-enum\"\r\n        ) {\r\n            return \"\" + value\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return columnMetadata.transformer\r\n                ? ApplyValueTransformers.transformFrom(\r\n                      columnMetadata.transformer,\r\n                      value,\r\n                  )\r\n                : value\r\n\r\n        if (\r\n            !this.options.formatOptions ||\r\n            this.options.formatOptions.castParameters !== false\r\n        ) {\r\n            return this.client.prepareHydratedValue(value, columnMetadata)\r\n        }\r\n\r\n        if (\r\n            columnMetadata.type === Boolean ||\r\n            columnMetadata.type === \"bool\" ||\r\n            columnMetadata.type === \"boolean\"\r\n        ) {\r\n            value = value ? true : false\r\n        } else if (\r\n            columnMetadata.type === \"datetime\" ||\r\n            columnMetadata.type === Date\r\n        ) {\r\n            value = DateUtils.normalizeHydratedDate(value)\r\n        } else if (columnMetadata.type === \"date\") {\r\n            value = DateUtils.mixedDateToDateString(value)\r\n        } else if (columnMetadata.type === \"json\") {\r\n            value = typeof value === \"string\" ? JSON.parse(value) : value\r\n        } else if (columnMetadata.type === \"time\") {\r\n            value = DateUtils.mixedTimeToString(value)\r\n        } else if (\r\n            columnMetadata.type === \"simple-array\" ||\r\n            columnMetadata.type === \"set\"\r\n        ) {\r\n            value = DateUtils.stringToSimpleArray(value)\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            value = DateUtils.stringToSimpleJson(value)\r\n        } else if (\r\n            (columnMetadata.type === \"enum\" ||\r\n                columnMetadata.type === \"simple-enum\") &&\r\n            columnMetadata.enum &&\r\n            !isNaN(value) &&\r\n            columnMetadata.enum.indexOf(parseInt(value)) >= 0\r\n        ) {\r\n            // convert to number if that exists in possible enum options\r\n            value = parseInt(value)\r\n        } else if (columnMetadata.type === Number) {\r\n            // convert to number if number\r\n            value = !isNaN(+value) ? parseInt(value) : value\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformFrom(\r\n                columnMetadata.transformer,\r\n                value,\r\n            )\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(column: {\r\n        type: ColumnType\r\n        length?: number | string\r\n        precision?: number | null\r\n        scale?: number\r\n    }): string {\r\n        if (column.type === Number || column.type === \"integer\") {\r\n            return \"int\"\r\n        } else if (column.type === String) {\r\n            return \"varchar\"\r\n        } else if (column.type === Date) {\r\n            return \"datetime\"\r\n        } else if ((column.type as any) === Buffer) {\r\n            return \"blob\"\r\n        } else if (column.type === Boolean) {\r\n            return \"tinyint\"\r\n        } else if (column.type === \"uuid\") {\r\n            return \"varchar\"\r\n        } else if (\r\n            column.type === \"simple-array\" ||\r\n            column.type === \"simple-json\"\r\n        ) {\r\n            return \"text\"\r\n        } else if (column.type === \"simple-enum\") {\r\n            return \"enum\"\r\n        } else if (\r\n            column.type === \"double precision\" ||\r\n            column.type === \"real\"\r\n        ) {\r\n            return \"double\"\r\n        } else if (\r\n            column.type === \"dec\" ||\r\n            column.type === \"numeric\" ||\r\n            column.type === \"fixed\"\r\n        ) {\r\n            return \"decimal\"\r\n        } else if (column.type === \"bool\" || column.type === \"boolean\") {\r\n            return \"tinyint\"\r\n        } else if (\r\n            column.type === \"nvarchar\" ||\r\n            column.type === \"national varchar\"\r\n        ) {\r\n            return \"varchar\"\r\n        } else if (column.type === \"nchar\" || column.type === \"national char\") {\r\n            return \"char\"\r\n        } else {\r\n            return (column.type as string) || \"\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\r\n        const defaultValue = columnMetadata.default\r\n\r\n        if (defaultValue === null) {\r\n            return undefined\r\n        }\r\n\r\n        if (\r\n            (columnMetadata.type === \"enum\" ||\r\n                columnMetadata.type === \"simple-enum\") &&\r\n            defaultValue !== undefined\r\n        ) {\r\n            return `'${defaultValue}'`\r\n        }\r\n\r\n        if (columnMetadata.type === \"set\" && defaultValue !== undefined) {\r\n            return `'${DateUtils.simpleArrayToString(defaultValue)}'`\r\n        }\r\n\r\n        if (typeof defaultValue === \"number\") {\r\n            return `${defaultValue}`\r\n        }\r\n\r\n        if (typeof defaultValue === \"boolean\") {\r\n            return defaultValue ? \"1\" : \"0\"\r\n        }\r\n\r\n        if (typeof defaultValue === \"function\") {\r\n            return defaultValue()\r\n        }\r\n\r\n        if (typeof defaultValue === \"string\") {\r\n            return `'${defaultValue}'`\r\n        }\r\n\r\n        if (defaultValue === undefined) {\r\n            return undefined\r\n        }\r\n\r\n        return `${defaultValue}`\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        return column.entityMetadata.indices.some(\r\n            (idx) =>\r\n                idx.isUnique &&\r\n                idx.columns.length === 1 &&\r\n                idx.columns[0] === column,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns default column lengths, which is required on column creation.\r\n     */\r\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\r\n        if (column.length) return column.length.toString()\r\n\r\n        /**\r\n         * fix https://github.com/typeorm/typeorm/issues/1139\r\n         */\r\n        if (column.generationStrategy === \"uuid\") return \"36\"\r\n\r\n        switch (column.type) {\r\n            case String:\r\n            case \"varchar\":\r\n            case \"nvarchar\":\r\n            case \"national varchar\":\r\n                return \"255\"\r\n            case \"varbinary\":\r\n                return \"255\"\r\n            default:\r\n                return \"\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates column type definition including length, precision and scale\r\n     */\r\n    createFullType(column: TableColumn): string {\r\n        let type = column.type\r\n\r\n        // used 'getColumnLength()' method, because MySQL requires column length for `varchar`, `nvarchar` and `varbinary` data types\r\n        if (this.getColumnLength(column)) {\r\n            type += `(${this.getColumnLength(column)})`\r\n        } else if (column.width) {\r\n            type += `(${column.width})`\r\n        } else if (\r\n            column.precision !== null &&\r\n            column.precision !== undefined &&\r\n            column.scale !== null &&\r\n            column.scale !== undefined\r\n        ) {\r\n            type += `(${column.precision},${column.scale})`\r\n        } else if (\r\n            column.precision !== null &&\r\n            column.precision !== undefined\r\n        ) {\r\n            type += `(${column.precision})`\r\n        }\r\n\r\n        if (column.isArray) type += \" array\"\r\n\r\n        return type\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any> {\r\n        return new Promise<any>((ok, fail) => {\r\n            if (this.poolCluster) {\r\n                this.poolCluster.getConnection(\r\n                    \"MASTER\",\r\n                    (err: any, dbConnection: any) => {\r\n                        err\r\n                            ? fail(err)\r\n                            : ok(this.prepareDbConnection(dbConnection))\r\n                    },\r\n                )\r\n            } else if (this.pool) {\r\n                this.pool.getConnection((err: any, dbConnection: any) => {\r\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection))\r\n                })\r\n            } else {\r\n                fail(\r\n                    new TypeORMError(\r\n                        `Connection is not established with mysql database`,\r\n                    ),\r\n                )\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any> {\r\n        if (!this.poolCluster) return this.obtainMasterConnection()\r\n\r\n        return new Promise<any>((ok, fail) => {\r\n            this.poolCluster.getConnection(\r\n                \"SLAVE*\",\r\n                (err: any, dbConnection: any) => {\r\n                    err ? fail(err) : ok(this.prepareDbConnection(dbConnection))\r\n                },\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Creates generated map of values generated or returned by database after INSERT query.\r\n     */\r\n    createGeneratedMap(\r\n        metadata: EntityMetadata,\r\n        insertResult: any,\r\n        entityIndex: number,\r\n    ) {\r\n        const generatedMap = metadata.generatedColumns.reduce(\r\n            (map, generatedColumn) => {\r\n                let value: any\r\n                if (\r\n                    generatedColumn.generationStrategy === \"increment\" &&\r\n                    insertResult.insertId\r\n                ) {\r\n                    // NOTE: When multiple rows is inserted by a single INSERT statement,\r\n                    // `insertId` is the value generated for the first inserted row only.\r\n                    value = insertResult.insertId + entityIndex\r\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\r\n                    //     console.log(\"getting db value:\", generatedColumn.databaseName);\r\n                    //     value = generatedColumn.getEntityValue(uuidMap);\r\n                }\r\n\r\n                return OrmUtils.mergeDeep(\r\n                    map,\r\n                    generatedColumn.createValueMap(value),\r\n                )\r\n            },\r\n            {} as ObjectLiteral,\r\n        )\r\n\r\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(\r\n        tableColumns: TableColumn[],\r\n        columnMetadatas: ColumnMetadata[],\r\n    ): ColumnMetadata[] {\r\n        return columnMetadatas.filter((columnMetadata) => {\r\n            const tableColumn = tableColumns.find(\r\n                (c) => c.name === columnMetadata.databaseName,\r\n            )\r\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\r\n\r\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\r\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\r\n            // console.log(\"type:\", tableColumn.type, this.normalizeType(columnMetadata));\r\n            // console.log(\"length:\", tableColumn.length, columnMetadata.length);\r\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\r\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\r\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\r\n            // console.log(\"zerofill:\", tableColumn.zerofill, columnMetadata.zerofill);\r\n            // console.log(\"unsigned:\", tableColumn.unsigned, columnMetadata.unsigned);\r\n            // console.log(\"asExpression:\", tableColumn.asExpression, columnMetadata.asExpression);\r\n            // console.log(\"generatedType:\", tableColumn.generatedType, columnMetadata.generatedType);\r\n            // console.log(\"comment:\", tableColumn.comment, this.escapeComment(columnMetadata.comment));\r\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\r\n            // console.log(\"enum:\", tableColumn.enum, columnMetadata.enum);\r\n            // console.log(\"default changed:\", !this.compareDefaultValues(this.normalizeDefault(columnMetadata), tableColumn.default));\r\n            // console.log(\"onUpdate:\", tableColumn.onUpdate, columnMetadata.onUpdate);\r\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\r\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\r\n            // console.log(\"isUnique:\", tableColumn.isUnique, this.normalizeIsUnique(columnMetadata));\r\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\r\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\r\n            // console.log(\"==========================================\");\r\n\r\n            let columnMetadataLength = columnMetadata.length\r\n            if (\r\n                !columnMetadataLength &&\r\n                columnMetadata.generationStrategy === \"uuid\"\r\n            ) {\r\n                // fixing #3374\r\n                columnMetadataLength = this.getColumnLength(columnMetadata)\r\n            }\r\n\r\n            return (\r\n                tableColumn.name !== columnMetadata.databaseName ||\r\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\r\n                tableColumn.length !== columnMetadataLength ||\r\n                tableColumn.width !== columnMetadata.width ||\r\n                tableColumn.precision !== columnMetadata.precision ||\r\n                tableColumn.scale !== columnMetadata.scale ||\r\n                tableColumn.zerofill !== columnMetadata.zerofill ||\r\n                tableColumn.unsigned !== columnMetadata.unsigned ||\r\n                tableColumn.asExpression !== columnMetadata.asExpression ||\r\n                tableColumn.generatedType !== columnMetadata.generatedType ||\r\n                tableColumn.comment !==\r\n                    this.escapeComment(columnMetadata.comment) ||\r\n                !this.compareDefaultValues(\r\n                    this.normalizeDefault(columnMetadata),\r\n                    tableColumn.default,\r\n                ) ||\r\n                (tableColumn.enum &&\r\n                    columnMetadata.enum &&\r\n                    !OrmUtils.isArraysEqual(\r\n                        tableColumn.enum,\r\n                        columnMetadata.enum.map((val) => val + \"\"),\r\n                    )) ||\r\n                tableColumn.onUpdate !== columnMetadata.onUpdate ||\r\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\r\n                tableColumn.isNullable !== columnMetadata.isNullable ||\r\n                tableColumn.isUnique !==\r\n                    this.normalizeIsUnique(columnMetadata) ||\r\n                (columnMetadata.generationStrategy !== \"uuid\" &&\r\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports RETURNING / OUTPUT statement.\r\n     */\r\n    isReturningSqlSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports uuid values generation on its own.\r\n     */\r\n    isUUIDGenerationSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports fulltext indices.\r\n     */\r\n    isFullTextColumnTypeSupported(): boolean {\r\n        return true\r\n    }\r\n\r\n    /**\r\n     * Creates an escaped parameter.\r\n     */\r\n    createParameter(parameterName: string, index: number): string {\r\n        return \"?\"\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads all driver dependencies.\r\n     */\r\n    protected loadDependencies(): void {\r\n        const DataApiDriver =\r\n            this.options.driver ||\r\n            PlatformTools.load(\"typeorm-aurora-data-api-driver\")\r\n        this.DataApiDriver = DataApiDriver\r\n\r\n        // Driver uses rollup for publishing, which has issues when using typeorm in combination with webpack\r\n        // See https://github.com/webpack/webpack/issues/4742#issuecomment-295556787\r\n        this.DataApiDriver = this.DataApiDriver.default || this.DataApiDriver\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection pool for a given database credentials.\r\n     */\r\n    protected createConnectionOptions(\r\n        options: AuroraMysqlConnectionOptions,\r\n        credentials: AuroraMysqlConnectionCredentialsOptions,\r\n    ): Promise<any> {\r\n        credentials = Object.assign(\r\n            {},\r\n            credentials,\r\n            DriverUtils.buildDriverOptions(credentials),\r\n        ) // todo: do it better way\r\n\r\n        // build connection options for the driver\r\n        return Object.assign(\r\n            {},\r\n            {\r\n                resourceArn: options.resourceArn,\r\n                secretArn: options.secretArn,\r\n                database: options.database,\r\n                region: options.region,\r\n                type: options.type,\r\n            },\r\n            {\r\n                host: credentials.host,\r\n                user: credentials.username,\r\n                password: credentials.password,\r\n                database: credentials.database,\r\n                port: credentials.port,\r\n                ssl: options.ssl,\r\n            },\r\n\r\n            options.extra || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new connection pool for a given database credentials.\r\n     */\r\n    protected async createPool(connectionOptions: any): Promise<any> {\r\n        return {}\r\n    }\r\n\r\n    /**\r\n     * Attaches all required base handlers to a database connection, such as the unhandled error handler.\r\n     */\r\n    private prepareDbConnection(connection: any): any {\r\n        const { logger } = this.connection\r\n        /**\r\n         * Attaching an error handler to connection errors is essential, as, otherwise, errors raised will go unhandled and\r\n         * cause the hosting app to crash.\r\n         */\r\n        if (connection.listeners(\"error\").length === 0) {\r\n            connection.on(\"error\", (error: any) =>\r\n                logger.log(\r\n                    \"warn\",\r\n                    `MySQL connection raised an error. ${error}`,\r\n                ),\r\n            )\r\n        }\r\n        return connection\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\r\n     */\r\n    protected compareDefaultValues(\r\n        columnMetadataValue: string | undefined,\r\n        databaseValue: string | undefined,\r\n    ): boolean {\r\n        if (\r\n            typeof columnMetadataValue === \"string\" &&\r\n            typeof databaseValue === \"string\"\r\n        ) {\r\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\r\n            // as result compare cannot understand if default is really changed or not\r\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\")\r\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\")\r\n        }\r\n\r\n        return columnMetadataValue === databaseValue\r\n    }\r\n\r\n    /**\r\n     * Escapes a given comment.\r\n     */\r\n    protected escapeComment(comment?: string) {\r\n        if (!comment) return comment\r\n\r\n        comment = comment.replace(/\\u0000/g, \"\") // Null bytes aren't allowed in comments\r\n\r\n        return comment\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../browser/src/driver/postgres/PostgresQueryRunner.ts"],"names":[],"mappings":"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","file":"PostgresQueryRunner.js","sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { TypeORMError } from \"../../error\"\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\r\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\r\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\r\nimport { ReadStream } from \"../../platform/PlatformTools\"\r\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\r\nimport { QueryResult } from \"../../query-runner/QueryResult\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\r\nimport { Table } from \"../../schema-builder/table/Table\"\r\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\r\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\r\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\r\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\r\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\r\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\r\nimport { View } from \"../../schema-builder/view/View\"\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\r\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\r\nimport { OrmUtils } from \"../../util/OrmUtils\"\r\nimport { VersionUtils } from \"../../util/VersionUtils\"\r\nimport { Query } from \"../Query\"\r\nimport { ColumnType } from \"../types/ColumnTypes\"\r\nimport { IsolationLevel } from \"../types/IsolationLevel\"\r\nimport { MetadataTableType } from \"../types/MetadataTableType\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { PostgresDriver } from \"./PostgresDriver\"\r\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\r\n\r\n/**\r\n * Runs queries on a single postgres database connection.\r\n */\r\nexport class PostgresQueryRunner\r\n    extends BaseQueryRunner\r\n    implements QueryRunner\r\n{\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: PostgresDriver\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Promise used to obtain a database connection for a first time.\r\n     */\r\n    protected databaseConnectionPromise: Promise<any>\r\n\r\n    /**\r\n     * Special callback provided by a driver used to release a created connection.\r\n     */\r\n    protected releaseCallback?: (err: any) => void\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: PostgresDriver, mode: ReplicationMode) {\r\n        super()\r\n        this.driver = driver\r\n        this.connection = driver.connection\r\n        this.mode = mode\r\n        this.broadcaster = new Broadcaster(this)\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<any> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection)\r\n\r\n        if (this.databaseConnectionPromise)\r\n            return this.databaseConnectionPromise\r\n\r\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\r\n            this.databaseConnectionPromise = this.driver\r\n                .obtainSlaveConnection()\r\n                .then(([connection, release]: any[]) => {\r\n                    this.driver.connectedQueryRunners.push(this)\r\n                    this.databaseConnection = connection\r\n\r\n                    const onErrorCallback = (err: Error) =>\r\n                        this.releasePostgresConnection(err)\r\n                    this.releaseCallback = (err?: Error) => {\r\n                        this.databaseConnection.removeListener(\r\n                            \"error\",\r\n                            onErrorCallback,\r\n                        )\r\n                        release(err)\r\n                    }\r\n                    this.databaseConnection.on(\"error\", onErrorCallback)\r\n\r\n                    return this.databaseConnection\r\n                })\r\n        } else {\r\n            // master\r\n            this.databaseConnectionPromise = this.driver\r\n                .obtainMasterConnection()\r\n                .then(([connection, release]: any[]) => {\r\n                    this.driver.connectedQueryRunners.push(this)\r\n                    this.databaseConnection = connection\r\n\r\n                    const onErrorCallback = (err: Error) =>\r\n                        this.releasePostgresConnection(err)\r\n                    this.releaseCallback = (err?: Error) => {\r\n                        this.databaseConnection.removeListener(\r\n                            \"error\",\r\n                            onErrorCallback,\r\n                        )\r\n                        release(err)\r\n                    }\r\n                    this.databaseConnection.on(\"error\", onErrorCallback)\r\n\r\n                    return this.databaseConnection\r\n                })\r\n        }\r\n\r\n        return this.databaseConnectionPromise\r\n    }\r\n\r\n    /**\r\n     * Release a connection back to the pool, optionally specifying an Error to release with.\r\n     * Per pg-pool documentation this will prevent the pool from re-using the broken connection.\r\n     */\r\n    private async releasePostgresConnection(err?: Error) {\r\n        if (this.isReleased) {\r\n            return\r\n        }\r\n\r\n        this.isReleased = true\r\n        if (this.releaseCallback) {\r\n            this.releaseCallback(err)\r\n            this.releaseCallback = undefined\r\n        }\r\n\r\n        const index = this.driver.connectedQueryRunners.indexOf(this)\r\n\r\n        if (index !== -1) {\r\n            this.driver.connectedQueryRunners.splice(index, 1)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Releases used database connection.\r\n     * You cannot use query runner methods once its released.\r\n     */\r\n    release(): Promise<void> {\r\n        return this.releasePostgresConnection()\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        this.isTransactionActive = true\r\n        try {\r\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\r\n        } catch (err) {\r\n            this.isTransactionActive = false\r\n            throw err\r\n        }\r\n\r\n        if (this.transactionDepth === 0) {\r\n            this.transactionDepth += 1\r\n            await this.query(\"START TRANSACTION\")\r\n            if (isolationLevel) {\r\n                await this.query(\r\n                    \"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel,\r\n                )\r\n            }\r\n        } else {\r\n            this.transactionDepth += 1\r\n            await this.query(`SAVEPOINT typeorm_${this.transactionDepth - 1}`)\r\n        }\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\r\n\r\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\r\n\r\n        if (this.transactionDepth > 1) {\r\n            this.transactionDepth -= 1\r\n            await this.query(\r\n                `RELEASE SAVEPOINT typeorm_${this.transactionDepth}`,\r\n            )\r\n        } else {\r\n            this.transactionDepth -= 1\r\n            await this.query(\"COMMIT\")\r\n            this.isTransactionActive = false\r\n        }\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\r\n\r\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\r\n\r\n        if (this.transactionDepth > 1) {\r\n            this.transactionDepth -= 1\r\n            await this.query(\r\n                `ROLLBACK TO SAVEPOINT typeorm_${this.transactionDepth}`,\r\n            )\r\n        } else {\r\n            this.transactionDepth -= 1\r\n            await this.query(\"ROLLBACK\")\r\n            this.isTransactionActive = false\r\n        }\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(\r\n        query: string,\r\n        parameters?: any[],\r\n        useStructuredResult: boolean = false,\r\n    ): Promise<any> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        const databaseConnection = await this.connect()\r\n        const broadcasterResult = new BroadcasterResult()\r\n\r\n        this.driver.connection.logger.logQuery(query, parameters, this)\r\n        this.broadcaster.broadcastBeforeQueryEvent(\r\n            broadcasterResult,\r\n            query,\r\n            parameters,\r\n        )\r\n\r\n        try {\r\n            const queryStartTime = +new Date()\r\n            const raw = await databaseConnection.query(query, parameters)\r\n            // log slow queries if maxQueryExecution time is set\r\n            const maxQueryExecutionTime =\r\n                this.driver.options.maxQueryExecutionTime\r\n            const queryEndTime = +new Date()\r\n            const queryExecutionTime = queryEndTime - queryStartTime\r\n\r\n            this.broadcaster.broadcastAfterQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n                true,\r\n                queryExecutionTime,\r\n                raw,\r\n                undefined,\r\n            )\r\n\r\n            if (\r\n                maxQueryExecutionTime &&\r\n                queryExecutionTime > maxQueryExecutionTime\r\n            )\r\n                this.driver.connection.logger.logQuerySlow(\r\n                    queryExecutionTime,\r\n                    query,\r\n                    parameters,\r\n                    this,\r\n                )\r\n\r\n            const result = new QueryResult()\r\n            if (raw) {\r\n                if (raw.hasOwnProperty(\"rows\")) {\r\n                    result.records = raw.rows\r\n                }\r\n\r\n                if (raw.hasOwnProperty(\"rowCount\")) {\r\n                    result.affected = raw.rowCount\r\n                }\r\n\r\n                switch (raw.command) {\r\n                    case \"DELETE\":\r\n                    case \"UPDATE\":\r\n                        // for UPDATE and DELETE query additionally return number of affected rows\r\n                        result.raw = [raw.rows, raw.rowCount]\r\n                        break\r\n                    default:\r\n                        result.raw = raw.rows\r\n                }\r\n\r\n                if (!useStructuredResult) {\r\n                    return result.raw\r\n                }\r\n            }\r\n\r\n            return result\r\n        } catch (err) {\r\n            this.driver.connection.logger.logQueryError(\r\n                err,\r\n                query,\r\n                parameters,\r\n                this,\r\n            )\r\n            this.broadcaster.broadcastAfterQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n                false,\r\n                undefined,\r\n                undefined,\r\n                err,\r\n            )\r\n\r\n            throw new QueryFailedError(query, parameters, err)\r\n        } finally {\r\n            await broadcasterResult.wait()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    async stream(\r\n        query: string,\r\n        parameters?: any[],\r\n        onEnd?: Function,\r\n        onError?: Function,\r\n    ): Promise<ReadStream> {\r\n        const QueryStream = this.driver.loadStreamDependency()\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        const databaseConnection = await this.connect()\r\n        this.driver.connection.logger.logQuery(query, parameters, this)\r\n        const stream = databaseConnection.query(\r\n            new QueryStream(query, parameters),\r\n        )\r\n        if (onEnd) stream.on(\"end\", onEnd)\r\n        if (onError) stream.on(\"error\", onError)\r\n\r\n        return stream\r\n    }\r\n\r\n    /**\r\n     * Returns all available database names including system databases.\r\n     */\r\n    async getDatabases(): Promise<string[]> {\r\n        return Promise.resolve([])\r\n    }\r\n\r\n    /**\r\n     * Returns all available schema names including system schemas.\r\n     * If database parameter specified, returns schemas of that database.\r\n     */\r\n    async getSchemas(database?: string): Promise<string[]> {\r\n        return Promise.resolve([])\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        const result = await this.query(\r\n            `SELECT * FROM pg_database WHERE datname='${database}';`,\r\n        )\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Loads currently using database\r\n     */\r\n    async getCurrentDatabase(): Promise<string> {\r\n        const query = await this.query(`SELECT * FROM current_database()`)\r\n        return query[0][\"current_database\"]\r\n    }\r\n\r\n    /**\r\n     * Checks if schema with the given name exist.\r\n     */\r\n    async hasSchema(schema: string): Promise<boolean> {\r\n        const result = await this.query(\r\n            `SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '${schema}'`,\r\n        )\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Loads currently using database schema\r\n     */\r\n    async getCurrentSchema(): Promise<string> {\r\n        const query = await this.query(`SELECT * FROM current_schema()`)\r\n        return query[0][\"current_schema\"]\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\r\n        const parsedTableName = this.driver.parseTableName(tableOrName)\r\n\r\n        if (!parsedTableName.schema) {\r\n            parsedTableName.schema = await this.getCurrentSchema()\r\n        }\r\n\r\n        const sql = `SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = '${parsedTableName.schema}' AND \"table_name\" = '${parsedTableName.tableName}'`\r\n        const result = await this.query(sql)\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(\r\n        tableOrName: Table | string,\r\n        columnName: string,\r\n    ): Promise<boolean> {\r\n        const parsedTableName = this.driver.parseTableName(tableOrName)\r\n\r\n        if (!parsedTableName.schema) {\r\n            parsedTableName.schema = await this.getCurrentSchema()\r\n        }\r\n\r\n        const sql = `SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = '${parsedTableName.schema}' AND \"table_name\" = '${parsedTableName.tableName}' AND \"column_name\" = '${columnName}'`\r\n        const result = await this.query(sql)\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Creates a new database.\r\n     * Note: Postgres does not support database creation inside a transaction block.\r\n     */\r\n    async createDatabase(\r\n        database: string,\r\n        ifNotExist?: boolean,\r\n    ): Promise<void> {\r\n        if (ifNotExist) {\r\n            const databaseAlreadyExists = await this.hasDatabase(database)\r\n\r\n            if (databaseAlreadyExists) return Promise.resolve()\r\n        }\r\n\r\n        const up = `CREATE DATABASE \"${database}\"`\r\n        const down = `DROP DATABASE \"${database}\"`\r\n        await this.executeQueries(new Query(up), new Query(down))\r\n    }\r\n\r\n    /**\r\n     * Drops database.\r\n     * Note: Postgres does not support database dropping inside a transaction block.\r\n     */\r\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\r\n        const up = ifExist\r\n            ? `DROP DATABASE IF EXISTS \"${database}\"`\r\n            : `DROP DATABASE \"${database}\"`\r\n        const down = `CREATE DATABASE \"${database}\"`\r\n        await this.executeQueries(new Query(up), new Query(down))\r\n    }\r\n\r\n    /**\r\n     * Creates a new table schema.\r\n     */\r\n    async createSchema(\r\n        schemaPath: string,\r\n        ifNotExist?: boolean,\r\n    ): Promise<void> {\r\n        const schema =\r\n            schemaPath.indexOf(\".\") === -1\r\n                ? schemaPath\r\n                : schemaPath.split(\".\")[1]\r\n\r\n        const up = ifNotExist\r\n            ? `CREATE SCHEMA IF NOT EXISTS \"${schema}\"`\r\n            : `CREATE SCHEMA \"${schema}\"`\r\n        const down = `DROP SCHEMA \"${schema}\" CASCADE`\r\n        await this.executeQueries(new Query(up), new Query(down))\r\n    }\r\n\r\n    /**\r\n     * Drops table schema.\r\n     */\r\n    async dropSchema(\r\n        schemaPath: string,\r\n        ifExist?: boolean,\r\n        isCascade?: boolean,\r\n    ): Promise<void> {\r\n        const schema =\r\n            schemaPath.indexOf(\".\") === -1\r\n                ? schemaPath\r\n                : schemaPath.split(\".\")[1]\r\n\r\n        const up = ifExist\r\n            ? `DROP SCHEMA IF EXISTS \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`\r\n            : `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`\r\n        const down = `CREATE SCHEMA \"${schema}\"`\r\n        await this.executeQueries(new Query(up), new Query(down))\r\n    }\r\n\r\n    /**\r\n     * Creates a new table.\r\n     */\r\n    async createTable(\r\n        table: Table,\r\n        ifNotExist: boolean = false,\r\n        createForeignKeys: boolean = true,\r\n        createIndices: boolean = true,\r\n    ): Promise<void> {\r\n        if (ifNotExist) {\r\n            const isTableExist = await this.hasTable(table)\r\n            if (isTableExist) return Promise.resolve()\r\n        }\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        // if table have column with ENUM type, we must create this type in postgres.\r\n        const enumColumns = table.columns.filter(\r\n            (column) => column.type === \"enum\" || column.type === \"simple-enum\",\r\n        )\r\n        const createdEnumTypes: string[] = []\r\n        for (const column of enumColumns) {\r\n            // TODO: Should also check if values of existing type matches expected ones\r\n            const hasEnum = await this.hasEnumType(table, column)\r\n            const enumName = this.buildEnumName(table, column)\r\n\r\n            // if enum with the same \"enumName\" is defined more then once, me must prevent double creation\r\n            if (!hasEnum && createdEnumTypes.indexOf(enumName) === -1) {\r\n                createdEnumTypes.push(enumName)\r\n                upQueries.push(this.createEnumTypeSql(table, column, enumName))\r\n                downQueries.push(this.dropEnumTypeSql(table, column, enumName))\r\n            }\r\n        }\r\n\r\n        // if table have column with generated type, we must add the expression to the metadata table\r\n        const generatedColumns = table.columns.filter(\r\n            (column) =>\r\n                column.generatedType === \"STORED\" && column.asExpression,\r\n        )\r\n        for (const column of generatedColumns) {\r\n            const tableNameWithSchema = (\r\n                await this.getTableNameWithSchema(table.name)\r\n            ).split(\".\")\r\n            const tableName = tableNameWithSchema[1]\r\n            const schema = tableNameWithSchema[0]\r\n\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                database: this.driver.database,\r\n                schema,\r\n                table: tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                database: this.driver.database,\r\n                schema,\r\n                table: tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n\r\n            upQueries.push(insertQuery)\r\n            downQueries.push(deleteQuery)\r\n        }\r\n\r\n        upQueries.push(this.createTableSql(table, createForeignKeys))\r\n        downQueries.push(this.dropTableSql(table))\r\n\r\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\r\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\r\n        if (createForeignKeys)\r\n            table.foreignKeys.forEach((foreignKey) =>\r\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\r\n            )\r\n\r\n        if (createIndices) {\r\n            table.indices.forEach((index) => {\r\n                // new index may be passed without name. In this case we generate index name manually.\r\n                if (!index.name)\r\n                    index.name = this.connection.namingStrategy.indexName(\r\n                        table,\r\n                        index.columnNames,\r\n                        index.where,\r\n                    )\r\n                upQueries.push(this.createIndexSql(table, index))\r\n                downQueries.push(this.dropIndexSql(table, index))\r\n            })\r\n        }\r\n\r\n        if (table.comment) {\r\n            upQueries.push(\r\n                new Query(\r\n                    \"COMMENT ON TABLE \" +\r\n                        this.escapePath(table) +\r\n                        \" IS '\" +\r\n                        table.comment +\r\n                        \"'\",\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    \"COMMENT ON TABLE \" + this.escapePath(table) + \" IS NULL\",\r\n                ),\r\n            )\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(\r\n        target: Table | string,\r\n        ifExist?: boolean,\r\n        dropForeignKeys: boolean = true,\r\n        dropIndices: boolean = true,\r\n    ): Promise<void> {\r\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\r\n        // to perform drop queries for foreign keys and indices.\r\n        if (ifExist) {\r\n            const isTableExist = await this.hasTable(target)\r\n            if (!isTableExist) return Promise.resolve()\r\n        }\r\n\r\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\r\n        const createForeignKeys: boolean = dropForeignKeys\r\n        const tablePath = this.getTablePath(target)\r\n        const table = await this.getCachedTable(tablePath)\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        if (dropIndices) {\r\n            table.indices.forEach((index) => {\r\n                upQueries.push(this.dropIndexSql(table, index))\r\n                downQueries.push(this.createIndexSql(table, index))\r\n            })\r\n        }\r\n\r\n        if (dropForeignKeys)\r\n            table.foreignKeys.forEach((foreignKey) =>\r\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\r\n            )\r\n\r\n        upQueries.push(this.dropTableSql(table))\r\n        downQueries.push(this.createTableSql(table, createForeignKeys))\r\n\r\n        // if table had columns with generated type, we must remove the expression from the metadata table\r\n        const generatedColumns = table.columns.filter(\r\n            (column) => column.generatedType && column.asExpression,\r\n        )\r\n        for (const column of generatedColumns) {\r\n            const tableNameWithSchema = (\r\n                await this.getTableNameWithSchema(table.name)\r\n            ).split(\".\")\r\n            const tableName = tableNameWithSchema[1]\r\n            const schema = tableNameWithSchema[0]\r\n\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                database: this.driver.database,\r\n                schema,\r\n                table: tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                database: this.driver.database,\r\n                schema,\r\n                table: tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            upQueries.push(deleteQuery)\r\n            downQueries.push(insertQuery)\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Creates a new view.\r\n     */\r\n    async createView(\r\n        view: View,\r\n        syncWithMetadata: boolean = false,\r\n    ): Promise<void> {\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n        upQueries.push(this.createViewSql(view))\r\n        if (syncWithMetadata)\r\n            upQueries.push(await this.insertViewDefinitionSql(view))\r\n        downQueries.push(this.dropViewSql(view))\r\n        if (syncWithMetadata)\r\n            downQueries.push(await this.deleteViewDefinitionSql(view))\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Drops the view.\r\n     */\r\n    async dropView(target: View | string): Promise<void> {\r\n        const viewName = InstanceChecker.isView(target) ? target.name : target\r\n        const view = await this.getCachedView(viewName)\r\n\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n        upQueries.push(await this.deleteViewDefinitionSql(view))\r\n        upQueries.push(this.dropViewSql(view))\r\n        downQueries.push(await this.insertViewDefinitionSql(view))\r\n        downQueries.push(this.createViewSql(view))\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Renames the given table.\r\n     */\r\n    async renameTable(\r\n        oldTableOrName: Table | string,\r\n        newTableName: string,\r\n    ): Promise<void> {\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\r\n            ? oldTableOrName\r\n            : await this.getCachedTable(oldTableOrName)\r\n        const newTable = oldTable.clone()\r\n\r\n        const { schema: schemaName, tableName: oldTableName } =\r\n            this.driver.parseTableName(oldTable)\r\n\r\n        newTable.name = schemaName\r\n            ? `${schemaName}.${newTableName}`\r\n            : newTableName\r\n\r\n        upQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    oldTable,\r\n                )} RENAME TO \"${newTableName}\"`,\r\n            ),\r\n        )\r\n        downQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    newTable,\r\n                )} RENAME TO \"${oldTableName}\"`,\r\n            ),\r\n        )\r\n\r\n        // rename column primary key constraint if it has default constraint name\r\n        if (\r\n            newTable.primaryColumns.length > 0 &&\r\n            !newTable.primaryColumns[0].primaryKeyConstraintName\r\n        ) {\r\n            const columnNames = newTable.primaryColumns.map(\r\n                (column) => column.name,\r\n            )\r\n\r\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(\r\n                oldTable,\r\n                columnNames,\r\n            )\r\n\r\n            const newPkName = this.connection.namingStrategy.primaryKeyName(\r\n                newTable,\r\n                columnNames,\r\n            )\r\n\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        newTable,\r\n                    )} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        newTable,\r\n                    )} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        // rename sequences\r\n        newTable.columns.map((col) => {\r\n            if (col.isGenerated && col.generationStrategy === \"increment\") {\r\n                const sequencePath = this.buildSequencePath(oldTable, col.name)\r\n                const sequenceName = this.buildSequenceName(oldTable, col.name)\r\n\r\n                const newSequencePath = this.buildSequencePath(\r\n                    newTable,\r\n                    col.name,\r\n                )\r\n                const newSequenceName = this.buildSequenceName(\r\n                    newTable,\r\n                    col.name,\r\n                )\r\n\r\n                const up = `ALTER SEQUENCE ${this.escapePath(\r\n                    sequencePath,\r\n                )} RENAME TO \"${newSequenceName}\"`\r\n                const down = `ALTER SEQUENCE ${this.escapePath(\r\n                    newSequencePath,\r\n                )} RENAME TO \"${sequenceName}\"`\r\n\r\n                upQueries.push(new Query(up))\r\n                downQueries.push(new Query(down))\r\n            }\r\n        })\r\n\r\n        // rename unique constraints\r\n        newTable.uniques.forEach((unique) => {\r\n            const oldUniqueName =\r\n                this.connection.namingStrategy.uniqueConstraintName(\r\n                    oldTable,\r\n                    unique.columnNames,\r\n                )\r\n\r\n            // Skip renaming if Unique has user defined constraint name\r\n            if (unique.name !== oldUniqueName) return\r\n\r\n            // build new constraint name\r\n            const newUniqueName =\r\n                this.connection.namingStrategy.uniqueConstraintName(\r\n                    newTable,\r\n                    unique.columnNames,\r\n                )\r\n\r\n            // build queries\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        newTable,\r\n                    )} RENAME CONSTRAINT \"${\r\n                        unique.name\r\n                    }\" TO \"${newUniqueName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        newTable,\r\n                    )} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${\r\n                        unique.name\r\n                    }\"`,\r\n                ),\r\n            )\r\n\r\n            // replace constraint name\r\n            unique.name = newUniqueName\r\n        })\r\n\r\n        // rename index constraints\r\n        newTable.indices.forEach((index) => {\r\n            const oldIndexName = this.connection.namingStrategy.indexName(\r\n                oldTable,\r\n                index.columnNames,\r\n                index.where,\r\n            )\r\n\r\n            // Skip renaming if Index has user defined constraint name\r\n            if (index.name !== oldIndexName) return\r\n\r\n            // build new constraint name\r\n            const { schema } = this.driver.parseTableName(newTable)\r\n            const newIndexName = this.connection.namingStrategy.indexName(\r\n                newTable,\r\n                index.columnNames,\r\n                index.where,\r\n            )\r\n\r\n            // build queries\r\n            const up = schema\r\n                ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"`\r\n                : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`\r\n            const down = schema\r\n                ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"`\r\n                : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`\r\n            upQueries.push(new Query(up))\r\n            downQueries.push(new Query(down))\r\n\r\n            // replace constraint name\r\n            index.name = newIndexName\r\n        })\r\n\r\n        // rename foreign key constraints\r\n        newTable.foreignKeys.forEach((foreignKey) => {\r\n            const oldForeignKeyName =\r\n                this.connection.namingStrategy.foreignKeyName(\r\n                    oldTable,\r\n                    foreignKey.columnNames,\r\n                    this.getTablePath(foreignKey),\r\n                    foreignKey.referencedColumnNames,\r\n                )\r\n\r\n            // Skip renaming if foreign key has user defined constraint name\r\n            if (foreignKey.name !== oldForeignKeyName) return\r\n\r\n            // build new constraint name\r\n            const newForeignKeyName =\r\n                this.connection.namingStrategy.foreignKeyName(\r\n                    newTable,\r\n                    foreignKey.columnNames,\r\n                    this.getTablePath(foreignKey),\r\n                    foreignKey.referencedColumnNames,\r\n                )\r\n\r\n            // build queries\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        newTable,\r\n                    )} RENAME CONSTRAINT \"${\r\n                        foreignKey.name\r\n                    }\" TO \"${newForeignKeyName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        newTable,\r\n                    )} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${\r\n                        foreignKey.name\r\n                    }\"`,\r\n                ),\r\n            )\r\n\r\n            // replace constraint name\r\n            foreignKey.name = newForeignKeyName\r\n        })\r\n\r\n        // rename ENUM types\r\n        const enumColumns = newTable.columns.filter(\r\n            (column) => column.type === \"enum\" || column.type === \"simple-enum\",\r\n        )\r\n        for (let column of enumColumns) {\r\n            // skip renaming for user-defined enum name\r\n            if (column.enumName) continue\r\n\r\n            const oldEnumType = await this.getUserDefinedTypeName(\r\n                oldTable,\r\n                column,\r\n            )\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TYPE \"${oldEnumType.schema}\".\"${\r\n                        oldEnumType.name\r\n                    }\" RENAME TO ${this.buildEnumName(\r\n                        newTable,\r\n                        column,\r\n                        false,\r\n                    )}`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TYPE ${this.buildEnumName(\r\n                        newTable,\r\n                        column,\r\n                    )} RENAME TO \"${oldEnumType.name}\"`,\r\n                ),\r\n            )\r\n        }\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(\r\n        tableOrName: Table | string,\r\n        column: TableColumn,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const clonedTable = table.clone()\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\r\n            const hasEnum = await this.hasEnumType(table, column)\r\n            if (!hasEnum) {\r\n                upQueries.push(this.createEnumTypeSql(table, column))\r\n                downQueries.push(this.dropEnumTypeSql(table, column))\r\n            }\r\n        }\r\n\r\n        upQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} ADD ${this.buildCreateColumnSql(table, column)}`,\r\n            ),\r\n        )\r\n        downQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\r\n                    column.name\r\n                }\"`,\r\n            ),\r\n        )\r\n\r\n        // create or update primary key constraint\r\n        if (column.isPrimary) {\r\n            const primaryColumns = clonedTable.primaryColumns\r\n            // if table already have primary key, me must drop it and recreate again\r\n            if (primaryColumns.length > 0) {\r\n                const pkName = primaryColumns[0].primaryKeyConstraintName\r\n                    ? primaryColumns[0].primaryKeyConstraintName\r\n                    : this.connection.namingStrategy.primaryKeyName(\r\n                          clonedTable,\r\n                          primaryColumns.map((column) => column.name),\r\n                      )\r\n\r\n                const columnNames = primaryColumns\r\n                    .map((column) => `\"${column.name}\"`)\r\n                    .join(\", \")\r\n\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(\r\n                            table,\r\n                        )} DROP CONSTRAINT \"${pkName}\"`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(\r\n                            table,\r\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                    ),\r\n                )\r\n            }\r\n\r\n            primaryColumns.push(column)\r\n            const pkName = primaryColumns[0].primaryKeyConstraintName\r\n                ? primaryColumns[0].primaryKeyConstraintName\r\n                : this.connection.namingStrategy.primaryKeyName(\r\n                      clonedTable,\r\n                      primaryColumns.map((column) => column.name),\r\n                  )\r\n\r\n            const columnNames = primaryColumns\r\n                .map((column) => `\"${column.name}\"`)\r\n                .join(\", \")\r\n\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} DROP CONSTRAINT \"${pkName}\"`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        // create column index\r\n        const columnIndex = clonedTable.indices.find(\r\n            (index) =>\r\n                index.columnNames.length === 1 &&\r\n                index.columnNames[0] === column.name,\r\n        )\r\n        if (columnIndex) {\r\n            upQueries.push(this.createIndexSql(table, columnIndex))\r\n            downQueries.push(this.dropIndexSql(table, columnIndex))\r\n        }\r\n\r\n        // create unique constraint\r\n        if (column.isUnique) {\r\n            const uniqueConstraint = new TableUnique({\r\n                name: this.connection.namingStrategy.uniqueConstraintName(\r\n                    table,\r\n                    [column.name],\r\n                ),\r\n                columnNames: [column.name],\r\n            })\r\n            clonedTable.uniques.push(uniqueConstraint)\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\r\n                        uniqueConstraint.name\r\n                    }\" UNIQUE (\"${column.name}\")`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${\r\n                        uniqueConstraint.name\r\n                    }\"`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        if (column.generatedType === \"STORED\" && column.asExpression) {\r\n            const tableNameWithSchema = (\r\n                await this.getTableNameWithSchema(table.name)\r\n            ).split(\".\")\r\n            const tableName = tableNameWithSchema[1]\r\n            const schema = tableNameWithSchema[0]\r\n\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                database: this.driver.database,\r\n                schema,\r\n                table: tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                database: this.driver.database,\r\n                schema,\r\n                table: tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n\r\n            upQueries.push(insertQuery)\r\n            downQueries.push(deleteQuery)\r\n        }\r\n\r\n        // create column's comment\r\n        if (column.comment) {\r\n            upQueries.push(\r\n                new Query(\r\n                    `COMMENT ON COLUMN ${this.escapePath(table)}.\"${\r\n                        column.name\r\n                    }\" IS ${this.escapeComment(column.comment)}`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `COMMENT ON COLUMN ${this.escapePath(table)}.\"${\r\n                        column.name\r\n                    }\" IS ${this.escapeComment(column.comment)}`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n\r\n        clonedTable.addColumn(column)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[],\r\n    ): Promise<void> {\r\n        for (const column of columns) {\r\n            await this.addColumn(tableOrName, column)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(\r\n        tableOrName: Table | string,\r\n        oldTableColumnOrName: TableColumn | string,\r\n        newTableColumnOrName: TableColumn | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\r\n            ? oldTableColumnOrName\r\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\r\n        if (!oldColumn)\r\n            throw new TypeORMError(\r\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\r\n            )\r\n\r\n        let newColumn\r\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\r\n            newColumn = newTableColumnOrName\r\n        } else {\r\n            newColumn = oldColumn.clone()\r\n            newColumn.name = newTableColumnOrName\r\n        }\r\n\r\n        return this.changeColumn(table, oldColumn, newColumn)\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(\r\n        tableOrName: Table | string,\r\n        oldTableColumnOrName: TableColumn | string,\r\n        newColumn: TableColumn,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        let clonedTable = table.clone()\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n        let defaultValueChanged = false\r\n\r\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\r\n            ? oldTableColumnOrName\r\n            : table.columns.find(\r\n                  (column) => column.name === oldTableColumnOrName,\r\n              )\r\n        if (!oldColumn)\r\n            throw new TypeORMError(\r\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\r\n            )\r\n\r\n        if (\r\n            oldColumn.type !== newColumn.type ||\r\n            oldColumn.length !== newColumn.length ||\r\n            newColumn.isArray !== oldColumn.isArray ||\r\n            (!oldColumn.generatedType &&\r\n                newColumn.generatedType === \"STORED\") ||\r\n            (oldColumn.asExpression !== newColumn.asExpression &&\r\n                newColumn.generatedType === \"STORED\")\r\n        ) {\r\n            // To avoid data conversion, we just recreate column\r\n            await this.dropColumn(table, oldColumn)\r\n            await this.addColumn(table, newColumn)\r\n\r\n            // update cloned table\r\n            clonedTable = table.clone()\r\n        } else {\r\n            if (oldColumn.name !== newColumn.name) {\r\n                // rename column\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${\r\n                            oldColumn.name\r\n                        }\" TO \"${newColumn.name}\"`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${\r\n                            newColumn.name\r\n                        }\" TO \"${oldColumn.name}\"`,\r\n                    ),\r\n                )\r\n\r\n                // rename ENUM type\r\n                if (\r\n                    oldColumn.type === \"enum\" ||\r\n                    oldColumn.type === \"simple-enum\"\r\n                ) {\r\n                    const oldEnumType = await this.getUserDefinedTypeName(\r\n                        table,\r\n                        oldColumn,\r\n                    )\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TYPE \"${oldEnumType.schema}\".\"${\r\n                                oldEnumType.name\r\n                            }\" RENAME TO ${this.buildEnumName(\r\n                                table,\r\n                                newColumn,\r\n                                false,\r\n                            )}`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TYPE ${this.buildEnumName(\r\n                                table,\r\n                                newColumn,\r\n                            )} RENAME TO \"${oldEnumType.name}\"`,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                // rename column primary key constraint\r\n                if (\r\n                    oldColumn.isPrimary === true &&\r\n                    !oldColumn.primaryKeyConstraintName\r\n                ) {\r\n                    const primaryColumns = clonedTable.primaryColumns\r\n\r\n                    // build old primary constraint name\r\n                    const columnNames = primaryColumns.map(\r\n                        (column) => column.name,\r\n                    )\r\n                    const oldPkName =\r\n                        this.connection.namingStrategy.primaryKeyName(\r\n                            clonedTable,\r\n                            columnNames,\r\n                        )\r\n\r\n                    // replace old column name with new column name\r\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1)\r\n                    columnNames.push(newColumn.name)\r\n\r\n                    // build new primary constraint name\r\n                    const newPkName =\r\n                        this.connection.namingStrategy.primaryKeyName(\r\n                            clonedTable,\r\n                            columnNames,\r\n                        )\r\n\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                // rename column sequence\r\n                if (\r\n                    oldColumn.isGenerated === true &&\r\n                    newColumn.generationStrategy === \"increment\"\r\n                ) {\r\n                    const sequencePath = this.buildSequencePath(\r\n                        table,\r\n                        oldColumn.name,\r\n                    )\r\n                    const sequenceName = this.buildSequenceName(\r\n                        table,\r\n                        oldColumn.name,\r\n                    )\r\n\r\n                    const newSequencePath = this.buildSequencePath(\r\n                        table,\r\n                        newColumn.name,\r\n                    )\r\n                    const newSequenceName = this.buildSequenceName(\r\n                        table,\r\n                        newColumn.name,\r\n                    )\r\n\r\n                    const up = `ALTER SEQUENCE ${this.escapePath(\r\n                        sequencePath,\r\n                    )} RENAME TO \"${newSequenceName}\"`\r\n                    const down = `ALTER SEQUENCE ${this.escapePath(\r\n                        newSequencePath,\r\n                    )} RENAME TO \"${sequenceName}\"`\r\n\r\n                    upQueries.push(new Query(up))\r\n                    downQueries.push(new Query(down))\r\n                }\r\n\r\n                // rename unique constraints\r\n                clonedTable.findColumnUniques(oldColumn).forEach((unique) => {\r\n                    const oldUniqueName =\r\n                        this.connection.namingStrategy.uniqueConstraintName(\r\n                            clonedTable,\r\n                            unique.columnNames,\r\n                        )\r\n\r\n                    // Skip renaming if Unique has user defined constraint name\r\n                    if (unique.name !== oldUniqueName) return\r\n\r\n                    // build new constraint name\r\n                    unique.columnNames.splice(\r\n                        unique.columnNames.indexOf(oldColumn.name),\r\n                        1,\r\n                    )\r\n                    unique.columnNames.push(newColumn.name)\r\n                    const newUniqueName =\r\n                        this.connection.namingStrategy.uniqueConstraintName(\r\n                            clonedTable,\r\n                            unique.columnNames,\r\n                        )\r\n\r\n                    // build queries\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} RENAME CONSTRAINT \"${\r\n                                unique.name\r\n                            }\" TO \"${newUniqueName}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${\r\n                                unique.name\r\n                            }\"`,\r\n                        ),\r\n                    )\r\n\r\n                    // replace constraint name\r\n                    unique.name = newUniqueName\r\n                })\r\n\r\n                // rename index constraints\r\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\r\n                    const oldIndexName =\r\n                        this.connection.namingStrategy.indexName(\r\n                            clonedTable,\r\n                            index.columnNames,\r\n                            index.where,\r\n                        )\r\n\r\n                    // Skip renaming if Index has user defined constraint name\r\n                    if (index.name !== oldIndexName) return\r\n\r\n                    // build new constraint name\r\n                    index.columnNames.splice(\r\n                        index.columnNames.indexOf(oldColumn.name),\r\n                        1,\r\n                    )\r\n                    index.columnNames.push(newColumn.name)\r\n                    const { schema } = this.driver.parseTableName(table)\r\n                    const newIndexName =\r\n                        this.connection.namingStrategy.indexName(\r\n                            clonedTable,\r\n                            index.columnNames,\r\n                            index.where,\r\n                        )\r\n\r\n                    // build queries\r\n                    const up = schema\r\n                        ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"`\r\n                        : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`\r\n                    const down = schema\r\n                        ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"`\r\n                        : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`\r\n\r\n                    upQueries.push(new Query(up))\r\n                    downQueries.push(new Query(down))\r\n\r\n                    // replace constraint name\r\n                    index.name = newIndexName\r\n                })\r\n\r\n                // rename foreign key constraints\r\n                clonedTable\r\n                    .findColumnForeignKeys(oldColumn)\r\n                    .forEach((foreignKey) => {\r\n                        const foreignKeyName =\r\n                            this.connection.namingStrategy.foreignKeyName(\r\n                                clonedTable,\r\n                                foreignKey.columnNames,\r\n                                this.getTablePath(foreignKey),\r\n                                foreignKey.referencedColumnNames,\r\n                            )\r\n\r\n                        // Skip renaming if foreign key has user defined constraint name\r\n                        if (foreignKey.name !== foreignKeyName) return\r\n\r\n                        // build new constraint name\r\n                        foreignKey.columnNames.splice(\r\n                            foreignKey.columnNames.indexOf(oldColumn.name),\r\n                            1,\r\n                        )\r\n                        foreignKey.columnNames.push(newColumn.name)\r\n                        const newForeignKeyName =\r\n                            this.connection.namingStrategy.foreignKeyName(\r\n                                clonedTable,\r\n                                foreignKey.columnNames,\r\n                                this.getTablePath(foreignKey),\r\n                                foreignKey.referencedColumnNames,\r\n                            )\r\n\r\n                        // build queries\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} RENAME CONSTRAINT \"${\r\n                                    foreignKey.name\r\n                                }\" TO \"${newForeignKeyName}\"`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${\r\n                                    foreignKey.name\r\n                                }\"`,\r\n                            ),\r\n                        )\r\n\r\n                        // replace constraint name\r\n                        foreignKey.name = newForeignKeyName\r\n                    })\r\n\r\n                // rename old column in the Table object\r\n                const oldTableColumn = clonedTable.columns.find(\r\n                    (column) => column.name === oldColumn.name,\r\n                )\r\n                clonedTable.columns[\r\n                    clonedTable.columns.indexOf(oldTableColumn!)\r\n                ].name = newColumn.name\r\n                oldColumn.name = newColumn.name\r\n            }\r\n\r\n            if (\r\n                newColumn.precision !== oldColumn.precision ||\r\n                newColumn.scale !== oldColumn.scale\r\n            ) {\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${\r\n                            newColumn.name\r\n                        }\" TYPE ${this.driver.createFullType(newColumn)}`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${\r\n                            newColumn.name\r\n                        }\" TYPE ${this.driver.createFullType(oldColumn)}`,\r\n                    ),\r\n                )\r\n            }\r\n\r\n            if (\r\n                (newColumn.type === \"enum\" ||\r\n                    newColumn.type === \"simple-enum\") &&\r\n                (oldColumn.type === \"enum\" ||\r\n                    oldColumn.type === \"simple-enum\") &&\r\n                (!OrmUtils.isArraysEqual(newColumn.enum!, oldColumn.enum!) ||\r\n                    newColumn.enumName !== oldColumn.enumName)\r\n            ) {\r\n                const arraySuffix = newColumn.isArray ? \"[]\" : \"\"\r\n\r\n                // \"public\".\"new_enum\"\r\n                const newEnumName = this.buildEnumName(table, newColumn)\r\n\r\n                // \"public\".\"old_enum\"\r\n                const oldEnumName = this.buildEnumName(table, oldColumn)\r\n\r\n                // \"old_enum\"\r\n                const oldEnumNameWithoutSchema = this.buildEnumName(\r\n                    table,\r\n                    oldColumn,\r\n                    false,\r\n                )\r\n\r\n                //\"public\".\"old_enum_old\"\r\n                const oldEnumNameWithSchema_old = this.buildEnumName(\r\n                    table,\r\n                    oldColumn,\r\n                    true,\r\n                    false,\r\n                    true,\r\n                )\r\n\r\n                //\"old_enum_old\"\r\n                const oldEnumNameWithoutSchema_old = this.buildEnumName(\r\n                    table,\r\n                    oldColumn,\r\n                    false,\r\n                    false,\r\n                    true,\r\n                )\r\n\r\n                // rename old ENUM\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TYPE ${oldEnumName} RENAME TO ${oldEnumNameWithoutSchema_old}`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TYPE ${oldEnumNameWithSchema_old} RENAME TO ${oldEnumNameWithoutSchema}`,\r\n                    ),\r\n                )\r\n\r\n                // create new ENUM\r\n                upQueries.push(\r\n                    this.createEnumTypeSql(table, newColumn, newEnumName),\r\n                )\r\n                downQueries.push(\r\n                    this.dropEnumTypeSql(table, newColumn, newEnumName),\r\n                )\r\n\r\n                // if column have default value, we must drop it to avoid issues with type casting\r\n                if (\r\n                    oldColumn.default !== null &&\r\n                    oldColumn.default !== undefined\r\n                ) {\r\n                    // mark default as changed to prevent double update\r\n                    defaultValueChanged = true\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${oldColumn.name}\" DROP DEFAULT`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT ${\r\n                                oldColumn.default\r\n                            }`,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                // build column types\r\n                const upType = `${newEnumName}${arraySuffix} USING \"${newColumn.name}\"::\"text\"::${newEnumName}${arraySuffix}`\r\n                const downType = `${oldEnumNameWithSchema_old}${arraySuffix} USING \"${newColumn.name}\"::\"text\"::${oldEnumNameWithSchema_old}${arraySuffix}`\r\n\r\n                // update column to use new type\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${\r\n                            newColumn.name\r\n                        }\" TYPE ${upType}`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${\r\n                            newColumn.name\r\n                        }\" TYPE ${downType}`,\r\n                    ),\r\n                )\r\n\r\n                // restore column default or create new one\r\n                if (\r\n                    newColumn.default !== null &&\r\n                    newColumn.default !== undefined\r\n                ) {\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${\r\n                                newColumn.default\r\n                            }`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                // remove old ENUM\r\n                upQueries.push(\r\n                    this.dropEnumTypeSql(\r\n                        table,\r\n                        oldColumn,\r\n                        oldEnumNameWithSchema_old,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    this.createEnumTypeSql(\r\n                        table,\r\n                        oldColumn,\r\n                        oldEnumNameWithSchema_old,\r\n                    ),\r\n                )\r\n            }\r\n\r\n            if (oldColumn.isNullable !== newColumn.isNullable) {\r\n                if (newColumn.isNullable) {\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`,\r\n                        ),\r\n                    )\r\n                } else {\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`,\r\n                        ),\r\n                    )\r\n                }\r\n            }\r\n\r\n            if (oldColumn.comment !== newColumn.comment) {\r\n                upQueries.push(\r\n                    new Query(\r\n                        `COMMENT ON COLUMN ${this.escapePath(table)}.\"${\r\n                            oldColumn.name\r\n                        }\" IS ${this.escapeComment(newColumn.comment)}`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `COMMENT ON COLUMN ${this.escapePath(table)}.\"${\r\n                            newColumn.name\r\n                        }\" IS ${this.escapeComment(oldColumn.comment)}`,\r\n                    ),\r\n                )\r\n            }\r\n\r\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\r\n                const primaryColumns = clonedTable.primaryColumns\r\n\r\n                // if primary column state changed, we must always drop existed constraint.\r\n                if (primaryColumns.length > 0) {\r\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\r\n                        ? primaryColumns[0].primaryKeyConstraintName\r\n                        : this.connection.namingStrategy.primaryKeyName(\r\n                              clonedTable,\r\n                              primaryColumns.map((column) => column.name),\r\n                          )\r\n\r\n                    const columnNames = primaryColumns\r\n                        .map((column) => `\"${column.name}\"`)\r\n                        .join(\", \")\r\n\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${pkName}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                if (newColumn.isPrimary === true) {\r\n                    primaryColumns.push(newColumn)\r\n                    // update column in table\r\n                    const column = clonedTable.columns.find(\r\n                        (column) => column.name === newColumn.name,\r\n                    )\r\n                    column!.isPrimary = true\r\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\r\n                        ? primaryColumns[0].primaryKeyConstraintName\r\n                        : this.connection.namingStrategy.primaryKeyName(\r\n                              clonedTable,\r\n                              primaryColumns.map((column) => column.name),\r\n                          )\r\n\r\n                    const columnNames = primaryColumns\r\n                        .map((column) => `\"${column.name}\"`)\r\n                        .join(\", \")\r\n\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${pkName}\"`,\r\n                        ),\r\n                    )\r\n                } else {\r\n                    const primaryColumn = primaryColumns.find(\r\n                        (c) => c.name === newColumn.name,\r\n                    )\r\n                    primaryColumns.splice(\r\n                        primaryColumns.indexOf(primaryColumn!),\r\n                        1,\r\n                    )\r\n\r\n                    // update column in table\r\n                    const column = clonedTable.columns.find(\r\n                        (column) => column.name === newColumn.name,\r\n                    )\r\n                    column!.isPrimary = false\r\n\r\n                    // if we have another primary keys, we must recreate constraint.\r\n                    if (primaryColumns.length > 0) {\r\n                        const pkName = primaryColumns[0]\r\n                            .primaryKeyConstraintName\r\n                            ? primaryColumns[0].primaryKeyConstraintName\r\n                            : this.connection.namingStrategy.primaryKeyName(\r\n                                  clonedTable,\r\n                                  primaryColumns.map((column) => column.name),\r\n                              )\r\n\r\n                        const columnNames = primaryColumns\r\n                            .map((column) => `\"${column.name}\"`)\r\n                            .join(\", \")\r\n\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} DROP CONSTRAINT \"${pkName}\"`,\r\n                            ),\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (newColumn.isUnique !== oldColumn.isUnique) {\r\n                if (newColumn.isUnique === true) {\r\n                    const uniqueConstraint = new TableUnique({\r\n                        name: this.connection.namingStrategy.uniqueConstraintName(\r\n                            table,\r\n                            [newColumn.name],\r\n                        ),\r\n                        columnNames: [newColumn.name],\r\n                    })\r\n                    clonedTable.uniques.push(uniqueConstraint)\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${\r\n                                uniqueConstraint.name\r\n                            }\" UNIQUE (\"${newColumn.name}\")`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${uniqueConstraint.name}\"`,\r\n                        ),\r\n                    )\r\n                } else {\r\n                    const uniqueConstraint = clonedTable.uniques.find(\r\n                        (unique) => {\r\n                            return (\r\n                                unique.columnNames.length === 1 &&\r\n                                !!unique.columnNames.find(\r\n                                    (columnName) =>\r\n                                        columnName === newColumn.name,\r\n                                )\r\n                            )\r\n                        },\r\n                    )\r\n                    clonedTable.uniques.splice(\r\n                        clonedTable.uniques.indexOf(uniqueConstraint!),\r\n                        1,\r\n                    )\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${\r\n                                uniqueConstraint!.name\r\n                            }\" UNIQUE (\"${newColumn.name}\")`,\r\n                        ),\r\n                    )\r\n                }\r\n            }\r\n\r\n            if (oldColumn.isGenerated !== newColumn.isGenerated) {\r\n                // if old column was \"generated\", we should clear defaults\r\n                if (oldColumn.isGenerated) {\r\n                    if (oldColumn.generationStrategy === \"uuid\") {\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    oldColumn.name\r\n                                }\" DROP DEFAULT`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    oldColumn.name\r\n                                }\" SET DEFAULT ${this.driver.uuidGenerator}`,\r\n                            ),\r\n                        )\r\n                    } else if (oldColumn.generationStrategy === \"increment\") {\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" DROP DEFAULT`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" SET DEFAULT nextval('${this.escapePath(\r\n                                    this.buildSequencePath(table, newColumn),\r\n                                )}')`,\r\n                            ),\r\n                        )\r\n\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `DROP SEQUENCE ${this.escapePath(\r\n                                    this.buildSequencePath(table, newColumn),\r\n                                )}`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `CREATE SEQUENCE IF NOT EXISTS ${this.escapePath(\r\n                                    this.buildSequencePath(table, newColumn),\r\n                                )} OWNED BY ${this.escapePath(table)}.\"${\r\n                                    newColumn.name\r\n                                }\"`,\r\n                            ),\r\n                        )\r\n                    }\r\n                }\r\n\r\n                if (newColumn.generationStrategy === \"uuid\") {\r\n                    if (newColumn.isGenerated === true) {\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" SET DEFAULT ${this.driver.uuidGenerator}`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" DROP DEFAULT`,\r\n                            ),\r\n                        )\r\n                    } else {\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" DROP DEFAULT`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" SET DEFAULT ${this.driver.uuidGenerator}`,\r\n                            ),\r\n                        )\r\n                    }\r\n                } else if (newColumn.generationStrategy === \"increment\") {\r\n                    if (newColumn.isGenerated === true) {\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `CREATE SEQUENCE IF NOT EXISTS ${this.escapePath(\r\n                                    this.buildSequencePath(table, newColumn),\r\n                                )} OWNED BY ${this.escapePath(table)}.\"${\r\n                                    newColumn.name\r\n                                }\"`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `DROP SEQUENCE ${this.escapePath(\r\n                                    this.buildSequencePath(table, newColumn),\r\n                                )}`,\r\n                            ),\r\n                        )\r\n\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" SET DEFAULT nextval('${this.escapePath(\r\n                                    this.buildSequencePath(table, newColumn),\r\n                                )}')`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" DROP DEFAULT`,\r\n                            ),\r\n                        )\r\n                    } else {\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" DROP DEFAULT`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" SET DEFAULT nextval('${this.escapePath(\r\n                                    this.buildSequencePath(table, newColumn),\r\n                                )}')`,\r\n                            ),\r\n                        )\r\n\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `DROP SEQUENCE ${this.escapePath(\r\n                                    this.buildSequencePath(table, newColumn),\r\n                                )}`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `CREATE SEQUENCE IF NOT EXISTS ${this.escapePath(\r\n                                    this.buildSequencePath(table, newColumn),\r\n                                )} OWNED BY ${this.escapePath(table)}.\"${\r\n                                    newColumn.name\r\n                                }\"`,\r\n                            ),\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n\r\n            // the default might have changed when the enum changed\r\n            if (\r\n                newColumn.default !== oldColumn.default &&\r\n                !defaultValueChanged\r\n            ) {\r\n                if (\r\n                    newColumn.default !== null &&\r\n                    newColumn.default !== undefined\r\n                ) {\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${\r\n                                newColumn.default\r\n                            }`,\r\n                        ),\r\n                    )\r\n\r\n                    if (\r\n                        oldColumn.default !== null &&\r\n                        oldColumn.default !== undefined\r\n                    ) {\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" SET DEFAULT ${oldColumn.default}`,\r\n                            ),\r\n                        )\r\n                    } else {\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ALTER COLUMN \"${\r\n                                    newColumn.name\r\n                                }\" DROP DEFAULT`,\r\n                            ),\r\n                        )\r\n                    }\r\n                } else if (\r\n                    oldColumn.default !== null &&\r\n                    oldColumn.default !== undefined\r\n                ) {\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${\r\n                                oldColumn.default\r\n                            }`,\r\n                        ),\r\n                    )\r\n                }\r\n            }\r\n\r\n            if (\r\n                (newColumn.spatialFeatureType || \"\").toLowerCase() !==\r\n                    (oldColumn.spatialFeatureType || \"\").toLowerCase() ||\r\n                newColumn.srid !== oldColumn.srid\r\n            ) {\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${\r\n                            newColumn.name\r\n                        }\" TYPE ${this.driver.createFullType(newColumn)}`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${\r\n                            newColumn.name\r\n                        }\" TYPE ${this.driver.createFullType(oldColumn)}`,\r\n                    ),\r\n                )\r\n            }\r\n\r\n            if (newColumn.generatedType !== oldColumn.generatedType) {\r\n                // Convert generated column data to normal column\r\n                if (\r\n                    !newColumn.generatedType ||\r\n                    newColumn.generatedType === \"VIRTUAL\"\r\n                ) {\r\n                    // We can copy the generated data to the new column\r\n                    const tableNameWithSchema = (\r\n                        await this.getTableNameWithSchema(table.name)\r\n                    ).split(\".\")\r\n                    const tableName = tableNameWithSchema[1]\r\n                    const schema = tableNameWithSchema[0]\r\n\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} RENAME COLUMN \"${oldColumn.name}\" TO \"TEMP_OLD_${\r\n                                oldColumn.name\r\n                            }\"`,\r\n                        ),\r\n                    )\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD ${this.buildCreateColumnSql(\r\n                                table,\r\n                                newColumn,\r\n                            )}`,\r\n                        ),\r\n                    )\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `UPDATE ${this.escapePath(table)} SET \"${\r\n                                newColumn.name\r\n                            }\" = \"TEMP_OLD_${oldColumn.name}\"`,\r\n                        ),\r\n                    )\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP COLUMN \"TEMP_OLD_${oldColumn.name}\"`,\r\n                        ),\r\n                    )\r\n                    upQueries.push(\r\n                        this.deleteTypeormMetadataSql({\r\n                            database: this.driver.database,\r\n                            schema,\r\n                            table: tableName,\r\n                            type: MetadataTableType.GENERATED_COLUMN,\r\n                            name: oldColumn.name,\r\n                        }),\r\n                    )\r\n                    // However, we can't copy it back on downgrade. It needs to regenerate.\r\n                    downQueries.push(\r\n                        this.insertTypeormMetadataSql({\r\n                            database: this.driver.database,\r\n                            schema,\r\n                            table: tableName,\r\n                            type: MetadataTableType.GENERATED_COLUMN,\r\n                            name: oldColumn.name,\r\n                            value: oldColumn.asExpression,\r\n                        }),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD ${this.buildCreateColumnSql(\r\n                                table,\r\n                                oldColumn,\r\n                            )}`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP COLUMN \"${newColumn.name}\"`,\r\n                        ),\r\n                    )\r\n                    // downQueries.push(\r\n                    //     this.deleteTypeormMetadataSql({\r\n                    //         database: this.driver.database,\r\n                    //         schema,\r\n                    //         table: tableName,\r\n                    //         type: MetadataTableType.GENERATED_COLUMN,\r\n                    //         name: newColumn.name,\r\n                    //     }),\r\n                    // )\r\n                }\r\n            }\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(\r\n        tableOrName: Table | string,\r\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\r\n    ): Promise<void> {\r\n        for (const { oldColumn, newColumn } of changedColumns) {\r\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(\r\n        tableOrName: Table | string,\r\n        columnOrName: TableColumn | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const column = InstanceChecker.isTableColumn(columnOrName)\r\n            ? columnOrName\r\n            : table.findColumnByName(columnOrName)\r\n        if (!column)\r\n            throw new TypeORMError(\r\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\r\n            )\r\n\r\n        const clonedTable = table.clone()\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        // drop primary key constraint\r\n        if (column.isPrimary) {\r\n            const pkName = column.primaryKeyConstraintName\r\n                ? column.primaryKeyConstraintName\r\n                : this.connection.namingStrategy.primaryKeyName(\r\n                      clonedTable,\r\n                      clonedTable.primaryColumns.map((column) => column.name),\r\n                  )\r\n\r\n            const columnNames = clonedTable.primaryColumns\r\n                .map((primaryColumn) => `\"${primaryColumn.name}\"`)\r\n                .join(\", \")\r\n\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        clonedTable,\r\n                    )} DROP CONSTRAINT \"${pkName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        clonedTable,\r\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                ),\r\n            )\r\n\r\n            // update column in table\r\n            const tableColumn = clonedTable.findColumnByName(column.name)\r\n            tableColumn!.isPrimary = false\r\n\r\n            // if primary key have multiple columns, we must recreate it without dropped column\r\n            if (clonedTable.primaryColumns.length > 0) {\r\n                const pkName = clonedTable.primaryColumns[0]\r\n                    .primaryKeyConstraintName\r\n                    ? clonedTable.primaryColumns[0].primaryKeyConstraintName\r\n                    : this.connection.namingStrategy.primaryKeyName(\r\n                          clonedTable,\r\n                          clonedTable.primaryColumns.map(\r\n                              (column) => column.name,\r\n                          ),\r\n                      )\r\n\r\n                const columnNames = clonedTable.primaryColumns\r\n                    .map((primaryColumn) => `\"${primaryColumn.name}\"`)\r\n                    .join(\", \")\r\n\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(\r\n                            clonedTable,\r\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(\r\n                            clonedTable,\r\n                        )} DROP CONSTRAINT \"${pkName}\"`,\r\n                    ),\r\n                )\r\n            }\r\n        }\r\n\r\n        // drop column index\r\n        const columnIndex = clonedTable.indices.find(\r\n            (index) =>\r\n                index.columnNames.length === 1 &&\r\n                index.columnNames[0] === column.name,\r\n        )\r\n        if (columnIndex) {\r\n            clonedTable.indices.splice(\r\n                clonedTable.indices.indexOf(columnIndex),\r\n                1,\r\n            )\r\n            upQueries.push(this.dropIndexSql(table, columnIndex))\r\n            downQueries.push(this.createIndexSql(table, columnIndex))\r\n        }\r\n\r\n        // drop column check\r\n        const columnCheck = clonedTable.checks.find(\r\n            (check) =>\r\n                !!check.columnNames &&\r\n                check.columnNames.length === 1 &&\r\n                check.columnNames[0] === column.name,\r\n        )\r\n        if (columnCheck) {\r\n            clonedTable.checks.splice(\r\n                clonedTable.checks.indexOf(columnCheck),\r\n                1,\r\n            )\r\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck))\r\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck))\r\n        }\r\n\r\n        // drop column unique\r\n        const columnUnique = clonedTable.uniques.find(\r\n            (unique) =>\r\n                unique.columnNames.length === 1 &&\r\n                unique.columnNames[0] === column.name,\r\n        )\r\n        if (columnUnique) {\r\n            clonedTable.uniques.splice(\r\n                clonedTable.uniques.indexOf(columnUnique),\r\n                1,\r\n            )\r\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique))\r\n            downQueries.push(\r\n                this.createUniqueConstraintSql(table, columnUnique),\r\n            )\r\n        }\r\n\r\n        upQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\r\n                    column.name\r\n                }\"`,\r\n            ),\r\n        )\r\n        downQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} ADD ${this.buildCreateColumnSql(table, column)}`,\r\n            ),\r\n        )\r\n\r\n        // drop enum type\r\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\r\n            const hasEnum = await this.hasEnumType(table, column)\r\n            if (hasEnum) {\r\n                const enumType = await this.getUserDefinedTypeName(\r\n                    table,\r\n                    column,\r\n                )\r\n                const escapedEnumName = `\"${enumType.schema}\".\"${enumType.name}\"`\r\n                upQueries.push(\r\n                    this.dropEnumTypeSql(table, column, escapedEnumName),\r\n                )\r\n                downQueries.push(\r\n                    this.createEnumTypeSql(table, column, escapedEnumName),\r\n                )\r\n            }\r\n        }\r\n\r\n        if (column.generatedType === \"STORED\") {\r\n            const tableNameWithSchema = (\r\n                await this.getTableNameWithSchema(table.name)\r\n            ).split(\".\")\r\n            const tableName = tableNameWithSchema[1]\r\n            const schema = tableNameWithSchema[0]\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                database: this.driver.database,\r\n                schema,\r\n                table: tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                database: this.driver.database,\r\n                schema,\r\n                table: tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            upQueries.push(deleteQuery)\r\n            downQueries.push(insertQuery)\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n\r\n        clonedTable.removeColumn(column)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[] | string[],\r\n    ): Promise<void> {\r\n        for (const column of columns) {\r\n            await this.dropColumn(tableOrName, column)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     */\r\n    async createPrimaryKey(\r\n        tableOrName: Table | string,\r\n        columnNames: string[],\r\n        constraintName?: string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const clonedTable = table.clone()\r\n\r\n        const up = this.createPrimaryKeySql(table, columnNames, constraintName)\r\n\r\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\r\n        clonedTable.columns.forEach((column) => {\r\n            if (columnNames.find((columnName) => columnName === column.name))\r\n                column.isPrimary = true\r\n        })\r\n        const down = this.dropPrimaryKeySql(clonedTable)\r\n\r\n        await this.executeQueries(up, down)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Updates composite primary keys.\r\n     */\r\n    async updatePrimaryKeys(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[],\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const clonedTable = table.clone()\r\n        const columnNames = columns.map((column) => column.name)\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        // if table already have primary columns, we must drop them.\r\n        const primaryColumns = clonedTable.primaryColumns\r\n        if (primaryColumns.length > 0) {\r\n            const pkName = primaryColumns[0].primaryKeyConstraintName\r\n                ? primaryColumns[0].primaryKeyConstraintName\r\n                : this.connection.namingStrategy.primaryKeyName(\r\n                      clonedTable,\r\n                      primaryColumns.map((column) => column.name),\r\n                  )\r\n\r\n            const columnNamesString = primaryColumns\r\n                .map((column) => `\"${column.name}\"`)\r\n                .join(\", \")\r\n\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} DROP CONSTRAINT \"${pkName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        // update columns in table.\r\n        clonedTable.columns\r\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\r\n            .forEach((column) => (column.isPrimary = true))\r\n\r\n        const pkName = primaryColumns[0]?.primaryKeyConstraintName\r\n            ? primaryColumns[0].primaryKeyConstraintName\r\n            : this.connection.namingStrategy.primaryKeyName(\r\n                  clonedTable,\r\n                  columnNames,\r\n              )\r\n\r\n        const columnNamesString = columnNames\r\n            .map((columnName) => `\"${columnName}\"`)\r\n            .join(\", \")\r\n\r\n        upQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\r\n            ),\r\n        )\r\n        downQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} DROP CONSTRAINT \"${pkName}\"`,\r\n            ),\r\n        )\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Drops a primary key.\r\n     */\r\n    async dropPrimaryKey(\r\n        tableOrName: Table | string,\r\n        constraintName?: string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const up = this.dropPrimaryKeySql(table)\r\n        const down = this.createPrimaryKeySql(\r\n            table,\r\n            table.primaryColumns.map((column) => column.name),\r\n            constraintName,\r\n        )\r\n        await this.executeQueries(up, down)\r\n        table.primaryColumns.forEach((column) => {\r\n            column.isPrimary = false\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Creates new unique constraint.\r\n     */\r\n    async createUniqueConstraint(\r\n        tableOrName: Table | string,\r\n        uniqueConstraint: TableUnique,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n\r\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\r\n        if (!uniqueConstraint.name)\r\n            uniqueConstraint.name =\r\n                this.connection.namingStrategy.uniqueConstraintName(\r\n                    table,\r\n                    uniqueConstraint.columnNames,\r\n                )\r\n\r\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint)\r\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.addUniqueConstraint(uniqueConstraint)\r\n    }\r\n\r\n    /**\r\n     * Creates new unique constraints.\r\n     */\r\n    async createUniqueConstraints(\r\n        tableOrName: Table | string,\r\n        uniqueConstraints: TableUnique[],\r\n    ): Promise<void> {\r\n        for (const uniqueConstraint of uniqueConstraints) {\r\n            await this.createUniqueConstraint(tableOrName, uniqueConstraint)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Drops unique constraint.\r\n     */\r\n    async dropUniqueConstraint(\r\n        tableOrName: Table | string,\r\n        uniqueOrName: TableUnique | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\r\n            ? uniqueOrName\r\n            : table.uniques.find((u) => u.name === uniqueOrName)\r\n        if (!uniqueConstraint)\r\n            throw new TypeORMError(\r\n                `Supplied unique constraint was not found in table ${table.name}`,\r\n            )\r\n\r\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint)\r\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.removeUniqueConstraint(uniqueConstraint)\r\n    }\r\n\r\n    /**\r\n     * Drops unique constraints.\r\n     */\r\n    async dropUniqueConstraints(\r\n        tableOrName: Table | string,\r\n        uniqueConstraints: TableUnique[],\r\n    ): Promise<void> {\r\n        for (const uniqueConstraint of uniqueConstraints) {\r\n            await this.dropUniqueConstraint(tableOrName, uniqueConstraint)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new check constraint.\r\n     */\r\n    async createCheckConstraint(\r\n        tableOrName: Table | string,\r\n        checkConstraint: TableCheck,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n\r\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\r\n        if (!checkConstraint.name)\r\n            checkConstraint.name =\r\n                this.connection.namingStrategy.checkConstraintName(\r\n                    table,\r\n                    checkConstraint.expression!,\r\n                )\r\n\r\n        const up = this.createCheckConstraintSql(table, checkConstraint)\r\n        const down = this.dropCheckConstraintSql(table, checkConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.addCheckConstraint(checkConstraint)\r\n    }\r\n\r\n    /**\r\n     * Creates new check constraints.\r\n     */\r\n    async createCheckConstraints(\r\n        tableOrName: Table | string,\r\n        checkConstraints: TableCheck[],\r\n    ): Promise<void> {\r\n        const promises = checkConstraints.map((checkConstraint) =>\r\n            this.createCheckConstraint(tableOrName, checkConstraint),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Drops check constraint.\r\n     */\r\n    async dropCheckConstraint(\r\n        tableOrName: Table | string,\r\n        checkOrName: TableCheck | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\r\n            ? checkOrName\r\n            : table.checks.find((c) => c.name === checkOrName)\r\n        if (!checkConstraint)\r\n            throw new TypeORMError(\r\n                `Supplied check constraint was not found in table ${table.name}`,\r\n            )\r\n\r\n        const up = this.dropCheckConstraintSql(table, checkConstraint)\r\n        const down = this.createCheckConstraintSql(table, checkConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.removeCheckConstraint(checkConstraint)\r\n    }\r\n\r\n    /**\r\n     * Drops check constraints.\r\n     */\r\n    async dropCheckConstraints(\r\n        tableOrName: Table | string,\r\n        checkConstraints: TableCheck[],\r\n    ): Promise<void> {\r\n        const promises = checkConstraints.map((checkConstraint) =>\r\n            this.dropCheckConstraint(tableOrName, checkConstraint),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Creates new exclusion constraint.\r\n     */\r\n    async createExclusionConstraint(\r\n        tableOrName: Table | string,\r\n        exclusionConstraint: TableExclusion,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n\r\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\r\n        if (!exclusionConstraint.name)\r\n            exclusionConstraint.name =\r\n                this.connection.namingStrategy.exclusionConstraintName(\r\n                    table,\r\n                    exclusionConstraint.expression!,\r\n                )\r\n\r\n        const up = this.createExclusionConstraintSql(table, exclusionConstraint)\r\n        const down = this.dropExclusionConstraintSql(table, exclusionConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.addExclusionConstraint(exclusionConstraint)\r\n    }\r\n\r\n    /**\r\n     * Creates new exclusion constraints.\r\n     */\r\n    async createExclusionConstraints(\r\n        tableOrName: Table | string,\r\n        exclusionConstraints: TableExclusion[],\r\n    ): Promise<void> {\r\n        const promises = exclusionConstraints.map((exclusionConstraint) =>\r\n            this.createExclusionConstraint(tableOrName, exclusionConstraint),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraint.\r\n     */\r\n    async dropExclusionConstraint(\r\n        tableOrName: Table | string,\r\n        exclusionOrName: TableExclusion | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const exclusionConstraint = InstanceChecker.isTableExclusion(\r\n            exclusionOrName,\r\n        )\r\n            ? exclusionOrName\r\n            : table.exclusions.find((c) => c.name === exclusionOrName)\r\n        if (!exclusionConstraint)\r\n            throw new TypeORMError(\r\n                `Supplied exclusion constraint was not found in table ${table.name}`,\r\n            )\r\n\r\n        const up = this.dropExclusionConstraintSql(table, exclusionConstraint)\r\n        const down = this.createExclusionConstraintSql(\r\n            table,\r\n            exclusionConstraint,\r\n        )\r\n        await this.executeQueries(up, down)\r\n        table.removeExclusionConstraint(exclusionConstraint)\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraints.\r\n     */\r\n    async dropExclusionConstraints(\r\n        tableOrName: Table | string,\r\n        exclusionConstraints: TableExclusion[],\r\n    ): Promise<void> {\r\n        const promises = exclusionConstraints.map((exclusionConstraint) =>\r\n            this.dropExclusionConstraint(tableOrName, exclusionConstraint),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(\r\n        tableOrName: Table | string,\r\n        foreignKey: TableForeignKey,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n\r\n        // new FK may be passed without name. In this case we generate FK name manually.\r\n        if (!foreignKey.name)\r\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\r\n                table,\r\n                foreignKey.columnNames,\r\n                this.getTablePath(foreignKey),\r\n                foreignKey.referencedColumnNames,\r\n            )\r\n\r\n        const up = this.createForeignKeySql(table, foreignKey)\r\n        const down = this.dropForeignKeySql(table, foreignKey)\r\n        await this.executeQueries(up, down)\r\n        table.addForeignKey(foreignKey)\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(\r\n        tableOrName: Table | string,\r\n        foreignKeys: TableForeignKey[],\r\n    ): Promise<void> {\r\n        for (const foreignKey of foreignKeys) {\r\n            await this.createForeignKey(tableOrName, foreignKey)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(\r\n        tableOrName: Table | string,\r\n        foreignKeyOrName: TableForeignKey | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\r\n            ? foreignKeyOrName\r\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\r\n        if (!foreignKey)\r\n            throw new TypeORMError(\r\n                `Supplied foreign key was not found in table ${table.name}`,\r\n            )\r\n\r\n        if (!foreignKey.name) {\r\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\r\n                table,\r\n                foreignKey.columnNames,\r\n                this.getTablePath(foreignKey),\r\n                foreignKey.referencedColumnNames,\r\n            )\r\n        }\r\n\r\n        const up = this.dropForeignKeySql(table, foreignKey)\r\n        const down = this.createForeignKeySql(table, foreignKey)\r\n        await this.executeQueries(up, down)\r\n        table.removeForeignKey(foreignKey)\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(\r\n        tableOrName: Table | string,\r\n        foreignKeys: TableForeignKey[],\r\n    ): Promise<void> {\r\n        for (const foreignKey of foreignKeys) {\r\n            await this.dropForeignKey(tableOrName, foreignKey)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(\r\n        tableOrName: Table | string,\r\n        index: TableIndex,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n\r\n        // new index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name) index.name = this.generateIndexName(table, index)\r\n\r\n        const up = this.createIndexSql(table, index)\r\n        const down = this.dropIndexSql(table, index)\r\n        await this.executeQueries(up, down)\r\n        table.addIndex(index)\r\n    }\r\n\r\n    /**\r\n     * Create a new view index.\r\n     */\r\n    async createViewIndex(\r\n        viewOrName: View | string,\r\n        index: TableIndex,\r\n    ): Promise<void> {\r\n        const view = InstanceChecker.isView(viewOrName)\r\n            ? viewOrName\r\n            : await this.getCachedView(viewOrName)\r\n\r\n        // new index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name) index.name = this.generateIndexName(view, index)\r\n\r\n        const up = this.createViewIndexSql(view, index)\r\n        const down = this.dropIndexSql(view, index)\r\n        await this.executeQueries(up, down)\r\n        view.addIndex(index)\r\n    }\r\n\r\n    /**\r\n     * Creates a new indices\r\n     */\r\n    async createIndices(\r\n        tableOrName: Table | string,\r\n        indices: TableIndex[],\r\n    ): Promise<void> {\r\n        for (const index of indices) {\r\n            await this.createIndex(tableOrName, index)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new view indices\r\n     */\r\n    async createViewIndices(\r\n        viewOrName: View | string,\r\n        indices: TableIndex[],\r\n    ): Promise<void> {\r\n        for (const index of indices) {\r\n            await this.createViewIndex(viewOrName, index)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(\r\n        tableOrName: Table | string,\r\n        indexOrName: TableIndex | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const index = InstanceChecker.isTableIndex(indexOrName)\r\n            ? indexOrName\r\n            : table.indices.find((i) => i.name === indexOrName)\r\n        if (!index)\r\n            throw new TypeORMError(\r\n                `Supplied index ${indexOrName} was not found in table ${table.name}`,\r\n            )\r\n        // old index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name) index.name = this.generateIndexName(table, index)\r\n\r\n        const up = this.dropIndexSql(table, index)\r\n        const down = this.createIndexSql(table, index)\r\n        await this.executeQueries(up, down)\r\n        table.removeIndex(index)\r\n    }\r\n\r\n    /**\r\n     * Drops an index from a view.\r\n     */\r\n    async dropViewIndex(\r\n        viewOrName: View | string,\r\n        indexOrName: TableIndex | string,\r\n    ): Promise<void> {\r\n        const view = InstanceChecker.isView(viewOrName)\r\n            ? viewOrName\r\n            : await this.getCachedView(viewOrName)\r\n        const index = InstanceChecker.isTableIndex(indexOrName)\r\n            ? indexOrName\r\n            : view.indices.find((i) => i.name === indexOrName)\r\n        if (!index)\r\n            throw new TypeORMError(\r\n                `Supplied index ${indexOrName} was not found in view ${view.name}`,\r\n            )\r\n        // old index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name) index.name = this.generateIndexName(view, index)\r\n\r\n        const up = this.dropIndexSql(view, index)\r\n        const down = this.createViewIndexSql(view, index)\r\n        await this.executeQueries(up, down)\r\n        view.removeIndex(index)\r\n    }\r\n\r\n    /**\r\n     * Drops an indices from the table.\r\n     */\r\n    async dropIndices(\r\n        tableOrName: Table | string,\r\n        indices: TableIndex[],\r\n    ): Promise<void> {\r\n        for (const index of indices) {\r\n            await this.dropIndex(tableOrName, index)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears all table contents.\r\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\r\n     */\r\n    async clearTable(tableName: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tableName)}`)\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        const schemas: string[] = []\r\n        this.connection.entityMetadatas\r\n            .filter((metadata) => metadata.schema)\r\n            .forEach((metadata) => {\r\n                const isSchemaExist = !!schemas.find(\r\n                    (schema) => schema === metadata.schema,\r\n                )\r\n                if (!isSchemaExist) schemas.push(metadata.schema!)\r\n            })\r\n        schemas.push(this.driver.options.schema || \"current_schema()\")\r\n        const schemaNamesString = schemas\r\n            .map((name) => {\r\n                return name === \"current_schema()\" ? name : \"'\" + name + \"'\"\r\n            })\r\n            .join(\", \")\r\n\r\n        const isAnotherTransactionActive = this.isTransactionActive\r\n        if (!isAnotherTransactionActive) await this.startTransaction()\r\n        try {\r\n            const version = await this.getVersion()\r\n            // drop views\r\n            const selectViewDropsQuery =\r\n                `SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" ` +\r\n                `FROM \"pg_views\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"viewname\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')`\r\n            const dropViewQueries: ObjectLiteral[] = await this.query(\r\n                selectViewDropsQuery,\r\n            )\r\n            await Promise.all(\r\n                dropViewQueries.map((q) => this.query(q[\"query\"])),\r\n            )\r\n\r\n            // drop materialized views\r\n            // Note: materialized views introduced in Postgres 9.3\r\n            if (VersionUtils.isGreaterOrEqual(version, \"9.3\")) {\r\n                const selectMatViewDropsQuery =\r\n                    `SELECT 'DROP MATERIALIZED VIEW IF EXISTS \"' || schemaname || '\".\"' || matviewname || '\" CASCADE;' as \"query\" ` +\r\n                    `FROM \"pg_matviews\" WHERE \"schemaname\" IN (${schemaNamesString})`\r\n                const dropMatViewQueries: ObjectLiteral[] = await this.query(\r\n                    selectMatViewDropsQuery,\r\n                )\r\n                await Promise.all(\r\n                    dropMatViewQueries.map((q) => this.query(q[\"query\"])),\r\n                )\r\n            }\r\n\r\n            // ignore spatial_ref_sys; it's a special table supporting PostGIS\r\n            // TODO generalize this as this.driver.ignoreTables\r\n\r\n            // drop tables\r\n            const selectTableDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as \"query\" FROM \"pg_tables\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"tablename\" NOT IN ('spatial_ref_sys')`\r\n            const dropTableQueries: ObjectLiteral[] = await this.query(\r\n                selectTableDropsQuery,\r\n            )\r\n            await Promise.all(\r\n                dropTableQueries.map((q) => this.query(q[\"query\"])),\r\n            )\r\n\r\n            // drop enum types\r\n            await this.dropEnumTypes(schemaNamesString)\r\n\r\n            if (!isAnotherTransactionActive) {\r\n                await this.commitTransaction()\r\n            }\r\n        } catch (error) {\r\n            try {\r\n                // we throw original error even if rollback thrown an error\r\n                if (!isAnotherTransactionActive) {\r\n                    await this.rollbackTransaction()\r\n                }\r\n            } catch (rollbackError) {}\r\n            throw error\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected async loadViews(viewNames?: string[]): Promise<View[]> {\r\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\r\n\r\n        if (!hasTable) return []\r\n\r\n        if (!viewNames) {\r\n            viewNames = []\r\n        }\r\n\r\n        const currentDatabase = await this.getCurrentDatabase()\r\n        const currentSchema = await this.getCurrentSchema()\r\n        const viewsCondition =\r\n            viewNames.length === 0\r\n                ? \"1=1\"\r\n                : viewNames\r\n                      .map((tableName) => this.driver.parseTableName(tableName))\r\n                      .map(({ schema, tableName }) => {\r\n                          if (!schema) {\r\n                              schema =\r\n                                  this.driver.options.schema || currentSchema\r\n                          }\r\n\r\n                          return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${tableName}')`\r\n                      })\r\n                      .join(\" OR \")\r\n\r\n        const constraintsCondition =\r\n            viewNames.length === 0\r\n                ? \"1=1\"\r\n                : viewNames\r\n                      .map((tableName) => this.driver.parseTableName(tableName))\r\n                      .map(({ schema, tableName }) => {\r\n                          if (!schema) {\r\n                              schema =\r\n                                  this.driver.options.schema || currentSchema\r\n                          }\r\n\r\n                          return `(\"ns\".\"nspname\" = '${schema}' AND \"t\".\"relname\" = '${tableName}')`\r\n                      })\r\n                      .join(\" OR \")\r\n\r\n        const indicesSql =\r\n            `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", ` +\r\n            `CASE \"ix\".\"indisunique\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \"is_unique\", pg_get_expr(\"ix\".\"indpred\", \"ix\".\"indrelid\") AS \"condition\", ` +\r\n            `\"types\".\"typname\" AS \"type_name\" ` +\r\n            `FROM \"pg_class\" \"t\" ` +\r\n            `INNER JOIN \"pg_index\" \"ix\" ON \"ix\".\"indrelid\" = \"t\".\"oid\" ` +\r\n            `INNER JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"t\".\"oid\"  AND \"a\".\"attnum\" = ANY (\"ix\".\"indkey\") ` +\r\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"t\".\"relnamespace\" ` +\r\n            `INNER JOIN \"pg_class\" \"i\" ON \"i\".\"oid\" = \"ix\".\"indexrelid\" ` +\r\n            `INNER JOIN \"pg_type\" \"types\" ON \"types\".\"oid\" = \"a\".\"atttypid\" ` +\r\n            `LEFT JOIN \"pg_constraint\" \"cnst\" ON \"cnst\".\"conname\" = \"i\".\"relname\" ` +\r\n            `WHERE \"t\".\"relkind\" IN ('m') AND \"cnst\".\"contype\" IS NULL AND (${constraintsCondition})`\r\n\r\n        const query =\r\n            `SELECT \"t\".* FROM ${this.escapePath(\r\n                this.getTypeormMetadataTableName(),\r\n            )} \"t\" ` +\r\n            `INNER JOIN \"pg_catalog\".\"pg_class\" \"c\" ON \"c\".\"relname\" = \"t\".\"name\" ` +\r\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"c\".\"relnamespace\" AND \"n\".\"nspname\" = \"t\".\"schema\" ` +\r\n            `WHERE \"t\".\"type\" IN ('${MetadataTableType.VIEW}', '${\r\n                MetadataTableType.MATERIALIZED_VIEW\r\n            }') ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`\r\n\r\n        const dbViews = await this.query(query)\r\n        const dbIndices: ObjectLiteral[] = await this.query(indicesSql)\r\n        return dbViews.map((dbView: any) => {\r\n            // find index constraints of table, group them by constraint name and build TableIndex.\r\n            const tableIndexConstraints = OrmUtils.uniq(\r\n                dbIndices.filter((dbIndex) => {\r\n                    return (\r\n                        dbIndex[\"table_name\"] === dbView[\"name\"] &&\r\n                        dbIndex[\"table_schema\"] === dbView[\"schema\"]\r\n                    )\r\n                }),\r\n                (dbIndex) => dbIndex[\"constraint_name\"],\r\n            )\r\n            const view = new View()\r\n            const schema =\r\n                dbView[\"schema\"] === currentSchema &&\r\n                !this.driver.options.schema\r\n                    ? undefined\r\n                    : dbView[\"schema\"]\r\n            view.database = currentDatabase\r\n            view.schema = dbView[\"schema\"]\r\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema)\r\n            view.expression = dbView[\"value\"]\r\n            view.materialized =\r\n                dbView[\"type\"] === MetadataTableType.MATERIALIZED_VIEW\r\n            view.indices = tableIndexConstraints.map((constraint) => {\r\n                const indices = dbIndices.filter((index) => {\r\n                    return (\r\n                        index[\"table_schema\"] === constraint[\"table_schema\"] &&\r\n                        index[\"table_name\"] === constraint[\"table_name\"] &&\r\n                        index[\"constraint_name\"] ===\r\n                            constraint[\"constraint_name\"]\r\n                    )\r\n                })\r\n                return new TableIndex(<TableIndexOptions>{\r\n                    view: view,\r\n                    name: constraint[\"constraint_name\"],\r\n                    columnNames: indices.map((i) => i[\"column_name\"]),\r\n                    isUnique: constraint[\"is_unique\"] === \"TRUE\",\r\n                    where: constraint[\"condition\"],\r\n                    isFulltext: false,\r\n                })\r\n            })\r\n            return view\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\r\n        // if no tables given then no need to proceed\r\n        if (tableNames && tableNames.length === 0) {\r\n            return []\r\n        }\r\n\r\n        const currentSchema = await this.getCurrentSchema()\r\n        const currentDatabase = await this.getCurrentDatabase()\r\n\r\n        const dbTables: {\r\n            table_schema: string\r\n            table_name: string\r\n            table_comment: string\r\n        }[] = []\r\n\r\n        if (!tableNames) {\r\n            const tablesSql = `SELECT \"table_schema\", \"table_name\", obj_description(('\"' || \"table_schema\" || '\".\"' || \"table_name\" || '\"')::regclass, 'pg_class') AS table_comment FROM \"information_schema\".\"tables\"`\r\n            dbTables.push(...(await this.query(tablesSql)))\r\n        } else {\r\n            const tablesCondition = tableNames\r\n                .map((tableName) => this.driver.parseTableName(tableName))\r\n                .map(({ schema, tableName }) => {\r\n                    return `(\"table_schema\" = '${\r\n                        schema || currentSchema\r\n                    }' AND \"table_name\" = '${tableName}')`\r\n                })\r\n                .join(\" OR \")\r\n\r\n            const tablesSql =\r\n                `SELECT \"table_schema\", \"table_name\", obj_description(('\"' || \"table_schema\" || '\".\"' || \"table_name\" || '\"')::regclass, 'pg_class') AS table_comment FROM \"information_schema\".\"tables\" WHERE ` +\r\n                tablesCondition\r\n            dbTables.push(...(await this.query(tablesSql)))\r\n        }\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (dbTables.length === 0) {\r\n            return []\r\n        }\r\n\r\n        /**\r\n         * Uses standard SQL information_schema.columns table and postgres-specific\r\n         * pg_catalog.pg_attribute table to get column information.\r\n         * @see https://stackoverflow.com/a/19541865\r\n         */\r\n        const columnsCondition = dbTables\r\n            .map(({ table_schema, table_name }) => {\r\n                return `(\"table_schema\" = '${table_schema}' AND \"table_name\" = '${table_name}')`\r\n            })\r\n            .join(\" OR \")\r\n        const columnsSql =\r\n            `SELECT columns.*, pg_catalog.col_description(('\"' || table_catalog || '\".\"' || table_schema || '\".\"' || table_name || '\"')::regclass::oid, ordinal_position) AS description, ` +\r\n            `('\"' || \"udt_schema\" || '\".\"' || \"udt_name\" || '\"')::\"regtype\" AS \"regtype\", pg_catalog.format_type(\"col_attr\".\"atttypid\", \"col_attr\".\"atttypmod\") AS \"format_type\" ` +\r\n            `FROM \"information_schema\".\"columns\" ` +\r\n            `LEFT JOIN \"pg_catalog\".\"pg_attribute\" AS \"col_attr\" ON \"col_attr\".\"attname\" = \"columns\".\"column_name\" ` +\r\n            `AND \"col_attr\".\"attrelid\" = ( ` +\r\n            `SELECT \"cls\".\"oid\" FROM \"pg_catalog\".\"pg_class\" AS \"cls\" ` +\r\n            `LEFT JOIN \"pg_catalog\".\"pg_namespace\" AS \"ns\" ON \"ns\".\"oid\" = \"cls\".\"relnamespace\" ` +\r\n            `WHERE \"cls\".\"relname\" = \"columns\".\"table_name\" ` +\r\n            `AND \"ns\".\"nspname\" = \"columns\".\"table_schema\" ` +\r\n            `) ` +\r\n            `WHERE ` +\r\n            columnsCondition\r\n\r\n        const constraintsCondition = dbTables\r\n            .map(({ table_schema, table_name }) => {\r\n                return `(\"ns\".\"nspname\" = '${table_schema}' AND \"t\".\"relname\" = '${table_name}')`\r\n            })\r\n            .join(\" OR \")\r\n\r\n        const constraintsSql =\r\n            `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", ` +\r\n            `pg_get_constraintdef(\"cnst\".\"oid\") AS \"expression\", ` +\r\n            `CASE \"cnst\".\"contype\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \"constraint_type\", \"a\".\"attname\" AS \"column_name\" ` +\r\n            `FROM \"pg_constraint\" \"cnst\" ` +\r\n            `INNER JOIN \"pg_class\" \"t\" ON \"t\".\"oid\" = \"cnst\".\"conrelid\" ` +\r\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"cnst\".\"connamespace\" ` +\r\n            `LEFT JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"cnst\".\"conrelid\" AND \"a\".\"attnum\" = ANY (\"cnst\".\"conkey\") ` +\r\n            `WHERE \"t\".\"relkind\" IN ('r', 'p') AND (${constraintsCondition})`\r\n\r\n        const indicesSql =\r\n            `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", ` +\r\n            `CASE \"ix\".\"indisunique\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \"is_unique\", pg_get_expr(\"ix\".\"indpred\", \"ix\".\"indrelid\") AS \"condition\", ` +\r\n            `\"types\".\"typname\" AS \"type_name\", \"am\".\"amname\" AS \"index_type\" ` +\r\n            `FROM \"pg_class\" \"t\" ` +\r\n            `INNER JOIN \"pg_index\" \"ix\" ON \"ix\".\"indrelid\" = \"t\".\"oid\" ` +\r\n            `INNER JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"t\".\"oid\"  AND \"a\".\"attnum\" = ANY (\"ix\".\"indkey\") ` +\r\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"t\".\"relnamespace\" ` +\r\n            `INNER JOIN \"pg_class\" \"i\" ON \"i\".\"oid\" = \"ix\".\"indexrelid\" ` +\r\n            `INNER JOIN \"pg_type\" \"types\" ON \"types\".\"oid\" = \"a\".\"atttypid\" ` +\r\n            `INNER JOIN \"pg_am\" \"am\" ON \"i\".\"relam\" = \"am\".\"oid\" ` +\r\n            `LEFT JOIN \"pg_constraint\" \"cnst\" ON \"cnst\".\"conname\" = \"i\".\"relname\" ` +\r\n            `WHERE \"t\".\"relkind\" IN ('r', 'p') AND \"cnst\".\"contype\" IS NULL AND (${constraintsCondition})`\r\n\r\n        const foreignKeysCondition = dbTables\r\n            .map(({ table_schema, table_name }) => {\r\n                return `(\"ns\".\"nspname\" = '${table_schema}' AND \"cl\".\"relname\" = '${table_name}')`\r\n            })\r\n            .join(\" OR \")\r\n\r\n        const hasRelispartitionColumn =\r\n            await this.hasSupportForPartitionedTables()\r\n        const isPartitionCondition = hasRelispartitionColumn\r\n            ? ` AND \"cl\".\"relispartition\" = 'f'`\r\n            : \"\"\r\n\r\n        const foreignKeysSql =\r\n            `SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", ` +\r\n            `\"ns\".\"nspname\" AS \"referenced_table_schema\", \"cl\".\"relname\" AS \"referenced_table_name\", \"att\".\"attname\" AS \"referenced_column_name\", \"con\".\"confdeltype\" AS \"on_delete\", ` +\r\n            `\"con\".\"confupdtype\" AS \"on_update\", \"con\".\"condeferrable\" AS \"deferrable\", \"con\".\"condeferred\" AS \"deferred\" ` +\r\n            `FROM ( ` +\r\n            `SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", ` +\r\n            `\"cl\".\"relname\", \"con1\".\"condeferrable\", ` +\r\n            `CASE WHEN \"con1\".\"condeferred\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, ` +\r\n            `CASE \"con1\".\"confdeltype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confdeltype\", ` +\r\n            `CASE \"con1\".\"confupdtype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confupdtype\" ` +\r\n            `FROM \"pg_class\" \"cl\" ` +\r\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\r\n            `INNER JOIN \"pg_constraint\" \"con1\" ON \"con1\".\"conrelid\" = \"cl\".\"oid\" ` +\r\n            `WHERE \"con1\".\"contype\" = 'f' AND (${foreignKeysCondition}) ` +\r\n            `) \"con\" ` +\r\n            `INNER JOIN \"pg_attribute\" \"att\" ON \"att\".\"attrelid\" = \"con\".\"confrelid\" AND \"att\".\"attnum\" = \"con\".\"child\" ` +\r\n            `INNER JOIN \"pg_class\" \"cl\" ON \"cl\".\"oid\" = \"con\".\"confrelid\" ${isPartitionCondition}` +\r\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\r\n            `INNER JOIN \"pg_attribute\" \"att2\" ON \"att2\".\"attrelid\" = \"con\".\"conrelid\" AND \"att2\".\"attnum\" = \"con\".\"parent\"`\r\n\r\n        const [\r\n            dbColumns,\r\n            dbConstraints,\r\n            dbIndices,\r\n            dbForeignKeys,\r\n        ]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(columnsSql),\r\n            this.query(constraintsSql),\r\n            this.query(indicesSql),\r\n            this.query(foreignKeysSql),\r\n        ])\r\n\r\n        // create tables for loaded tables\r\n        return Promise.all(\r\n            dbTables.map(async (dbTable) => {\r\n                const table = new Table()\r\n\r\n                const getSchemaFromKey = (dbObject: any, key: string) => {\r\n                    return dbObject[key] === currentSchema &&\r\n                        (!this.driver.options.schema ||\r\n                            this.driver.options.schema === currentSchema)\r\n                        ? undefined\r\n                        : dbObject[key]\r\n                }\r\n                // We do not need to join schema name, when database is by default.\r\n                const schema = getSchemaFromKey(dbTable, \"table_schema\")\r\n                table.database = currentDatabase\r\n                table.schema = dbTable[\"table_schema\"]\r\n                table.comment = dbTable[\"table_comment\"]\r\n                table.name = this.driver.buildTableName(\r\n                    dbTable[\"table_name\"],\r\n                    schema,\r\n                )\r\n\r\n                // create columns from the loaded columns\r\n                table.columns = await Promise.all(\r\n                    dbColumns\r\n                        .filter(\r\n                            (dbColumn) =>\r\n                                dbColumn[\"table_name\"] ===\r\n                                    dbTable[\"table_name\"] &&\r\n                                dbColumn[\"table_schema\"] ===\r\n                                    dbTable[\"table_schema\"],\r\n                        )\r\n                        .map(async (dbColumn) => {\r\n                            const columnConstraints = dbConstraints.filter(\r\n                                (dbConstraint) => {\r\n                                    return (\r\n                                        dbConstraint[\"table_name\"] ===\r\n                                            dbColumn[\"table_name\"] &&\r\n                                        dbConstraint[\"table_schema\"] ===\r\n                                            dbColumn[\"table_schema\"] &&\r\n                                        dbConstraint[\"column_name\"] ===\r\n                                            dbColumn[\"column_name\"]\r\n                                    )\r\n                                },\r\n                            )\r\n\r\n                            const tableColumn = new TableColumn()\r\n                            tableColumn.name = dbColumn[\"column_name\"]\r\n                            tableColumn.type = dbColumn[\"regtype\"].toLowerCase()\r\n\r\n                            if (\r\n                                tableColumn.type === \"numeric\" ||\r\n                                tableColumn.type === \"numeric[]\" ||\r\n                                tableColumn.type === \"decimal\" ||\r\n                                tableColumn.type === \"float\"\r\n                            ) {\r\n                                let numericPrecision =\r\n                                    dbColumn[\"numeric_precision\"]\r\n                                let numericScale = dbColumn[\"numeric_scale\"]\r\n                                if (dbColumn[\"data_type\"] === \"ARRAY\") {\r\n                                    const numericSize = dbColumn[\r\n                                        \"format_type\"\r\n                                    ].match(\r\n                                        /^numeric\\(([0-9]+),([0-9]+)\\)\\[\\]$/,\r\n                                    )\r\n                                    if (numericSize) {\r\n                                        numericPrecision = +numericSize[1]\r\n                                        numericScale = +numericSize[2]\r\n                                    }\r\n                                }\r\n                                // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\r\n                                // we set 'undefined' in to unspecified property to avoid changing column on sync\r\n                                if (\r\n                                    numericPrecision !== null &&\r\n                                    !this.isDefaultColumnPrecision(\r\n                                        table,\r\n                                        tableColumn,\r\n                                        numericPrecision,\r\n                                    )\r\n                                ) {\r\n                                    tableColumn.precision = numericPrecision\r\n                                } else if (\r\n                                    numericScale !== null &&\r\n                                    !this.isDefaultColumnScale(\r\n                                        table,\r\n                                        tableColumn,\r\n                                        numericScale,\r\n                                    )\r\n                                ) {\r\n                                    tableColumn.precision = undefined\r\n                                }\r\n                                if (\r\n                                    numericScale !== null &&\r\n                                    !this.isDefaultColumnScale(\r\n                                        table,\r\n                                        tableColumn,\r\n                                        numericScale,\r\n                                    )\r\n                                ) {\r\n                                    tableColumn.scale = numericScale\r\n                                } else if (\r\n                                    numericPrecision !== null &&\r\n                                    !this.isDefaultColumnPrecision(\r\n                                        table,\r\n                                        tableColumn,\r\n                                        numericPrecision,\r\n                                    )\r\n                                ) {\r\n                                    tableColumn.scale = undefined\r\n                                }\r\n                            }\r\n\r\n                            if (\r\n                                tableColumn.type === \"interval\" ||\r\n                                tableColumn.type === \"time without time zone\" ||\r\n                                tableColumn.type === \"time with time zone\" ||\r\n                                tableColumn.type ===\r\n                                    \"timestamp without time zone\" ||\r\n                                tableColumn.type === \"timestamp with time zone\"\r\n                            ) {\r\n                                tableColumn.precision =\r\n                                    !this.isDefaultColumnPrecision(\r\n                                        table,\r\n                                        tableColumn,\r\n                                        dbColumn[\"datetime_precision\"],\r\n                                    )\r\n                                        ? dbColumn[\"datetime_precision\"]\r\n                                        : undefined\r\n                            }\r\n\r\n                            // check if column has user-defined data type.\r\n                            // NOTE: if ENUM type defined with \"array:true\" it comes with ARRAY type instead of USER-DEFINED\r\n                            if (\r\n                                dbColumn[\"data_type\"] === \"USER-DEFINED\" ||\r\n                                dbColumn[\"data_type\"] === \"ARRAY\"\r\n                            ) {\r\n                                const { name } =\r\n                                    await this.getUserDefinedTypeName(\r\n                                        table,\r\n                                        tableColumn,\r\n                                    )\r\n\r\n                                // check if `enumName` is specified by user\r\n                                const builtEnumName = this.buildEnumName(\r\n                                    table,\r\n                                    tableColumn,\r\n                                    false,\r\n                                    true,\r\n                                )\r\n                                const enumName =\r\n                                    builtEnumName !== name ? name : undefined\r\n\r\n                                // check if type is ENUM\r\n                                const sql =\r\n                                    `SELECT \"e\".\"enumlabel\" AS \"value\" FROM \"pg_enum\" \"e\" ` +\r\n                                    `INNER JOIN \"pg_type\" \"t\" ON \"t\".\"oid\" = \"e\".\"enumtypid\" ` +\r\n                                    `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\r\n                                    `WHERE \"n\".\"nspname\" = '${\r\n                                        dbTable[\"table_schema\"]\r\n                                    }' AND \"t\".\"typname\" = '${\r\n                                        enumName || name\r\n                                    }'`\r\n                                const results: ObjectLiteral[] =\r\n                                    await this.query(sql)\r\n\r\n                                if (results.length) {\r\n                                    tableColumn.type = \"enum\"\r\n                                    tableColumn.enum = results.map(\r\n                                        (result) => result[\"value\"],\r\n                                    )\r\n                                    tableColumn.enumName = enumName\r\n                                }\r\n\r\n                                if (dbColumn[\"data_type\"] === \"ARRAY\") {\r\n                                    tableColumn.isArray = true\r\n                                    const type = tableColumn.type.replace(\r\n                                        \"[]\",\r\n                                        \"\",\r\n                                    )\r\n                                    tableColumn.type =\r\n                                        this.connection.driver.normalizeType({\r\n                                            type: type,\r\n                                        })\r\n                                }\r\n                            }\r\n\r\n                            if (\r\n                                tableColumn.type === \"geometry\" ||\r\n                                tableColumn.type === \"geography\"\r\n                            ) {\r\n                                const sql =\r\n                                    `SELECT * FROM (` +\r\n                                    `SELECT \"f_table_schema\" \"table_schema\", \"f_table_name\" \"table_name\", ` +\r\n                                    `\"f_${tableColumn.type}_column\" \"column_name\", \"srid\", \"type\" ` +\r\n                                    `FROM \"${tableColumn.type}_columns\"` +\r\n                                    `) AS _ ` +\r\n                                    `WHERE \"column_name\" = '${dbColumn[\"column_name\"]}' AND ` +\r\n                                    `\"table_schema\" = '${dbColumn[\"table_schema\"]}' AND ` +\r\n                                    `\"table_name\" = '${dbColumn[\"table_name\"]}'`\r\n\r\n                                const results: ObjectLiteral[] =\r\n                                    await this.query(sql)\r\n\r\n                                if (results.length > 0) {\r\n                                    tableColumn.spatialFeatureType =\r\n                                        results[0].type\r\n                                    tableColumn.srid = results[0].srid\r\n                                }\r\n                            }\r\n\r\n                            // check only columns that have length property\r\n                            if (\r\n                                this.driver.withLengthColumnTypes.indexOf(\r\n                                    tableColumn.type as ColumnType,\r\n                                ) !== -1\r\n                            ) {\r\n                                let length\r\n                                if (tableColumn.isArray) {\r\n                                    const match = /\\((\\d+)\\)/.exec(\r\n                                        dbColumn[\"format_type\"],\r\n                                    )\r\n                                    length = match ? match[1] : undefined\r\n                                } else if (\r\n                                    dbColumn[\"character_maximum_length\"]\r\n                                ) {\r\n                                    length =\r\n                                        dbColumn[\r\n                                            \"character_maximum_length\"\r\n                                        ].toString()\r\n                                }\r\n                                if (length) {\r\n                                    tableColumn.length =\r\n                                        !this.isDefaultColumnLength(\r\n                                            table,\r\n                                            tableColumn,\r\n                                            length,\r\n                                        )\r\n                                            ? length\r\n                                            : \"\"\r\n                                }\r\n                            }\r\n                            tableColumn.isNullable =\r\n                                dbColumn[\"is_nullable\"] === \"YES\"\r\n\r\n                            const primaryConstraint = columnConstraints.find(\r\n                                (constraint) =>\r\n                                    constraint[\"constraint_type\"] === \"PRIMARY\",\r\n                            )\r\n                            if (primaryConstraint) {\r\n                                tableColumn.isPrimary = true\r\n                                // find another columns involved in primary key constraint\r\n                                const anotherPrimaryConstraints =\r\n                                    dbConstraints.filter(\r\n                                        (constraint) =>\r\n                                            constraint[\"table_name\"] ===\r\n                                                dbColumn[\"table_name\"] &&\r\n                                            constraint[\"table_schema\"] ===\r\n                                                dbColumn[\"table_schema\"] &&\r\n                                            constraint[\"column_name\"] !==\r\n                                                dbColumn[\"column_name\"] &&\r\n                                            constraint[\"constraint_type\"] ===\r\n                                                \"PRIMARY\",\r\n                                    )\r\n\r\n                                // collect all column names\r\n                                const columnNames =\r\n                                    anotherPrimaryConstraints.map(\r\n                                        (constraint) =>\r\n                                            constraint[\"column_name\"],\r\n                                    )\r\n                                columnNames.push(dbColumn[\"column_name\"])\r\n\r\n                                // build default primary key constraint name\r\n                                const pkName =\r\n                                    this.connection.namingStrategy.primaryKeyName(\r\n                                        table,\r\n                                        columnNames,\r\n                                    )\r\n\r\n                                // if primary key has user-defined constraint name, write it in table column\r\n                                if (\r\n                                    primaryConstraint[\"constraint_name\"] !==\r\n                                    pkName\r\n                                ) {\r\n                                    tableColumn.primaryKeyConstraintName =\r\n                                        primaryConstraint[\"constraint_name\"]\r\n                                }\r\n                            }\r\n\r\n                            const uniqueConstraints = columnConstraints.filter(\r\n                                (constraint) =>\r\n                                    constraint[\"constraint_type\"] === \"UNIQUE\",\r\n                            )\r\n                            const isConstraintComposite =\r\n                                uniqueConstraints.every((uniqueConstraint) => {\r\n                                    return dbConstraints.some(\r\n                                        (dbConstraint) =>\r\n                                            dbConstraint[\"constraint_type\"] ===\r\n                                                \"UNIQUE\" &&\r\n                                            dbConstraint[\"constraint_name\"] ===\r\n                                                uniqueConstraint[\r\n                                                    \"constraint_name\"\r\n                                                ] &&\r\n                                            dbConstraint[\"column_name\"] !==\r\n                                                dbColumn[\"column_name\"],\r\n                                    )\r\n                                })\r\n                            tableColumn.isUnique =\r\n                                uniqueConstraints.length > 0 &&\r\n                                !isConstraintComposite\r\n\r\n                            if (dbColumn.is_identity === \"YES\") {\r\n                                // Postgres 10+ Identity column\r\n                                tableColumn.isGenerated = true\r\n                                tableColumn.generationStrategy = \"identity\"\r\n                                tableColumn.generatedIdentity =\r\n                                    dbColumn.identity_generation\r\n                            } else if (\r\n                                dbColumn[\"column_default\"] !== null &&\r\n                                dbColumn[\"column_default\"] !== undefined\r\n                            ) {\r\n                                const serialDefaultName = `nextval('${this.buildSequenceName(\r\n                                    table,\r\n                                    dbColumn[\"column_name\"],\r\n                                )}'::regclass)`\r\n                                const serialDefaultPath = `nextval('${this.buildSequencePath(\r\n                                    table,\r\n                                    dbColumn[\"column_name\"],\r\n                                )}'::regclass)`\r\n\r\n                                const defaultWithoutQuotes = dbColumn[\r\n                                    \"column_default\"\r\n                                ].replace(/\"/g, \"\")\r\n\r\n                                if (\r\n                                    defaultWithoutQuotes ===\r\n                                        serialDefaultName ||\r\n                                    defaultWithoutQuotes === serialDefaultPath\r\n                                ) {\r\n                                    tableColumn.isGenerated = true\r\n                                    tableColumn.generationStrategy = \"increment\"\r\n                                } else if (\r\n                                    dbColumn[\"column_default\"] ===\r\n                                        \"gen_random_uuid()\" ||\r\n                                    /^uuid_generate_v\\d\\(\\)/.test(\r\n                                        dbColumn[\"column_default\"],\r\n                                    )\r\n                                ) {\r\n                                    if (tableColumn.type === \"uuid\") {\r\n                                        tableColumn.isGenerated = true\r\n                                        tableColumn.generationStrategy = \"uuid\"\r\n                                    } else {\r\n                                        tableColumn.default =\r\n                                            dbColumn[\"column_default\"]\r\n                                    }\r\n                                } else if (\r\n                                    dbColumn[\"column_default\"] === \"now()\" ||\r\n                                    dbColumn[\"column_default\"].indexOf(\r\n                                        \"'now'::text\",\r\n                                    ) !== -1\r\n                                ) {\r\n                                    tableColumn.default =\r\n                                        dbColumn[\"column_default\"]\r\n                                } else {\r\n                                    tableColumn.default = dbColumn[\r\n                                        \"column_default\"\r\n                                    ].replace(/::[\\w\\s.[\\]\\-\"]+/g, \"\")\r\n                                    tableColumn.default =\r\n                                        tableColumn.default.replace(\r\n                                            /^(-?\\d+)$/,\r\n                                            \"'$1'\",\r\n                                        )\r\n                                }\r\n                            }\r\n\r\n                            if (\r\n                                dbColumn[\"is_generated\"] === \"ALWAYS\" &&\r\n                                dbColumn[\"generation_expression\"]\r\n                            ) {\r\n                                // In postgres there is no VIRTUAL generated column type\r\n                                tableColumn.generatedType = \"STORED\"\r\n                                // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\r\n                                const asExpressionQuery =\r\n                                    this.selectTypeormMetadataSql({\r\n                                        database: currentDatabase,\r\n                                        schema: dbTable[\"table_schema\"],\r\n                                        table: dbTable[\"table_name\"],\r\n                                        type: MetadataTableType.GENERATED_COLUMN,\r\n                                        name: tableColumn.name,\r\n                                    })\r\n\r\n                                const results = await this.query(\r\n                                    asExpressionQuery.query,\r\n                                    asExpressionQuery.parameters,\r\n                                )\r\n                                if (results[0] && results[0].value) {\r\n                                    tableColumn.asExpression = results[0].value\r\n                                } else {\r\n                                    tableColumn.asExpression = \"\"\r\n                                }\r\n                            }\r\n\r\n                            tableColumn.comment = dbColumn[\"description\"]\r\n                                ? dbColumn[\"description\"]\r\n                                : undefined\r\n                            if (dbColumn[\"character_set_name\"])\r\n                                tableColumn.charset =\r\n                                    dbColumn[\"character_set_name\"]\r\n                            if (dbColumn[\"collation_name\"])\r\n                                tableColumn.collation =\r\n                                    dbColumn[\"collation_name\"]\r\n                            return tableColumn\r\n                        }),\r\n                )\r\n\r\n                // find unique constraints of table, group them by constraint name and build TableUnique.\r\n                const tableUniqueConstraints = OrmUtils.uniq(\r\n                    dbConstraints.filter((dbConstraint) => {\r\n                        return (\r\n                            dbConstraint[\"table_name\"] ===\r\n                                dbTable[\"table_name\"] &&\r\n                            dbConstraint[\"table_schema\"] ===\r\n                                dbTable[\"table_schema\"] &&\r\n                            dbConstraint[\"constraint_type\"] === \"UNIQUE\"\r\n                        )\r\n                    }),\r\n                    (dbConstraint) => dbConstraint[\"constraint_name\"],\r\n                )\r\n\r\n                table.uniques = tableUniqueConstraints.map((constraint) => {\r\n                    const uniques = dbConstraints.filter(\r\n                        (dbC) =>\r\n                            dbC[\"constraint_name\"] ===\r\n                            constraint[\"constraint_name\"],\r\n                    )\r\n                    return new TableUnique({\r\n                        name: constraint[\"constraint_name\"],\r\n                        columnNames: uniques.map((u) => u[\"column_name\"]),\r\n                        deferrable: constraint[\"deferrable\"]\r\n                            ? constraint[\"deferred\"]\r\n                            : undefined,\r\n                    })\r\n                })\r\n\r\n                // find check constraints of table, group them by constraint name and build TableCheck.\r\n                const tableCheckConstraints = OrmUtils.uniq(\r\n                    dbConstraints.filter((dbConstraint) => {\r\n                        return (\r\n                            dbConstraint[\"table_name\"] ===\r\n                                dbTable[\"table_name\"] &&\r\n                            dbConstraint[\"table_schema\"] ===\r\n                                dbTable[\"table_schema\"] &&\r\n                            dbConstraint[\"constraint_type\"] === \"CHECK\"\r\n                        )\r\n                    }),\r\n                    (dbConstraint) => dbConstraint[\"constraint_name\"],\r\n                )\r\n\r\n                table.checks = tableCheckConstraints.map((constraint) => {\r\n                    const checks = dbConstraints.filter(\r\n                        (dbC) =>\r\n                            dbC[\"constraint_name\"] ===\r\n                            constraint[\"constraint_name\"],\r\n                    )\r\n                    return new TableCheck({\r\n                        name: constraint[\"constraint_name\"],\r\n                        columnNames: checks.map((c) => c[\"column_name\"]),\r\n                        expression: constraint[\"expression\"].replace(\r\n                            /^\\s*CHECK\\s*\\((.*)\\)\\s*$/i,\r\n                            \"$1\",\r\n                        ),\r\n                    })\r\n                })\r\n\r\n                // find exclusion constraints of table, group them by constraint name and build TableExclusion.\r\n                const tableExclusionConstraints = OrmUtils.uniq(\r\n                    dbConstraints.filter((dbConstraint) => {\r\n                        return (\r\n                            dbConstraint[\"table_name\"] ===\r\n                                dbTable[\"table_name\"] &&\r\n                            dbConstraint[\"table_schema\"] ===\r\n                                dbTable[\"table_schema\"] &&\r\n                            dbConstraint[\"constraint_type\"] === \"EXCLUDE\"\r\n                        )\r\n                    }),\r\n                    (dbConstraint) => dbConstraint[\"constraint_name\"],\r\n                )\r\n\r\n                table.exclusions = tableExclusionConstraints.map(\r\n                    (constraint) => {\r\n                        return new TableExclusion({\r\n                            name: constraint[\"constraint_name\"],\r\n                            expression: constraint[\"expression\"].substring(8), // trim EXCLUDE from start of expression\r\n                        })\r\n                    },\r\n                )\r\n\r\n                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\r\n                const tableForeignKeyConstraints = OrmUtils.uniq(\r\n                    dbForeignKeys.filter((dbForeignKey) => {\r\n                        return (\r\n                            dbForeignKey[\"table_name\"] ===\r\n                                dbTable[\"table_name\"] &&\r\n                            dbForeignKey[\"table_schema\"] ===\r\n                                dbTable[\"table_schema\"]\r\n                        )\r\n                    }),\r\n                    (dbForeignKey) => dbForeignKey[\"constraint_name\"],\r\n                )\r\n\r\n                table.foreignKeys = tableForeignKeyConstraints.map(\r\n                    (dbForeignKey) => {\r\n                        const foreignKeys = dbForeignKeys.filter(\r\n                            (dbFk) =>\r\n                                dbFk[\"constraint_name\"] ===\r\n                                dbForeignKey[\"constraint_name\"],\r\n                        )\r\n\r\n                        // if referenced table located in currently used schema, we don't need to concat schema name to table name.\r\n                        const schema = getSchemaFromKey(\r\n                            dbForeignKey,\r\n                            \"referenced_table_schema\",\r\n                        )\r\n                        const referencedTableName = this.driver.buildTableName(\r\n                            dbForeignKey[\"referenced_table_name\"],\r\n                            schema,\r\n                        )\r\n\r\n                        return new TableForeignKey({\r\n                            name: dbForeignKey[\"constraint_name\"],\r\n                            columnNames: foreignKeys.map(\r\n                                (dbFk) => dbFk[\"column_name\"],\r\n                            ),\r\n                            referencedSchema:\r\n                                dbForeignKey[\"referenced_table_schema\"],\r\n                            referencedTableName: referencedTableName,\r\n                            referencedColumnNames: foreignKeys.map(\r\n                                (dbFk) => dbFk[\"referenced_column_name\"],\r\n                            ),\r\n                            onDelete: dbForeignKey[\"on_delete\"],\r\n                            onUpdate: dbForeignKey[\"on_update\"],\r\n                            deferrable: dbForeignKey[\"deferrable\"]\r\n                                ? dbForeignKey[\"deferred\"]\r\n                                : undefined,\r\n                        })\r\n                    },\r\n                )\r\n\r\n                // find index constraints of table, group them by constraint name and build TableIndex.\r\n                const tableIndexConstraints = OrmUtils.uniq(\r\n                    dbIndices.filter((dbIndex) => {\r\n                        return (\r\n                            dbIndex[\"table_name\"] === dbTable[\"table_name\"] &&\r\n                            dbIndex[\"table_schema\"] === dbTable[\"table_schema\"]\r\n                        )\r\n                    }),\r\n                    (dbIndex) => dbIndex[\"constraint_name\"],\r\n                )\r\n\r\n                table.indices = tableIndexConstraints.map((constraint) => {\r\n                    const indices = dbIndices.filter((index) => {\r\n                        return (\r\n                            index[\"table_schema\"] ===\r\n                                constraint[\"table_schema\"] &&\r\n                            index[\"table_name\"] === constraint[\"table_name\"] &&\r\n                            index[\"constraint_name\"] ===\r\n                                constraint[\"constraint_name\"]\r\n                        )\r\n                    })\r\n                    return new TableIndex(<TableIndexOptions>{\r\n                        table: table,\r\n                        name: constraint[\"constraint_name\"],\r\n                        columnNames: indices.map((i) => i[\"column_name\"]),\r\n                        isUnique: constraint[\"is_unique\"] === \"TRUE\",\r\n                        where: constraint[\"condition\"],\r\n                        isSpatial: constraint[\"index_type\"] === \"gist\",\r\n                        isFulltext: false,\r\n                    })\r\n                })\r\n\r\n                return table\r\n            }),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create table sql.\r\n     */\r\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\r\n        const columnDefinitions = table.columns\r\n            .map((column) => this.buildCreateColumnSql(table, column))\r\n            .join(\", \")\r\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\r\n\r\n        table.columns\r\n            .filter((column) => column.isUnique)\r\n            .forEach((column) => {\r\n                const isUniqueExist = table.uniques.some(\r\n                    (unique) =>\r\n                        unique.columnNames.length === 1 &&\r\n                        unique.columnNames[0] === column.name,\r\n                )\r\n                if (!isUniqueExist)\r\n                    table.uniques.push(\r\n                        new TableUnique({\r\n                            name: this.connection.namingStrategy.uniqueConstraintName(\r\n                                table,\r\n                                [column.name],\r\n                            ),\r\n                            columnNames: [column.name],\r\n                        }),\r\n                    )\r\n            })\r\n\r\n        if (table.uniques.length > 0) {\r\n            const uniquesSql = table.uniques\r\n                .map((unique) => {\r\n                    const uniqueName = unique.name\r\n                        ? unique.name\r\n                        : this.connection.namingStrategy.uniqueConstraintName(\r\n                              table,\r\n                              unique.columnNames,\r\n                          )\r\n                    const columnNames = unique.columnNames\r\n                        .map((columnName) => `\"${columnName}\"`)\r\n                        .join(\", \")\r\n                    let constraint = `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`\r\n                    if (unique.deferrable)\r\n                        constraint += ` DEFERRABLE ${unique.deferrable}`\r\n                    return constraint\r\n                })\r\n                .join(\", \")\r\n\r\n            sql += `, ${uniquesSql}`\r\n        }\r\n\r\n        if (table.checks.length > 0) {\r\n            const checksSql = table.checks\r\n                .map((check) => {\r\n                    const checkName = check.name\r\n                        ? check.name\r\n                        : this.connection.namingStrategy.checkConstraintName(\r\n                              table,\r\n                              check.expression!,\r\n                          )\r\n                    return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`\r\n                })\r\n                .join(\", \")\r\n\r\n            sql += `, ${checksSql}`\r\n        }\r\n\r\n        if (table.exclusions.length > 0) {\r\n            const exclusionsSql = table.exclusions\r\n                .map((exclusion) => {\r\n                    const exclusionName = exclusion.name\r\n                        ? exclusion.name\r\n                        : this.connection.namingStrategy.exclusionConstraintName(\r\n                              table,\r\n                              exclusion.expression!,\r\n                          )\r\n                    return `CONSTRAINT \"${exclusionName}\" EXCLUDE ${exclusion.expression}`\r\n                })\r\n                .join(\", \")\r\n\r\n            sql += `, ${exclusionsSql}`\r\n        }\r\n\r\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\r\n            const foreignKeysSql = table.foreignKeys\r\n                .map((fk) => {\r\n                    const columnNames = fk.columnNames\r\n                        .map((columnName) => `\"${columnName}\"`)\r\n                        .join(\", \")\r\n                    if (!fk.name)\r\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\r\n                            table,\r\n                            fk.columnNames,\r\n                            this.getTablePath(fk),\r\n                            fk.referencedColumnNames,\r\n                        )\r\n\r\n                    const referencedColumnNames = fk.referencedColumnNames\r\n                        .map((columnName) => `\"${columnName}\"`)\r\n                        .join(\", \")\r\n\r\n                    let constraint = `CONSTRAINT \"${\r\n                        fk.name\r\n                    }\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\r\n                        this.getTablePath(fk),\r\n                    )} (${referencedColumnNames})`\r\n                    if (fk.onDelete) constraint += ` ON DELETE ${fk.onDelete}`\r\n                    if (fk.onUpdate) constraint += ` ON UPDATE ${fk.onUpdate}`\r\n                    if (fk.deferrable)\r\n                        constraint += ` DEFERRABLE ${fk.deferrable}`\r\n\r\n                    return constraint\r\n                })\r\n                .join(\", \")\r\n\r\n            sql += `, ${foreignKeysSql}`\r\n        }\r\n\r\n        const primaryColumns = table.columns.filter(\r\n            (column) => column.isPrimary,\r\n        )\r\n        if (primaryColumns.length > 0) {\r\n            const primaryKeyName = primaryColumns[0].primaryKeyConstraintName\r\n                ? primaryColumns[0].primaryKeyConstraintName\r\n                : this.connection.namingStrategy.primaryKeyName(\r\n                      table,\r\n                      primaryColumns.map((column) => column.name),\r\n                  )\r\n\r\n            const columnNames = primaryColumns\r\n                .map((column) => `\"${column.name}\"`)\r\n                .join(\", \")\r\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`\r\n        }\r\n\r\n        sql += `)`\r\n\r\n        table.columns\r\n            .filter((it) => it.comment)\r\n            .forEach(\r\n                (it) =>\r\n                    (sql += `; COMMENT ON COLUMN ${this.escapePath(table)}.\"${\r\n                        it.name\r\n                    }\" IS ${this.escapeComment(it.comment)}`),\r\n            )\r\n\r\n        return new Query(sql)\r\n    }\r\n\r\n    /**\r\n     * Loads Postgres version.\r\n     */\r\n    protected async getVersion(): Promise<string> {\r\n        const result = await this.query(`SELECT version()`)\r\n        return result[0][\"version\"].replace(/^PostgreSQL ([\\d.]+) .*$/, \"$1\")\r\n    }\r\n\r\n    /**\r\n     * Builds drop table sql.\r\n     */\r\n    protected dropTableSql(tableOrPath: Table | string): Query {\r\n        return new Query(`DROP TABLE ${this.escapePath(tableOrPath)}`)\r\n    }\r\n\r\n    protected createViewSql(view: View): Query {\r\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\"\r\n        const viewName = this.escapePath(view)\r\n\r\n        if (typeof view.expression === \"string\") {\r\n            return new Query(\r\n                `CREATE ${materializedClause}VIEW ${viewName} AS ${view.expression}`,\r\n            )\r\n        } else {\r\n            return new Query(\r\n                `CREATE ${materializedClause}VIEW ${viewName} AS ${view\r\n                    .expression(this.connection)\r\n                    .getQuery()}`,\r\n            )\r\n        }\r\n    }\r\n\r\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\r\n        const currentSchema = await this.getCurrentSchema()\r\n\r\n        let { schema, tableName: name } = this.driver.parseTableName(view)\r\n\r\n        if (!schema) {\r\n            schema = currentSchema\r\n        }\r\n\r\n        const type = view.materialized\r\n            ? MetadataTableType.MATERIALIZED_VIEW\r\n            : MetadataTableType.VIEW\r\n        const expression =\r\n            typeof view.expression === \"string\"\r\n                ? view.expression.trim()\r\n                : view.expression(this.connection).getQuery()\r\n        return this.insertTypeormMetadataSql({\r\n            type,\r\n            schema,\r\n            name,\r\n            value: expression,\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Builds drop view sql.\r\n     */\r\n    protected dropViewSql(view: View): Query {\r\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\"\r\n        return new Query(\r\n            `DROP ${materializedClause}VIEW ${this.escapePath(view)}`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds remove view sql.\r\n     */\r\n    protected async deleteViewDefinitionSql(view: View): Promise<Query> {\r\n        const currentSchema = await this.getCurrentSchema()\r\n\r\n        let { schema, tableName: name } = this.driver.parseTableName(view)\r\n\r\n        if (!schema) {\r\n            schema = currentSchema\r\n        }\r\n\r\n        const type = view.materialized\r\n            ? MetadataTableType.MATERIALIZED_VIEW\r\n            : MetadataTableType.VIEW\r\n        return this.deleteTypeormMetadataSql({ type, schema, name })\r\n    }\r\n\r\n    /**\r\n     * Drops ENUM type from given schemas.\r\n     */\r\n    protected async dropEnumTypes(schemaNames: string): Promise<void> {\r\n        const selectDropsQuery =\r\n            `SELECT 'DROP TYPE IF EXISTS \"' || n.nspname || '\".\"' || t.typname || '\" CASCADE;' as \"query\" FROM \"pg_type\" \"t\" ` +\r\n            `INNER JOIN \"pg_enum\" \"e\" ON \"e\".\"enumtypid\" = \"t\".\"oid\" ` +\r\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\r\n            `WHERE \"n\".\"nspname\" IN (${schemaNames}) GROUP BY \"n\".\"nspname\", \"t\".\"typname\"`\r\n        const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery)\r\n        await Promise.all(dropQueries.map((q) => this.query(q[\"query\"])))\r\n    }\r\n\r\n    /**\r\n     * Checks if enum with the given name exist in the database.\r\n     */\r\n    protected async hasEnumType(\r\n        table: Table,\r\n        column: TableColumn,\r\n    ): Promise<boolean> {\r\n        let { schema } = this.driver.parseTableName(table)\r\n\r\n        if (!schema) {\r\n            schema = await this.getCurrentSchema()\r\n        }\r\n\r\n        const enumName = this.buildEnumName(table, column, false, true)\r\n        const sql =\r\n            `SELECT \"n\".\"nspname\", \"t\".\"typname\" FROM \"pg_type\" \"t\" ` +\r\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\r\n            `WHERE \"n\".\"nspname\" = '${schema}' AND \"t\".\"typname\" = '${enumName}'`\r\n        const result = await this.query(sql)\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Builds create ENUM type sql.\r\n     */\r\n    protected createEnumTypeSql(\r\n        table: Table,\r\n        column: TableColumn,\r\n        enumName?: string,\r\n    ): Query {\r\n        if (!enumName) enumName = this.buildEnumName(table, column)\r\n        const enumValues = column\r\n            .enum!.map((value) => `'${value.replace(\"'\", \"''\")}'`)\r\n            .join(\", \")\r\n        return new Query(`CREATE TYPE ${enumName} AS ENUM(${enumValues})`)\r\n    }\r\n\r\n    /**\r\n     * Builds create ENUM type sql.\r\n     */\r\n    protected dropEnumTypeSql(\r\n        table: Table,\r\n        column: TableColumn,\r\n        enumName?: string,\r\n    ): Query {\r\n        if (!enumName) enumName = this.buildEnumName(table, column)\r\n        return new Query(`DROP TYPE ${enumName}`)\r\n    }\r\n\r\n    /**\r\n     * Builds create index sql.\r\n     */\r\n    protected createIndexSql(table: Table, index: TableIndex): Query {\r\n        const columns = index.columnNames\r\n            .map((columnName) => `\"${columnName}\"`)\r\n            .join(\", \")\r\n        return new Query(\r\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX${\r\n                index.isConcurrent ? \" CONCURRENTLY\" : \"\"\r\n            } \"${index.name}\" ON ${this.escapePath(table)} ${\r\n                index.isSpatial ? \"USING GiST \" : \"\"\r\n            }(${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create view index sql.\r\n     */\r\n    protected createViewIndexSql(view: View, index: TableIndex): Query {\r\n        const columns = index.columnNames\r\n            .map((columnName) => `\"${columnName}\"`)\r\n            .join(\", \")\r\n        return new Query(\r\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${\r\n                index.name\r\n            }\" ON ${this.escapePath(view)} (${columns}) ${\r\n                index.where ? \"WHERE \" + index.where : \"\"\r\n            }`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds drop index sql.\r\n     */\r\n    protected dropIndexSql(\r\n        table: Table | View,\r\n        indexOrName: TableIndex | string,\r\n    ): Query {\r\n        const indexName = InstanceChecker.isTableIndex(indexOrName)\r\n            ? indexOrName.name\r\n            : indexOrName\r\n        const concurrent = InstanceChecker.isTableIndex(indexOrName)\r\n            ? indexOrName.isConcurrent\r\n            : false\r\n        const { schema } = this.driver.parseTableName(table)\r\n        return schema\r\n            ? new Query(\r\n                  `DROP INDEX ${\r\n                      concurrent ? \"CONCURRENTLY \" : \"\"\r\n                  }\"${schema}\".\"${indexName}\"`,\r\n              )\r\n            : new Query(\r\n                  `DROP INDEX ${\r\n                      concurrent ? \"CONCURRENTLY \" : \"\"\r\n                  }\"${indexName}\"`,\r\n              )\r\n    }\r\n\r\n    /**\r\n     * Builds create primary key sql.\r\n     */\r\n    protected createPrimaryKeySql(\r\n        table: Table,\r\n        columnNames: string[],\r\n        constraintName?: string,\r\n    ): Query {\r\n        const primaryKeyName = constraintName\r\n            ? constraintName\r\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\r\n\r\n        const columnNamesString = columnNames\r\n            .map((columnName) => `\"${columnName}\"`)\r\n            .join(\", \")\r\n\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds drop primary key sql.\r\n     */\r\n    protected dropPrimaryKeySql(table: Table): Query {\r\n        if (!table.primaryColumns.length)\r\n            throw new TypeORMError(`Table ${table} has no primary keys.`)\r\n\r\n        const columnNames = table.primaryColumns.map((column) => column.name)\r\n        const constraintName = table.primaryColumns[0].primaryKeyConstraintName\r\n        const primaryKeyName = constraintName\r\n            ? constraintName\r\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\r\n\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \"${primaryKeyName}\"`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create unique constraint sql.\r\n     */\r\n    protected createUniqueConstraintSql(\r\n        table: Table,\r\n        uniqueConstraint: TableUnique,\r\n    ): Query {\r\n        const columnNames = uniqueConstraint.columnNames\r\n            .map((column) => `\"` + column + `\"`)\r\n            .join(\", \")\r\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\r\n            uniqueConstraint.name\r\n        }\" UNIQUE (${columnNames})`\r\n        if (uniqueConstraint.deferrable)\r\n            sql += ` DEFERRABLE ${uniqueConstraint.deferrable}`\r\n        return new Query(sql)\r\n    }\r\n\r\n    /**\r\n     * Builds drop unique constraint sql.\r\n     */\r\n    protected dropUniqueConstraintSql(\r\n        table: Table,\r\n        uniqueOrName: TableUnique | string,\r\n    ): Query {\r\n        const uniqueName = InstanceChecker.isTableUnique(uniqueOrName)\r\n            ? uniqueOrName.name\r\n            : uniqueOrName\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \"${uniqueName}\"`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create check constraint sql.\r\n     */\r\n    protected createCheckConstraintSql(\r\n        table: Table,\r\n        checkConstraint: TableCheck,\r\n    ): Query {\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\r\n                checkConstraint.name\r\n            }\" CHECK (${checkConstraint.expression})`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds drop check constraint sql.\r\n     */\r\n    protected dropCheckConstraintSql(\r\n        table: Table,\r\n        checkOrName: TableCheck | string,\r\n    ): Query {\r\n        const checkName = InstanceChecker.isTableCheck(checkOrName)\r\n            ? checkOrName.name\r\n            : checkOrName\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \"${checkName}\"`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create exclusion constraint sql.\r\n     */\r\n    protected createExclusionConstraintSql(\r\n        table: Table,\r\n        exclusionConstraint: TableExclusion,\r\n    ): Query {\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\r\n                exclusionConstraint.name\r\n            }\" EXCLUDE ${exclusionConstraint.expression}`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds drop exclusion constraint sql.\r\n     */\r\n    protected dropExclusionConstraintSql(\r\n        table: Table,\r\n        exclusionOrName: TableExclusion | string,\r\n    ): Query {\r\n        const exclusionName = InstanceChecker.isTableExclusion(exclusionOrName)\r\n            ? exclusionOrName.name\r\n            : exclusionOrName\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \"${exclusionName}\"`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create foreign key sql.\r\n     */\r\n    protected createForeignKeySql(\r\n        table: Table,\r\n        foreignKey: TableForeignKey,\r\n    ): Query {\r\n        const columnNames = foreignKey.columnNames\r\n            .map((column) => `\"` + column + `\"`)\r\n            .join(\", \")\r\n        const referencedColumnNames = foreignKey.referencedColumnNames\r\n            .map((column) => `\"` + column + `\"`)\r\n            .join(\",\")\r\n        let sql =\r\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\r\n                foreignKey.name\r\n            }\" FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES ${this.escapePath(\r\n                this.getTablePath(foreignKey),\r\n            )}(${referencedColumnNames})`\r\n        if (foreignKey.onDelete) sql += ` ON DELETE ${foreignKey.onDelete}`\r\n        if (foreignKey.onUpdate) sql += ` ON UPDATE ${foreignKey.onUpdate}`\r\n        if (foreignKey.deferrable) sql += ` DEFERRABLE ${foreignKey.deferrable}`\r\n\r\n        return new Query(sql)\r\n    }\r\n\r\n    /**\r\n     * Builds drop foreign key sql.\r\n     */\r\n    protected dropForeignKeySql(\r\n        table: Table,\r\n        foreignKeyOrName: TableForeignKey | string,\r\n    ): Query {\r\n        const foreignKeyName = InstanceChecker.isTableForeignKey(\r\n            foreignKeyOrName,\r\n        )\r\n            ? foreignKeyOrName.name\r\n            : foreignKeyOrName\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \"${foreignKeyName}\"`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds sequence name from given table and column.\r\n     */\r\n    protected buildSequenceName(\r\n        table: Table,\r\n        columnOrName: TableColumn | string,\r\n    ): string {\r\n        const { tableName } = this.driver.parseTableName(table)\r\n\r\n        const columnName = InstanceChecker.isTableColumn(columnOrName)\r\n            ? columnOrName.name\r\n            : columnOrName\r\n\r\n        let seqName = `${tableName}_${columnName}_seq`\r\n\r\n        if (seqName.length > this.connection.driver.maxAliasLength!) {\r\n            // note doesn't yet handle corner cases where .length differs from number of UTF-8 bytes\r\n            seqName = `${tableName.substring(0, 29)}_${columnName.substring(\r\n                0,\r\n                Math.max(29, 63 - table.name.length - 5),\r\n            )}_seq`\r\n        }\r\n\r\n        return seqName\r\n    }\r\n\r\n    protected buildSequencePath(\r\n        table: Table,\r\n        columnOrName: TableColumn | string,\r\n    ): string {\r\n        const { schema } = this.driver.parseTableName(table)\r\n\r\n        return schema\r\n            ? `${schema}.${this.buildSequenceName(table, columnOrName)}`\r\n            : this.buildSequenceName(table, columnOrName)\r\n    }\r\n\r\n    /**\r\n     * Builds ENUM type name from given table and column.\r\n     */\r\n    protected buildEnumName(\r\n        table: Table,\r\n        column: TableColumn,\r\n        withSchema: boolean = true,\r\n        disableEscape?: boolean,\r\n        toOld?: boolean,\r\n    ): string {\r\n        const { schema, tableName } = this.driver.parseTableName(table)\r\n        let enumName = column.enumName\r\n            ? column.enumName\r\n            : `${tableName}_${column.name.toLowerCase()}_enum`\r\n        if (schema && withSchema) enumName = `${schema}.${enumName}`\r\n        if (toOld) enumName = enumName + \"_old\"\r\n        return enumName\r\n            .split(\".\")\r\n            .map((i) => {\r\n                return disableEscape ? i : `\"${i}\"`\r\n            })\r\n            .join(\".\")\r\n    }\r\n\r\n    protected async getUserDefinedTypeName(table: Table, column: TableColumn) {\r\n        let { schema, tableName: name } = this.driver.parseTableName(table)\r\n\r\n        if (!schema) {\r\n            schema = await this.getCurrentSchema()\r\n        }\r\n\r\n        const result = await this.query(\r\n            `SELECT \"udt_schema\", \"udt_name\" ` +\r\n                `FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = '${schema}' AND \"table_name\" = '${name}' AND \"column_name\"='${column.name}'`,\r\n        )\r\n\r\n        // docs: https://www.postgresql.org/docs/current/xtypes.html\r\n        // When you define a new base type, PostgreSQL automatically provides support for arrays of that type.\r\n        // The array type typically has the same name as the base type with the underscore character (_) prepended.\r\n        // ----\r\n        // so, we must remove this underscore character from enum type name\r\n        let udtName = result[0][\"udt_name\"]\r\n        if (udtName.indexOf(\"_\") === 0) {\r\n            udtName = udtName.substr(1, udtName.length)\r\n        }\r\n        return {\r\n            schema: result[0][\"udt_schema\"],\r\n            name: udtName,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Escapes a given comment so it's safe to include in a query.\r\n     */\r\n    protected escapeComment(comment?: string) {\r\n        if (!comment || comment.length === 0) {\r\n            return \"NULL\"\r\n        }\r\n\r\n        comment = comment.replace(/'/g, \"''\").replace(/\\u0000/g, \"\") // Null bytes aren't allowed in comments\r\n\r\n        return `'${comment}'`\r\n    }\r\n\r\n    /**\r\n     * Escapes given table or view path.\r\n     */\r\n    protected escapePath(target: Table | View | string): string {\r\n        const { schema, tableName } = this.driver.parseTableName(target)\r\n\r\n        if (schema && schema !== this.driver.searchSchema) {\r\n            return `\"${schema}\".\"${tableName}\"`\r\n        }\r\n\r\n        return `\"${tableName}\"`\r\n    }\r\n\r\n    /**\r\n     * Get the table name with table schema\r\n     * Note: Without ' or \"\r\n     */\r\n    protected async getTableNameWithSchema(target: Table | string) {\r\n        const tableName = InstanceChecker.isTable(target) ? target.name : target\r\n        if (tableName.indexOf(\".\") === -1) {\r\n            const schemaResult = await this.query(`SELECT current_schema()`)\r\n            const schema = schemaResult[0][\"current_schema\"]\r\n            return `${schema}.${tableName}`\r\n        } else {\r\n            return `${tableName.split(\".\")[0]}.${tableName.split(\".\")[1]}`\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(table: Table, column: TableColumn) {\r\n        let c = '\"' + column.name + '\"'\r\n        if (\r\n            column.isGenerated === true &&\r\n            column.generationStrategy !== \"uuid\"\r\n        ) {\r\n            if (column.generationStrategy === \"identity\") {\r\n                // Postgres 10+ Identity generated column\r\n                const generatedIdentityOrDefault =\r\n                    column.generatedIdentity || \"BY DEFAULT\"\r\n                c += ` ${column.type} GENERATED ${generatedIdentityOrDefault} AS IDENTITY`\r\n            } else {\r\n                // classic SERIAL primary column\r\n                if (\r\n                    column.type === \"integer\" ||\r\n                    column.type === \"int\" ||\r\n                    column.type === \"int4\"\r\n                )\r\n                    c += \" SERIAL\"\r\n                if (column.type === \"smallint\" || column.type === \"int2\")\r\n                    c += \" SMALLSERIAL\"\r\n                if (column.type === \"bigint\" || column.type === \"int8\")\r\n                    c += \" BIGSERIAL\"\r\n            }\r\n        }\r\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\r\n            c += \" \" + this.buildEnumName(table, column)\r\n            if (column.isArray) c += \" array\"\r\n        } else if (!column.isGenerated || column.type === \"uuid\") {\r\n            c += \" \" + this.connection.driver.createFullType(column)\r\n        }\r\n\r\n        // Postgres only supports the stored generated column type\r\n        if (column.generatedType === \"STORED\" && column.asExpression) {\r\n            c += ` GENERATED ALWAYS AS (${column.asExpression}) STORED`\r\n        }\r\n\r\n        if (column.charset) c += ' CHARACTER SET \"' + column.charset + '\"'\r\n        if (column.collation) c += ' COLLATE \"' + column.collation + '\"'\r\n        if (column.isNullable !== true) c += \" NOT NULL\"\r\n        if (column.default !== undefined && column.default !== null)\r\n            c += \" DEFAULT \" + column.default\r\n        if (\r\n            column.isGenerated &&\r\n            column.generationStrategy === \"uuid\" &&\r\n            !column.default\r\n        )\r\n            c += ` DEFAULT ${this.driver.uuidGenerator}`\r\n\r\n        return c\r\n    }\r\n\r\n    /**\r\n     * Checks if the PostgreSQL server has support for partitioned tables\r\n     */\r\n    protected async hasSupportForPartitionedTables() {\r\n        const result = await this.query(\r\n            `SELECT TRUE FROM information_schema.columns WHERE table_name = 'pg_class' and column_name = 'relispartition'`,\r\n        )\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Change table comment.\r\n     */\r\n    async changeTableComment(\r\n        tableOrName: Table | string,\r\n        newComment?: string,\r\n    ): Promise<void> {\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n\r\n        newComment = this.escapeComment(newComment)\r\n        const comment = this.escapeComment(table.comment)\r\n\r\n        if (newComment === comment) {\r\n            return\r\n        }\r\n\r\n        const newTable = table.clone()\r\n\r\n        upQueries.push(\r\n            new Query(\r\n                `COMMENT ON TABLE ${this.escapePath(\r\n                    newTable,\r\n                )} IS ${newComment}`,\r\n            ),\r\n        )\r\n\r\n        downQueries.push(\r\n            new Query(\r\n                `COMMENT ON TABLE ${this.escapePath(table)} IS ${comment}`,\r\n            ),\r\n        )\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n\r\n        table.comment = newTable.comment\r\n        this.replaceCachedTable(table, newTable)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
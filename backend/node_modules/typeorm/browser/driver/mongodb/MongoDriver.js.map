{"version":3,"sources":["../browser/src/driver/mongodb/MongoDriver.ts"],"names":[],"mappings":"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","file":"MongoDriver.js","sourcesContent":["import { Driver } from \"../Driver\"\r\nimport { ConnectionIsNotSetError } from \"../../error/ConnectionIsNotSetError\"\r\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\r\nimport { CteCapabilities } from \"../types/CteCapabilities\"\r\nimport { MongoQueryRunner } from \"./MongoQueryRunner\"\r\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\r\nimport { PlatformTools } from \"../../platform/PlatformTools\"\r\nimport { DataSource } from \"../../data-source/DataSource\"\r\nimport { MongoConnectionOptions } from \"./MongoConnectionOptions\"\r\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\r\nimport { ColumnType } from \"../types/ColumnTypes\"\r\nimport { MongoSchemaBuilder } from \"../../schema-builder/MongoSchemaBuilder\"\r\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\r\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\r\nimport { DataSourceOptions } from \"../../data-source/DataSourceOptions\"\r\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\r\nimport { ObjectUtils } from \"../../util/ObjectUtils\"\r\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { DriverUtils } from \"../DriverUtils\"\r\nimport { TypeORMError } from \"../../error\"\r\nimport { Table } from \"../../schema-builder/table/Table\"\r\nimport { View } from \"../../schema-builder/view/View\"\r\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\r\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\r\nimport { UpsertType } from \"../types/UpsertType\"\r\n\r\n/**\r\n * Organizes communication with MongoDB.\r\n */\r\nexport class MongoDriver implements Driver {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Underlying mongodb library.\r\n     */\r\n    mongodb: any\r\n\r\n    /**\r\n     * Mongodb does not require to dynamically create query runner each time,\r\n     * because it does not have a regular connection pool as RDBMS systems have.\r\n     */\r\n    queryRunner?: MongoQueryRunner\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: MongoConnectionOptions\r\n\r\n    /**\r\n     * Master database used to perform all write queries.\r\n     */\r\n    database?: string\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean = false\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport = false\r\n\r\n    /**\r\n     * Represent transaction support by this driver\r\n     */\r\n    transactionSupport = \"none\" as const\r\n\r\n    /**\r\n     * Mongodb does not need to have column types because they are not used in schema sync.\r\n     */\r\n    supportedDataTypes: ColumnType[] = []\r\n\r\n    /**\r\n     * Returns type of upsert supported by driver if any\r\n     */\r\n    supportedUpsertTypes: UpsertType[]\r\n\r\n    /**\r\n     * Gets list of spatial column data types.\r\n     */\r\n    spatialTypes: ColumnType[] = []\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[] = []\r\n\r\n    /**\r\n     * Gets list of column data types that support precision by a driver.\r\n     */\r\n    withPrecisionColumnTypes: ColumnType[] = []\r\n\r\n    /**\r\n     * Gets list of column data types that support scale by a driver.\r\n     */\r\n    withScaleColumnTypes: ColumnType[] = []\r\n\r\n    /**\r\n     * Mongodb does not need to have a strong defined mapped column types because they are not used in schema sync.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"int\",\r\n        createDateDefault: \"\",\r\n        updateDate: \"int\",\r\n        updateDateDefault: \"\",\r\n        deleteDate: \"int\",\r\n        deleteDateNullable: true,\r\n        version: \"int\",\r\n        treeLevel: \"int\",\r\n        migrationId: \"int\",\r\n        migrationName: \"int\",\r\n        migrationTimestamp: \"int\",\r\n        cacheId: \"int\",\r\n        cacheIdentifier: \"int\",\r\n        cacheTime: \"int\",\r\n        cacheDuration: \"int\",\r\n        cacheQuery: \"int\",\r\n        cacheResult: \"int\",\r\n        metadataType: \"int\",\r\n        metadataDatabase: \"int\",\r\n        metadataSchema: \"int\",\r\n        metadataTable: \"int\",\r\n        metadataName: \"int\",\r\n        metadataValue: \"int\",\r\n    }\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults\r\n\r\n    /**\r\n     * No documentation specifying a maximum length for identifiers could be found\r\n     * for MongoDB.\r\n     */\r\n    maxAliasLength?: number\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Valid mongo connection options\r\n     * NOTE: Keep sync with MongoConnectionOptions\r\n     * Sync with http://mongodb.github.io/node-mongodb-native/3.5/api/MongoClient.html\r\n     */\r\n    protected validOptionNames: string[] = [\r\n        \"poolSize\",\r\n        \"ssl\",\r\n        \"sslValidate\",\r\n        \"sslCA\",\r\n        \"sslCert\",\r\n        \"sslKey\",\r\n        \"sslPass\",\r\n        \"sslCRL\",\r\n        \"autoReconnect\",\r\n        \"noDelay\",\r\n        \"keepAlive\",\r\n        \"keepAliveInitialDelay\",\r\n        \"connectTimeoutMS\",\r\n        \"family\",\r\n        \"socketTimeoutMS\",\r\n        \"reconnectTries\",\r\n        \"reconnectInterval\",\r\n        \"ha\",\r\n        \"haInterval\",\r\n        \"replicaSet\",\r\n        \"secondaryAcceptableLatencyMS\",\r\n        \"acceptableLatencyMS\",\r\n        \"connectWithNoPrimary\",\r\n        \"authSource\",\r\n        \"w\",\r\n        \"wtimeout\",\r\n        \"j\",\r\n        \"writeConcern\",\r\n        \"forceServerObjectId\",\r\n        \"serializeFunctions\",\r\n        \"ignoreUndefined\",\r\n        \"raw\",\r\n        \"bufferMaxEntries\",\r\n        \"readPreference\",\r\n        \"pkFactory\",\r\n        \"promiseLibrary\",\r\n        \"readConcern\",\r\n        \"maxStalenessSeconds\",\r\n        \"loggerLevel\",\r\n        // Do not overwrite BaseDataSourceOptions.logger\r\n        // \"logger\",\r\n        \"promoteValues\",\r\n        \"promoteBuffers\",\r\n        \"promoteLongs\",\r\n        \"domainsEnabled\",\r\n        \"checkServerIdentity\",\r\n        \"validateOptions\",\r\n        \"appname\",\r\n        // omit auth - we are building url from username and password\r\n        // \"auth\"\r\n        \"authMechanism\",\r\n        \"compression\",\r\n        \"fsync\",\r\n        \"readPreferenceTags\",\r\n        \"numberOfRetries\",\r\n        \"auto_reconnect\",\r\n        \"minSize\",\r\n        \"monitorCommands\",\r\n        \"useNewUrlParser\",\r\n        \"useUnifiedTopology\",\r\n        \"autoEncryption\",\r\n        \"retryWrites\",\r\n        \"directConnection\",\r\n    ]\r\n\r\n    cteCapabilities: CteCapabilities = {\r\n        enabled: false,\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: DataSource) {\r\n        this.options = connection.options as MongoConnectionOptions\r\n\r\n        // validate options to make sure everything is correct and driver will be able to establish connection\r\n        this.validateOptions(connection.options)\r\n\r\n        // load mongodb package\r\n        this.loadDependencies()\r\n\r\n        this.database = DriverUtils.buildMongoDBDriverOptions(\r\n            this.options,\r\n        ).database\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<void> {\r\n        const options = DriverUtils.buildMongoDBDriverOptions(this.options)\r\n\r\n        const client = await this.mongodb.MongoClient.connect(\r\n            this.buildConnectionUrl(options),\r\n            this.buildConnectionOptions(options),\r\n        )\r\n\r\n        this.queryRunner = new MongoQueryRunner(this.connection, client)\r\n        ObjectUtils.assign(this.queryRunner, {\r\n            manager: this.connection.manager,\r\n        })\r\n    }\r\n\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        if (!this.queryRunner) throw new ConnectionIsNotSetError(\"mongodb\")\r\n        // const handler = (err: any) => (err ? fail(err) : ok())\r\n        this.queryRunner.databaseConnection.close()\r\n        this.queryRunner = undefined\r\n        // return ok()\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build and sync a schema.\r\n     */\r\n    createSchemaBuilder() {\r\n        return new MongoSchemaBuilder(this.connection)\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode) {\r\n        return this.queryRunner!\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(\r\n        sql: string,\r\n        parameters: ObjectLiteral,\r\n        nativeParameters: ObjectLiteral,\r\n    ): [string, any[]] {\r\n        throw new TypeORMError(\r\n            `This operation is not supported by Mongodb driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return columnName\r\n    }\r\n\r\n    /**\r\n     * Build full table name with database name, schema name and table name.\r\n     * E.g. myDB.mySchema.myTable\r\n     */\r\n    buildTableName(\r\n        tableName: string,\r\n        schema?: string,\r\n        database?: string,\r\n    ): string {\r\n        return tableName\r\n    }\r\n\r\n    /**\r\n     * Parse a target table name or other types and return a normalized table definition.\r\n     */\r\n    parseTableName(\r\n        target: EntityMetadata | Table | View | TableForeignKey | string,\r\n    ): { tableName: string; schema?: string; database?: string } {\r\n        if (InstanceChecker.isEntityMetadata(target)) {\r\n            return {\r\n                tableName: target.tableName,\r\n            }\r\n        }\r\n\r\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\r\n            return {\r\n                tableName: target.name,\r\n            }\r\n        }\r\n\r\n        if (InstanceChecker.isTableForeignKey(target)) {\r\n            return {\r\n                tableName: target.referencedTableName,\r\n            }\r\n        }\r\n\r\n        return {\r\n            tableName: target,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformTo(\r\n                columnMetadata.transformer,\r\n                value,\r\n            )\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformFrom(\r\n                columnMetadata.transformer,\r\n                value,\r\n            )\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(column: {\r\n        type?: ColumnType\r\n        length?: number | string\r\n        precision?: number | null\r\n        scale?: number\r\n    }): string {\r\n        throw new TypeORMError(\r\n            `MongoDB is schema-less, not supported by this driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\r\n        throw new TypeORMError(\r\n            `MongoDB is schema-less, not supported by this driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        throw new TypeORMError(\r\n            `MongoDB is schema-less, not supported by this driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Calculates column length taking into account the default length values.\r\n     */\r\n    getColumnLength(column: ColumnMetadata): string {\r\n        throw new TypeORMError(\r\n            `MongoDB is schema-less, not supported by this driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    createFullType(column: TableColumn): string {\r\n        throw new TypeORMError(\r\n            `MongoDB is schema-less, not supported by this driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Creates generated map of values generated or returned by database after INSERT query.\r\n     */\r\n    createGeneratedMap(metadata: EntityMetadata, insertedId: any) {\r\n        return metadata.objectIdColumn!.createValueMap(insertedId)\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(\r\n        tableColumns: TableColumn[],\r\n        columnMetadatas: ColumnMetadata[],\r\n    ): ColumnMetadata[] {\r\n        throw new TypeORMError(\r\n            `MongoDB is schema-less, not supported by this driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports RETURNING / OUTPUT statement.\r\n     */\r\n    isReturningSqlSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports uuid values generation on its own.\r\n     */\r\n    isUUIDGenerationSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports fulltext indices.\r\n     */\r\n    isFullTextColumnTypeSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Creates an escaped parameter.\r\n     */\r\n    createParameter(parameterName: string, index: number): string {\r\n        return \"\"\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Validate driver options to make sure everything is correct and driver will be able to establish connection.\r\n     */\r\n    protected validateOptions(options: DataSourceOptions) {\r\n        // todo: fix\r\n        // if (!options.url) {\r\n        //     if (!options.database)\r\n        //         throw new DriverOptionNotSetError(\"database\");\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * Loads all driver dependencies.\r\n     */\r\n    protected loadDependencies(): any {\r\n        try {\r\n            const mongodb = this.options.driver || PlatformTools.load(\"mongodb\")\r\n            this.mongodb = mongodb\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\"MongoDB\", \"mongodb\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds connection url that is passed to underlying driver to perform connection to the mongodb database.\r\n     */\r\n    protected buildConnectionUrl(options: { [key: string]: any }): string {\r\n        const schemaUrlPart = options.type.toLowerCase()\r\n        const credentialsUrlPart =\r\n            options.username && options.password\r\n                ? `${encodeURIComponent(options.username)}:${encodeURIComponent(\r\n                      options.password,\r\n                  )}@`\r\n                : \"\"\r\n\r\n        const portUrlPart =\r\n            schemaUrlPart === \"mongodb+srv\" ? \"\" : `:${options.port || \"27017\"}`\r\n\r\n        let connectionString: string\r\n        if (options.replicaSet) {\r\n            connectionString = `${schemaUrlPart}://${credentialsUrlPart}${\r\n                options.hostReplicaSet ||\r\n                options.host + portUrlPart ||\r\n                \"127.0.0.1\" + portUrlPart\r\n            }/${options.database || \"\"}?replicaSet=${options.replicaSet}${\r\n                options.tls ? \"&tls=true\" : \"\"\r\n            }`\r\n        } else {\r\n            connectionString = `${schemaUrlPart}://${credentialsUrlPart}${\r\n                options.host || \"127.0.0.1\"\r\n            }${portUrlPart}/${options.database || \"\"}${\r\n                options.tls ? \"?tls=true\" : \"\"\r\n            }`\r\n        }\r\n\r\n        return connectionString\r\n    }\r\n\r\n    /**\r\n     * Build connection options from MongoConnectionOptions\r\n     */\r\n    protected buildConnectionOptions(options: { [key: string]: any }): any {\r\n        const mongoOptions: any = {}\r\n\r\n        for (let index = 0; index < this.validOptionNames.length; index++) {\r\n            const optionName = this.validOptionNames[index]\r\n\r\n            if (options.extra && optionName in options.extra) {\r\n                mongoOptions[optionName] = options.extra[optionName]\r\n            } else if (optionName in options) {\r\n                mongoOptions[optionName] = options[optionName]\r\n            }\r\n        }\r\n\r\n        return mongoOptions\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
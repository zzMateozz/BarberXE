{"version":3,"sources":["../browser/src/driver/sqljs/SqljsConnectionOptions.ts"],"names":[],"mappings":"","file":"SqljsConnectionOptions.js","sourcesContent":["import { BaseDataSourceOptions } from \"../../data-source/BaseDataSourceOptions\"\r\n\r\n/**\r\n * Sql.js-specific connection options.\r\n */\r\nexport interface SqljsConnectionOptions extends BaseDataSourceOptions {\r\n    /**\r\n     * Database type.\r\n     */\r\n    readonly type: \"sqljs\"\r\n\r\n    /**\r\n     * A Uint8Array that gets imported when the connection is opened.\r\n     */\r\n    readonly database?: Uint8Array\r\n\r\n    /**\r\n     * The driver object\r\n     * This defaults to require(\"sql.js\")\r\n     */\r\n    readonly driver?: any\r\n\r\n    /**\r\n     * Config that's used to initialize sql.js.\r\n     */\r\n    readonly sqlJsConfig?: any\r\n\r\n    /**\r\n     * Enables the autoSave mechanism which either saves to location\r\n     * or calls autoSaveCallback every time a change to the database is made.\r\n     */\r\n    readonly autoSave?: boolean\r\n\r\n    /**\r\n     * A function that gets called on every change instead of the internal autoSave function.\r\n     * autoSave has to be enabled for this to work.\r\n     */\r\n    readonly autoSaveCallback?: Function\r\n\r\n    /**\r\n     * File path (Node.js) or local storage key (browser) to load and save database from.\r\n     * If this is specified without autoSave, the database is loaded from the location\r\n     * and can be saved manually via the SqljsEntityManager. If autoSave is enabled,\r\n     * location is used to automatically save the database.\r\n     */\r\n    readonly location?: string\r\n\r\n    /**\r\n     * Enables the usage of the localforage library to save & load the database asynchronously from the\r\n     * indexedDB instead of using the synchron local storage methods in a browser environment.\r\n     */\r\n    readonly useLocalForage?: boolean\r\n\r\n    readonly poolSize?: never\r\n}\r\n"],"sourceRoot":"../.."}
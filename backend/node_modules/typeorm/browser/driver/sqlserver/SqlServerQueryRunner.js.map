{"version":3,"sources":["../browser/src/driver/sqlserver/SqlServerQueryRunner.ts"],"names":[],"mappings":"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","file":"SqlServerQueryRunner.js","sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { QueryResult } from \"../../query-runner/QueryResult\"\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\r\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\r\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\r\nimport { ColumnType } from \"../types/ColumnTypes\"\r\nimport { ReadStream } from \"../../platform/PlatformTools\"\r\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\r\nimport { Table } from \"../../schema-builder/table/Table\"\r\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\r\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\r\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\r\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\r\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\r\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\r\nimport { View } from \"../../schema-builder/view/View\"\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\r\nimport { OrmUtils } from \"../../util/OrmUtils\"\r\nimport { Query } from \"../Query\"\r\nimport { IsolationLevel } from \"../types/IsolationLevel\"\r\nimport { MssqlParameter } from \"./MssqlParameter\"\r\nimport { SqlServerDriver } from \"./SqlServerDriver\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { TypeORMError } from \"../../error\"\r\nimport { QueryLock } from \"../../query-runner/QueryLock\"\r\nimport { MetadataTableType } from \"../types/MetadataTableType\"\r\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\r\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\r\n\r\n/**\r\n * Runs queries on a single SQL Server database connection.\r\n */\r\nexport class SqlServerQueryRunner\r\n    extends BaseQueryRunner\r\n    implements QueryRunner\r\n{\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: SqlServerDriver\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    private lock: QueryLock = new QueryLock()\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: SqlServerDriver, mode: ReplicationMode) {\r\n        super()\r\n        this.driver = driver\r\n        this.connection = driver.connection\r\n        this.broadcaster = new Broadcaster(this)\r\n        this.mode = mode\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<void> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Releases used database connection.\r\n     * You cannot use query runner methods once its released.\r\n     */\r\n    release(): Promise<void> {\r\n        this.isReleased = true\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        this.isTransactionActive = true\r\n        try {\r\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\r\n        } catch (err) {\r\n            this.isTransactionActive = false\r\n            throw err\r\n        }\r\n        await new Promise<void>(async (ok, fail) => {\r\n            const transactionCallback = (err: any) => {\r\n                if (err) {\r\n                    this.isTransactionActive = false\r\n                    return fail(err)\r\n                }\r\n                ok()\r\n            }\r\n\r\n            if (this.transactionDepth === 0) {\r\n                this.transactionDepth += 1\r\n                const pool = await (this.mode === \"slave\"\r\n                    ? this.driver.obtainSlaveConnection()\r\n                    : this.driver.obtainMasterConnection())\r\n                this.databaseConnection = pool.transaction()\r\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\")\r\n                if (isolationLevel) {\r\n                    this.databaseConnection.begin(\r\n                        this.convertIsolationLevel(isolationLevel),\r\n                        transactionCallback,\r\n                    )\r\n                    this.connection.logger.logQuery(\r\n                        \"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel,\r\n                    )\r\n                } else {\r\n                    this.databaseConnection.begin(transactionCallback)\r\n                }\r\n            } else {\r\n                this.transactionDepth += 1\r\n                await this.query(\r\n                    `SAVE TRANSACTION typeorm_${this.transactionDepth - 1}`,\r\n                )\r\n                ok()\r\n            }\r\n        })\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\r\n\r\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\r\n\r\n        if (this.transactionDepth === 1) {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.transactionDepth -= 1\r\n                this.databaseConnection.commit(async (err: any) => {\r\n                    if (err) return fail(err)\r\n                    this.isTransactionActive = false\r\n                    this.databaseConnection = null\r\n\r\n                    await this.broadcaster.broadcast(\"AfterTransactionCommit\")\r\n\r\n                    ok()\r\n                    this.connection.logger.logQuery(\"COMMIT\")\r\n                })\r\n            })\r\n        }\r\n        this.transactionDepth -= 1\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\r\n\r\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\r\n\r\n        if (this.transactionDepth > 1) {\r\n            this.transactionDepth -= 1\r\n            await this.query(\r\n                `ROLLBACK TRANSACTION typeorm_${this.transactionDepth}`,\r\n            )\r\n        } else {\r\n            return new Promise<void>((ok, fail) => {\r\n                this.transactionDepth -= 1\r\n                this.databaseConnection.rollback(async (err: any) => {\r\n                    if (err) return fail(err)\r\n                    this.isTransactionActive = false\r\n                    this.databaseConnection = null\r\n\r\n                    await this.broadcaster.broadcast(\"AfterTransactionRollback\")\r\n\r\n                    ok()\r\n                    this.connection.logger.logQuery(\"ROLLBACK\")\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(\r\n        query: string,\r\n        parameters?: any[],\r\n        useStructuredResult = false,\r\n    ): Promise<any> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        const release = await this.lock.acquire()\r\n\r\n        const broadcasterResult = new BroadcasterResult()\r\n\r\n        try {\r\n            this.driver.connection.logger.logQuery(query, parameters, this)\r\n            this.broadcaster.broadcastBeforeQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n            )\r\n\r\n            const pool = await (this.mode === \"slave\"\r\n                ? this.driver.obtainSlaveConnection()\r\n                : this.driver.obtainMasterConnection())\r\n            const request = new this.driver.mssql.Request(\r\n                this.isTransactionActive ? this.databaseConnection : pool,\r\n            )\r\n            if (parameters && parameters.length) {\r\n                parameters.forEach((parameter, index) => {\r\n                    const parameterName = index.toString()\r\n                    if (InstanceChecker.isMssqlParameter(parameter)) {\r\n                        const mssqlParameter =\r\n                            this.mssqlParameterToNativeParameter(parameter)\r\n                        if (mssqlParameter) {\r\n                            request.input(\r\n                                parameterName,\r\n                                mssqlParameter,\r\n                                parameter.value,\r\n                            )\r\n                        } else {\r\n                            request.input(parameterName, parameter.value)\r\n                        }\r\n                    } else {\r\n                        request.input(parameterName, parameter)\r\n                    }\r\n                })\r\n            }\r\n            const queryStartTime = +new Date()\r\n\r\n            const raw = await new Promise<any>((ok, fail) => {\r\n                request.query(query, (err: any, raw: any) => {\r\n                    // log slow queries if maxQueryExecution time is set\r\n                    const maxQueryExecutionTime =\r\n                        this.driver.options.maxQueryExecutionTime\r\n                    const queryEndTime = +new Date()\r\n                    const queryExecutionTime = queryEndTime - queryStartTime\r\n\r\n                    this.broadcaster.broadcastAfterQueryEvent(\r\n                        broadcasterResult,\r\n                        query,\r\n                        parameters,\r\n                        true,\r\n                        queryExecutionTime,\r\n                        raw,\r\n                        undefined,\r\n                    )\r\n\r\n                    if (\r\n                        maxQueryExecutionTime &&\r\n                        queryExecutionTime > maxQueryExecutionTime\r\n                    ) {\r\n                        this.driver.connection.logger.logQuerySlow(\r\n                            queryExecutionTime,\r\n                            query,\r\n                            parameters,\r\n                            this,\r\n                        )\r\n                    }\r\n\r\n                    if (err) {\r\n                        fail(new QueryFailedError(query, parameters, err))\r\n                    }\r\n\r\n                    ok(raw)\r\n                })\r\n            })\r\n\r\n            const result = new QueryResult()\r\n\r\n            if (raw?.hasOwnProperty(\"recordset\")) {\r\n                result.records = raw.recordset\r\n            }\r\n\r\n            if (raw?.hasOwnProperty(\"rowsAffected\")) {\r\n                result.affected = raw.rowsAffected[0]\r\n            }\r\n\r\n            const queryType = query.slice(0, query.indexOf(\" \"))\r\n            switch (queryType) {\r\n                case \"DELETE\":\r\n                    // for DELETE query additionally return number of affected rows\r\n                    result.raw = [raw.recordset, raw.rowsAffected[0]]\r\n                    break\r\n                default:\r\n                    result.raw = raw.recordset\r\n            }\r\n\r\n            if (useStructuredResult) {\r\n                return result\r\n            } else {\r\n                return result.raw\r\n            }\r\n        } catch (err) {\r\n            this.driver.connection.logger.logQueryError(\r\n                err,\r\n                query,\r\n                parameters,\r\n                this,\r\n            )\r\n            this.broadcaster.broadcastAfterQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n                false,\r\n                undefined,\r\n                undefined,\r\n                err,\r\n            )\r\n\r\n            throw err\r\n        } finally {\r\n            await broadcasterResult.wait()\r\n\r\n            release()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    async stream(\r\n        query: string,\r\n        parameters?: any[],\r\n        onEnd?: Function,\r\n        onError?: Function,\r\n    ): Promise<ReadStream> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        const release = await this.lock.acquire()\r\n\r\n        this.driver.connection.logger.logQuery(query, parameters, this)\r\n        const pool = await (this.mode === \"slave\"\r\n            ? this.driver.obtainSlaveConnection()\r\n            : this.driver.obtainMasterConnection())\r\n        const request = new this.driver.mssql.Request(\r\n            this.isTransactionActive ? this.databaseConnection : pool,\r\n        )\r\n        if (parameters && parameters.length) {\r\n            parameters.forEach((parameter, index) => {\r\n                const parameterName = index.toString()\r\n                if (InstanceChecker.isMssqlParameter(parameter)) {\r\n                    request.input(\r\n                        parameterName,\r\n                        this.mssqlParameterToNativeParameter(parameter),\r\n                        parameter.value,\r\n                    )\r\n                } else {\r\n                    request.input(parameterName, parameter)\r\n                }\r\n            })\r\n        }\r\n\r\n        request.query(query)\r\n\r\n        const streamRequest = request.toReadableStream()\r\n\r\n        streamRequest.on(\"error\", (err: any) => {\r\n            release()\r\n            this.driver.connection.logger.logQueryError(\r\n                err,\r\n                query,\r\n                parameters,\r\n                this,\r\n            )\r\n        })\r\n\r\n        streamRequest.on(\"end\", () => {\r\n            release()\r\n        })\r\n\r\n        if (onEnd) {\r\n            streamRequest.on(\"end\", onEnd)\r\n        }\r\n\r\n        if (onError) {\r\n            streamRequest.on(\"error\", onError)\r\n        }\r\n\r\n        return streamRequest\r\n    }\r\n\r\n    /**\r\n     * Returns all available database names including system databases.\r\n     */\r\n    async getDatabases(): Promise<string[]> {\r\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`)\r\n        return results.map((result) => result[\"DATABASE_NAME\"])\r\n    }\r\n\r\n    /**\r\n     * Returns all available schema names including system schemas.\r\n     * If database parameter specified, returns schemas of that database.\r\n     */\r\n    async getSchemas(database?: string): Promise<string[]> {\r\n        const query = database\r\n            ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"`\r\n            : `SELECT * FROM \"sys\".\"schemas\"`\r\n        const results: ObjectLiteral[] = await this.query(query)\r\n        return results.map((result) => result[\"name\"])\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        const result = await this.query(\r\n            `SELECT DB_ID('${database}') as \"db_id\"`,\r\n        )\r\n        const dbId = result[0][\"db_id\"]\r\n        return !!dbId\r\n    }\r\n\r\n    /**\r\n     * Loads currently using database\r\n     */\r\n    async getCurrentDatabase(): Promise<string> {\r\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`)\r\n        return currentDBQuery[0][\"db_name\"]\r\n    }\r\n\r\n    /**\r\n     * Checks if schema with the given name exist.\r\n     */\r\n    async hasSchema(schema: string): Promise<boolean> {\r\n        const result = await this.query(\r\n            `SELECT SCHEMA_ID('${schema}') as \"schema_id\"`,\r\n        )\r\n        const schemaId = result[0][\"schema_id\"]\r\n        return !!schemaId\r\n    }\r\n\r\n    /**\r\n     * Loads currently using database schema\r\n     */\r\n    async getCurrentSchema(): Promise<string> {\r\n        const currentSchemaQuery = await this.query(\r\n            `SELECT SCHEMA_NAME() AS \"schema_name\"`,\r\n        )\r\n        return currentSchemaQuery[0][\"schema_name\"]\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\r\n        const parsedTableName = this.driver.parseTableName(tableOrName)\r\n\r\n        if (!parsedTableName.database) {\r\n            parsedTableName.database = await this.getCurrentDatabase()\r\n        }\r\n\r\n        if (!parsedTableName.schema) {\r\n            parsedTableName.schema = await this.getCurrentSchema()\r\n        }\r\n\r\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}'`\r\n        const result = await this.query(sql)\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Checks if column exist in the table.\r\n     */\r\n    async hasColumn(\r\n        tableOrName: Table | string,\r\n        columnName: string,\r\n    ): Promise<boolean> {\r\n        const parsedTableName = this.driver.parseTableName(tableOrName)\r\n\r\n        if (!parsedTableName.database) {\r\n            parsedTableName.database = await this.getCurrentDatabase()\r\n        }\r\n\r\n        if (!parsedTableName.schema) {\r\n            parsedTableName.schema = await this.getCurrentSchema()\r\n        }\r\n\r\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}' AND \"COLUMN_NAME\" = '${columnName}'`\r\n        const result = await this.query(sql)\r\n        return result.length ? true : false\r\n    }\r\n\r\n    /**\r\n     * Creates a new database.\r\n     */\r\n    async createDatabase(\r\n        database: string,\r\n        ifNotExist?: boolean,\r\n    ): Promise<void> {\r\n        const up = ifNotExist\r\n            ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"`\r\n            : `CREATE DATABASE \"${database}\"`\r\n        const down = `DROP DATABASE \"${database}\"`\r\n        await this.executeQueries(new Query(up), new Query(down))\r\n    }\r\n\r\n    /**\r\n     * Drops database.\r\n     */\r\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\r\n        const up = ifExist\r\n            ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"`\r\n            : `DROP DATABASE \"${database}\"`\r\n        const down = `CREATE DATABASE \"${database}\"`\r\n        await this.executeQueries(new Query(up), new Query(down))\r\n    }\r\n\r\n    /**\r\n     * Creates table schema.\r\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\r\n     */\r\n    async createSchema(\r\n        schemaPath: string,\r\n        ifNotExist?: boolean,\r\n    ): Promise<void> {\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        if (schemaPath.indexOf(\".\") === -1) {\r\n            const upQuery = ifNotExist\r\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END`\r\n                : `CREATE SCHEMA \"${schemaPath}\"`\r\n            upQueries.push(new Query(upQuery))\r\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`))\r\n        } else {\r\n            const dbName = schemaPath.split(\".\")[0]\r\n            const schema = schemaPath.split(\".\")[1]\r\n            const currentDB = await this.getCurrentDatabase()\r\n            upQueries.push(new Query(`USE \"${dbName}\"`))\r\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\r\n\r\n            const upQuery = ifNotExist\r\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END`\r\n                : `CREATE SCHEMA \"${schema}\"`\r\n            upQueries.push(new Query(upQuery))\r\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`))\r\n\r\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\r\n            downQueries.push(new Query(`USE \"${dbName}\"`))\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Drops table schema.\r\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\r\n     */\r\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        if (schemaPath.indexOf(\".\") === -1) {\r\n            const upQuery = ifExist\r\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END`\r\n                : `DROP SCHEMA \"${schemaPath}\"`\r\n            upQueries.push(new Query(upQuery))\r\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`))\r\n        } else {\r\n            const dbName = schemaPath.split(\".\")[0]\r\n            const schema = schemaPath.split(\".\")[1]\r\n            const currentDB = await this.getCurrentDatabase()\r\n            upQueries.push(new Query(`USE \"${dbName}\"`))\r\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\r\n\r\n            const upQuery = ifExist\r\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END`\r\n                : `DROP SCHEMA \"${schema}\"`\r\n            upQueries.push(new Query(upQuery))\r\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`))\r\n\r\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\r\n            downQueries.push(new Query(`USE \"${dbName}\"`))\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Creates a new table.\r\n     */\r\n    async createTable(\r\n        table: Table,\r\n        ifNotExist: boolean = false,\r\n        createForeignKeys: boolean = true,\r\n        createIndices: boolean = true,\r\n    ): Promise<void> {\r\n        if (ifNotExist) {\r\n            const isTableExist = await this.hasTable(table)\r\n            if (isTableExist) return Promise.resolve()\r\n        }\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        upQueries.push(this.createTableSql(table, createForeignKeys))\r\n        downQueries.push(this.dropTableSql(table))\r\n\r\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\r\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\r\n        if (createForeignKeys)\r\n            table.foreignKeys.forEach((foreignKey) =>\r\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\r\n            )\r\n\r\n        if (createIndices) {\r\n            table.indices.forEach((index) => {\r\n                // new index may be passed without name. In this case we generate index name manually.\r\n                if (!index.name)\r\n                    index.name = this.connection.namingStrategy.indexName(\r\n                        table,\r\n                        index.columnNames,\r\n                        index.where,\r\n                    )\r\n                upQueries.push(this.createIndexSql(table, index))\r\n                downQueries.push(this.dropIndexSql(table, index))\r\n            })\r\n        }\r\n\r\n        // if table have column with generated type, we must add the expression to the metadata table\r\n        const generatedColumns = table.columns.filter(\r\n            (column) => column.generatedType && column.asExpression,\r\n        )\r\n\r\n        for (const column of generatedColumns) {\r\n            const parsedTableName = this.driver.parseTableName(table)\r\n\r\n            if (!parsedTableName.schema) {\r\n                parsedTableName.schema = await this.getCurrentSchema()\r\n            }\r\n\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                database: parsedTableName.database,\r\n                schema: parsedTableName.schema,\r\n                table: parsedTableName.tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                database: parsedTableName.database,\r\n                schema: parsedTableName.schema,\r\n                table: parsedTableName.tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n\r\n            upQueries.push(insertQuery)\r\n            downQueries.push(deleteQuery)\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(\r\n        tableOrName: Table | string,\r\n        ifExist?: boolean,\r\n        dropForeignKeys: boolean = true,\r\n        dropIndices: boolean = true,\r\n    ): Promise<void> {\r\n        if (ifExist) {\r\n            const isTableExist = await this.hasTable(tableOrName)\r\n            if (!isTableExist) return Promise.resolve()\r\n        }\r\n\r\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\r\n        const createForeignKeys: boolean = dropForeignKeys\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\r\n        // to perform drop queries for foreign keys and indices.\r\n\r\n        if (dropIndices) {\r\n            table.indices.forEach((index) => {\r\n                upQueries.push(this.dropIndexSql(table, index))\r\n                downQueries.push(this.createIndexSql(table, index))\r\n            })\r\n        }\r\n\r\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\r\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\r\n        if (dropForeignKeys)\r\n            table.foreignKeys.forEach((foreignKey) =>\r\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\r\n            )\r\n\r\n        upQueries.push(this.dropTableSql(table))\r\n        downQueries.push(this.createTableSql(table, createForeignKeys))\r\n\r\n        // if table had columns with generated type, we must remove the expression from the metadata table\r\n        const generatedColumns = table.columns.filter(\r\n            (column) => column.generatedType && column.asExpression,\r\n        )\r\n\r\n        for (const column of generatedColumns) {\r\n            const parsedTableName = this.driver.parseTableName(table)\r\n\r\n            if (!parsedTableName.schema) {\r\n                parsedTableName.schema = await this.getCurrentSchema()\r\n            }\r\n\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                database: parsedTableName.database,\r\n                schema: parsedTableName.schema,\r\n                table: parsedTableName.tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                database: parsedTableName.database,\r\n                schema: parsedTableName.schema,\r\n                table: parsedTableName.tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            upQueries.push(deleteQuery)\r\n            downQueries.push(insertQuery)\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Creates a new view.\r\n     */\r\n    async createView(\r\n        view: View,\r\n        syncWithMetadata: boolean = false,\r\n    ): Promise<void> {\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n        upQueries.push(this.createViewSql(view))\r\n        if (syncWithMetadata)\r\n            upQueries.push(await this.insertViewDefinitionSql(view))\r\n        downQueries.push(this.dropViewSql(view))\r\n        if (syncWithMetadata)\r\n            downQueries.push(await this.deleteViewDefinitionSql(view))\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Drops the view.\r\n     */\r\n    async dropView(target: View | string): Promise<void> {\r\n        const viewName = InstanceChecker.isView(target) ? target.name : target\r\n        const view = await this.getCachedView(viewName)\r\n\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n        upQueries.push(await this.deleteViewDefinitionSql(view))\r\n        upQueries.push(this.dropViewSql(view))\r\n        downQueries.push(await this.insertViewDefinitionSql(view))\r\n        downQueries.push(this.createViewSql(view))\r\n        await this.executeQueries(upQueries, downQueries)\r\n    }\r\n\r\n    /**\r\n     * Renames a table.\r\n     */\r\n    async renameTable(\r\n        oldTableOrName: Table | string,\r\n        newTableName: string,\r\n    ): Promise<void> {\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\r\n            ? oldTableOrName\r\n            : await this.getCachedTable(oldTableOrName)\r\n        let newTable = oldTable.clone()\r\n\r\n        // we need database name and schema name to rename FK constraints\r\n        let dbName: string | undefined = undefined\r\n        let schemaName: string | undefined = undefined\r\n        let oldTableName: string = oldTable.name\r\n        const splittedName = oldTable.name.split(\".\")\r\n        if (splittedName.length === 3) {\r\n            dbName = splittedName[0]\r\n            oldTableName = splittedName[2]\r\n            if (splittedName[1] !== \"\") schemaName = splittedName[1]\r\n        } else if (splittedName.length === 2) {\r\n            schemaName = splittedName[0]\r\n            oldTableName = splittedName[1]\r\n        }\r\n\r\n        newTable.name = this.driver.buildTableName(\r\n            newTableName,\r\n            schemaName,\r\n            dbName,\r\n        )\r\n\r\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\r\n        // This need because we can not rename objects from another database.\r\n        const currentDB = await this.getCurrentDatabase()\r\n        if (dbName && dbName !== currentDB) {\r\n            upQueries.push(new Query(`USE \"${dbName}\"`))\r\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\r\n        }\r\n\r\n        // rename table\r\n        upQueries.push(\r\n            new Query(\r\n                `EXEC sp_rename \"${this.getTablePath(\r\n                    oldTable,\r\n                )}\", \"${newTableName}\"`,\r\n            ),\r\n        )\r\n        downQueries.push(\r\n            new Query(\r\n                `EXEC sp_rename \"${this.getTablePath(\r\n                    newTable,\r\n                )}\", \"${oldTableName}\"`,\r\n            ),\r\n        )\r\n\r\n        // rename primary key constraint\r\n        if (\r\n            newTable.primaryColumns.length > 0 &&\r\n            !newTable.primaryColumns[0].primaryKeyConstraintName\r\n        ) {\r\n            const columnNames = newTable.primaryColumns.map(\r\n                (column) => column.name,\r\n            )\r\n\r\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(\r\n                oldTable,\r\n                columnNames,\r\n            )\r\n            const newPkName = this.connection.namingStrategy.primaryKeyName(\r\n                newTable,\r\n                columnNames,\r\n            )\r\n\r\n            // rename primary constraint\r\n            upQueries.push(\r\n                new Query(\r\n                    `EXEC sp_rename \"${this.getTablePath(\r\n                        newTable,\r\n                    )}.${oldPkName}\", \"${newPkName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `EXEC sp_rename \"${this.getTablePath(\r\n                        newTable,\r\n                    )}.${newPkName}\", \"${oldPkName}\"`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        // rename unique constraints\r\n        newTable.uniques.forEach((unique) => {\r\n            const oldUniqueName =\r\n                this.connection.namingStrategy.uniqueConstraintName(\r\n                    oldTable,\r\n                    unique.columnNames,\r\n                )\r\n\r\n            // Skip renaming if Unique has user defined constraint name\r\n            if (unique.name !== oldUniqueName) return\r\n\r\n            // build new constraint name\r\n            const newUniqueName =\r\n                this.connection.namingStrategy.uniqueConstraintName(\r\n                    newTable,\r\n                    unique.columnNames,\r\n                )\r\n\r\n            // build queries\r\n            upQueries.push(\r\n                new Query(\r\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\r\n                        unique.name\r\n                    }\", \"${newUniqueName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `EXEC sp_rename \"${this.getTablePath(\r\n                        newTable,\r\n                    )}.${newUniqueName}\", \"${unique.name}\"`,\r\n                ),\r\n            )\r\n\r\n            // replace constraint name\r\n            unique.name = newUniqueName\r\n        })\r\n\r\n        // rename index constraints\r\n        newTable.indices.forEach((index) => {\r\n            const oldIndexName = this.connection.namingStrategy.indexName(\r\n                oldTable,\r\n                index.columnNames,\r\n                index.where,\r\n            )\r\n\r\n            // Skip renaming if Index has user defined constraint name\r\n            if (index.name !== oldIndexName) return\r\n\r\n            // build new constraint name\r\n            const newIndexName = this.connection.namingStrategy.indexName(\r\n                newTable,\r\n                index.columnNames,\r\n                index.where,\r\n            )\r\n\r\n            // build queries\r\n            upQueries.push(\r\n                new Query(\r\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\r\n                        index.name\r\n                    }\", \"${newIndexName}\", \"INDEX\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `EXEC sp_rename \"${this.getTablePath(\r\n                        newTable,\r\n                    )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\r\n                ),\r\n            )\r\n\r\n            // replace constraint name\r\n            index.name = newIndexName\r\n        })\r\n\r\n        // rename foreign key constraints\r\n        newTable.foreignKeys.forEach((foreignKey) => {\r\n            const oldForeignKeyName =\r\n                this.connection.namingStrategy.foreignKeyName(\r\n                    oldTable,\r\n                    foreignKey.columnNames,\r\n                    this.getTablePath(foreignKey),\r\n                    foreignKey.referencedColumnNames,\r\n                )\r\n\r\n            // Skip renaming if foreign key has user defined constraint name\r\n            if (foreignKey.name !== oldForeignKeyName) return\r\n\r\n            // build new constraint name\r\n            const newForeignKeyName =\r\n                this.connection.namingStrategy.foreignKeyName(\r\n                    newTable,\r\n                    foreignKey.columnNames,\r\n                    this.getTablePath(foreignKey),\r\n                    foreignKey.referencedColumnNames,\r\n                )\r\n\r\n            // build queries\r\n            upQueries.push(\r\n                new Query(\r\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\r\n                        foreignKey.name!,\r\n                        schemaName,\r\n                        dbName,\r\n                    )}\", \"${newForeignKeyName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\r\n                        newForeignKeyName,\r\n                        schemaName,\r\n                        dbName,\r\n                    )}\", \"${foreignKey.name}\"`,\r\n                ),\r\n            )\r\n\r\n            // replace constraint name\r\n            foreignKey.name = newForeignKeyName\r\n        })\r\n\r\n        // change currently used database back to default db.\r\n        if (dbName && dbName !== currentDB) {\r\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\r\n            downQueries.push(new Query(`USE \"${dbName}\"`))\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n\r\n        // rename old table and replace it in cached tabled;\r\n        oldTable.name = newTable.name\r\n        this.replaceCachedTable(oldTable, newTable)\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(\r\n        tableOrName: Table | string,\r\n        column: TableColumn,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const clonedTable = table.clone()\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        upQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} ADD ${this.buildCreateColumnSql(\r\n                    table,\r\n                    column,\r\n                    false,\r\n                    true,\r\n                )}`,\r\n            ),\r\n        )\r\n        downQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\r\n                    column.name\r\n                }\"`,\r\n            ),\r\n        )\r\n\r\n        // create or update primary key constraint\r\n        if (column.isPrimary) {\r\n            const primaryColumns = clonedTable.primaryColumns\r\n            // if table already have primary key, me must drop it and recreate again\r\n            if (primaryColumns.length > 0) {\r\n                const pkName = primaryColumns[0].primaryKeyConstraintName\r\n                    ? primaryColumns[0].primaryKeyConstraintName\r\n                    : this.connection.namingStrategy.primaryKeyName(\r\n                          clonedTable,\r\n                          primaryColumns.map((column) => column.name),\r\n                      )\r\n\r\n                const columnNames = primaryColumns\r\n                    .map((column) => `\"${column.name}\"`)\r\n                    .join(\", \")\r\n\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(\r\n                            table,\r\n                        )} DROP CONSTRAINT \"${pkName}\"`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(\r\n                            table,\r\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                    ),\r\n                )\r\n            }\r\n\r\n            primaryColumns.push(column)\r\n            const pkName = primaryColumns[0].primaryKeyConstraintName\r\n                ? primaryColumns[0].primaryKeyConstraintName\r\n                : this.connection.namingStrategy.primaryKeyName(\r\n                      clonedTable,\r\n                      primaryColumns.map((column) => column.name),\r\n                  )\r\n\r\n            const columnNames = primaryColumns\r\n                .map((column) => `\"${column.name}\"`)\r\n                .join(\", \")\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} DROP CONSTRAINT \"${pkName}\"`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        // create column index\r\n        const columnIndex = clonedTable.indices.find(\r\n            (index) =>\r\n                index.columnNames.length === 1 &&\r\n                index.columnNames[0] === column.name,\r\n        )\r\n        if (columnIndex) {\r\n            upQueries.push(this.createIndexSql(table, columnIndex))\r\n            downQueries.push(this.dropIndexSql(table, columnIndex))\r\n        }\r\n\r\n        // create unique constraint\r\n        if (column.isUnique) {\r\n            const uniqueConstraint = new TableUnique({\r\n                name: this.connection.namingStrategy.uniqueConstraintName(\r\n                    table,\r\n                    [column.name],\r\n                ),\r\n                columnNames: [column.name],\r\n            })\r\n            clonedTable.uniques.push(uniqueConstraint)\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\r\n                        uniqueConstraint.name\r\n                    }\" UNIQUE (\"${column.name}\")`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${\r\n                        uniqueConstraint.name\r\n                    }\"`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        // remove default constraint\r\n        if (column.default !== null && column.default !== undefined) {\r\n            const defaultName =\r\n                this.connection.namingStrategy.defaultConstraintName(\r\n                    table,\r\n                    column.name,\r\n                )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        if (column.generatedType && column.asExpression) {\r\n            const parsedTableName = this.driver.parseTableName(table)\r\n\r\n            if (!parsedTableName.schema) {\r\n                parsedTableName.schema = await this.getCurrentSchema()\r\n            }\r\n\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                database: parsedTableName.database,\r\n                schema: parsedTableName.schema,\r\n                table: parsedTableName.tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                database: parsedTableName.database,\r\n                schema: parsedTableName.schema,\r\n                table: parsedTableName.tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n\r\n            upQueries.push(insertQuery)\r\n            downQueries.push(deleteQuery)\r\n        }\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n\r\n        clonedTable.addColumn(column)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[],\r\n    ): Promise<void> {\r\n        for (const column of columns) {\r\n            await this.addColumn(tableOrName, column)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(\r\n        tableOrName: Table | string,\r\n        oldTableColumnOrName: TableColumn | string,\r\n        newTableColumnOrName: TableColumn | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\r\n            ? oldTableColumnOrName\r\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\r\n        if (!oldColumn)\r\n            throw new TypeORMError(\r\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\r\n            )\r\n\r\n        let newColumn: TableColumn | undefined = undefined\r\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\r\n            newColumn = newTableColumnOrName\r\n        } else {\r\n            newColumn = oldColumn.clone()\r\n            newColumn.name = newTableColumnOrName\r\n        }\r\n\r\n        await this.changeColumn(table, oldColumn, newColumn)\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(\r\n        tableOrName: Table | string,\r\n        oldTableColumnOrName: TableColumn | string,\r\n        newColumn: TableColumn,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        let clonedTable = table.clone()\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\r\n            ? oldTableColumnOrName\r\n            : table.columns.find(\r\n                  (column) => column.name === oldTableColumnOrName,\r\n              )\r\n        if (!oldColumn)\r\n            throw new TypeORMError(\r\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\r\n            )\r\n\r\n        if (\r\n            (newColumn.isGenerated !== oldColumn.isGenerated &&\r\n                newColumn.generationStrategy !== \"uuid\") ||\r\n            newColumn.type !== oldColumn.type ||\r\n            newColumn.length !== oldColumn.length ||\r\n            newColumn.asExpression !== oldColumn.asExpression ||\r\n            newColumn.generatedType !== oldColumn.generatedType\r\n        ) {\r\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\r\n            // Also, we recreate column if column type changed\r\n            await this.dropColumn(table, oldColumn)\r\n            await this.addColumn(table, newColumn)\r\n\r\n            // update cloned table\r\n            clonedTable = table.clone()\r\n        } else {\r\n            if (newColumn.name !== oldColumn.name) {\r\n                // we need database name and schema name to rename FK constraints\r\n                let dbName: string | undefined = undefined\r\n                let schemaName: string | undefined = undefined\r\n                const splittedName = table.name.split(\".\")\r\n                if (splittedName.length === 3) {\r\n                    dbName = splittedName[0]\r\n                    if (splittedName[1] !== \"\") schemaName = splittedName[1]\r\n                } else if (splittedName.length === 2) {\r\n                    schemaName = splittedName[0]\r\n                }\r\n\r\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\r\n                // This need because we can not rename objects from another database.\r\n                const currentDB = await this.getCurrentDatabase()\r\n                if (dbName && dbName !== currentDB) {\r\n                    upQueries.push(new Query(`USE \"${dbName}\"`))\r\n                    downQueries.push(new Query(`USE \"${currentDB}\"`))\r\n                }\r\n\r\n                // rename the column\r\n                upQueries.push(\r\n                    new Query(\r\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\r\n                            oldColumn.name\r\n                        }\", \"${newColumn.name}\"`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\r\n                            newColumn.name\r\n                        }\", \"${oldColumn.name}\"`,\r\n                    ),\r\n                )\r\n\r\n                // rename column primary key constraint\r\n                if (\r\n                    oldColumn.isPrimary === true &&\r\n                    !oldColumn.primaryKeyConstraintName\r\n                ) {\r\n                    const primaryColumns = clonedTable.primaryColumns\r\n\r\n                    // build old primary constraint name\r\n                    const columnNames = primaryColumns.map(\r\n                        (column) => column.name,\r\n                    )\r\n                    const oldPkName =\r\n                        this.connection.namingStrategy.primaryKeyName(\r\n                            clonedTable,\r\n                            columnNames,\r\n                        )\r\n\r\n                    // replace old column name with new column name\r\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1)\r\n                    columnNames.push(newColumn.name)\r\n\r\n                    // build new primary constraint name\r\n                    const newPkName =\r\n                        this.connection.namingStrategy.primaryKeyName(\r\n                            clonedTable,\r\n                            columnNames,\r\n                        )\r\n\r\n                    // rename primary constraint\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `EXEC sp_rename \"${this.getTablePath(\r\n                                clonedTable,\r\n                            )}.${oldPkName}\", \"${newPkName}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `EXEC sp_rename \"${this.getTablePath(\r\n                                clonedTable,\r\n                            )}.${newPkName}\", \"${oldPkName}\"`,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                // rename index constraints\r\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\r\n                    const oldIndexName =\r\n                        this.connection.namingStrategy.indexName(\r\n                            clonedTable,\r\n                            index.columnNames,\r\n                            index.where,\r\n                        )\r\n\r\n                    // Skip renaming if Index has user defined constraint name\r\n                    if (index.name !== oldIndexName) return\r\n\r\n                    // build new constraint name\r\n                    index.columnNames.splice(\r\n                        index.columnNames.indexOf(oldColumn.name),\r\n                        1,\r\n                    )\r\n                    index.columnNames.push(newColumn.name)\r\n                    const newIndexName =\r\n                        this.connection.namingStrategy.indexName(\r\n                            clonedTable,\r\n                            index.columnNames,\r\n                            index.where,\r\n                        )\r\n\r\n                    // build queries\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `EXEC sp_rename \"${this.getTablePath(\r\n                                clonedTable,\r\n                            )}.${index.name}\", \"${newIndexName}\", \"INDEX\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `EXEC sp_rename \"${this.getTablePath(\r\n                                clonedTable,\r\n                            )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\r\n                        ),\r\n                    )\r\n\r\n                    // replace constraint name\r\n                    index.name = newIndexName\r\n                })\r\n\r\n                // rename foreign key constraints\r\n                clonedTable\r\n                    .findColumnForeignKeys(oldColumn)\r\n                    .forEach((foreignKey) => {\r\n                        const foreignKeyName =\r\n                            this.connection.namingStrategy.foreignKeyName(\r\n                                clonedTable,\r\n                                foreignKey.columnNames,\r\n                                this.getTablePath(foreignKey),\r\n                                foreignKey.referencedColumnNames,\r\n                            )\r\n\r\n                        // Skip renaming if foreign key has user defined constraint name\r\n                        if (foreignKey.name !== foreignKeyName) return\r\n\r\n                        // build new constraint name\r\n                        foreignKey.columnNames.splice(\r\n                            foreignKey.columnNames.indexOf(oldColumn.name),\r\n                            1,\r\n                        )\r\n                        foreignKey.columnNames.push(newColumn.name)\r\n                        const newForeignKeyName =\r\n                            this.connection.namingStrategy.foreignKeyName(\r\n                                clonedTable,\r\n                                foreignKey.columnNames,\r\n                                this.getTablePath(foreignKey),\r\n                                foreignKey.referencedColumnNames,\r\n                            )\r\n\r\n                        // build queries\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\r\n                                    foreignKey.name!,\r\n                                    schemaName,\r\n                                    dbName,\r\n                                )}\", \"${newForeignKeyName}\"`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\r\n                                    newForeignKeyName,\r\n                                    schemaName,\r\n                                    dbName,\r\n                                )}\", \"${foreignKey.name}\"`,\r\n                            ),\r\n                        )\r\n\r\n                        // replace constraint name\r\n                        foreignKey.name = newForeignKeyName\r\n                    })\r\n\r\n                // rename check constraints\r\n                clonedTable.findColumnChecks(oldColumn).forEach((check) => {\r\n                    // build new constraint name\r\n                    check.columnNames!.splice(\r\n                        check.columnNames!.indexOf(oldColumn.name),\r\n                        1,\r\n                    )\r\n                    check.columnNames!.push(newColumn.name)\r\n                    const newCheckName =\r\n                        this.connection.namingStrategy.checkConstraintName(\r\n                            clonedTable,\r\n                            check.expression!,\r\n                        )\r\n\r\n                    // build queries\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `EXEC sp_rename \"${this.getTablePath(\r\n                                clonedTable,\r\n                            )}.${check.name}\", \"${newCheckName}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `EXEC sp_rename \"${this.getTablePath(\r\n                                clonedTable,\r\n                            )}.${newCheckName}\", \"${check.name}\"`,\r\n                        ),\r\n                    )\r\n\r\n                    // replace constraint name\r\n                    check.name = newCheckName\r\n                })\r\n\r\n                // rename unique constraints\r\n                clonedTable.findColumnUniques(oldColumn).forEach((unique) => {\r\n                    const oldUniqueName =\r\n                        this.connection.namingStrategy.uniqueConstraintName(\r\n                            clonedTable,\r\n                            unique.columnNames,\r\n                        )\r\n\r\n                    // Skip renaming if Unique has user defined constraint name\r\n                    if (unique.name !== oldUniqueName) return\r\n\r\n                    // build new constraint name\r\n                    unique.columnNames.splice(\r\n                        unique.columnNames.indexOf(oldColumn.name),\r\n                        1,\r\n                    )\r\n                    unique.columnNames.push(newColumn.name)\r\n                    const newUniqueName =\r\n                        this.connection.namingStrategy.uniqueConstraintName(\r\n                            clonedTable,\r\n                            unique.columnNames,\r\n                        )\r\n\r\n                    // build queries\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `EXEC sp_rename \"${this.getTablePath(\r\n                                clonedTable,\r\n                            )}.${unique.name}\", \"${newUniqueName}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `EXEC sp_rename \"${this.getTablePath(\r\n                                clonedTable,\r\n                            )}.${newUniqueName}\", \"${unique.name}\"`,\r\n                        ),\r\n                    )\r\n\r\n                    // replace constraint name\r\n                    unique.name = newUniqueName\r\n                })\r\n\r\n                // rename default constraints\r\n                if (\r\n                    oldColumn.default !== null &&\r\n                    oldColumn.default !== undefined\r\n                ) {\r\n                    const oldDefaultName =\r\n                        this.connection.namingStrategy.defaultConstraintName(\r\n                            table,\r\n                            oldColumn.name,\r\n                        )\r\n                    const newDefaultName =\r\n                        this.connection.namingStrategy.defaultConstraintName(\r\n                            table,\r\n                            newColumn.name,\r\n                        )\r\n\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${oldDefaultName}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${oldDefaultName}\" DEFAULT ${\r\n                                oldColumn.default\r\n                            } FOR \"${newColumn.name}\"`,\r\n                        ),\r\n                    )\r\n\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${newDefaultName}\" DEFAULT ${\r\n                                oldColumn.default\r\n                            } FOR \"${newColumn.name}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${newDefaultName}\"`,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                // change currently used database back to default db.\r\n                if (dbName && dbName !== currentDB) {\r\n                    upQueries.push(new Query(`USE \"${currentDB}\"`))\r\n                    downQueries.push(new Query(`USE \"${dbName}\"`))\r\n                }\r\n\r\n                // rename old column in the Table object\r\n                const oldTableColumn = clonedTable.columns.find(\r\n                    (column) => column.name === oldColumn.name,\r\n                )\r\n                clonedTable.columns[\r\n                    clonedTable.columns.indexOf(oldTableColumn!)\r\n                ].name = newColumn.name\r\n                oldColumn.name = newColumn.name\r\n            }\r\n\r\n            if (\r\n                this.isColumnChanged(oldColumn, newColumn, false, false, false)\r\n            ) {\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(\r\n                            table,\r\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\r\n                            table,\r\n                            newColumn,\r\n                            true,\r\n                            false,\r\n                            true,\r\n                        )}`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(\r\n                            table,\r\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\r\n                            table,\r\n                            oldColumn,\r\n                            true,\r\n                            false,\r\n                            true,\r\n                        )}`,\r\n                    ),\r\n                )\r\n            }\r\n\r\n            if (this.isEnumChanged(oldColumn, newColumn)) {\r\n                const oldExpression = this.getEnumExpression(oldColumn)\r\n                const oldCheck = new TableCheck({\r\n                    name: this.connection.namingStrategy.checkConstraintName(\r\n                        table,\r\n                        oldExpression,\r\n                        true,\r\n                    ),\r\n                    expression: oldExpression,\r\n                })\r\n\r\n                const newExpression = this.getEnumExpression(newColumn)\r\n                const newCheck = new TableCheck({\r\n                    name: this.connection.namingStrategy.checkConstraintName(\r\n                        table,\r\n                        newExpression,\r\n                        true,\r\n                    ),\r\n                    expression: newExpression,\r\n                })\r\n\r\n                upQueries.push(this.dropCheckConstraintSql(table, oldCheck))\r\n                upQueries.push(this.createCheckConstraintSql(table, newCheck))\r\n\r\n                downQueries.push(this.dropCheckConstraintSql(table, newCheck))\r\n                downQueries.push(this.createCheckConstraintSql(table, oldCheck))\r\n            }\r\n\r\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\r\n                const primaryColumns = clonedTable.primaryColumns\r\n\r\n                // if primary column state changed, we must always drop existed constraint.\r\n                if (primaryColumns.length > 0) {\r\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\r\n                        ? primaryColumns[0].primaryKeyConstraintName\r\n                        : this.connection.namingStrategy.primaryKeyName(\r\n                              clonedTable,\r\n                              primaryColumns.map((column) => column.name),\r\n                          )\r\n\r\n                    const columnNames = primaryColumns\r\n                        .map((column) => `\"${column.name}\"`)\r\n                        .join(\", \")\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${pkName}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                if (newColumn.isPrimary === true) {\r\n                    primaryColumns.push(newColumn)\r\n                    // update column in table\r\n                    const column = clonedTable.columns.find(\r\n                        (column) => column.name === newColumn.name,\r\n                    )\r\n                    column!.isPrimary = true\r\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\r\n                        ? primaryColumns[0].primaryKeyConstraintName\r\n                        : this.connection.namingStrategy.primaryKeyName(\r\n                              clonedTable,\r\n                              primaryColumns.map((column) => column.name),\r\n                          )\r\n\r\n                    const columnNames = primaryColumns\r\n                        .map((column) => `\"${column.name}\"`)\r\n                        .join(\", \")\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${pkName}\"`,\r\n                        ),\r\n                    )\r\n                } else {\r\n                    const primaryColumn = primaryColumns.find(\r\n                        (c) => c.name === newColumn.name,\r\n                    )\r\n                    primaryColumns.splice(\r\n                        primaryColumns.indexOf(primaryColumn!),\r\n                        1,\r\n                    )\r\n\r\n                    // update column in table\r\n                    const column = clonedTable.columns.find(\r\n                        (column) => column.name === newColumn.name,\r\n                    )\r\n                    column!.isPrimary = false\r\n\r\n                    // if we have another primary keys, we must recreate constraint.\r\n                    if (primaryColumns.length > 0) {\r\n                        const pkName = primaryColumns[0]\r\n                            .primaryKeyConstraintName\r\n                            ? primaryColumns[0].primaryKeyConstraintName\r\n                            : this.connection.namingStrategy.primaryKeyName(\r\n                                  clonedTable,\r\n                                  primaryColumns.map((column) => column.name),\r\n                              )\r\n\r\n                        const columnNames = primaryColumns\r\n                            .map((column) => `\"${column.name}\"`)\r\n                            .join(\", \")\r\n                        upQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                            ),\r\n                        )\r\n                        downQueries.push(\r\n                            new Query(\r\n                                `ALTER TABLE ${this.escapePath(\r\n                                    table,\r\n                                )} DROP CONSTRAINT \"${pkName}\"`,\r\n                            ),\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (newColumn.isUnique !== oldColumn.isUnique) {\r\n                if (newColumn.isUnique === true) {\r\n                    const uniqueConstraint = new TableUnique({\r\n                        name: this.connection.namingStrategy.uniqueConstraintName(\r\n                            table,\r\n                            [newColumn.name],\r\n                        ),\r\n                        columnNames: [newColumn.name],\r\n                    })\r\n                    clonedTable.uniques.push(uniqueConstraint)\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${\r\n                                uniqueConstraint.name\r\n                            }\" UNIQUE (\"${newColumn.name}\")`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${uniqueConstraint.name}\"`,\r\n                        ),\r\n                    )\r\n                } else {\r\n                    const uniqueConstraint = clonedTable.uniques.find(\r\n                        (unique) => {\r\n                            return (\r\n                                unique.columnNames.length === 1 &&\r\n                                !!unique.columnNames.find(\r\n                                    (columnName) =>\r\n                                        columnName === newColumn.name,\r\n                                )\r\n                            )\r\n                        },\r\n                    )\r\n                    clonedTable.uniques.splice(\r\n                        clonedTable.uniques.indexOf(uniqueConstraint!),\r\n                        1,\r\n                    )\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${\r\n                                uniqueConstraint!.name\r\n                            }\" UNIQUE (\"${newColumn.name}\")`,\r\n                        ),\r\n                    )\r\n                }\r\n            }\r\n\r\n            if (newColumn.default !== oldColumn.default) {\r\n                // (note) if there is a previous default, we need to drop its constraint first\r\n                if (\r\n                    oldColumn.default !== null &&\r\n                    oldColumn.default !== undefined\r\n                ) {\r\n                    const defaultName =\r\n                        this.connection.namingStrategy.defaultConstraintName(\r\n                            table,\r\n                            oldColumn.name,\r\n                        )\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\r\n                                oldColumn.default\r\n                            } FOR \"${oldColumn.name}\"`,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                if (\r\n                    newColumn.default !== null &&\r\n                    newColumn.default !== undefined\r\n                ) {\r\n                    const defaultName =\r\n                        this.connection.namingStrategy.defaultConstraintName(\r\n                            table,\r\n                            newColumn.name,\r\n                        )\r\n                    upQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\r\n                                newColumn.default\r\n                            } FOR \"${newColumn.name}\"`,\r\n                        ),\r\n                    )\r\n                    downQueries.push(\r\n                        new Query(\r\n                            `ALTER TABLE ${this.escapePath(\r\n                                table,\r\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\r\n                        ),\r\n                    )\r\n                }\r\n            }\r\n\r\n            await this.executeQueries(upQueries, downQueries)\r\n            this.replaceCachedTable(table, clonedTable)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(\r\n        tableOrName: Table | string,\r\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\r\n    ): Promise<void> {\r\n        for (const { oldColumn, newColumn } of changedColumns) {\r\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(\r\n        tableOrName: Table | string,\r\n        columnOrName: TableColumn | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const column = InstanceChecker.isTableColumn(columnOrName)\r\n            ? columnOrName\r\n            : table.findColumnByName(columnOrName)\r\n        if (!column)\r\n            throw new TypeORMError(\r\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\r\n            )\r\n\r\n        const clonedTable = table.clone()\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        // drop primary key constraint\r\n        if (column.isPrimary) {\r\n            const pkName = column.primaryKeyConstraintName\r\n                ? column.primaryKeyConstraintName\r\n                : this.connection.namingStrategy.primaryKeyName(\r\n                      clonedTable,\r\n                      clonedTable.primaryColumns.map((column) => column.name),\r\n                  )\r\n\r\n            const columnNames = clonedTable.primaryColumns\r\n                .map((primaryColumn) => `\"${primaryColumn.name}\"`)\r\n                .join(\", \")\r\n\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        clonedTable,\r\n                    )} DROP CONSTRAINT \"${pkName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        clonedTable,\r\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                ),\r\n            )\r\n\r\n            // update column in table\r\n            const tableColumn = clonedTable.findColumnByName(column.name)\r\n            tableColumn!.isPrimary = false\r\n\r\n            // if primary key have multiple columns, we must recreate it without dropped column\r\n            if (clonedTable.primaryColumns.length > 0) {\r\n                const pkName = clonedTable.primaryColumns[0]\r\n                    .primaryKeyConstraintName\r\n                    ? clonedTable.primaryColumns[0].primaryKeyConstraintName\r\n                    : this.connection.namingStrategy.primaryKeyName(\r\n                          clonedTable,\r\n                          clonedTable.primaryColumns.map(\r\n                              (column) => column.name,\r\n                          ),\r\n                      )\r\n\r\n                const columnNames = clonedTable.primaryColumns\r\n                    .map((primaryColumn) => `\"${primaryColumn.name}\"`)\r\n                    .join(\", \")\r\n                upQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(\r\n                            clonedTable,\r\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\r\n                    ),\r\n                )\r\n                downQueries.push(\r\n                    new Query(\r\n                        `ALTER TABLE ${this.escapePath(\r\n                            clonedTable,\r\n                        )} DROP CONSTRAINT \"${pkName}\"`,\r\n                    ),\r\n                )\r\n            }\r\n        }\r\n\r\n        // drop column index\r\n        const columnIndex = clonedTable.indices.find(\r\n            (index) =>\r\n                index.columnNames.length === 1 &&\r\n                index.columnNames[0] === column.name,\r\n        )\r\n        if (columnIndex) {\r\n            clonedTable.indices.splice(\r\n                clonedTable.indices.indexOf(columnIndex),\r\n                1,\r\n            )\r\n            upQueries.push(this.dropIndexSql(table, columnIndex))\r\n            downQueries.push(this.createIndexSql(table, columnIndex))\r\n        }\r\n\r\n        // drop column check\r\n        const columnCheck = clonedTable.checks.find(\r\n            (check) =>\r\n                !!check.columnNames &&\r\n                check.columnNames.length === 1 &&\r\n                check.columnNames[0] === column.name,\r\n        )\r\n        if (columnCheck) {\r\n            clonedTable.checks.splice(\r\n                clonedTable.checks.indexOf(columnCheck),\r\n                1,\r\n            )\r\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck))\r\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck))\r\n        }\r\n\r\n        // drop column unique\r\n        const columnUnique = clonedTable.uniques.find(\r\n            (unique) =>\r\n                unique.columnNames.length === 1 &&\r\n                unique.columnNames[0] === column.name,\r\n        )\r\n        if (columnUnique) {\r\n            clonedTable.uniques.splice(\r\n                clonedTable.uniques.indexOf(columnUnique),\r\n                1,\r\n            )\r\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique))\r\n            downQueries.push(\r\n                this.createUniqueConstraintSql(table, columnUnique),\r\n            )\r\n        }\r\n\r\n        // drop default constraint\r\n        if (column.default !== null && column.default !== undefined) {\r\n            const defaultName =\r\n                this.connection.namingStrategy.defaultConstraintName(\r\n                    table,\r\n                    column.name,\r\n                )\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\r\n                        column.default\r\n                    } FOR \"${column.name}\"`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        if (column.generatedType && column.asExpression) {\r\n            const parsedTableName = this.driver.parseTableName(table)\r\n\r\n            if (!parsedTableName.schema) {\r\n                parsedTableName.schema = await this.getCurrentSchema()\r\n            }\r\n\r\n            const deleteQuery = this.deleteTypeormMetadataSql({\r\n                database: parsedTableName.database,\r\n                schema: parsedTableName.schema,\r\n                table: parsedTableName.tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n            })\r\n            const insertQuery = this.insertTypeormMetadataSql({\r\n                database: parsedTableName.database,\r\n                schema: parsedTableName.schema,\r\n                table: parsedTableName.tableName,\r\n                type: MetadataTableType.GENERATED_COLUMN,\r\n                name: column.name,\r\n                value: column.asExpression,\r\n            })\r\n\r\n            upQueries.push(deleteQuery)\r\n            downQueries.push(insertQuery)\r\n        }\r\n\r\n        upQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\r\n                    column.name\r\n                }\"`,\r\n            ),\r\n        )\r\n        downQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} ADD ${this.buildCreateColumnSql(\r\n                    table,\r\n                    column,\r\n                    false,\r\n                    false,\r\n                )}`,\r\n            ),\r\n        )\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n\r\n        clonedTable.removeColumn(column)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[] | string[],\r\n    ): Promise<void> {\r\n        for (const column of columns) {\r\n            await this.dropColumn(tableOrName, column)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     */\r\n    async createPrimaryKey(\r\n        tableOrName: Table | string,\r\n        columnNames: string[],\r\n        constraintName?: string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const clonedTable = table.clone()\r\n\r\n        const up = this.createPrimaryKeySql(table, columnNames, constraintName)\r\n\r\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\r\n        clonedTable.columns.forEach((column) => {\r\n            if (columnNames.find((columnName) => columnName === column.name))\r\n                column.isPrimary = true\r\n        })\r\n        const down = this.dropPrimaryKeySql(clonedTable)\r\n\r\n        await this.executeQueries(up, down)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Updates composite primary keys.\r\n     */\r\n    async updatePrimaryKeys(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[],\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const clonedTable = table.clone()\r\n        const columnNames = columns.map((column) => column.name)\r\n        const upQueries: Query[] = []\r\n        const downQueries: Query[] = []\r\n\r\n        // if table already have primary columns, we must drop them.\r\n        const primaryColumns = clonedTable.primaryColumns\r\n        if (primaryColumns.length > 0) {\r\n            const pkName = primaryColumns[0].primaryKeyConstraintName\r\n                ? primaryColumns[0].primaryKeyConstraintName\r\n                : this.connection.namingStrategy.primaryKeyName(\r\n                      clonedTable,\r\n                      primaryColumns.map((column) => column.name),\r\n                  )\r\n\r\n            const columnNamesString = primaryColumns\r\n                .map((column) => `\"${column.name}\"`)\r\n                .join(\", \")\r\n\r\n            upQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} DROP CONSTRAINT \"${pkName}\"`,\r\n                ),\r\n            )\r\n            downQueries.push(\r\n                new Query(\r\n                    `ALTER TABLE ${this.escapePath(\r\n                        table,\r\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\r\n                ),\r\n            )\r\n        }\r\n\r\n        // update columns in table.\r\n        clonedTable.columns\r\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\r\n            .forEach((column) => (column.isPrimary = true))\r\n\r\n        const pkName = primaryColumns[0].primaryKeyConstraintName\r\n            ? primaryColumns[0].primaryKeyConstraintName\r\n            : this.connection.namingStrategy.primaryKeyName(\r\n                  clonedTable,\r\n                  columnNames,\r\n              )\r\n\r\n        const columnNamesString = columnNames\r\n            .map((columnName) => `\"${columnName}\"`)\r\n            .join(\", \")\r\n\r\n        upQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\r\n            ),\r\n        )\r\n        downQueries.push(\r\n            new Query(\r\n                `ALTER TABLE ${this.escapePath(\r\n                    table,\r\n                )} DROP CONSTRAINT \"${pkName}\"`,\r\n            ),\r\n        )\r\n\r\n        await this.executeQueries(upQueries, downQueries)\r\n        this.replaceCachedTable(table, clonedTable)\r\n    }\r\n\r\n    /**\r\n     * Drops a primary key.\r\n     */\r\n    async dropPrimaryKey(\r\n        tableOrName: Table | string,\r\n        constraintName?: string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const up = this.dropPrimaryKeySql(table)\r\n        const down = this.createPrimaryKeySql(\r\n            table,\r\n            table.primaryColumns.map((column) => column.name),\r\n            constraintName,\r\n        )\r\n        await this.executeQueries(up, down)\r\n        table.primaryColumns.forEach((column) => {\r\n            column.isPrimary = false\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraint.\r\n     */\r\n    async createUniqueConstraint(\r\n        tableOrName: Table | string,\r\n        uniqueConstraint: TableUnique,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n\r\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\r\n        if (!uniqueConstraint.name)\r\n            uniqueConstraint.name =\r\n                this.connection.namingStrategy.uniqueConstraintName(\r\n                    table,\r\n                    uniqueConstraint.columnNames,\r\n                )\r\n\r\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint)\r\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.addUniqueConstraint(uniqueConstraint)\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraints.\r\n     */\r\n    async createUniqueConstraints(\r\n        tableOrName: Table | string,\r\n        uniqueConstraints: TableUnique[],\r\n    ): Promise<void> {\r\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\r\n            this.createUniqueConstraint(tableOrName, uniqueConstraint),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Drops unique constraint.\r\n     */\r\n    async dropUniqueConstraint(\r\n        tableOrName: Table | string,\r\n        uniqueOrName: TableUnique | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\r\n            ? uniqueOrName\r\n            : table.uniques.find((u) => u.name === uniqueOrName)\r\n        if (!uniqueConstraint)\r\n            throw new TypeORMError(\r\n                `Supplied unique constraint was not found in table ${table.name}`,\r\n            )\r\n\r\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint)\r\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.removeUniqueConstraint(uniqueConstraint)\r\n    }\r\n\r\n    /**\r\n     * Drops an unique constraints.\r\n     */\r\n    async dropUniqueConstraints(\r\n        tableOrName: Table | string,\r\n        uniqueConstraints: TableUnique[],\r\n    ): Promise<void> {\r\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\r\n            this.dropUniqueConstraint(tableOrName, uniqueConstraint),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Creates a new check constraint.\r\n     */\r\n    async createCheckConstraint(\r\n        tableOrName: Table | string,\r\n        checkConstraint: TableCheck,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n\r\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\r\n        if (!checkConstraint.name)\r\n            checkConstraint.name =\r\n                this.connection.namingStrategy.checkConstraintName(\r\n                    table,\r\n                    checkConstraint.expression!,\r\n                )\r\n\r\n        const up = this.createCheckConstraintSql(table, checkConstraint)\r\n        const down = this.dropCheckConstraintSql(table, checkConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.addCheckConstraint(checkConstraint)\r\n    }\r\n\r\n    /**\r\n     * Creates a new check constraints.\r\n     */\r\n    async createCheckConstraints(\r\n        tableOrName: Table | string,\r\n        checkConstraints: TableCheck[],\r\n    ): Promise<void> {\r\n        const promises = checkConstraints.map((checkConstraint) =>\r\n            this.createCheckConstraint(tableOrName, checkConstraint),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Drops check constraint.\r\n     */\r\n    async dropCheckConstraint(\r\n        tableOrName: Table | string,\r\n        checkOrName: TableCheck | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\r\n            ? checkOrName\r\n            : table.checks.find((c) => c.name === checkOrName)\r\n        if (!checkConstraint)\r\n            throw new TypeORMError(\r\n                `Supplied check constraint was not found in table ${table.name}`,\r\n            )\r\n\r\n        const up = this.dropCheckConstraintSql(table, checkConstraint)\r\n        const down = this.createCheckConstraintSql(table, checkConstraint)\r\n        await this.executeQueries(up, down)\r\n        table.removeCheckConstraint(checkConstraint)\r\n    }\r\n\r\n    /**\r\n     * Drops check constraints.\r\n     */\r\n    async dropCheckConstraints(\r\n        tableOrName: Table | string,\r\n        checkConstraints: TableCheck[],\r\n    ): Promise<void> {\r\n        const promises = checkConstraints.map((checkConstraint) =>\r\n            this.dropCheckConstraint(tableOrName, checkConstraint),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Creates a new exclusion constraint.\r\n     */\r\n    async createExclusionConstraint(\r\n        tableOrName: Table | string,\r\n        exclusionConstraint: TableExclusion,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `SqlServer does not support exclusion constraints.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new exclusion constraints.\r\n     */\r\n    async createExclusionConstraints(\r\n        tableOrName: Table | string,\r\n        exclusionConstraints: TableExclusion[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `SqlServer does not support exclusion constraints.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraint.\r\n     */\r\n    async dropExclusionConstraint(\r\n        tableOrName: Table | string,\r\n        exclusionOrName: TableExclusion | string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `SqlServer does not support exclusion constraints.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraints.\r\n     */\r\n    async dropExclusionConstraints(\r\n        tableOrName: Table | string,\r\n        exclusionConstraints: TableExclusion[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `SqlServer does not support exclusion constraints.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(\r\n        tableOrName: Table | string,\r\n        foreignKey: TableForeignKey,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const metadata = this.connection.hasMetadata(table.name)\r\n            ? this.connection.getMetadata(table.name)\r\n            : undefined\r\n\r\n        if (\r\n            metadata &&\r\n            metadata.treeParentRelation &&\r\n            metadata.treeParentRelation!.isTreeParent &&\r\n            metadata.foreignKeys.find(\r\n                (foreignKey) => foreignKey.onDelete !== \"NO ACTION\",\r\n            )\r\n        )\r\n            throw new TypeORMError(\r\n                \"SqlServer does not support options in TreeParent.\",\r\n            )\r\n\r\n        // new FK may be passed without name. In this case we generate FK name manually.\r\n        if (!foreignKey.name)\r\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\r\n                table,\r\n                foreignKey.columnNames,\r\n                this.getTablePath(foreignKey),\r\n                foreignKey.referencedColumnNames,\r\n            )\r\n\r\n        const up = this.createForeignKeySql(table, foreignKey)\r\n        const down = this.dropForeignKeySql(table, foreignKey)\r\n        await this.executeQueries(up, down)\r\n        table.addForeignKey(foreignKey)\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(\r\n        tableOrName: Table | string,\r\n        foreignKeys: TableForeignKey[],\r\n    ): Promise<void> {\r\n        const promises = foreignKeys.map((foreignKey) =>\r\n            this.createForeignKey(tableOrName, foreignKey),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(\r\n        tableOrName: Table | string,\r\n        foreignKeyOrName: TableForeignKey | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\r\n            ? foreignKeyOrName\r\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\r\n        if (!foreignKey)\r\n            throw new TypeORMError(\r\n                `Supplied foreign key was not found in table ${table.name}`,\r\n            )\r\n\r\n        const up = this.dropForeignKeySql(table, foreignKey)\r\n        const down = this.createForeignKeySql(table, foreignKey)\r\n        await this.executeQueries(up, down)\r\n        table.removeForeignKey(foreignKey)\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(\r\n        tableOrName: Table | string,\r\n        foreignKeys: TableForeignKey[],\r\n    ): Promise<void> {\r\n        const promises = foreignKeys.map((foreignKey) =>\r\n            this.dropForeignKey(tableOrName, foreignKey),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(\r\n        tableOrName: Table | string,\r\n        index: TableIndex,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n\r\n        // new index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name) index.name = this.generateIndexName(table, index)\r\n\r\n        const up = this.createIndexSql(table, index)\r\n        const down = this.dropIndexSql(table, index)\r\n        await this.executeQueries(up, down)\r\n        table.addIndex(index)\r\n    }\r\n\r\n    /**\r\n     * Creates a new indices\r\n     */\r\n    async createIndices(\r\n        tableOrName: Table | string,\r\n        indices: TableIndex[],\r\n    ): Promise<void> {\r\n        const promises = indices.map((index) =>\r\n            this.createIndex(tableOrName, index),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Drops an index.\r\n     */\r\n    async dropIndex(\r\n        tableOrName: Table | string,\r\n        indexOrName: TableIndex | string,\r\n    ): Promise<void> {\r\n        const table = InstanceChecker.isTable(tableOrName)\r\n            ? tableOrName\r\n            : await this.getCachedTable(tableOrName)\r\n        const index = InstanceChecker.isTableIndex(indexOrName)\r\n            ? indexOrName\r\n            : table.indices.find((i) => i.name === indexOrName)\r\n        if (!index)\r\n            throw new TypeORMError(\r\n                `Supplied index was not found in table ${table.name}`,\r\n            )\r\n\r\n        // old index may be passed without name. In this case we generate index name manually.\r\n        if (!index.name) index.name = this.generateIndexName(table, index)\r\n\r\n        const up = this.dropIndexSql(table, index)\r\n        const down = this.createIndexSql(table, index)\r\n        await this.executeQueries(up, down)\r\n        table.removeIndex(index)\r\n    }\r\n\r\n    /**\r\n     * Drops an indices from the table.\r\n     */\r\n    async dropIndices(\r\n        tableOrName: Table | string,\r\n        indices: TableIndex[],\r\n    ): Promise<void> {\r\n        const promises = indices.map((index) =>\r\n            this.dropIndex(tableOrName, index),\r\n        )\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Clears all table contents.\r\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\r\n     */\r\n    async clearTable(tablePath: string): Promise<void> {\r\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`)\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     */\r\n    async clearDatabase(database?: string): Promise<void> {\r\n        if (database) {\r\n            const isDatabaseExist = await this.hasDatabase(database)\r\n            if (!isDatabaseExist) return Promise.resolve()\r\n        }\r\n\r\n        const isAnotherTransactionActive = this.isTransactionActive\r\n        if (!isAnotherTransactionActive) await this.startTransaction()\r\n        try {\r\n            let allViewsSql = database\r\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\r\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`\r\n            const allViewsResults: ObjectLiteral[] = await this.query(\r\n                allViewsSql,\r\n            )\r\n\r\n            await Promise.all(\r\n                allViewsResults.map((viewResult) => {\r\n                    // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\r\n                    const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`\r\n                    return this.query(dropTableSql)\r\n                }),\r\n            )\r\n\r\n            let allTablesSql = database\r\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\r\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\r\n            const allTablesResults: ObjectLiteral[] = await this.query(\r\n                allTablesSql,\r\n            )\r\n\r\n            if (allTablesResults.length > 0) {\r\n                const tablesByCatalog: {\r\n                    [key: string]: {\r\n                        TABLE_NAME: string\r\n                        TABLE_SCHEMA: string\r\n                    }[]\r\n                } = allTablesResults.reduce(\r\n                    (c, { TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME }) => {\r\n                        c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\r\n                        c[TABLE_CATALOG].push({ TABLE_SCHEMA, TABLE_NAME })\r\n                        return c\r\n                    },\r\n                    {},\r\n                )\r\n\r\n                const foreignKeysSql = Object.entries(tablesByCatalog)\r\n                    .map(([TABLE_CATALOG, tables]) => {\r\n                        const conditions = tables\r\n                            .map(({ TABLE_SCHEMA, TABLE_NAME }) => {\r\n                                return `(\"fk\".\"referenced_object_id\" = OBJECT_ID('\"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\"'))`\r\n                            })\r\n                            .join(\" OR \")\r\n\r\n                        return `\r\n                        SELECT DISTINCT '${TABLE_CATALOG}' AS                                              \"TABLE_CATALOG\",\r\n                                        OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\",\r\n                                                           DB_ID('${TABLE_CATALOG}')) AS                   \"TABLE_SCHEMA\",\r\n                                        OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${TABLE_CATALOG}')) AS \"TABLE_NAME\",\r\n                                        \"fk\".\"name\" AS                                                     \"CONSTRAINT_NAME\"\r\n                        FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" AS \"fk\"\r\n                        WHERE (${conditions})\r\n                    `\r\n                    })\r\n                    .join(\" UNION ALL \")\r\n\r\n                const foreignKeys: {\r\n                    TABLE_CATALOG: string\r\n                    TABLE_SCHEMA: string\r\n                    TABLE_NAME: string\r\n                    CONSTRAINT_NAME: string\r\n                }[] = await this.query(foreignKeysSql)\r\n\r\n                await Promise.all(\r\n                    foreignKeys.map(\r\n                        async ({\r\n                            TABLE_CATALOG,\r\n                            TABLE_SCHEMA,\r\n                            TABLE_NAME,\r\n                            CONSTRAINT_NAME,\r\n                        }) => {\r\n                            // Disable the constraint first.\r\n                            await this.query(\r\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\r\n                                    `NOCHECK CONSTRAINT \"${CONSTRAINT_NAME}\"`,\r\n                            )\r\n\r\n                            await this.query(\r\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\r\n                                    `DROP CONSTRAINT \"${CONSTRAINT_NAME}\" -- FROM CLEAR`,\r\n                            )\r\n                        },\r\n                    ),\r\n                )\r\n\r\n                await Promise.all(\r\n                    allTablesResults.map((tablesResult) => {\r\n                        if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\r\n                            // don't try to drop temporary tables\r\n                            return\r\n                        }\r\n\r\n                        const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`\r\n                        return this.query(dropTableSql)\r\n                    }),\r\n                )\r\n            }\r\n\r\n            if (!isAnotherTransactionActive) await this.commitTransaction()\r\n        } catch (error) {\r\n            try {\r\n                // we throw original error even if rollback thrown an error\r\n                if (!isAnotherTransactionActive)\r\n                    await this.rollbackTransaction()\r\n            } catch (rollbackError) {}\r\n            throw error\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    protected async loadViews(viewPaths?: string[]): Promise<View[]> {\r\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\r\n        if (!hasTable) {\r\n            return []\r\n        }\r\n\r\n        if (!viewPaths) {\r\n            viewPaths = []\r\n        }\r\n\r\n        const currentSchema = await this.getCurrentSchema()\r\n        const currentDatabase = await this.getCurrentDatabase()\r\n\r\n        const dbNames = viewPaths\r\n            .map((viewPath) => this.driver.parseTableName(viewPath).database)\r\n            .filter((database) => database)\r\n\r\n        if (\r\n            this.driver.database &&\r\n            !dbNames.find((dbName) => dbName === this.driver.database)\r\n        )\r\n            dbNames.push(this.driver.database)\r\n\r\n        const viewsCondition = viewPaths\r\n            .map((viewPath) => {\r\n                let { schema, tableName: name } =\r\n                    this.driver.parseTableName(viewPath)\r\n\r\n                if (!schema) {\r\n                    schema = currentSchema\r\n                }\r\n                return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`\r\n            })\r\n            .join(\" OR \")\r\n\r\n        const query = dbNames\r\n            .map((dbName) => {\r\n                return (\r\n                    `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(\r\n                        this.getTypeormMetadataTableName(),\r\n                    )} \"t\" ` +\r\n                    `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = '${\r\n                        MetadataTableType.VIEW\r\n                    }' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`\r\n                )\r\n            })\r\n            .join(\" UNION ALL \")\r\n\r\n        const dbViews = await this.query(query)\r\n        return dbViews.map((dbView: any) => {\r\n            const view = new View()\r\n            const db =\r\n                dbView[\"TABLE_CATALOG\"] === currentDatabase\r\n                    ? undefined\r\n                    : dbView[\"TABLE_CATALOG\"]\r\n            const schema =\r\n                dbView[\"schema\"] === currentSchema &&\r\n                !this.driver.options.schema\r\n                    ? undefined\r\n                    : dbView[\"schema\"]\r\n            view.database = dbView[\"TABLE_CATALOG\"]\r\n            view.schema = dbView[\"schema\"]\r\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db)\r\n            view.expression = dbView[\"value\"]\r\n            return view\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\r\n        // if no tables given then no need to proceed\r\n        if (tableNames && tableNames.length === 0) {\r\n            return []\r\n        }\r\n\r\n        const currentSchema = await this.getCurrentSchema()\r\n        const currentDatabase = await this.getCurrentDatabase()\r\n\r\n        const dbTables: {\r\n            TABLE_CATALOG: string\r\n            TABLE_SCHEMA: string\r\n            TABLE_NAME: string\r\n        }[] = []\r\n\r\n        if (!tableNames) {\r\n            const databasesSql =\r\n                `SELECT DISTINCT \"name\" ` +\r\n                `FROM \"master\".\"dbo\".\"sysdatabases\" ` +\r\n                `WHERE \"name\" NOT IN ('master', 'model', 'msdb')`\r\n            const dbDatabases: { name: string }[] = await this.query(\r\n                databasesSql,\r\n            )\r\n\r\n            const tablesSql = dbDatabases\r\n                .map(({ name }) => {\r\n                    return `\r\n                    SELECT DISTINCT\r\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\r\n                    FROM \"${name}\".\"INFORMATION_SCHEMA\".\"TABLES\"\r\n                    WHERE\r\n                      \"TABLE_TYPE\" = 'BASE TABLE'\r\n                      AND\r\n                      \"TABLE_CATALOG\" = '${name}'\r\n                      AND\r\n                      ISNULL(Objectproperty(Object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), 'IsMSShipped'), 0) = 0\r\n                `\r\n                })\r\n                .join(\" UNION ALL \")\r\n\r\n            dbTables.push(...(await this.query(tablesSql)))\r\n        } else {\r\n            const tableNamesByCatalog = tableNames\r\n                .map((tableName) => this.driver.parseTableName(tableName))\r\n                .reduce((c, { database, ...other }) => {\r\n                    database = database || currentDatabase\r\n                    c[database] = c[database] || []\r\n                    c[database].push({\r\n                        schema: other.schema || currentSchema,\r\n                        tableName: other.tableName,\r\n                    })\r\n                    return c\r\n                }, {} as { [key: string]: { schema: string; tableName: string }[] })\r\n\r\n            const tablesSql = Object.entries(tableNamesByCatalog)\r\n                .map(([database, tables]) => {\r\n                    const tablesCondition = tables\r\n                        .map(({ schema, tableName }) => {\r\n                            return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${tableName}')`\r\n                        })\r\n                        .join(\" OR \")\r\n\r\n                    return `\r\n                    SELECT DISTINCT\r\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\r\n                    FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\"\r\n                    WHERE\r\n                          \"TABLE_TYPE\" = 'BASE TABLE' AND\r\n                          \"TABLE_CATALOG\" = '${database}' AND\r\n                          ${tablesCondition}\r\n                `\r\n                })\r\n                .join(\" UNION ALL \")\r\n\r\n            dbTables.push(...(await this.query(tablesSql)))\r\n        }\r\n\r\n        // if tables were not found in the db, no need to proceed\r\n        if (dbTables.length === 0) {\r\n            return []\r\n        }\r\n\r\n        const dbTablesByCatalog = dbTables.reduce(\r\n            (c, { TABLE_CATALOG, ...other }) => {\r\n                c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\r\n                c[TABLE_CATALOG].push(other)\r\n                return c\r\n            },\r\n            {} as {\r\n                [key: string]: { TABLE_NAME: string; TABLE_SCHEMA: string }[]\r\n            },\r\n        )\r\n\r\n        const columnsSql = Object.entries(dbTablesByCatalog)\r\n            .map(([TABLE_CATALOG, tables]) => {\r\n                const condition = tables\r\n                    .map(\r\n                        ({ TABLE_SCHEMA, TABLE_NAME }) =>\r\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\r\n                    )\r\n                    .join(\"OR\")\r\n\r\n                return (\r\n                    `SELECT \"COLUMNS\".*, \"cc\".\"is_persisted\", \"cc\".\"definition\" ` +\r\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\r\n                    `LEFT JOIN \"sys\".\"computed_columns\" \"cc\" ON COL_NAME(\"cc\".\"object_id\", \"cc\".\"column_id\") = \"column_name\" ` +\r\n                    `WHERE (${condition})`\r\n                )\r\n            })\r\n            .join(\" UNION ALL \")\r\n\r\n        const constraintsSql = Object.entries(dbTablesByCatalog)\r\n            .map(([TABLE_CATALOG, tables]) => {\r\n                const conditions = tables\r\n                    .map(\r\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\r\n                            `(\"columnUsages\".\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"columnUsages\".\"TABLE_NAME\" = '${TABLE_NAME}')`,\r\n                    )\r\n                    .join(\" OR \")\r\n\r\n                return (\r\n                    `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\r\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ` +\r\n                    `ON ` +\r\n                    `\"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" AND ` +\r\n                    `\"tableConstraints\".\"TABLE_SCHEMA\" = \"columnUsages\".\"TABLE_SCHEMA\" AND ` +\r\n                    `\"tableConstraints\".\"TABLE_NAME\" = \"columnUsages\".\"TABLE_NAME\" ` +\r\n                    `LEFT JOIN \"${TABLE_CATALOG}\".\"sys\".\"check_constraints\" \"chk\" ` +\r\n                    `ON ` +\r\n                    `\"chk\".\"object_id\" = OBJECT_ID(\"columnUsages\".\"TABLE_CATALOG\" + '.' + \"columnUsages\".\"TABLE_SCHEMA\" + '.' + \"columnUsages\".\"CONSTRAINT_NAME\") ` +\r\n                    `WHERE ` +\r\n                    `(${conditions}) AND ` +\r\n                    `\"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`\r\n                )\r\n            })\r\n            .join(\" UNION ALL \")\r\n\r\n        const foreignKeysSql = Object.entries(dbTablesByCatalog)\r\n            .map(([TABLE_CATALOG, tables]) => {\r\n                const conditions = tables\r\n                    .map(\r\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\r\n                            `(\"s1\".\"name\" = '${TABLE_SCHEMA}' AND \"t1\".\"name\" = '${TABLE_NAME}')`,\r\n                    )\r\n                    .join(\" OR \")\r\n\r\n                return (\r\n                    `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\r\n                    `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\r\n                    `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\r\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" \"fk\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\r\n                    `WHERE (${conditions})`\r\n                )\r\n            })\r\n            .join(\" UNION ALL \")\r\n\r\n        const identityColumnsSql = Object.entries(dbTablesByCatalog)\r\n            .map(([TABLE_CATALOG, tables]) => {\r\n                const conditions = tables\r\n                    .map(\r\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\r\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\r\n                    )\r\n                    .join(\" OR \")\r\n\r\n                return (\r\n                    `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\r\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\r\n                    `WHERE ` +\r\n                    `EXISTS(SELECT 1 FROM \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"S\" WHERE OBJECT_ID(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\") = \"S\".\"OBJECT_ID\" AND \"COLUMN_NAME\" = \"S\".\"NAME\" AND \"S\".\"is_identity\" = 1) AND ` +\r\n                    `(${conditions})`\r\n                )\r\n            })\r\n            .join(\" UNION ALL \")\r\n\r\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`\r\n\r\n        const indicesSql = Object.entries(dbTablesByCatalog)\r\n            .map(([TABLE_CATALOG, tables]) => {\r\n                const conditions = tables\r\n                    .map(\r\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\r\n                            `(\"s\".\"name\" = '${TABLE_SCHEMA}' AND \"t\".\"name\" = '${TABLE_NAME}')`,\r\n                    )\r\n                    .join(\" OR \")\r\n\r\n                return (\r\n                    `SELECT '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\r\n                    `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\r\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"indexes\" \"ind\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\r\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\r\n                    `WHERE ` +\r\n                    `\"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0 AND ` +\r\n                    `(${conditions})`\r\n                )\r\n            })\r\n            .join(\" UNION ALL \")\r\n\r\n        const [\r\n            dbColumns,\r\n            dbConstraints,\r\n            dbForeignKeys,\r\n            dbIdentityColumns,\r\n            dbCollations,\r\n            dbIndices,\r\n        ]: ObjectLiteral[][] = await Promise.all([\r\n            this.query(columnsSql),\r\n            this.query(constraintsSql),\r\n            this.query(foreignKeysSql),\r\n            this.query(identityColumnsSql),\r\n            this.query(dbCollationsSql),\r\n            this.query(indicesSql),\r\n        ])\r\n\r\n        // create table schemas for loaded tables\r\n        return await Promise.all(\r\n            dbTables.map(async (dbTable) => {\r\n                const table = new Table()\r\n\r\n                const getSchemaFromKey = (dbObject: any, key: string) => {\r\n                    return dbObject[key] === currentSchema &&\r\n                        (!this.driver.options.schema ||\r\n                            this.driver.options.schema === currentSchema)\r\n                        ? undefined\r\n                        : dbObject[key]\r\n                }\r\n\r\n                // We do not need to join schema and database names, when db or schema is by default.\r\n                const db =\r\n                    dbTable[\"TABLE_CATALOG\"] === currentDatabase\r\n                        ? undefined\r\n                        : dbTable[\"TABLE_CATALOG\"]\r\n                const schema = getSchemaFromKey(dbTable, \"TABLE_SCHEMA\")\r\n                table.database = dbTable[\"TABLE_CATALOG\"]\r\n                table.schema = dbTable[\"TABLE_SCHEMA\"]\r\n                table.name = this.driver.buildTableName(\r\n                    dbTable[\"TABLE_NAME\"],\r\n                    schema,\r\n                    db,\r\n                )\r\n\r\n                const defaultCollation = dbCollations.find(\r\n                    (dbCollation) =>\r\n                        dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"],\r\n                )!\r\n\r\n                // create columns from the loaded columns\r\n                table.columns = await Promise.all(\r\n                    dbColumns\r\n                        .filter(\r\n                            (dbColumn) =>\r\n                                dbColumn[\"TABLE_NAME\"] ===\r\n                                    dbTable[\"TABLE_NAME\"] &&\r\n                                dbColumn[\"TABLE_SCHEMA\"] ===\r\n                                    dbTable[\"TABLE_SCHEMA\"] &&\r\n                                dbColumn[\"TABLE_CATALOG\"] ===\r\n                                    dbTable[\"TABLE_CATALOG\"],\r\n                        )\r\n                        .map(async (dbColumn) => {\r\n                            const columnConstraints = dbConstraints.filter(\r\n                                (dbConstraint) =>\r\n                                    dbConstraint[\"TABLE_NAME\"] ===\r\n                                        dbColumn[\"TABLE_NAME\"] &&\r\n                                    dbConstraint[\"TABLE_SCHEMA\"] ===\r\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\r\n                                    dbConstraint[\"TABLE_CATALOG\"] ===\r\n                                        dbColumn[\"TABLE_CATALOG\"] &&\r\n                                    dbConstraint[\"COLUMN_NAME\"] ===\r\n                                        dbColumn[\"COLUMN_NAME\"],\r\n                            )\r\n\r\n                            const uniqueConstraints = columnConstraints.filter(\r\n                                (constraint) =>\r\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\r\n                            )\r\n                            const isConstraintComposite =\r\n                                uniqueConstraints.every((uniqueConstraint) => {\r\n                                    return dbConstraints.some(\r\n                                        (dbConstraint) =>\r\n                                            dbConstraint[\"CONSTRAINT_TYPE\"] ===\r\n                                                \"UNIQUE\" &&\r\n                                            dbConstraint[\"CONSTRAINT_NAME\"] ===\r\n                                                uniqueConstraint[\r\n                                                    \"CONSTRAINT_NAME\"\r\n                                                ] &&\r\n                                            dbConstraint[\"TABLE_SCHEMA\"] ===\r\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\r\n                                            dbConstraint[\"TABLE_CATALOG\"] ===\r\n                                                dbColumn[\"TABLE_CATALOG\"] &&\r\n                                            dbConstraint[\"COLUMN_NAME\"] !==\r\n                                                dbColumn[\"COLUMN_NAME\"],\r\n                                    )\r\n                                })\r\n\r\n                            const isGenerated = !!dbIdentityColumns.find(\r\n                                (column) =>\r\n                                    column[\"TABLE_NAME\"] ===\r\n                                        dbColumn[\"TABLE_NAME\"] &&\r\n                                    column[\"TABLE_SCHEMA\"] ===\r\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\r\n                                    column[\"TABLE_CATALOG\"] ===\r\n                                        dbColumn[\"TABLE_CATALOG\"] &&\r\n                                    column[\"COLUMN_NAME\"] ===\r\n                                        dbColumn[\"COLUMN_NAME\"],\r\n                            )\r\n\r\n                            const tableColumn = new TableColumn()\r\n                            tableColumn.name = dbColumn[\"COLUMN_NAME\"]\r\n                            tableColumn.type =\r\n                                dbColumn[\"DATA_TYPE\"].toLowerCase()\r\n\r\n                            // check only columns that have length property\r\n                            if (\r\n                                this.driver.withLengthColumnTypes.indexOf(\r\n                                    tableColumn.type as ColumnType,\r\n                                ) !== -1 &&\r\n                                dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]\r\n                            ) {\r\n                                const length =\r\n                                    dbColumn[\r\n                                        \"CHARACTER_MAXIMUM_LENGTH\"\r\n                                    ].toString()\r\n                                if (length === \"-1\") {\r\n                                    tableColumn.length = \"MAX\"\r\n                                } else {\r\n                                    tableColumn.length =\r\n                                        !this.isDefaultColumnLength(\r\n                                            table,\r\n                                            tableColumn,\r\n                                            length,\r\n                                        )\r\n                                            ? length\r\n                                            : \"\"\r\n                                }\r\n                            }\r\n\r\n                            if (\r\n                                tableColumn.type === \"decimal\" ||\r\n                                tableColumn.type === \"numeric\"\r\n                            ) {\r\n                                if (\r\n                                    dbColumn[\"NUMERIC_PRECISION\"] !== null &&\r\n                                    !this.isDefaultColumnPrecision(\r\n                                        table,\r\n                                        tableColumn,\r\n                                        dbColumn[\"NUMERIC_PRECISION\"],\r\n                                    )\r\n                                )\r\n                                    tableColumn.precision =\r\n                                        dbColumn[\"NUMERIC_PRECISION\"]\r\n                                if (\r\n                                    dbColumn[\"NUMERIC_SCALE\"] !== null &&\r\n                                    !this.isDefaultColumnScale(\r\n                                        table,\r\n                                        tableColumn,\r\n                                        dbColumn[\"NUMERIC_SCALE\"],\r\n                                    )\r\n                                )\r\n                                    tableColumn.scale =\r\n                                        dbColumn[\"NUMERIC_SCALE\"]\r\n                            }\r\n\r\n                            if (tableColumn.type === \"nvarchar\") {\r\n                                // Check if this is an enum\r\n                                const columnCheckConstraints =\r\n                                    columnConstraints.filter(\r\n                                        (constraint) =>\r\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\r\n                                            \"CHECK\",\r\n                                    )\r\n                                if (columnCheckConstraints.length) {\r\n                                    // const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\r\n                                    for (const checkConstraint of columnCheckConstraints) {\r\n                                        if (\r\n                                            this.isEnumCheckConstraint(\r\n                                                checkConstraint[\r\n                                                    \"CONSTRAINT_NAME\"\r\n                                                ],\r\n                                            )\r\n                                        ) {\r\n                                            // This is an enum constraint, make column into an enum\r\n                                            tableColumn.enum = []\r\n                                            const enumValueRegexp = new RegExp(\r\n                                                \"\\\\[\" +\r\n                                                    tableColumn.name +\r\n                                                    \"\\\\]='([^']+)'\",\r\n                                                \"g\",\r\n                                            )\r\n                                            let result\r\n                                            while (\r\n                                                (result = enumValueRegexp.exec(\r\n                                                    checkConstraint[\r\n                                                        \"definition\"\r\n                                                    ],\r\n                                                )) !== null\r\n                                            ) {\r\n                                                tableColumn.enum.unshift(\r\n                                                    result[1],\r\n                                                )\r\n                                            }\r\n                                            // Skip other column constraints\r\n                                            break\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            const primaryConstraint = columnConstraints.find(\r\n                                (constraint) =>\r\n                                    constraint[\"CONSTRAINT_TYPE\"] ===\r\n                                    \"PRIMARY KEY\",\r\n                            )\r\n                            if (primaryConstraint) {\r\n                                tableColumn.isPrimary = true\r\n                                // find another columns involved in primary key constraint\r\n                                const anotherPrimaryConstraints =\r\n                                    dbConstraints.filter(\r\n                                        (constraint) =>\r\n                                            constraint[\"TABLE_NAME\"] ===\r\n                                                dbColumn[\"TABLE_NAME\"] &&\r\n                                            constraint[\"TABLE_SCHEMA\"] ===\r\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\r\n                                            constraint[\"TABLE_CATALOG\"] ===\r\n                                                dbColumn[\"TABLE_CATALOG\"] &&\r\n                                            constraint[\"COLUMN_NAME\"] !==\r\n                                                dbColumn[\"COLUMN_NAME\"] &&\r\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\r\n                                                \"PRIMARY KEY\",\r\n                                    )\r\n\r\n                                // collect all column names\r\n                                const columnNames =\r\n                                    anotherPrimaryConstraints.map(\r\n                                        (constraint) =>\r\n                                            constraint[\"COLUMN_NAME\"],\r\n                                    )\r\n                                columnNames.push(dbColumn[\"COLUMN_NAME\"])\r\n\r\n                                // build default primary key constraint name\r\n                                const pkName =\r\n                                    this.connection.namingStrategy.primaryKeyName(\r\n                                        table,\r\n                                        columnNames,\r\n                                    )\r\n\r\n                                // if primary key has user-defined constraint name, write it in table column\r\n                                if (\r\n                                    primaryConstraint[\"CONSTRAINT_NAME\"] !==\r\n                                    pkName\r\n                                ) {\r\n                                    tableColumn.primaryKeyConstraintName =\r\n                                        primaryConstraint[\"CONSTRAINT_NAME\"]\r\n                                }\r\n                            }\r\n\r\n                            tableColumn.default =\r\n                                dbColumn[\"COLUMN_DEFAULT\"] !== null &&\r\n                                dbColumn[\"COLUMN_DEFAULT\"] !== undefined\r\n                                    ? this.removeParenthesisFromDefault(\r\n                                          dbColumn[\"COLUMN_DEFAULT\"],\r\n                                      )\r\n                                    : undefined\r\n                            tableColumn.isNullable =\r\n                                dbColumn[\"IS_NULLABLE\"] === \"YES\"\r\n                            tableColumn.isUnique =\r\n                                uniqueConstraints.length > 0 &&\r\n                                !isConstraintComposite\r\n                            tableColumn.isGenerated = isGenerated\r\n                            if (isGenerated)\r\n                                tableColumn.generationStrategy = \"increment\"\r\n                            if (tableColumn.default === \"newsequentialid()\") {\r\n                                tableColumn.isGenerated = true\r\n                                tableColumn.generationStrategy = \"uuid\"\r\n                                tableColumn.default = undefined\r\n                            }\r\n\r\n                            // todo: unable to get default charset\r\n                            // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\r\n                            if (dbColumn[\"COLLATION_NAME\"])\r\n                                tableColumn.collation =\r\n                                    dbColumn[\"COLLATION_NAME\"] ===\r\n                                    defaultCollation[\"COLLATION_NAME\"]\r\n                                        ? undefined\r\n                                        : dbColumn[\"COLLATION_NAME\"]\r\n\r\n                            if (\r\n                                tableColumn.type === \"datetime2\" ||\r\n                                tableColumn.type === \"time\" ||\r\n                                tableColumn.type === \"datetimeoffset\"\r\n                            ) {\r\n                                tableColumn.precision =\r\n                                    !this.isDefaultColumnPrecision(\r\n                                        table,\r\n                                        tableColumn,\r\n                                        dbColumn[\"DATETIME_PRECISION\"],\r\n                                    )\r\n                                        ? dbColumn[\"DATETIME_PRECISION\"]\r\n                                        : undefined\r\n                            }\r\n\r\n                            if (\r\n                                dbColumn[\"is_persisted\"] !== null &&\r\n                                dbColumn[\"is_persisted\"] !== undefined &&\r\n                                dbColumn[\"definition\"]\r\n                            ) {\r\n                                tableColumn.generatedType =\r\n                                    dbColumn[\"is_persisted\"] === true\r\n                                        ? \"STORED\"\r\n                                        : \"VIRTUAL\"\r\n                                // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\r\n                                const asExpressionQuery =\r\n                                    this.selectTypeormMetadataSql({\r\n                                        database: dbTable[\"TABLE_CATALOG\"],\r\n                                        schema: dbTable[\"TABLE_SCHEMA\"],\r\n                                        table: dbTable[\"TABLE_NAME\"],\r\n                                        type: MetadataTableType.GENERATED_COLUMN,\r\n                                        name: tableColumn.name,\r\n                                    })\r\n\r\n                                const results = await this.query(\r\n                                    asExpressionQuery.query,\r\n                                    asExpressionQuery.parameters,\r\n                                )\r\n                                if (results[0] && results[0].value) {\r\n                                    tableColumn.asExpression = results[0].value\r\n                                } else {\r\n                                    tableColumn.asExpression = \"\"\r\n                                }\r\n                            }\r\n\r\n                            return tableColumn\r\n                        }),\r\n                )\r\n\r\n                // find unique constraints of table, group them by constraint name and build TableUnique.\r\n                const tableUniqueConstraints = OrmUtils.uniq(\r\n                    dbConstraints.filter(\r\n                        (dbConstraint) =>\r\n                            dbConstraint[\"TABLE_NAME\"] ===\r\n                                dbTable[\"TABLE_NAME\"] &&\r\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\r\n                                dbTable[\"TABLE_SCHEMA\"] &&\r\n                            dbConstraint[\"TABLE_CATALOG\"] ===\r\n                                dbTable[\"TABLE_CATALOG\"] &&\r\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\r\n                    ),\r\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\r\n                )\r\n\r\n                table.uniques = tableUniqueConstraints.map((constraint) => {\r\n                    const uniques = dbConstraints.filter(\r\n                        (dbC) =>\r\n                            dbC[\"CONSTRAINT_NAME\"] ===\r\n                            constraint[\"CONSTRAINT_NAME\"],\r\n                    )\r\n                    return new TableUnique({\r\n                        name: constraint[\"CONSTRAINT_NAME\"],\r\n                        columnNames: uniques.map((u) => u[\"COLUMN_NAME\"]),\r\n                    })\r\n                })\r\n\r\n                // find check constraints of table, group them by constraint name and build TableCheck.\r\n                const tableCheckConstraints = OrmUtils.uniq(\r\n                    dbConstraints.filter(\r\n                        (dbConstraint) =>\r\n                            dbConstraint[\"TABLE_NAME\"] ===\r\n                                dbTable[\"TABLE_NAME\"] &&\r\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\r\n                                dbTable[\"TABLE_SCHEMA\"] &&\r\n                            dbConstraint[\"TABLE_CATALOG\"] ===\r\n                                dbTable[\"TABLE_CATALOG\"] &&\r\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\",\r\n                    ),\r\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\r\n                )\r\n\r\n                table.checks = tableCheckConstraints\r\n                    .filter(\r\n                        (constraint) =>\r\n                            !this.isEnumCheckConstraint(\r\n                                constraint[\"CONSTRAINT_NAME\"],\r\n                            ),\r\n                    )\r\n                    .map((constraint) => {\r\n                        const checks = dbConstraints.filter(\r\n                            (dbC) =>\r\n                                dbC[\"CONSTRAINT_NAME\"] ===\r\n                                constraint[\"CONSTRAINT_NAME\"],\r\n                        )\r\n                        return new TableCheck({\r\n                            name: constraint[\"CONSTRAINT_NAME\"],\r\n                            columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\r\n                            expression: constraint[\"definition\"],\r\n                        })\r\n                    })\r\n\r\n                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\r\n                const tableForeignKeyConstraints = OrmUtils.uniq(\r\n                    dbForeignKeys.filter(\r\n                        (dbForeignKey) =>\r\n                            dbForeignKey[\"TABLE_NAME\"] ===\r\n                                dbTable[\"TABLE_NAME\"] &&\r\n                            dbForeignKey[\"TABLE_SCHEMA\"] ===\r\n                                dbTable[\"TABLE_SCHEMA\"] &&\r\n                            dbForeignKey[\"TABLE_CATALOG\"] ===\r\n                                dbTable[\"TABLE_CATALOG\"],\r\n                    ),\r\n                    (dbForeignKey) => dbForeignKey[\"FK_NAME\"],\r\n                )\r\n\r\n                table.foreignKeys = tableForeignKeyConstraints.map(\r\n                    (dbForeignKey) => {\r\n                        const foreignKeys = dbForeignKeys.filter(\r\n                            (dbFk) =>\r\n                                dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"],\r\n                        )\r\n\r\n                        // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\r\n                        const db =\r\n                            dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase\r\n                                ? undefined\r\n                                : dbForeignKey[\"TABLE_CATALOG\"]\r\n                        const schema = getSchemaFromKey(\r\n                            dbForeignKey,\r\n                            \"REF_SCHEMA\",\r\n                        )\r\n                        const referencedTableName = this.driver.buildTableName(\r\n                            dbForeignKey[\"REF_TABLE\"],\r\n                            schema,\r\n                            db,\r\n                        )\r\n\r\n                        return new TableForeignKey({\r\n                            name: dbForeignKey[\"FK_NAME\"],\r\n                            columnNames: foreignKeys.map(\r\n                                (dbFk) => dbFk[\"COLUMN_NAME\"],\r\n                            ),\r\n                            referencedDatabase: dbForeignKey[\"TABLE_CATALOG\"],\r\n                            referencedSchema: dbForeignKey[\"REF_SCHEMA\"],\r\n                            referencedTableName: referencedTableName,\r\n                            referencedColumnNames: foreignKeys.map(\r\n                                (dbFk) => dbFk[\"REF_COLUMN\"],\r\n                            ),\r\n                            onDelete: dbForeignKey[\"ON_DELETE\"].replace(\r\n                                \"_\",\r\n                                \" \",\r\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\r\n                            onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\r\n                                \"_\",\r\n                                \" \",\r\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\r\n                        })\r\n                    },\r\n                )\r\n\r\n                // find index constraints of table, group them by constraint name and build TableIndex.\r\n                const tableIndexConstraints = OrmUtils.uniq(\r\n                    dbIndices.filter(\r\n                        (dbIndex) =>\r\n                            dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\r\n                            dbIndex[\"TABLE_SCHEMA\"] ===\r\n                                dbTable[\"TABLE_SCHEMA\"] &&\r\n                            dbIndex[\"TABLE_CATALOG\"] ===\r\n                                dbTable[\"TABLE_CATALOG\"],\r\n                    ),\r\n                    (dbIndex) => dbIndex[\"INDEX_NAME\"],\r\n                )\r\n\r\n                table.indices = tableIndexConstraints.map((constraint) => {\r\n                    const indices = dbIndices.filter((index) => {\r\n                        return (\r\n                            index[\"TABLE_CATALOG\"] ===\r\n                                constraint[\"TABLE_CATALOG\"] &&\r\n                            index[\"TABLE_SCHEMA\"] ===\r\n                                constraint[\"TABLE_SCHEMA\"] &&\r\n                            index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] &&\r\n                            index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]\r\n                        )\r\n                    })\r\n                    return new TableIndex(<TableIndexOptions>{\r\n                        table: table,\r\n                        name: constraint[\"INDEX_NAME\"],\r\n                        columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\r\n                        isUnique: constraint[\"IS_UNIQUE\"],\r\n                        where: constraint[\"CONDITION\"],\r\n                    })\r\n                })\r\n\r\n                return table\r\n            }),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds and returns SQL for create table.\r\n     */\r\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\r\n        const columnDefinitions = table.columns\r\n            .map((column) =>\r\n                this.buildCreateColumnSql(table, column, false, true),\r\n            )\r\n            .join(\", \")\r\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\r\n\r\n        table.columns\r\n            .filter((column) => column.isUnique)\r\n            .forEach((column) => {\r\n                const isUniqueExist = table.uniques.some(\r\n                    (unique) =>\r\n                        unique.columnNames.length === 1 &&\r\n                        unique.columnNames[0] === column.name,\r\n                )\r\n                if (!isUniqueExist)\r\n                    table.uniques.push(\r\n                        new TableUnique({\r\n                            name: this.connection.namingStrategy.uniqueConstraintName(\r\n                                table,\r\n                                [column.name],\r\n                            ),\r\n                            columnNames: [column.name],\r\n                        }),\r\n                    )\r\n            })\r\n\r\n        if (table.uniques.length > 0) {\r\n            const uniquesSql = table.uniques\r\n                .map((unique) => {\r\n                    const uniqueName = unique.name\r\n                        ? unique.name\r\n                        : this.connection.namingStrategy.uniqueConstraintName(\r\n                              table,\r\n                              unique.columnNames,\r\n                          )\r\n                    const columnNames = unique.columnNames\r\n                        .map((columnName) => `\"${columnName}\"`)\r\n                        .join(\", \")\r\n                    return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`\r\n                })\r\n                .join(\", \")\r\n\r\n            sql += `, ${uniquesSql}`\r\n        }\r\n\r\n        if (table.checks.length > 0) {\r\n            const checksSql = table.checks\r\n                .map((check) => {\r\n                    const checkName = check.name\r\n                        ? check.name\r\n                        : this.connection.namingStrategy.checkConstraintName(\r\n                              table,\r\n                              check.expression!,\r\n                          )\r\n                    return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`\r\n                })\r\n                .join(\", \")\r\n\r\n            sql += `, ${checksSql}`\r\n        }\r\n\r\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\r\n            const foreignKeysSql = table.foreignKeys\r\n                .map((fk) => {\r\n                    const columnNames = fk.columnNames\r\n                        .map((columnName) => `\"${columnName}\"`)\r\n                        .join(\", \")\r\n                    if (!fk.name)\r\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\r\n                            table,\r\n                            fk.columnNames,\r\n                            this.getTablePath(fk),\r\n                            fk.referencedColumnNames,\r\n                        )\r\n                    const referencedColumnNames = fk.referencedColumnNames\r\n                        .map((columnName) => `\"${columnName}\"`)\r\n                        .join(\", \")\r\n\r\n                    let constraint = `CONSTRAINT \"${\r\n                        fk.name\r\n                    }\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\r\n                        this.getTablePath(fk),\r\n                    )} (${referencedColumnNames})`\r\n                    if (fk.onDelete) constraint += ` ON DELETE ${fk.onDelete}`\r\n                    if (fk.onUpdate) constraint += ` ON UPDATE ${fk.onUpdate}`\r\n\r\n                    return constraint\r\n                })\r\n                .join(\", \")\r\n\r\n            sql += `, ${foreignKeysSql}`\r\n        }\r\n\r\n        const primaryColumns = table.columns.filter(\r\n            (column) => column.isPrimary,\r\n        )\r\n        if (primaryColumns.length > 0) {\r\n            const primaryKeyName = primaryColumns[0].primaryKeyConstraintName\r\n                ? primaryColumns[0].primaryKeyConstraintName\r\n                : this.connection.namingStrategy.primaryKeyName(\r\n                      table,\r\n                      primaryColumns.map((column) => column.name),\r\n                  )\r\n\r\n            const columnNames = primaryColumns\r\n                .map((column) => `\"${column.name}\"`)\r\n                .join(\", \")\r\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`\r\n        }\r\n\r\n        sql += `)`\r\n\r\n        return new Query(sql)\r\n    }\r\n\r\n    /**\r\n     * Builds drop table sql.\r\n     */\r\n    protected dropTableSql(\r\n        tableOrName: Table | string,\r\n        ifExist?: boolean,\r\n    ): Query {\r\n        const query = ifExist\r\n            ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}`\r\n            : `DROP TABLE ${this.escapePath(tableOrName)}`\r\n        return new Query(query)\r\n    }\r\n\r\n    protected createViewSql(view: View): Query {\r\n        const parsedName = this.driver.parseTableName(view)\r\n\r\n        // Can't use `escapePath` here because `CREATE VIEW` does not accept database names.\r\n        const viewIdentifier = parsedName.schema\r\n            ? `\"${parsedName.schema}\".\"${parsedName.tableName}\"`\r\n            : `\"${parsedName.tableName}\"`\r\n\r\n        if (typeof view.expression === \"string\") {\r\n            return new Query(\r\n                `CREATE VIEW ${viewIdentifier} AS ${view.expression}`,\r\n            )\r\n        } else {\r\n            return new Query(\r\n                `CREATE VIEW ${viewIdentifier} AS ${view\r\n                    .expression(this.connection)\r\n                    .getQuery()}`,\r\n            )\r\n        }\r\n    }\r\n\r\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\r\n        const parsedTableName = this.driver.parseTableName(view)\r\n\r\n        if (!parsedTableName.schema) {\r\n            parsedTableName.schema = await this.getCurrentSchema()\r\n        }\r\n\r\n        const expression =\r\n            typeof view.expression === \"string\"\r\n                ? view.expression.trim()\r\n                : view.expression(this.connection).getQuery()\r\n        return this.insertTypeormMetadataSql({\r\n            type: MetadataTableType.VIEW,\r\n            database: parsedTableName.database,\r\n            schema: parsedTableName.schema,\r\n            name: parsedTableName.tableName,\r\n            value: expression,\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Builds drop view sql.\r\n     */\r\n    protected dropViewSql(viewOrPath: View | string): Query {\r\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`)\r\n    }\r\n\r\n    /**\r\n     * Builds remove view sql.\r\n     */\r\n    protected async deleteViewDefinitionSql(\r\n        viewOrPath: View | string,\r\n    ): Promise<Query> {\r\n        const parsedTableName = this.driver.parseTableName(viewOrPath)\r\n\r\n        if (!parsedTableName.schema) {\r\n            parsedTableName.schema = await this.getCurrentSchema()\r\n        }\r\n\r\n        return this.deleteTypeormMetadataSql({\r\n            type: MetadataTableType.VIEW,\r\n            database: parsedTableName.database,\r\n            schema: parsedTableName.schema,\r\n            name: parsedTableName.tableName,\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Builds create index sql.\r\n     */\r\n    protected createIndexSql(table: Table, index: TableIndex): Query {\r\n        const columns = index.columnNames\r\n            .map((columnName) => `\"${columnName}\"`)\r\n            .join(\", \")\r\n        return new Query(\r\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${\r\n                index.name\r\n            }\" ON ${this.escapePath(table)} (${columns}) ${\r\n                index.where ? \"WHERE \" + index.where : \"\"\r\n            }`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds drop index sql.\r\n     */\r\n    protected dropIndexSql(\r\n        table: Table,\r\n        indexOrName: TableIndex | string,\r\n    ): Query {\r\n        let indexName = InstanceChecker.isTableIndex(indexOrName)\r\n            ? indexOrName.name\r\n            : indexOrName\r\n        return new Query(\r\n            `DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create primary key sql.\r\n     */\r\n    protected createPrimaryKeySql(\r\n        table: Table,\r\n        columnNames: string[],\r\n        constraintName?: string,\r\n    ): Query {\r\n        const primaryKeyName = constraintName\r\n            ? constraintName\r\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\r\n\r\n        const columnNamesString = columnNames\r\n            .map((columnName) => `\"${columnName}\"`)\r\n            .join(\", \")\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds drop primary key sql.\r\n     */\r\n    protected dropPrimaryKeySql(table: Table): Query {\r\n        const columnNames = table.primaryColumns.map((column) => column.name)\r\n        const constraintName = table.primaryColumns[0].primaryKeyConstraintName\r\n        const primaryKeyName = constraintName\r\n            ? constraintName\r\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\r\n\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \"${primaryKeyName}\"`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create unique constraint sql.\r\n     */\r\n    protected createUniqueConstraintSql(\r\n        table: Table,\r\n        uniqueConstraint: TableUnique,\r\n    ): Query {\r\n        const columnNames = uniqueConstraint.columnNames\r\n            .map((column) => `\"` + column + `\"`)\r\n            .join(\", \")\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\r\n                uniqueConstraint.name\r\n            }\" UNIQUE (${columnNames})`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds drop unique constraint sql.\r\n     */\r\n    protected dropUniqueConstraintSql(\r\n        table: Table,\r\n        uniqueOrName: TableUnique | string,\r\n    ): Query {\r\n        const uniqueName = InstanceChecker.isTableUnique(uniqueOrName)\r\n            ? uniqueOrName.name\r\n            : uniqueOrName\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \"${uniqueName}\"`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create check constraint sql.\r\n     */\r\n    protected createCheckConstraintSql(\r\n        table: Table,\r\n        checkConstraint: TableCheck,\r\n    ): Query {\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\r\n                checkConstraint.name\r\n            }\" CHECK (${checkConstraint.expression})`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds drop check constraint sql.\r\n     */\r\n    protected dropCheckConstraintSql(\r\n        table: Table,\r\n        checkOrName: TableCheck | string,\r\n    ): Query {\r\n        const checkName = InstanceChecker.isTableCheck(checkOrName)\r\n            ? checkOrName.name\r\n            : checkOrName\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \"${checkName}\"`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds create foreign key sql.\r\n     */\r\n    protected createForeignKeySql(\r\n        table: Table,\r\n        foreignKey: TableForeignKey,\r\n    ): Query {\r\n        const columnNames = foreignKey.columnNames\r\n            .map((column) => `\"` + column + `\"`)\r\n            .join(\", \")\r\n        const referencedColumnNames = foreignKey.referencedColumnNames\r\n            .map((column) => `\"` + column + `\"`)\r\n            .join(\",\")\r\n        let sql =\r\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\r\n                foreignKey.name\r\n            }\" FOREIGN KEY (${columnNames}) ` +\r\n            `REFERENCES ${this.escapePath(\r\n                this.getTablePath(foreignKey),\r\n            )}(${referencedColumnNames})`\r\n        if (foreignKey.onDelete) sql += ` ON DELETE ${foreignKey.onDelete}`\r\n        if (foreignKey.onUpdate) sql += ` ON UPDATE ${foreignKey.onUpdate}`\r\n\r\n        return new Query(sql)\r\n    }\r\n\r\n    /**\r\n     * Builds drop foreign key sql.\r\n     */\r\n    protected dropForeignKeySql(\r\n        table: Table,\r\n        foreignKeyOrName: TableForeignKey | string,\r\n    ): Query {\r\n        const foreignKeyName = InstanceChecker.isTableForeignKey(\r\n            foreignKeyOrName,\r\n        )\r\n            ? foreignKeyOrName.name\r\n            : foreignKeyOrName\r\n        return new Query(\r\n            `ALTER TABLE ${this.escapePath(\r\n                table,\r\n            )} DROP CONSTRAINT \"${foreignKeyName}\"`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Escapes given table or View path.\r\n     */\r\n    protected escapePath(target: Table | View | string): string {\r\n        const { database, schema, tableName } =\r\n            this.driver.parseTableName(target)\r\n\r\n        if (database && database !== this.driver.database) {\r\n            if (schema && schema !== this.driver.searchSchema) {\r\n                return `\"${database}\".\"${schema}\".\"${tableName}\"`\r\n            }\r\n\r\n            return `\"${database}\"..\"${tableName}\"`\r\n        }\r\n\r\n        if (schema && schema !== this.driver.searchSchema) {\r\n            return `\"${schema}\".\"${tableName}\"`\r\n        }\r\n\r\n        return `\"${tableName}\"`\r\n    }\r\n\r\n    /**\r\n     * Concat database name and schema name to the foreign key name.\r\n     * Needs because FK name is relevant to the schema and database.\r\n     */\r\n    protected buildForeignKeyName(\r\n        fkName: string,\r\n        schemaName: string | undefined,\r\n        dbName: string | undefined,\r\n    ): string {\r\n        let joinedFkName = fkName\r\n        if (schemaName && schemaName !== this.driver.searchSchema)\r\n            joinedFkName = schemaName + \".\" + joinedFkName\r\n        if (dbName && dbName !== this.driver.database)\r\n            joinedFkName = dbName + \".\" + joinedFkName\r\n\r\n        return joinedFkName\r\n    }\r\n\r\n    /**\r\n     * Removes parenthesis around default value.\r\n     * Sql server returns default value with parenthesis around, e.g.\r\n     *  ('My text') - for string\r\n     *  ((1)) - for number\r\n     *  (newsequentialId()) - for function\r\n     */\r\n    protected removeParenthesisFromDefault(defaultValue: string): any {\r\n        if (defaultValue.substr(0, 1) !== \"(\") return defaultValue\r\n        const normalizedDefault = defaultValue.substr(\r\n            1,\r\n            defaultValue.lastIndexOf(\")\") - 1,\r\n        )\r\n        return this.removeParenthesisFromDefault(normalizedDefault)\r\n    }\r\n\r\n    /**\r\n     * Builds a query for create column.\r\n     */\r\n    protected buildCreateColumnSql(\r\n        table: Table,\r\n        column: TableColumn,\r\n        skipIdentity: boolean,\r\n        createDefault: boolean,\r\n        skipEnum?: boolean,\r\n    ) {\r\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(\r\n            column,\r\n        )}`\r\n\r\n        if (!skipEnum && column.enum) {\r\n            const expression = this.getEnumExpression(column)\r\n            const checkName =\r\n                this.connection.namingStrategy.checkConstraintName(\r\n                    table,\r\n                    expression,\r\n                    true,\r\n                )\r\n            c += ` CONSTRAINT ${checkName} CHECK(${expression})`\r\n        }\r\n\r\n        if (column.collation) c += \" COLLATE \" + column.collation\r\n\r\n        if (column.asExpression) {\r\n            c += ` AS (${column.asExpression})`\r\n            if (column.generatedType === \"STORED\") {\r\n                c += ` PERSISTED`\r\n\r\n                // NOT NULL can be specified for computed columns only if PERSISTED is also specified\r\n                if (column.isNullable !== true) c += \" NOT NULL\"\r\n            }\r\n        } else {\r\n            if (column.isNullable !== true) c += \" NOT NULL\"\r\n        }\r\n\r\n        if (\r\n            column.isGenerated === true &&\r\n            column.generationStrategy === \"increment\" &&\r\n            !skipIdentity\r\n        )\r\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\r\n            c += \" IDENTITY(1,1)\"\r\n\r\n        if (\r\n            column.default !== undefined &&\r\n            column.default !== null &&\r\n            createDefault\r\n        ) {\r\n            // we create named constraint to be able to delete this constraint when column been dropped\r\n            const defaultName =\r\n                this.connection.namingStrategy.defaultConstraintName(\r\n                    table,\r\n                    column.name,\r\n                )\r\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`\r\n        }\r\n\r\n        if (\r\n            column.isGenerated &&\r\n            column.generationStrategy === \"uuid\" &&\r\n            !column.default\r\n        ) {\r\n            // we create named constraint to be able to delete this constraint when column been dropped\r\n            const defaultName =\r\n                this.connection.namingStrategy.defaultConstraintName(\r\n                    table,\r\n                    column.name,\r\n                )\r\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`\r\n        }\r\n        return c\r\n    }\r\n\r\n    private getEnumExpression(column: TableColumn) {\r\n        if (!column.enum) {\r\n            throw new Error(`Enum is not defined in column ${column.name}`)\r\n        }\r\n        return (\r\n            column.name +\r\n            \" IN (\" +\r\n            column.enum.map((val) => \"'\" + val + \"'\").join(\",\") +\r\n            \")\"\r\n        )\r\n    }\r\n\r\n    protected isEnumCheckConstraint(name: string): boolean {\r\n        return name.indexOf(\"CHK_\") !== -1 && name.indexOf(\"_ENUM\") !== -1\r\n    }\r\n\r\n    /**\r\n     * Converts MssqlParameter into real mssql parameter type.\r\n     */\r\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\r\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\r\n            case \"bit\":\r\n                return this.driver.mssql.Bit\r\n            case \"bigint\":\r\n                return this.driver.mssql.BigInt\r\n            case \"decimal\":\r\n                return this.driver.mssql.Decimal(...parameter.params)\r\n            case \"float\":\r\n                return this.driver.mssql.Float\r\n            case \"int\":\r\n                return this.driver.mssql.Int\r\n            case \"money\":\r\n                return this.driver.mssql.Money\r\n            case \"numeric\":\r\n                return this.driver.mssql.Numeric(...parameter.params)\r\n            case \"smallint\":\r\n                return this.driver.mssql.SmallInt\r\n            case \"smallmoney\":\r\n                return this.driver.mssql.SmallMoney\r\n            case \"real\":\r\n                return this.driver.mssql.Real\r\n            case \"tinyint\":\r\n                return this.driver.mssql.TinyInt\r\n            case \"char\":\r\n                if (\r\n                    this.driver.options.options\r\n                        ?.disableAsciiToUnicodeParamConversion\r\n                ) {\r\n                    return this.driver.mssql.Char(...parameter.params)\r\n                }\r\n                return this.driver.mssql.NChar(...parameter.params)\r\n            case \"nchar\":\r\n                return this.driver.mssql.NChar(...parameter.params)\r\n            case \"text\":\r\n                if (\r\n                    this.driver.options.options\r\n                        ?.disableAsciiToUnicodeParamConversion\r\n                ) {\r\n                    return this.driver.mssql.Text\r\n                }\r\n                return this.driver.mssql.Ntext\r\n            case \"ntext\":\r\n                return this.driver.mssql.Ntext\r\n            case \"varchar\":\r\n                if (\r\n                    this.driver.options.options\r\n                        ?.disableAsciiToUnicodeParamConversion\r\n                ) {\r\n                    return this.driver.mssql.VarChar(...parameter.params)\r\n                }\r\n                return this.driver.mssql.NVarChar(...parameter.params)\r\n            case \"nvarchar\":\r\n                return this.driver.mssql.NVarChar(...parameter.params)\r\n            case \"xml\":\r\n                return this.driver.mssql.Xml\r\n            case \"time\":\r\n                return this.driver.mssql.Time(...parameter.params)\r\n            case \"date\":\r\n                return this.driver.mssql.Date\r\n            case \"datetime\":\r\n                return this.driver.mssql.DateTime\r\n            case \"datetime2\":\r\n                return this.driver.mssql.DateTime2(...parameter.params)\r\n            case \"datetimeoffset\":\r\n                return this.driver.mssql.DateTimeOffset(...parameter.params)\r\n            case \"smalldatetime\":\r\n                return this.driver.mssql.SmallDateTime\r\n            case \"uniqueidentifier\":\r\n                return this.driver.mssql.UniqueIdentifier\r\n            case \"variant\":\r\n                return this.driver.mssql.Variant\r\n            case \"binary\":\r\n                return this.driver.mssql.Binary\r\n            case \"varbinary\":\r\n                return this.driver.mssql.VarBinary(...parameter.params)\r\n            case \"image\":\r\n                return this.driver.mssql.Image\r\n            case \"udt\":\r\n                return this.driver.mssql.UDT\r\n            case \"rowversion\":\r\n                return this.driver.mssql.RowVersion\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Converts string literal of isolation level to enum.\r\n     * The underlying mssql driver requires an enum for the isolation level.\r\n     */\r\n    convertIsolationLevel(isolation: IsolationLevel) {\r\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL\r\n        switch (isolation) {\r\n            case \"READ UNCOMMITTED\":\r\n                return ISOLATION_LEVEL.READ_UNCOMMITTED\r\n            case \"REPEATABLE READ\":\r\n                return ISOLATION_LEVEL.REPEATABLE_READ\r\n            case \"SERIALIZABLE\":\r\n                return ISOLATION_LEVEL.SERIALIZABLE\r\n\r\n            case \"READ COMMITTED\":\r\n            default:\r\n                return ISOLATION_LEVEL.READ_COMMITTED\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change table comment.\r\n     */\r\n    changeTableComment(\r\n        tableOrName: Table | string,\r\n        comment?: string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `sqlserver driver does not support change table comment.`,\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
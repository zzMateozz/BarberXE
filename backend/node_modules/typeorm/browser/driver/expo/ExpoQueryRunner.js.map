{"version":3,"sources":["../browser/src/driver/expo/ExpoQueryRunner.ts"],"names":[],"mappings":"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","file":"ExpoQueryRunner.js","sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\r\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\r\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\r\nimport { ExpoDriver } from \"./ExpoDriver\"\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\r\nimport { QueryResult } from \"../../query-runner/QueryResult\"\r\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\r\n\r\n// Needed to satisfy the Typescript compiler\r\ninterface IResultSet {\r\n    insertId: number | undefined\r\n    rowsAffected: number\r\n    rows: {\r\n        length: number\r\n        item: (idx: number) => any\r\n        _array: any[]\r\n    }\r\n}\r\ninterface ITransaction {\r\n    executeSql: (\r\n        sql: string,\r\n        args: any[] | undefined,\r\n        ok: (tsx: ITransaction, resultSet: IResultSet) => void,\r\n        fail: (tsx: ITransaction, err: any) => void,\r\n    ) => void\r\n}\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n */\r\nexport class ExpoQueryRunner extends AbstractSqliteQueryRunner {\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: ExpoDriver\r\n\r\n    /**\r\n     * Database transaction object\r\n     */\r\n    private transaction?: ITransaction\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: ExpoDriver) {\r\n        super()\r\n        this.driver = driver\r\n        this.connection = driver.connection\r\n        this.broadcaster = new Broadcaster(this)\r\n    }\r\n\r\n    /**\r\n     * Starts transaction. Within Expo, all database operations happen in a\r\n     * transaction context, so issuing a `BEGIN TRANSACTION` command is\r\n     * redundant and will result in the following error:\r\n     *\r\n     * `Error: Error code 1: cannot start a transaction within a transaction`\r\n     *\r\n     * Instead, we keep track of a `Transaction` object in `this.transaction`\r\n     * and continue using the same object until we wish to commit the\r\n     * transaction.\r\n     */\r\n    async startTransaction(): Promise<void> {\r\n        this.isTransactionActive = true\r\n        try {\r\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\r\n        } catch (err) {\r\n            this.isTransactionActive = false\r\n            throw err\r\n        }\r\n\r\n        this.transactionDepth += 1\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     * Since Expo will automatically commit the transaction once all the\r\n     * callbacks of the transaction object have been completed, \"committing\" a\r\n     * transaction in this driver's context means that we delete the transaction\r\n     * object and set the stage for the next transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (\r\n            !this.isTransactionActive &&\r\n            typeof this.transaction === \"undefined\"\r\n        )\r\n            throw new TransactionNotStartedError()\r\n\r\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\r\n\r\n        this.transaction = undefined\r\n        this.isTransactionActive = false\r\n\r\n        this.transactionDepth -= 1\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionCommit\")\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     * This method's functionality is identical to `commitTransaction()` because\r\n     * the transaction lifecycle is handled within the Expo transaction object.\r\n     * Issuing separate statements for `COMMIT` or `ROLLBACK` aren't necessary.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (\r\n            !this.isTransactionActive &&\r\n            typeof this.transaction === \"undefined\"\r\n        )\r\n            throw new TransactionNotStartedError()\r\n\r\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\r\n\r\n        this.transaction = undefined\r\n        this.isTransactionActive = false\r\n\r\n        this.transactionDepth -= 1\r\n\r\n        await this.broadcaster.broadcast(\"AfterTransactionRollback\")\r\n    }\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        const databaseConnection = await this.connect()\r\n        return new Promise((ok, fail) => {\r\n            databaseConnection.exec(\r\n                [{ sql: \"PRAGMA foreign_keys = OFF\", args: [] }],\r\n                false,\r\n                (err: any) => (err ? fail(err) : ok()),\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        const databaseConnection = await this.connect()\r\n        return new Promise((ok, fail) => {\r\n            databaseConnection.exec(\r\n                [{ sql: \"PRAGMA foreign_keys = ON\", args: [] }],\r\n                false,\r\n                (err: any) => (err ? fail(err) : ok()),\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(\r\n        query: string,\r\n        parameters?: any[],\r\n        useStructuredResult = false,\r\n    ): Promise<any> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        return new Promise<any>(async (ok, fail) => {\r\n            const databaseConnection = await this.connect()\r\n            const broadcasterResult = new BroadcasterResult()\r\n\r\n            this.driver.connection.logger.logQuery(query, parameters, this)\r\n            this.broadcaster.broadcastBeforeQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n            )\r\n\r\n            const queryStartTime = +new Date()\r\n            // All Expo SQL queries are executed in a transaction context\r\n            databaseConnection.transaction(\r\n                async (transaction: ITransaction) => {\r\n                    if (typeof this.transaction === \"undefined\") {\r\n                        await this.startTransaction()\r\n                        this.transaction = transaction\r\n                    }\r\n                    this.transaction.executeSql(\r\n                        query,\r\n                        parameters,\r\n                        async (t: ITransaction, raw: IResultSet) => {\r\n                            // log slow queries if maxQueryExecution time is set\r\n                            const maxQueryExecutionTime =\r\n                                this.driver.options.maxQueryExecutionTime\r\n                            const queryEndTime = +new Date()\r\n                            const queryExecutionTime =\r\n                                queryEndTime - queryStartTime\r\n\r\n                            this.broadcaster.broadcastAfterQueryEvent(\r\n                                broadcasterResult,\r\n                                query,\r\n                                parameters,\r\n                                true,\r\n                                queryExecutionTime,\r\n                                raw,\r\n                                undefined,\r\n                            )\r\n                            await broadcasterResult.wait()\r\n\r\n                            if (\r\n                                maxQueryExecutionTime &&\r\n                                queryExecutionTime > maxQueryExecutionTime\r\n                            ) {\r\n                                this.driver.connection.logger.logQuerySlow(\r\n                                    queryExecutionTime,\r\n                                    query,\r\n                                    parameters,\r\n                                    this,\r\n                                )\r\n                            }\r\n\r\n                            const result = new QueryResult()\r\n\r\n                            if (raw?.hasOwnProperty(\"rowsAffected\")) {\r\n                                result.affected = raw.rowsAffected\r\n                            }\r\n\r\n                            if (raw?.hasOwnProperty(\"rows\")) {\r\n                                let resultSet = []\r\n                                for (let i = 0; i < raw.rows.length; i++) {\r\n                                    resultSet.push(raw.rows.item(i))\r\n                                }\r\n\r\n                                result.raw = resultSet\r\n                                result.records = resultSet\r\n                            }\r\n\r\n                            // return id of inserted row, if query was insert statement.\r\n                            if (query.startsWith(\"INSERT INTO\")) {\r\n                                result.raw = raw.insertId\r\n                            }\r\n\r\n                            if (useStructuredResult) {\r\n                                ok(result)\r\n                            } else {\r\n                                ok(result.raw)\r\n                            }\r\n                        },\r\n                        async (t: ITransaction, err: any) => {\r\n                            this.driver.connection.logger.logQueryError(\r\n                                err,\r\n                                query,\r\n                                parameters,\r\n                                this,\r\n                            )\r\n                            this.broadcaster.broadcastAfterQueryEvent(\r\n                                broadcasterResult,\r\n                                query,\r\n                                parameters,\r\n                                false,\r\n                                undefined,\r\n                                undefined,\r\n                                err,\r\n                            )\r\n                            await broadcasterResult.wait()\r\n\r\n                            fail(new QueryFailedError(query, parameters, err))\r\n                        },\r\n                    )\r\n                },\r\n                async (err: any) => {\r\n                    await this.rollbackTransaction()\r\n                    fail(err)\r\n                },\r\n                () => {\r\n                    this.isTransactionActive = false\r\n                    this.transaction = undefined\r\n                },\r\n            )\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
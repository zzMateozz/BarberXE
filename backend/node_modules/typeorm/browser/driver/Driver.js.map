{"version":3,"sources":["../browser/src/driver/Driver.ts"],"names":[],"mappings":"","file":"Driver.js","sourcesContent":["import { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { ColumnType } from \"./types/ColumnTypes\"\r\nimport { CteCapabilities } from \"./types/CteCapabilities\"\r\nimport { MappedColumnTypes } from \"./types/MappedColumnTypes\"\r\nimport { SchemaBuilder } from \"../schema-builder/SchemaBuilder\"\r\nimport { DataTypeDefaults } from \"./types/DataTypeDefaults\"\r\nimport { BaseDataSourceOptions } from \"../data-source/BaseDataSourceOptions\"\r\nimport { TableColumn } from \"../schema-builder/table/TableColumn\"\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\r\nimport { ReplicationMode } from \"./types/ReplicationMode\"\r\nimport { Table } from \"../schema-builder/table/Table\"\r\nimport { View } from \"../schema-builder/view/View\"\r\nimport { TableForeignKey } from \"../schema-builder/table/TableForeignKey\"\r\nimport { UpsertType } from \"./types/UpsertType\"\r\nimport { OnDeleteType } from \"../metadata/types/OnDeleteType\"\r\nimport { OnUpdateType } from \"../metadata/types/OnUpdateType\"\r\n\r\nexport type ReturningType = \"insert\" | \"update\" | \"delete\"\r\n\r\n/**\r\n * Driver organizes TypeORM communication with specific database management system.\r\n */\r\nexport interface Driver {\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: BaseDataSourceOptions\r\n\r\n    /**\r\n     * Database version/release. Often requires a SQL query to the DB, so it is not always set\r\n     */\r\n    version?: string\r\n\r\n    /**\r\n     * Database name used to perform all write queries.\r\n     *\r\n     * todo: probably move into query runner.\r\n     */\r\n    database?: string\r\n\r\n    /**\r\n     * Schema name used to perform all write queries.\r\n     */\r\n    schema?: string\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport: boolean\r\n\r\n    /**\r\n     * Represent transaction support by this driver\r\n     */\r\n    transactionSupport: \"simple\" | \"nested\" | \"none\"\r\n\r\n    /**\r\n     * Gets list of supported column data types by a driver.\r\n     */\r\n    supportedDataTypes: ColumnType[]\r\n\r\n    /**\r\n     * Returns type of upsert supported by driver if any\r\n     */\r\n    supportedUpsertTypes: UpsertType[]\r\n\r\n    /**\r\n     * Returns list of supported onDelete types by driver\r\n     */\r\n    supportedOnDeleteTypes?: OnDeleteType[]\r\n\r\n    /**\r\n     * Returns list of supported onUpdate types by driver\r\n     */\r\n    supportedOnUpdateTypes?: OnUpdateType[]\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults\r\n\r\n    /**\r\n     * Gets list of spatial column data types.\r\n     */\r\n    spatialTypes: ColumnType[]\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[]\r\n\r\n    /**\r\n     * Gets list of column data types that support precision by a driver.\r\n     */\r\n    withPrecisionColumnTypes: ColumnType[]\r\n\r\n    /**\r\n     * Gets list of column data types that support scale by a driver.\r\n     */\r\n    withScaleColumnTypes: ColumnType[]\r\n\r\n    /**\r\n     * Orm has special columns and we need to know what database column types should be for those types.\r\n     * Column types are driver dependant.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes\r\n\r\n    /**\r\n     * The prefix used for the parameters\r\n     */\r\n    parametersPrefix?: string\r\n\r\n    /**\r\n     * Max length allowed by the DBMS for aliases (execution of queries).\r\n     */\r\n    maxAliasLength?: number\r\n\r\n    cteCapabilities: CteCapabilities\r\n\r\n    /**\r\n     * Dummy table name\r\n     */\r\n    dummyTableName?: string\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Depend on driver type it may create a connection pool.\r\n     */\r\n    connect(): Promise<void>\r\n\r\n    /**\r\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\r\n     */\r\n    afterConnect(): Promise<void>\r\n\r\n    /**\r\n     * Closes connection with database and releases all resources.\r\n     */\r\n    disconnect(): Promise<void>\r\n\r\n    /**\r\n     * Synchronizes database schema (creates tables, indices, etc).\r\n     */\r\n    createSchemaBuilder(): SchemaBuilder\r\n\r\n    /**\r\n     * Creates a query runner used for common queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode): QueryRunner\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(\r\n        sql: string,\r\n        parameters: ObjectLiteral,\r\n        nativeParameters: ObjectLiteral,\r\n    ): [string, any[]]\r\n\r\n    /**\r\n     * Escapes a table name, column name or an alias.\r\n     *\r\n     * todo: probably escape should be able to handle dots in the names and automatically escape them\r\n     */\r\n    escape(name: string): string\r\n\r\n    /**\r\n     * Build full table name with database name, schema name and table name.\r\n     * E.g. myDB.mySchema.myTable\r\n     */\r\n    buildTableName(\r\n        tableName: string,\r\n        schema?: string,\r\n        database?: string,\r\n    ): string\r\n\r\n    /**\r\n     * Parse a target table name or other types and return a normalized table definition.\r\n     */\r\n    parseTableName(\r\n        target: EntityMetadata | Table | View | TableForeignKey | string,\r\n    ): { tableName: string; schema?: string; database?: string }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, column: ColumnMetadata): any\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type.\r\n     */\r\n    prepareHydratedValue(value: any, column: ColumnMetadata): any\r\n\r\n    /**\r\n     * Transforms type of the given column to a database column type.\r\n     */\r\n    normalizeType(column: {\r\n        type?: ColumnType | string\r\n        length?: number | string\r\n        precision?: number | null\r\n        scale?: number\r\n        isArray?: boolean\r\n    }): string\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean\r\n\r\n    /**\r\n     * Calculates column length taking into account the default length values.\r\n     */\r\n    getColumnLength(column: ColumnMetadata): string\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    createFullType(column: TableColumn): string\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any>\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any>\r\n\r\n    /**\r\n     * Creates generated map of values generated or returned by database after INSERT query.\r\n     */\r\n    createGeneratedMap(\r\n        metadata: EntityMetadata,\r\n        insertResult: any,\r\n        entityIndex?: number,\r\n        entityNum?: number,\r\n    ): ObjectLiteral | undefined\r\n\r\n    /**\r\n     * Differentiate columns of this table and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(\r\n        tableColumns: TableColumn[],\r\n        columnMetadatas: ColumnMetadata[],\r\n    ): ColumnMetadata[]\r\n\r\n    /**\r\n     * Returns true if driver supports RETURNING / OUTPUT statement.\r\n     */\r\n    isReturningSqlSupported(returningType: ReturningType): boolean\r\n\r\n    /**\r\n     * Returns true if driver supports uuid values generation on its own.\r\n     */\r\n    isUUIDGenerationSupported(): boolean\r\n\r\n    /**\r\n     * Returns true if driver supports fulltext indices.\r\n     */\r\n    isFullTextColumnTypeSupported(): boolean\r\n\r\n    /**\r\n     * Creates an escaped parameter.\r\n     */\r\n    createParameter(parameterName: string, index: number): string\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../browser/src/driver/sap/SapDriver.ts"],"names":[],"mappings":"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","file":"SapDriver.js","sourcesContent":["import {\r\n    ColumnType,\r\n    DataSource,\r\n    EntityMetadata,\r\n    ObjectLiteral,\r\n    Table,\r\n    TableColumn,\r\n    TableForeignKey,\r\n} from \"../..\"\r\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\r\nimport { TypeORMError } from \"../../error/TypeORMError\"\r\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\r\nimport { PlatformTools } from \"../../platform/PlatformTools\"\r\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\r\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\r\nimport { DateUtils } from \"../../util/DateUtils\"\r\nimport { OrmUtils } from \"../../util/OrmUtils\"\r\nimport { Driver } from \"../Driver\"\r\nimport { CteCapabilities } from \"../types/CteCapabilities\"\r\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\r\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\r\nimport { SapConnectionOptions } from \"./SapConnectionOptions\"\r\nimport { SapQueryRunner } from \"./SapQueryRunner\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { DriverUtils } from \"../DriverUtils\"\r\nimport { View } from \"../../schema-builder/view/View\"\r\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\r\nimport { UpsertType } from \"../types/UpsertType\"\r\n\r\n/**\r\n * Organizes communication with SAP Hana DBMS.\r\n *\r\n * todo: looks like there is no built in support for connection pooling, we need to figure out something\r\n */\r\nexport class SapDriver implements Driver {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by driver.\r\n     */\r\n    connection: DataSource\r\n\r\n    /**\r\n     * Hana Pool instance.\r\n     */\r\n    client: any\r\n\r\n    /**\r\n     * Hana Client streaming extension.\r\n     */\r\n    streamClient: any\r\n    /**\r\n     * Pool for master database.\r\n     */\r\n    master: any\r\n\r\n    /**\r\n     * Pool for slave databases.\r\n     * Used in replication.\r\n     */\r\n    slaves: any[] = []\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: SapConnectionOptions\r\n\r\n    /**\r\n     * Database name used to perform all write queries.\r\n     */\r\n    database?: string\r\n\r\n    /**\r\n     * Schema name used to perform all write queries.\r\n     */\r\n    schema?: string\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean = false\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport = true\r\n\r\n    /**\r\n     * Represent transaction support by this driver\r\n     */\r\n    transactionSupport = \"simple\" as const\r\n\r\n    /**\r\n     * Gets list of supported column data types by a driver.\r\n     *\r\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a1569875191014b507cf392724b7eb.html\r\n     */\r\n    supportedDataTypes: ColumnType[] = [\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"int\",\r\n        \"integer\",\r\n        \"bigint\",\r\n        \"smalldecimal\",\r\n        \"decimal\",\r\n        \"dec\",\r\n        \"real\",\r\n        \"double\",\r\n        \"float\",\r\n        \"date\",\r\n        \"time\",\r\n        \"seconddate\",\r\n        \"timestamp\",\r\n        \"boolean\",\r\n        \"char\",\r\n        \"nchar\",\r\n        \"varchar\",\r\n        \"nvarchar\",\r\n        \"text\",\r\n        \"alphanum\",\r\n        \"shorttext\",\r\n        \"array\",\r\n        \"varbinary\",\r\n        \"blob\",\r\n        \"clob\",\r\n        \"nclob\",\r\n        \"st_geometry\",\r\n        \"st_point\",\r\n    ]\r\n\r\n    /**\r\n     * Returns type of upsert supported by driver if any\r\n     */\r\n    supportedUpsertTypes: UpsertType[] = []\r\n\r\n    /**\r\n     * Gets list of spatial column data types.\r\n     */\r\n    spatialTypes: ColumnType[] = [\"st_geometry\", \"st_point\"]\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[] = [\r\n        \"varchar\",\r\n        \"nvarchar\",\r\n        \"alphanum\",\r\n        \"shorttext\",\r\n        \"varbinary\",\r\n    ]\r\n\r\n    /**\r\n     * Gets list of column data types that support precision by a driver.\r\n     */\r\n    withPrecisionColumnTypes: ColumnType[] = [\"decimal\"]\r\n\r\n    /**\r\n     * Gets list of column data types that support scale by a driver.\r\n     */\r\n    withScaleColumnTypes: ColumnType[] = [\"decimal\"]\r\n\r\n    /**\r\n     * Orm has special columns and we need to know what database column types should be for those types.\r\n     * Column types are driver dependant.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"timestamp\",\r\n        createDateDefault: \"CURRENT_TIMESTAMP\",\r\n        updateDate: \"timestamp\",\r\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\r\n        deleteDate: \"timestamp\",\r\n        deleteDateNullable: true,\r\n        version: \"integer\",\r\n        treeLevel: \"integer\",\r\n        migrationId: \"integer\",\r\n        migrationName: \"nvarchar\",\r\n        migrationTimestamp: \"bigint\",\r\n        cacheId: \"integer\",\r\n        cacheIdentifier: \"nvarchar\",\r\n        cacheTime: \"bigint\",\r\n        cacheDuration: \"integer\",\r\n        cacheQuery: \"nvarchar(5000)\" as any,\r\n        cacheResult: \"nclob\",\r\n        metadataType: \"nvarchar\",\r\n        metadataDatabase: \"nvarchar\",\r\n        metadataSchema: \"nvarchar\",\r\n        metadataTable: \"nvarchar\",\r\n        metadataName: \"nvarchar\",\r\n        metadataValue: \"nvarchar(5000)\" as any,\r\n    }\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults = {\r\n        char: { length: 1 },\r\n        nchar: { length: 1 },\r\n        varchar: { length: 255 },\r\n        nvarchar: { length: 255 },\r\n        shorttext: { length: 255 },\r\n        varbinary: { length: 255 },\r\n        decimal: { precision: 18, scale: 0 },\r\n    }\r\n\r\n    /**\r\n     * Max length allowed by SAP HANA for aliases (identifiers).\r\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a760537519101497e3cfe07b348f3c.html\r\n     */\r\n    maxAliasLength = 128\r\n\r\n    cteCapabilities: CteCapabilities = {\r\n        enabled: true,\r\n    }\r\n\r\n    dummyTableName = `SYS.DUMMY`\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: DataSource) {\r\n        this.connection = connection\r\n        this.options = connection.options as SapConnectionOptions\r\n        this.loadDependencies()\r\n\r\n        this.database = DriverUtils.buildDriverOptions(this.options).database\r\n        this.schema = DriverUtils.buildDriverOptions(this.options).schema\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    async connect(): Promise<void> {\r\n        // HANA connection info\r\n        const dbParams = {\r\n            hostName: this.options.host,\r\n            port: this.options.port,\r\n            userName: this.options.username,\r\n            password: this.options.password,\r\n            ...this.options.extra,\r\n        }\r\n\r\n        if (this.options.database) dbParams.databaseName = this.options.database\r\n        if (this.options.encrypt) dbParams.encrypt = this.options.encrypt\r\n        if (this.options.sslValidateCertificate)\r\n            dbParams.validateCertificate = this.options.sslValidateCertificate\r\n        if (this.options.key) dbParams.key = this.options.key\r\n        if (this.options.cert) dbParams.cert = this.options.cert\r\n        if (this.options.ca) dbParams.ca = this.options.ca\r\n\r\n        // pool options\r\n        const options: any = {\r\n            min:\r\n                this.options.pool && this.options.pool.min\r\n                    ? this.options.pool.min\r\n                    : 1,\r\n            max:\r\n                this.options.pool && this.options.pool.max\r\n                    ? this.options.pool.max\r\n                    : 10,\r\n        }\r\n\r\n        if (this.options.pool && this.options.pool.checkInterval)\r\n            options.checkInterval = this.options.pool.checkInterval\r\n        if (this.options.pool && this.options.pool.maxWaitingRequests)\r\n            options.maxWaitingRequests = this.options.pool.maxWaitingRequests\r\n        if (this.options.pool && this.options.pool.requestTimeout)\r\n            options.requestTimeout = this.options.pool.requestTimeout\r\n        if (this.options.pool && this.options.pool.idleTimeout)\r\n            options.idleTimeout = this.options.pool.idleTimeout\r\n\r\n        const { logger } = this.connection\r\n\r\n        const poolErrorHandler =\r\n            options.poolErrorHandler ||\r\n            ((error: any) =>\r\n                logger.log(\"warn\", `SAP Hana pool raised an error. ${error}`))\r\n        this.client.eventEmitter.on(\"poolError\", poolErrorHandler)\r\n\r\n        // create the pool\r\n        this.master = this.client.createPool(dbParams, options)\r\n\r\n        if (!this.database || !this.schema) {\r\n            const queryRunner = await this.createQueryRunner(\"master\")\r\n\r\n            if (!this.database) {\r\n                this.database = await queryRunner.getCurrentDatabase()\r\n            }\r\n\r\n            if (!this.schema) {\r\n                this.schema = await queryRunner.getCurrentSchema()\r\n            }\r\n\r\n            await queryRunner.release()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\r\n     */\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        const promise = this.master.clear()\r\n        this.master = undefined\r\n        return promise\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build and sync a schema.\r\n     */\r\n    createSchemaBuilder() {\r\n        return new RdbmsSchemaBuilder(this.connection)\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode) {\r\n        return new SapQueryRunner(this, mode)\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(\r\n        sql: string,\r\n        parameters: ObjectLiteral,\r\n        nativeParameters: ObjectLiteral,\r\n    ): [string, any[]] {\r\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\r\n            (key) => {\r\n                if (nativeParameters[key] instanceof Date)\r\n                    return DateUtils.mixedDateToDatetimeString(\r\n                        nativeParameters[key],\r\n                        true,\r\n                    )\r\n\r\n                return nativeParameters[key]\r\n            },\r\n        )\r\n\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, escapedParameters]\r\n\r\n        sql = sql.replace(\r\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\r\n            (full, isArray: string, key: string): string => {\r\n                if (!parameters.hasOwnProperty(key)) {\r\n                    return full\r\n                }\r\n\r\n                let value: any = parameters[key]\r\n\r\n                if (isArray) {\r\n                    return value\r\n                        .map((v: any) => {\r\n                            escapedParameters.push(v)\r\n                            return this.createParameter(\r\n                                key,\r\n                                escapedParameters.length - 1,\r\n                            )\r\n                        })\r\n                        .join(\", \")\r\n                }\r\n\r\n                if (typeof value === \"function\") {\r\n                    return value()\r\n                }\r\n\r\n                if (value instanceof Date) {\r\n                    return DateUtils.mixedDateToDatetimeString(value, true)\r\n                }\r\n\r\n                escapedParameters.push(value)\r\n                return this.createParameter(key, escapedParameters.length - 1)\r\n            },\r\n        ) // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters]\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return `\"${columnName}\"`\r\n    }\r\n\r\n    /**\r\n     * Build full table name with schema name and table name.\r\n     * E.g. myDB.mySchema.myTable\r\n     */\r\n    buildTableName(tableName: string, schema?: string): string {\r\n        let tablePath = [tableName]\r\n\r\n        if (schema) {\r\n            tablePath.unshift(schema)\r\n        }\r\n\r\n        return tablePath.join(\".\")\r\n    }\r\n\r\n    /**\r\n     * Parse a target table name or other types and return a normalized table definition.\r\n     */\r\n    parseTableName(\r\n        target: EntityMetadata | Table | View | TableForeignKey | string,\r\n    ): { database?: string; schema?: string; tableName: string } {\r\n        const driverDatabase = this.database\r\n        const driverSchema = this.schema\r\n\r\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\r\n            const parsed = this.parseTableName(target.name)\r\n\r\n            return {\r\n                database: target.database || parsed.database || driverDatabase,\r\n                schema: target.schema || parsed.schema || driverSchema,\r\n                tableName: parsed.tableName,\r\n            }\r\n        }\r\n\r\n        if (InstanceChecker.isTableForeignKey(target)) {\r\n            const parsed = this.parseTableName(target.referencedTableName)\r\n\r\n            return {\r\n                database:\r\n                    target.referencedDatabase ||\r\n                    parsed.database ||\r\n                    driverDatabase,\r\n                schema:\r\n                    target.referencedSchema || parsed.schema || driverSchema,\r\n                tableName: parsed.tableName,\r\n            }\r\n        }\r\n\r\n        if (InstanceChecker.isEntityMetadata(target)) {\r\n            // EntityMetadata tableName is never a path\r\n\r\n            return {\r\n                database: target.database || driverDatabase,\r\n                schema: target.schema || driverSchema,\r\n                tableName: target.tableName,\r\n            }\r\n        }\r\n\r\n        const parts = target.split(\".\")\r\n\r\n        return {\r\n            database: driverDatabase,\r\n            schema: (parts.length > 1 ? parts[0] : undefined) || driverSchema,\r\n            tableName: parts.length > 1 ? parts[1] : parts[0],\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformTo(\r\n                columnMetadata.transformer,\r\n                value,\r\n            )\r\n\r\n        if (value === null || value === undefined) return value\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            return value === true ? 1 : 0\r\n        } else if (columnMetadata.type === \"date\") {\r\n            return DateUtils.mixedDateToDateString(value)\r\n        } else if (columnMetadata.type === \"time\") {\r\n            return DateUtils.mixedDateToTimeString(value)\r\n        } else if (\r\n            columnMetadata.type === \"timestamp\" ||\r\n            columnMetadata.type === Date\r\n        ) {\r\n            return DateUtils.mixedDateToDatetimeString(value, true)\r\n        } else if (columnMetadata.type === \"seconddate\") {\r\n            return DateUtils.mixedDateToDatetimeString(value, false)\r\n        } else if (columnMetadata.type === \"simple-array\") {\r\n            return DateUtils.simpleArrayToString(value)\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            return DateUtils.simpleJsonToString(value)\r\n        } else if (columnMetadata.type === \"simple-enum\") {\r\n            return DateUtils.simpleEnumToString(value)\r\n        } else if (columnMetadata.isArray) {\r\n            return () => `ARRAY(${value.map((it: any) => `'${it}'`)})`\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return columnMetadata.transformer\r\n                ? ApplyValueTransformers.transformFrom(\r\n                      columnMetadata.transformer,\r\n                      value,\r\n                  )\r\n                : value\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            value = value ? true : false\r\n        } else if (\r\n            columnMetadata.type === \"timestamp\" ||\r\n            columnMetadata.type === \"seconddate\" ||\r\n            columnMetadata.type === Date\r\n        ) {\r\n            value = DateUtils.normalizeHydratedDate(value)\r\n        } else if (columnMetadata.type === \"date\") {\r\n            value = DateUtils.mixedDateToDateString(value)\r\n        } else if (columnMetadata.type === \"time\") {\r\n            value = DateUtils.mixedTimeToString(value)\r\n        } else if (columnMetadata.type === \"simple-array\") {\r\n            value = DateUtils.stringToSimpleArray(value)\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            value = DateUtils.stringToSimpleJson(value)\r\n        } else if (columnMetadata.type === \"simple-enum\") {\r\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata)\r\n        } else if (columnMetadata.type === Number) {\r\n            // convert to number if number\r\n            value = !isNaN(+value) ? parseInt(value) : value\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformFrom(\r\n                columnMetadata.transformer,\r\n                value,\r\n            )\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(column: {\r\n        type?: ColumnType\r\n        length?: number | string\r\n        precision?: number | null\r\n        scale?: number\r\n    }): string {\r\n        if (column.type === Number || column.type === \"int\") {\r\n            return \"integer\"\r\n        } else if (column.type === String) {\r\n            return \"nvarchar\"\r\n        } else if (column.type === Date) {\r\n            return \"timestamp\"\r\n        } else if (column.type === Boolean) {\r\n            return \"boolean\"\r\n        } else if ((column.type as any) === Buffer) {\r\n            return \"blob\"\r\n        } else if (column.type === \"uuid\") {\r\n            return \"nvarchar\"\r\n        } else if (\r\n            column.type === \"simple-array\" ||\r\n            column.type === \"simple-json\"\r\n        ) {\r\n            return \"text\"\r\n        } else if (column.type === \"simple-enum\") {\r\n            return \"nvarchar\"\r\n        } else {\r\n            return (column.type as string) || \"\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\r\n        const defaultValue = columnMetadata.default\r\n\r\n        if (typeof defaultValue === \"number\") {\r\n            return `${defaultValue}`\r\n        }\r\n\r\n        if (typeof defaultValue === \"boolean\") {\r\n            return defaultValue ? \"true\" : \"false\"\r\n        }\r\n\r\n        if (typeof defaultValue === \"function\") {\r\n            return defaultValue()\r\n        }\r\n\r\n        if (typeof defaultValue === \"string\") {\r\n            return `'${defaultValue}'`\r\n        }\r\n\r\n        if (defaultValue === null || defaultValue === undefined) {\r\n            return undefined\r\n        }\r\n\r\n        return `${defaultValue}`\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        return column.entityMetadata.indices.some(\r\n            (idx) =>\r\n                idx.isUnique &&\r\n                idx.columns.length === 1 &&\r\n                idx.columns[0] === column,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns default column lengths, which is required on column creation.\r\n     */\r\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\r\n        if (column.length) return column.length.toString()\r\n\r\n        if (column.generationStrategy === \"uuid\") return \"36\"\r\n\r\n        switch (column.type) {\r\n            case \"varchar\":\r\n            case \"nvarchar\":\r\n            case \"shorttext\":\r\n            case String:\r\n                return \"255\"\r\n            case \"alphanum\":\r\n                return \"127\"\r\n            case \"varbinary\":\r\n                return \"255\"\r\n        }\r\n\r\n        return \"\"\r\n    }\r\n\r\n    /**\r\n     * Creates column type definition including length, precision and scale\r\n     */\r\n    createFullType(column: TableColumn): string {\r\n        let type = column.type\r\n\r\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\r\n        if (this.getColumnLength(column)) {\r\n            type += `(${this.getColumnLength(column)})`\r\n        } else if (\r\n            column.precision !== null &&\r\n            column.precision !== undefined &&\r\n            column.scale !== null &&\r\n            column.scale !== undefined\r\n        ) {\r\n            type += `(${column.precision},${column.scale})`\r\n        } else if (\r\n            column.precision !== null &&\r\n            column.precision !== undefined\r\n        ) {\r\n            type += `(${column.precision})`\r\n        }\r\n\r\n        if (column.isArray) type += \" array\"\r\n\r\n        return type\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any> {\r\n        if (!this.master) {\r\n            throw new TypeORMError(\"Driver not Connected\")\r\n        }\r\n\r\n        return this.master.getConnection()\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any> {\r\n        return this.obtainMasterConnection()\r\n    }\r\n\r\n    /**\r\n     * Creates generated map of values generated or returned by database after INSERT query.\r\n     */\r\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\r\n        const generatedMap = metadata.generatedColumns.reduce(\r\n            (map, generatedColumn) => {\r\n                let value: any\r\n                if (\r\n                    generatedColumn.generationStrategy === \"increment\" &&\r\n                    insertResult\r\n                ) {\r\n                    value = insertResult\r\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\r\n                    //     console.log(\"getting db value:\", generatedColumn.databaseName);\r\n                    //     value = generatedColumn.getEntityValue(uuidMap);\r\n                }\r\n\r\n                return OrmUtils.mergeDeep(\r\n                    map,\r\n                    generatedColumn.createValueMap(value),\r\n                )\r\n            },\r\n            {} as ObjectLiteral,\r\n        )\r\n\r\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(\r\n        tableColumns: TableColumn[],\r\n        columnMetadatas: ColumnMetadata[],\r\n    ): ColumnMetadata[] {\r\n        return columnMetadatas.filter((columnMetadata) => {\r\n            const tableColumn = tableColumns.find(\r\n                (c) => c.name === columnMetadata.databaseName,\r\n            )\r\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\r\n\r\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\r\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\r\n            // console.log(\"type:\", tableColumn.type, _this.normalizeType(columnMetadata));\r\n            // console.log(\"length:\", tableColumn.length, _this.getColumnLength(columnMetadata));\r\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\r\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\r\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\r\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\r\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\r\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\r\n            // console.log(\"isUnique:\", tableColumn.isUnique, _this.normalizeIsUnique(columnMetadata));\r\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\r\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\r\n            // console.log(\"==========================================\");\r\n\r\n            const normalizeDefault = this.normalizeDefault(columnMetadata)\r\n            const hanaNullComapatibleDefault =\r\n                normalizeDefault == null ? undefined : normalizeDefault\r\n\r\n            return (\r\n                tableColumn.name !== columnMetadata.databaseName ||\r\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\r\n                (columnMetadata.length &&\r\n                    tableColumn.length !==\r\n                        this.getColumnLength(columnMetadata)) ||\r\n                tableColumn.precision !== columnMetadata.precision ||\r\n                tableColumn.scale !== columnMetadata.scale ||\r\n                tableColumn.comment !==\r\n                    this.escapeComment(columnMetadata.comment) ||\r\n                (!tableColumn.isGenerated &&\r\n                    hanaNullComapatibleDefault !== tableColumn.default) || // we included check for generated here, because generated columns already can have default values\r\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\r\n                tableColumn.isNullable !== columnMetadata.isNullable ||\r\n                tableColumn.isUnique !==\r\n                    this.normalizeIsUnique(columnMetadata) ||\r\n                (columnMetadata.generationStrategy !== \"uuid\" &&\r\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports RETURNING / OUTPUT statement.\r\n     */\r\n    isReturningSqlSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports uuid values generation on its own.\r\n     */\r\n    isUUIDGenerationSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports fulltext indices.\r\n     */\r\n    isFullTextColumnTypeSupported(): boolean {\r\n        return true\r\n    }\r\n\r\n    /**\r\n     * Creates an escaped parameter.\r\n     */\r\n    createParameter(parameterName: string, index: number): string {\r\n        return \"?\"\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            const client = this.options.driver || PlatformTools.load(\"hdb-pool\")\r\n            this.client = client\r\n        } catch (e) {\r\n            // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"hdb-pool\")\r\n        }\r\n\r\n        try {\r\n            if (!this.options.hanaClientDriver) {\r\n                PlatformTools.load(\"@sap/hana-client\")\r\n                this.streamClient = PlatformTools.load(\r\n                    \"@sap/hana-client/extension/Stream\",\r\n                )\r\n            }\r\n        } catch (e) {\r\n            // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\r\n                \"SAP Hana\",\r\n                \"@sap/hana-client\",\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Escapes a given comment.\r\n     */\r\n    protected escapeComment(comment?: string) {\r\n        if (!comment) return comment\r\n\r\n        comment = comment.replace(/\\u0000/g, \"\") // Null bytes aren't allowed in comments\r\n\r\n        return comment\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../browser/src/subscriber/event/QueryEvent.ts"],"names":[],"mappings":"","file":"QueryEvent.js","sourcesContent":["import { EntityManager } from \"../../entity-manager/EntityManager\"\r\nimport { DataSource } from \"../../data-source/DataSource\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\n\r\n/**\r\n * BeforeQueryEvent is an object that broadcaster sends to the entity subscriber before query is ran against the database.\r\n */\r\nexport interface QueryEvent<Entity> {\r\n    /**\r\n     * Connection used in the event.\r\n     */\r\n    connection: DataSource\r\n\r\n    /**\r\n     * QueryRunner used in the event transaction.\r\n     * All database operations in the subscribed event listener should be performed using this query runner instance.\r\n     */\r\n    queryRunner: QueryRunner\r\n\r\n    /**\r\n     * EntityManager used in the event transaction.\r\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\r\n     */\r\n    manager: EntityManager\r\n\r\n    /**\r\n     * Query that is being executed.\r\n     */\r\n    query: string\r\n\r\n    /**\r\n     * Parameters used in the query.\r\n     */\r\n    parameters?: any[]\r\n}\r\n\r\nexport interface BeforeQueryEvent<Entity> extends QueryEvent<Entity> {}\r\n\r\nexport interface AfterQueryEvent<Entity> extends QueryEvent<Entity> {\r\n    /**\r\n     * Whether the query was successful.\r\n     */\r\n    success: boolean\r\n\r\n    /**\r\n     * The duration of the query execution.\r\n     */\r\n    executionTime?: number\r\n\r\n    /**\r\n     * The raw results from the database if the query was successful.\r\n     */\r\n    rawResults?: any\r\n\r\n    /**\r\n     * The error thrown if the query was unsuccessful.\r\n     */\r\n    error?: any\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../browser/src/subscriber/EntitySubscriberInterface.ts"],"names":[],"mappings":"","file":"EntitySubscriberInterface.js","sourcesContent":["import { TransactionCommitEvent } from \"./event/TransactionCommitEvent\"\r\nimport { TransactionRollbackEvent } from \"./event/TransactionRollbackEvent\"\r\nimport { TransactionStartEvent } from \"./event/TransactionStartEvent\"\r\nimport { UpdateEvent } from \"./event/UpdateEvent\"\r\nimport { RemoveEvent } from \"./event/RemoveEvent\"\r\nimport { InsertEvent } from \"./event/InsertEvent\"\r\nimport { LoadEvent } from \"./event/LoadEvent\"\r\nimport { SoftRemoveEvent } from \"./event/SoftRemoveEvent\"\r\nimport { RecoverEvent } from \"./event/RecoverEvent\"\r\nimport { AfterQueryEvent, BeforeQueryEvent } from \"./event/QueryEvent\"\r\n\r\n/**\r\n * Classes that implement this interface are subscribers that subscribe for the specific events in the ORM.\r\n */\r\nexport interface EntitySubscriberInterface<Entity = any> {\r\n    /**\r\n     * Returns the class of the entity to which events will listen.\r\n     * If this method is omitted, then subscriber will listen to events of all entities.\r\n     */\r\n    listenTo?(): Function | string\r\n\r\n    /**\r\n     * Called after entity is loaded from the database.\r\n     *\r\n     * For backward compatibility this signature is slightly different from the\r\n     * others.  `event` was added later but is always provided (it is only\r\n     * optional in the signature so that its introduction does not break\r\n     * compilation for existing subscribers).\r\n     */\r\n    afterLoad?(entity: Entity, event?: LoadEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called before query is executed.\r\n     */\r\n    beforeQuery?(event: BeforeQueryEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called after query is executed.\r\n     */\r\n    afterQuery?(event: AfterQueryEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called before entity is inserted to the database.\r\n     */\r\n    beforeInsert?(event: InsertEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called after entity is inserted to the database.\r\n     */\r\n    afterInsert?(event: InsertEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called before entity is updated in the database.\r\n     */\r\n    beforeUpdate?(event: UpdateEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called after entity is updated in the database.\r\n     */\r\n    afterUpdate?(event: UpdateEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called before entity is removed from the database.\r\n     */\r\n    beforeRemove?(event: RemoveEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called before entity is soft removed from the database.\r\n     */\r\n    beforeSoftRemove?(event: SoftRemoveEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called before entity is recovered in the database.\r\n     */\r\n    beforeRecover?(event: RecoverEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called after entity is removed from the database.\r\n     */\r\n    afterRemove?(event: RemoveEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called after entity is soft removed from the database.\r\n     */\r\n    afterSoftRemove?(event: SoftRemoveEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called after entity is recovered in the database.\r\n     */\r\n    afterRecover?(event: RecoverEvent<Entity>): Promise<any> | void\r\n\r\n    /**\r\n     * Called before transaction is started.\r\n     */\r\n    beforeTransactionStart?(event: TransactionStartEvent): Promise<any> | void\r\n\r\n    /**\r\n     * Called after transaction is started.\r\n     */\r\n    afterTransactionStart?(event: TransactionStartEvent): Promise<any> | void\r\n\r\n    /**\r\n     * Called before transaction is committed.\r\n     */\r\n    beforeTransactionCommit?(event: TransactionCommitEvent): Promise<any> | void\r\n\r\n    /**\r\n     * Called after transaction is committed.\r\n     */\r\n    afterTransactionCommit?(event: TransactionCommitEvent): Promise<any> | void\r\n\r\n    /**\r\n     * Called before transaction rollback.\r\n     */\r\n    beforeTransactionRollback?(\r\n        event: TransactionRollbackEvent,\r\n    ): Promise<any> | void\r\n\r\n    /**\r\n     * Called after transaction rollback.\r\n     */\r\n    afterTransactionRollback?(\r\n        event: TransactionRollbackEvent,\r\n    ): Promise<any> | void\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../browser/src/repository/AbstractRepository.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,sCAAsC,EAAE,MAAM,iDAAiD,CAAA;AACxG,OAAO,EAAE,sBAAsB,EAAE,MAAM,YAAY,CAAA;AACnD,OAAO,EAAE,6BAA6B,EAAE,MAAM,wCAAwC,CAAA;AAGtF;;;;;;GAMG;AACH,MAAM,OAAO,kBAAkB;IAU3B,4EAA4E;IAC5E,sBAAsB;IACtB,4EAA4E;IAE5E;;;OAGG;IACH,IAAc,UAAU;QACpB,MAAM,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAW,CAAC,CAAA;QAC1D,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,sCAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAEtE,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAS,MAAM,CAAC,CAAA;IACrD,CAAC;IAED;;;OAGG;IACH,IAAc,cAAc;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAW,CAAC,CAAA;QAC1D,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,sCAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAEtE,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAS,MAAM,CAAC,CAAA;IACzD,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;;OAGG;IACO,kBAAkB,CAAC,KAAa;QACtC,MAAM,MAAM,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAC/D,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,sCAAsC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAEtE,OAAO,IAAI,CAAC,OAAO;aACd,aAAa,CAAS,MAAM,CAAC;aAC7B,kBAAkB,CAAC,KAAK,CAAC,CAAA;IAClC,CAAC;IAED;;OAEG;IACO,qBAAqB,CAC3B,MAAqB,EACrB,KAAa;QAEb,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAA;IAClE,CAAC;IAED;;OAEG;IACO,gBAAgB,CACtB,MAAqB;QAErB,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;IAC7C,CAAC;IAED;;OAEG;IACO,oBAAoB,CAC1B,MAAqB;QAErB,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;IACjD,CAAC;IAED,4EAA4E;IAC5E,kBAAkB;IAClB,4EAA4E;IAE5E;;;OAGG;IACK,yBAAyB,CAC7B,gBAAqB;QAErB,MAAM,4BAA4B,GAC9B,sBAAsB,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;YAC5D,OAAO,CACH,UAAU,CAAC,MAAM;gBACjB,CAAC,OAAO,gBAAgB,KAAK,UAAU;oBACnC,CAAC,CAAC,gBAAgB;oBAClB,CAAC,CAAE,gBAAwB,CAAC,WAAW,CAAC,CAC/C,CAAA;QACL,CAAC,CAAC,CAAA;QACN,IAAI,CAAC,4BAA4B;YAC7B,MAAM,IAAI,6BAA6B,CAAC,gBAAgB,CAAC,CAAA;QAE7D,OAAO,4BAA4B,CAAC,MAAM,CAAA;IAC9C,CAAC;CACJ","file":"AbstractRepository.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { EntityManager } from \"../entity-manager/EntityManager\"\r\nimport { Repository } from \"./Repository\"\r\nimport { TreeRepository } from \"./TreeRepository\"\r\nimport { EntityTarget } from \"../common/EntityTarget\"\r\nimport { ObjectType } from \"../common/ObjectType\"\r\nimport { CustomRepositoryDoesNotHaveEntityError } from \"../error/CustomRepositoryDoesNotHaveEntityError\"\r\nimport { getMetadataArgsStorage } from \"../globals\"\r\nimport { CustomRepositoryNotFoundError } from \"../error/CustomRepositoryNotFoundError\"\r\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\r\n\r\n/**\r\n * Provides abstract class for custom repositories that do not inherit from original orm Repository.\r\n * Contains all most-necessary methods to simplify code in the custom repository.\r\n * All methods are protected thus not exposed and it allows to create encapsulated custom repository.\r\n *\r\n * @deprecated use Repository.extend function to create a custom repository\r\n */\r\nexport class AbstractRepository<Entity extends ObjectLiteral> {\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods Set Dynamically\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets entity manager that allows to perform repository operations with any entity.\r\n     */\r\n    protected manager: EntityManager\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets the original ORM repository for the entity that is managed by this repository.\r\n     * If current repository does not manage any entity, then exception will be thrown.\r\n     */\r\n    protected get repository(): Repository<Entity> {\r\n        const target = this.getCustomRepositoryTarget(this as any)\r\n        if (!target)\r\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor)\r\n\r\n        return this.manager.getRepository<Entity>(target)\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM tree repository for the entity that is managed by this repository.\r\n     * If current repository does not manage any entity, then exception will be thrown.\r\n     */\r\n    protected get treeRepository(): TreeRepository<Entity> {\r\n        const target = this.getCustomRepositoryTarget(this as any)\r\n        if (!target)\r\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor)\r\n\r\n        return this.manager.getTreeRepository<Entity>(target)\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new query builder for the repository's entity that can be used to build a SQL query.\r\n     * If current repository does not manage any entity, then exception will be thrown.\r\n     */\r\n    protected createQueryBuilder(alias: string): SelectQueryBuilder<Entity> {\r\n        const target = this.getCustomRepositoryTarget(this.constructor)\r\n        if (!target)\r\n            throw new CustomRepositoryDoesNotHaveEntityError(this.constructor)\r\n\r\n        return this.manager\r\n            .getRepository<Entity>(target)\r\n            .createQueryBuilder(alias)\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder for the given entity that can be used to build a SQL query.\r\n     */\r\n    protected createQueryBuilderFor<T extends ObjectLiteral>(\r\n        entity: ObjectType<T>,\r\n        alias: string,\r\n    ): SelectQueryBuilder<T> {\r\n        return this.getRepositoryFor(entity).createQueryBuilder(alias)\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM repository for the given entity class.\r\n     */\r\n    protected getRepositoryFor<T extends ObjectLiteral>(\r\n        entity: ObjectType<T>,\r\n    ): Repository<T> {\r\n        return this.manager.getRepository(entity)\r\n    }\r\n\r\n    /**\r\n     * Gets the original ORM tree repository for the given entity class.\r\n     */\r\n    protected getTreeRepositoryFor<T extends ObjectLiteral>(\r\n        entity: ObjectType<T>,\r\n    ): TreeRepository<T> {\r\n        return this.manager.getTreeRepository(entity)\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets custom repository's managed entity.\r\n     * If given custom repository does not manage any entity then undefined will be returned.\r\n     */\r\n    private getCustomRepositoryTarget(\r\n        customRepository: any,\r\n    ): EntityTarget<any> | undefined {\r\n        const entityRepositoryMetadataArgs =\r\n            getMetadataArgsStorage().entityRepositories.find((repository) => {\r\n                return (\r\n                    repository.target ===\r\n                    (typeof customRepository === \"function\"\r\n                        ? customRepository\r\n                        : (customRepository as any).constructor)\r\n                )\r\n            })\r\n        if (!entityRepositoryMetadataArgs)\r\n            throw new CustomRepositoryNotFoundError(customRepository)\r\n\r\n        return entityRepositoryMetadataArgs.entity\r\n    }\r\n}\r\n"],"sourceRoot":".."}
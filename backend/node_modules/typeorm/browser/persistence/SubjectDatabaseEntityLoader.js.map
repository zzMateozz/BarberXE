{"version":3,"sources":["../browser/src/persistence/SubjectDatabaseEntityLoader.ts"],"names":[],"mappings":"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","file":"SubjectDatabaseEntityLoader.js","sourcesContent":["import { Subject } from \"./Subject\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\r\nimport { MongoRepository } from \"../repository/MongoRepository\"\r\n\r\n/**\r\n * Loads database entities for all operate subjects which do not have database entity set.\r\n * All entities that we load database entities for are marked as updated or inserted.\r\n * To understand which of them really needs to be inserted or updated we need to load\r\n * their original representations from the database.\r\n */\r\nexport class SubjectDatabaseEntityLoader {\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(\r\n        protected queryRunner: QueryRunner,\r\n        protected subjects: Subject[],\r\n    ) {}\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads database entities for all subjects.\r\n     *\r\n     * loadAllRelations flag is used to load all relation ids of the object, no matter if they present in subject entity or not.\r\n     * This option is used for deletion.\r\n     */\r\n    async load(\r\n        operationType: \"save\" | \"remove\" | \"soft-remove\" | \"recover\",\r\n    ): Promise<void> {\r\n        // we are grouping subjects by target to perform more optimized queries using WHERE IN operator\r\n        // go through the groups and perform loading of database entities of each subject in the group\r\n        const promises = this.groupByEntityTargets().map(\r\n            async (subjectGroup) => {\r\n                // prepare entity ids of the subjects we need to load\r\n                const allIds: ObjectLiteral[] = []\r\n                const allSubjects: Subject[] = []\r\n                subjectGroup.subjects.forEach((subject) => {\r\n                    // we don't load if subject already has a database entity loaded\r\n                    if (subject.databaseEntity || !subject.identifier) return\r\n\r\n                    allIds.push(subject.identifier)\r\n                    allSubjects.push(subject)\r\n                })\r\n\r\n                // if there no ids found (means all entities are new and have generated ids) - then nothing to load there\r\n                if (!allIds.length) return\r\n\r\n                const loadRelationPropertyPaths: string[] = []\r\n\r\n                // for the save, soft-remove and recover operation\r\n                // extract all property paths of the relations we need to load relation ids for\r\n                // this is for optimization purpose - this way we don't load relation ids for entities\r\n                // whose relations are undefined, and since they are undefined its really pointless to\r\n                // load something for them, since undefined properties are skipped by the orm\r\n                if (\r\n                    operationType === \"save\" ||\r\n                    operationType === \"soft-remove\" ||\r\n                    operationType === \"recover\"\r\n                ) {\r\n                    subjectGroup.subjects.forEach((subject) => {\r\n                        // gets all relation property paths that exist in the persisted entity.\r\n                        subject.metadata.relations.forEach((relation) => {\r\n                            const value = relation.getEntityValue(\r\n                                subject.entityWithFulfilledIds!,\r\n                            )\r\n                            if (value === undefined) return\r\n\r\n                            if (\r\n                                loadRelationPropertyPaths.indexOf(\r\n                                    relation.propertyPath,\r\n                                ) === -1\r\n                            )\r\n                                loadRelationPropertyPaths.push(\r\n                                    relation.propertyPath,\r\n                                )\r\n                        })\r\n                    })\r\n                } else {\r\n                    // remove\r\n\r\n                    // for remove operation\r\n                    // we only need to load junction relation ids since only they are removed by cascades\r\n                    loadRelationPropertyPaths.push(\r\n                        ...subjectGroup.subjects[0].metadata.manyToManyRelations.map(\r\n                            (relation) => relation.propertyPath,\r\n                        ),\r\n                    )\r\n                }\r\n\r\n                const findOptions: FindManyOptions<any> = {\r\n                    loadEagerRelations: false,\r\n                    loadRelationIds: {\r\n                        relations: loadRelationPropertyPaths,\r\n                        disableMixedMap: true,\r\n                    },\r\n                    // the soft-deleted entities should be included in the loaded entities for recover operation\r\n                    withDeleted: true,\r\n                }\r\n\r\n                // load database entities for all given ids\r\n                let entities: any[] = []\r\n                if (\r\n                    this.queryRunner.connection.driver.options.type ===\r\n                    \"mongodb\"\r\n                ) {\r\n                    const mongoRepo =\r\n                        this.queryRunner.manager.getRepository<ObjectLiteral>(\r\n                            subjectGroup.target,\r\n                        ) as MongoRepository<ObjectLiteral>\r\n                    entities = await mongoRepo.findByIds(allIds, findOptions)\r\n                } else {\r\n                    entities = await this.queryRunner.manager\r\n                        .getRepository<ObjectLiteral>(subjectGroup.target)\r\n                        .createQueryBuilder()\r\n                        .setFindOptions(findOptions)\r\n                        .whereInIds(allIds)\r\n                        .getMany()\r\n                }\r\n\r\n                // now when we have entities we need to find subject of each entity\r\n                // and insert that entity into database entity of the found subjects\r\n                entities.forEach((entity) => {\r\n                    const subjects = this.findByPersistEntityLike(\r\n                        subjectGroup.target,\r\n                        entity,\r\n                    )\r\n                    subjects.forEach((subject) => {\r\n                        subject.databaseEntity = entity\r\n                        if (!subject.identifier)\r\n                            subject.identifier =\r\n                                subject.metadata.hasAllPrimaryKeys(entity)\r\n                                    ? subject.metadata.getEntityIdMap(entity)\r\n                                    : undefined\r\n                    })\r\n                })\r\n\r\n                // this way we tell what subjects we tried to load database entities of\r\n                for (let subject of allSubjects) {\r\n                    subject.databaseEntityLoaded = true\r\n                }\r\n            },\r\n        )\r\n\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Protected Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Finds subjects where entity like given subject's entity.\r\n     * Comparison made by entity id.\r\n     * Multiple subjects may be returned if duplicates are present in the subject array.\r\n     * This will likely result in the same row being updated multiple times during a transaction.\r\n     */\r\n    protected findByPersistEntityLike(\r\n        entityTarget: Function | string,\r\n        entity: ObjectLiteral,\r\n    ): Subject[] {\r\n        return this.subjects.filter((subject) => {\r\n            if (!subject.entity) return false\r\n\r\n            if (subject.entity === entity) return true\r\n\r\n            return (\r\n                subject.metadata.target === entityTarget &&\r\n                subject.metadata.compareEntities(\r\n                    subject.entityWithFulfilledIds!,\r\n                    entity,\r\n                )\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Groups given Subject objects into groups separated by entity targets.\r\n     */\r\n    protected groupByEntityTargets(): {\r\n        target: Function | string\r\n        subjects: Subject[]\r\n    }[] {\r\n        return this.subjects.reduce((groups, operatedEntity) => {\r\n            let group = groups.find(\r\n                (group) => group.target === operatedEntity.metadata.target,\r\n            )\r\n            if (!group) {\r\n                group = { target: operatedEntity.metadata.target, subjects: [] }\r\n                groups.push(group)\r\n            }\r\n            group.subjects.push(operatedEntity)\r\n            return groups\r\n        }, [] as { target: Function | string; subjects: Subject[] }[])\r\n    }\r\n}\r\n"],"sourceRoot":".."}
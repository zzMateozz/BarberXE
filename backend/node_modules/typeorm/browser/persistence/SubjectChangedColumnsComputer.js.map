{"version":3,"sources":["../browser/src/persistence/SubjectChangedColumnsComputer.ts"],"names":[],"mappings":"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","file":"SubjectChangedColumnsComputer.js","sourcesContent":["import { Subject } from \"./Subject\"\r\nimport { DateUtils } from \"../util/DateUtils\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { OrmUtils } from \"../util/OrmUtils\"\r\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\n\r\n/**\r\n * Finds what columns are changed in the subject entities.\r\n */\r\nexport class SubjectChangedColumnsComputer {\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Finds what columns are changed in the subject entities.\r\n     */\r\n    compute(subjects: Subject[]) {\r\n        subjects.forEach((subject) => {\r\n            this.computeDiffColumns(subject)\r\n            this.computeDiffRelationalColumns(subjects, subject)\r\n        })\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Differentiate columns from the updated entity and entity stored in the database.\r\n     */\r\n    protected computeDiffColumns(subject: Subject): void {\r\n        // if there is no persisted entity then nothing to compute changed in it\r\n        if (!subject.entity) return\r\n\r\n        subject.metadata.columns.forEach((column) => {\r\n            // ignore special columns\r\n            if (\r\n                column.isVirtual ||\r\n                column.isDiscriminator // ||\r\n                // column.isUpdateDate ||\r\n                // column.isVersion ||\r\n                // column.isCreateDate\r\n            )\r\n                return\r\n\r\n            const changeMap = subject.changeMaps.find(\r\n                (changeMap) => changeMap.column === column,\r\n            )\r\n            if (changeMap) {\r\n                subject.changeMaps.splice(\r\n                    subject.changeMaps.indexOf(changeMap),\r\n                    1,\r\n                )\r\n            }\r\n\r\n            // get user provided value - column value from the user provided persisted entity\r\n            const entityValue = column.getEntityValue(subject.entity!)\r\n\r\n            // we don't perform operation over undefined properties (but we DO need null properties!)\r\n            if (entityValue === undefined) return\r\n\r\n            // if there is no database entity then all columns are treated as new, e.g. changed\r\n            if (subject.databaseEntity) {\r\n                // skip transform database value for json / jsonb for comparison later on\r\n                const shouldTransformDatabaseEntity =\r\n                    column.type !== \"json\" && column.type !== \"jsonb\"\r\n\r\n                // get database value of the column\r\n                let databaseValue = column.getEntityValue(\r\n                    subject.databaseEntity,\r\n                    shouldTransformDatabaseEntity,\r\n                )\r\n\r\n                // filter out \"relational columns\" only in the case if there is a relation object in entity\r\n                if (column.relationMetadata) {\r\n                    const value = column.relationMetadata.getEntityValue(\r\n                        subject.entity!,\r\n                    )\r\n                    if (value !== null && value !== undefined) return\r\n                }\r\n                let normalizedValue = entityValue\r\n                // normalize special values to make proper comparision\r\n                if (entityValue !== null) {\r\n                    switch (column.type) {\r\n                        case \"date\":\r\n                            normalizedValue =\r\n                                DateUtils.mixedDateToDateString(entityValue)\r\n                            break\r\n\r\n                        case \"time\":\r\n                        case \"time with time zone\":\r\n                        case \"time without time zone\":\r\n                        case \"timetz\":\r\n                            normalizedValue =\r\n                                DateUtils.mixedDateToTimeString(entityValue)\r\n                            break\r\n\r\n                        case \"datetime\":\r\n                        case \"datetime2\":\r\n                        case Date:\r\n                        case \"timestamp\":\r\n                        case \"timestamp without time zone\":\r\n                        case \"timestamp with time zone\":\r\n                        case \"timestamp with local time zone\":\r\n                        case \"timestamptz\":\r\n                            normalizedValue =\r\n                                DateUtils.mixedDateToUtcDatetimeString(\r\n                                    entityValue,\r\n                                )\r\n                            databaseValue =\r\n                                DateUtils.mixedDateToUtcDatetimeString(\r\n                                    databaseValue,\r\n                                )\r\n                            break\r\n\r\n                        case \"json\":\r\n                        case \"jsonb\":\r\n                            // JSON.stringify doesn't work because postgresql sorts jsonb before save.\r\n                            // If you try to save json '[{\"messages\": \"\", \"attribute Key\": \"\", \"level\":\"\"}] ' as jsonb,\r\n                            // then postgresql will save it as '[{\"level\": \"\", \"message\":\"\", \"attributeKey\": \"\"}]'\r\n                            if (\r\n                                OrmUtils.deepCompare(entityValue, databaseValue)\r\n                            )\r\n                                return\r\n                            break\r\n\r\n                        case \"simple-array\":\r\n                            normalizedValue =\r\n                                DateUtils.simpleArrayToString(entityValue)\r\n                            databaseValue =\r\n                                DateUtils.simpleArrayToString(databaseValue)\r\n                            break\r\n                        case \"simple-enum\":\r\n                            normalizedValue =\r\n                                DateUtils.simpleEnumToString(entityValue)\r\n                            databaseValue =\r\n                                DateUtils.simpleEnumToString(databaseValue)\r\n                            break\r\n                        case \"simple-json\":\r\n                            normalizedValue =\r\n                                DateUtils.simpleJsonToString(entityValue)\r\n                            databaseValue =\r\n                                DateUtils.simpleJsonToString(databaseValue)\r\n                            break\r\n                    }\r\n\r\n                    if (column.transformer) {\r\n                        normalizedValue = ApplyValueTransformers.transformTo(\r\n                            column.transformer,\r\n                            entityValue,\r\n                        )\r\n                    }\r\n                }\r\n\r\n                // if value is not changed - then do nothing\r\n                if (\r\n                    Buffer.isBuffer(normalizedValue) &&\r\n                    Buffer.isBuffer(databaseValue)\r\n                ) {\r\n                    if (normalizedValue.equals(databaseValue)) {\r\n                        return\r\n                    }\r\n                } else {\r\n                    if (normalizedValue === databaseValue) return\r\n                }\r\n            }\r\n\r\n            if (!subject.diffColumns.includes(column))\r\n                subject.diffColumns.push(column)\r\n\r\n            subject.changeMaps.push({\r\n                column: column,\r\n                value: entityValue,\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Difference columns of the owning one-to-one and many-to-one columns.\r\n     */\r\n    protected computeDiffRelationalColumns(\r\n        allSubjects: Subject[],\r\n        subject: Subject,\r\n    ): void {\r\n        // if there is no persisted entity then nothing to compute changed in it\r\n        if (!subject.entity) return\r\n\r\n        subject.metadata.relationsWithJoinColumns.forEach((relation) => {\r\n            // get the related entity from the persisted entity\r\n            let relatedEntity = relation.getEntityValue(subject.entity!)\r\n\r\n            // we don't perform operation over undefined properties (but we DO need null properties!)\r\n            if (relatedEntity === undefined) return\r\n\r\n            // if there is no database entity then all relational columns are treated as new, e.g. changed\r\n            if (subject.databaseEntity) {\r\n                // here we cover two scenarios:\r\n                // 1. related entity can be another entity which is natural way\r\n                // 2. related entity can be just an entity id\r\n                // if relation entity is just a relation id set (for example post.tag = 1)\r\n                // then we create an id map from it to make a proper comparision\r\n                let relatedEntityRelationIdMap: ObjectLiteral = relatedEntity\r\n                if (\r\n                    relatedEntityRelationIdMap !== null &&\r\n                    ObjectUtils.isObject(relatedEntityRelationIdMap)\r\n                )\r\n                    relatedEntityRelationIdMap = relation.getRelationIdMap(\r\n                        relatedEntityRelationIdMap,\r\n                    )!\r\n\r\n                // get database related entity. Since loadRelationIds are used on databaseEntity\r\n                // related entity will contain only its relation ids\r\n                const databaseRelatedEntityRelationIdMap =\r\n                    relation.getEntityValue(subject.databaseEntity)\r\n\r\n                // if relation ids are equal then we don't need to update anything\r\n                const areRelatedIdsEqual = OrmUtils.compareIds(\r\n                    relatedEntityRelationIdMap,\r\n                    databaseRelatedEntityRelationIdMap,\r\n                )\r\n                if (areRelatedIdsEqual) {\r\n                    return\r\n                } else {\r\n                    subject.diffRelations.push(relation)\r\n                }\r\n            }\r\n\r\n            // if there is an inserted subject for the related entity of the persisted entity then use it as related entity\r\n            // this code is used for related entities without ids to be properly inserted (and then updated if needed)\r\n            const valueSubject = allSubjects.find(\r\n                (subject) =>\r\n                    subject.mustBeInserted && subject.entity === relatedEntity,\r\n            )\r\n            if (valueSubject) relatedEntity = valueSubject\r\n\r\n            // find if there is already a relation to be changed\r\n            const changeMap = subject.changeMaps.find(\r\n                (changeMap) => changeMap.relation === relation,\r\n            )\r\n            if (changeMap) {\r\n                // and update its value if it was found\r\n                changeMap.value = relatedEntity\r\n            } else {\r\n                // if it wasn't found add a new relation for change\r\n                subject.changeMaps.push({\r\n                    relation: relation,\r\n                    value: relatedEntity,\r\n                })\r\n            }\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":".."}
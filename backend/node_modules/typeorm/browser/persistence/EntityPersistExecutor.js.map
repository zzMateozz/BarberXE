{"version":3,"sources":["../browser/src/persistence/EntityPersistExecutor.ts"],"names":[],"mappings":"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","file":"EntityPersistExecutor.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { SaveOptions } from \"../repository/SaveOptions\"\r\nimport { RemoveOptions } from \"../repository/RemoveOptions\"\r\nimport { MustBeEntityError } from \"../error/MustBeEntityError\"\r\nimport { SubjectExecutor } from \"./SubjectExecutor\"\r\nimport { CannotDetermineEntityError } from \"../error/CannotDetermineEntityError\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { Subject } from \"./Subject\"\r\nimport { OneToManySubjectBuilder } from \"./subject-builder/OneToManySubjectBuilder\"\r\nimport { OneToOneInverseSideSubjectBuilder } from \"./subject-builder/OneToOneInverseSideSubjectBuilder\"\r\nimport { ManyToManySubjectBuilder } from \"./subject-builder/ManyToManySubjectBuilder\"\r\nimport { SubjectDatabaseEntityLoader } from \"./SubjectDatabaseEntityLoader\"\r\nimport { CascadesSubjectBuilder } from \"./subject-builder/CascadesSubjectBuilder\"\r\nimport { OrmUtils } from \"../util/OrmUtils\"\r\n\r\n/**\r\n * Persists a single entity or multiple entities - saves or removes them.\r\n */\r\nexport class EntityPersistExecutor {\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        protected connection: DataSource,\r\n        protected queryRunner: QueryRunner | undefined,\r\n        protected mode: \"save\" | \"remove\" | \"soft-remove\" | \"recover\",\r\n        protected target: Function | string | undefined,\r\n        protected entity: ObjectLiteral | ObjectLiteral[],\r\n        protected options?: SaveOptions & RemoveOptions,\r\n    ) {}\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Executes persistence operation ob given entity or entities.\r\n     */\r\n    async execute(): Promise<void> {\r\n        // check if entity we are going to save is valid and is an object\r\n        if (!this.entity || typeof this.entity !== \"object\")\r\n            return Promise.reject(new MustBeEntityError(this.mode, this.entity))\r\n\r\n        // we MUST call \"fake\" resolve here to make sure all properties of lazily loaded relations are resolved\r\n        await Promise.resolve()\r\n\r\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\r\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\r\n        const queryRunner =\r\n            this.queryRunner || this.connection.createQueryRunner()\r\n\r\n        // save data in the query runner - this is useful functionality to share data from outside of the world\r\n        // with third classes - like subscribers and listener methods\r\n        let oldQueryRunnerData = queryRunner.data\r\n        if (this.options && this.options.data) {\r\n            queryRunner.data = this.options.data\r\n        }\r\n\r\n        try {\r\n            // collect all operate subjects\r\n            const entities: ObjectLiteral[] = Array.isArray(this.entity)\r\n                ? this.entity\r\n                : [this.entity]\r\n            const entitiesInChunks =\r\n                this.options && this.options.chunk && this.options.chunk > 0\r\n                    ? OrmUtils.chunk(entities, this.options.chunk)\r\n                    : [entities]\r\n\r\n            // console.time(\"building subject executors...\");\r\n            const executors = await Promise.all(\r\n                entitiesInChunks.map(async (entities) => {\r\n                    const subjects: Subject[] = []\r\n\r\n                    // create subjects for all entities we received for the persistence\r\n                    entities.forEach((entity) => {\r\n                        const entityTarget = this.target\r\n                            ? this.target\r\n                            : entity.constructor\r\n                        if (entityTarget === Object)\r\n                            throw new CannotDetermineEntityError(this.mode)\r\n\r\n                        let metadata = this.connection\r\n                            .getMetadata(entityTarget)\r\n                            .findInheritanceMetadata(entity)\r\n\r\n                        subjects.push(\r\n                            new Subject({\r\n                                metadata,\r\n                                entity: entity,\r\n                                canBeInserted: this.mode === \"save\",\r\n                                canBeUpdated: this.mode === \"save\",\r\n                                mustBeRemoved: this.mode === \"remove\",\r\n                                canBeSoftRemoved: this.mode === \"soft-remove\",\r\n                                canBeRecovered: this.mode === \"recover\",\r\n                            }),\r\n                        )\r\n                    })\r\n\r\n                    // console.time(\"building cascades...\");\r\n                    // go through each entity with metadata and create subjects and subjects by cascades for them\r\n                    const cascadesSubjectBuilder = new CascadesSubjectBuilder(\r\n                        subjects,\r\n                    )\r\n                    subjects.forEach((subject) => {\r\n                        // next step we build list of subjects we will operate with\r\n                        // these subjects are subjects that we need to insert or update alongside with main persisted entity\r\n                        cascadesSubjectBuilder.build(subject, this.mode)\r\n                    })\r\n                    // console.timeEnd(\"building cascades...\");\r\n\r\n                    // load database entities for all subjects we have\r\n                    // next step is to load database entities for all operate subjects\r\n                    // console.time(\"loading...\");\r\n                    await new SubjectDatabaseEntityLoader(\r\n                        queryRunner,\r\n                        subjects,\r\n                    ).load(this.mode)\r\n                    // console.timeEnd(\"loading...\");\r\n\r\n                    // console.time(\"other subjects...\");\r\n                    // build all related subjects and change maps\r\n                    if (\r\n                        this.mode === \"save\" ||\r\n                        this.mode === \"soft-remove\" ||\r\n                        this.mode === \"recover\"\r\n                    ) {\r\n                        new OneToManySubjectBuilder(subjects).build()\r\n                        new OneToOneInverseSideSubjectBuilder(subjects).build()\r\n                        new ManyToManySubjectBuilder(subjects).build()\r\n                    } else {\r\n                        subjects.forEach((subject) => {\r\n                            if (subject.mustBeRemoved) {\r\n                                new ManyToManySubjectBuilder(\r\n                                    subjects,\r\n                                ).buildForAllRemoval(subject)\r\n                            }\r\n                        })\r\n                    }\r\n                    // console.timeEnd(\"other subjects...\");\r\n                    // console.timeEnd(\"building subjects...\");\r\n                    // console.log(\"subjects\", subjects);\r\n\r\n                    // create a subject executor\r\n                    return new SubjectExecutor(\r\n                        queryRunner,\r\n                        subjects,\r\n                        this.options,\r\n                    )\r\n                }),\r\n            )\r\n            // console.timeEnd(\"building subject executors...\");\r\n\r\n            // make sure we have at least one executable operation before we create a transaction and proceed\r\n            // if we don't have operations it means we don't really need to update or remove something\r\n            const executorsWithExecutableOperations = executors.filter(\r\n                (executor) => executor.hasExecutableOperations,\r\n            )\r\n            if (executorsWithExecutableOperations.length === 0) return\r\n\r\n            // start execute queries in a transaction\r\n            // if transaction is already opened in this query runner then we don't touch it\r\n            // if its not opened yet then we open it here, and once we finish - we close it\r\n            let isTransactionStartedByUs = false\r\n            try {\r\n                // open transaction if its not opened yet\r\n                if (!queryRunner.isTransactionActive) {\r\n                    if (\r\n                        this.connection.driver.transactionSupport !== \"none\" &&\r\n                        (!this.options || this.options.transaction !== false)\r\n                    ) {\r\n                        // start transaction until it was not explicitly disabled\r\n                        isTransactionStartedByUs = true\r\n                        await queryRunner.startTransaction()\r\n                    }\r\n                }\r\n\r\n                // execute all persistence operations for all entities we have\r\n                // console.time(\"executing subject executors...\");\r\n                for (const executor of executorsWithExecutableOperations) {\r\n                    await executor.execute()\r\n                }\r\n                // console.timeEnd(\"executing subject executors...\");\r\n\r\n                // commit transaction if it was started by us\r\n                // console.time(\"commit\");\r\n                if (isTransactionStartedByUs === true)\r\n                    await queryRunner.commitTransaction()\r\n                // console.timeEnd(\"commit\");\r\n            } catch (error) {\r\n                // rollback transaction if it was started by us\r\n                if (isTransactionStartedByUs) {\r\n                    try {\r\n                        await queryRunner.rollbackTransaction()\r\n                    } catch (rollbackError) {}\r\n                }\r\n                throw error\r\n            }\r\n        } finally {\r\n            queryRunner.data = oldQueryRunnerData\r\n\r\n            // release query runner only if its created by us\r\n            if (!this.queryRunner) await queryRunner.release()\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
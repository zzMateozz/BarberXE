{"version":3,"sources":["../browser/src/connection/ConnectionMetadataBuilder.ts"],"names":[],"mappings":"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","file":"ConnectionMetadataBuilder.js","sourcesContent":["import { importClassesFromDirectories } from \"../util/DirectoryExportedClassesLoader\"\r\nimport { OrmUtils } from \"../util/OrmUtils\"\r\nimport { getFromContainer } from \"../container\"\r\nimport { MigrationInterface } from \"../migration/MigrationInterface\"\r\nimport { getMetadataArgsStorage } from \"../globals\"\r\nimport { EntityMetadataBuilder } from \"../metadata-builder/EntityMetadataBuilder\"\r\nimport { EntitySchemaTransformer } from \"../entity-schema/EntitySchemaTransformer\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { EntitySchema } from \"../entity-schema/EntitySchema\"\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\r\nimport { EntitySubscriberInterface } from \"../subscriber/EntitySubscriberInterface\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\n\r\n/**\r\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\r\n */\r\nexport class ConnectionMetadataBuilder {\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: DataSource) {}\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds migration instances for the given classes or directories.\r\n     */\r\n    async buildMigrations(\r\n        migrations: (Function | string)[],\r\n    ): Promise<MigrationInterface[]> {\r\n        const [migrationClasses, migrationDirectories] =\r\n            OrmUtils.splitClassesAndStrings(migrations)\r\n        const allMigrationClasses = [\r\n            ...migrationClasses,\r\n            ...(await importClassesFromDirectories(\r\n                this.connection.logger,\r\n                migrationDirectories,\r\n            )),\r\n        ]\r\n        return allMigrationClasses.map((migrationClass) =>\r\n            getFromContainer<MigrationInterface>(migrationClass),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Builds subscriber instances for the given classes or directories.\r\n     */\r\n    async buildSubscribers(\r\n        subscribers: (Function | string)[],\r\n    ): Promise<EntitySubscriberInterface<any>[]> {\r\n        const [subscriberClasses, subscriberDirectories] =\r\n            OrmUtils.splitClassesAndStrings(subscribers || [])\r\n        const allSubscriberClasses = [\r\n            ...subscriberClasses,\r\n            ...(await importClassesFromDirectories(\r\n                this.connection.logger,\r\n                subscriberDirectories,\r\n            )),\r\n        ]\r\n        return getMetadataArgsStorage()\r\n            .filterSubscribers(allSubscriberClasses)\r\n            .map((metadata) =>\r\n                getFromContainer<EntitySubscriberInterface<any>>(\r\n                    metadata.target,\r\n                ),\r\n            )\r\n    }\r\n\r\n    /**\r\n     * Builds entity metadatas for the given classes or directories.\r\n     */\r\n    async buildEntityMetadatas(\r\n        entities: (Function | EntitySchema<any> | string)[],\r\n    ): Promise<EntityMetadata[]> {\r\n        // todo: instead we need to merge multiple metadata args storages\r\n\r\n        const [entityClassesOrSchemas, entityDirectories] =\r\n            OrmUtils.splitClassesAndStrings(entities || [])\r\n        const entityClasses: Function[] = entityClassesOrSchemas.filter(\r\n            (entityClass) => !InstanceChecker.isEntitySchema(entityClass),\r\n        ) as any\r\n        const entitySchemas: EntitySchema<any>[] =\r\n            entityClassesOrSchemas.filter((entityClass) =>\r\n                InstanceChecker.isEntitySchema(entityClass),\r\n            ) as any\r\n\r\n        const allEntityClasses = [\r\n            ...entityClasses,\r\n            ...(await importClassesFromDirectories(\r\n                this.connection.logger,\r\n                entityDirectories,\r\n            )),\r\n        ]\r\n        allEntityClasses.forEach((entityClass) => {\r\n            // if we have entity schemas loaded from directories\r\n            if (InstanceChecker.isEntitySchema(entityClass)) {\r\n                entitySchemas.push(entityClass)\r\n            }\r\n        })\r\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(\r\n            this.connection,\r\n            getMetadataArgsStorage(),\r\n        ).build(allEntityClasses)\r\n\r\n        const metadataArgsStorageFromSchema =\r\n            new EntitySchemaTransformer().transform(entitySchemas)\r\n        const schemaEntityMetadatas = new EntityMetadataBuilder(\r\n            this.connection,\r\n            metadataArgsStorageFromSchema,\r\n        ).build()\r\n\r\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas]\r\n    }\r\n}\r\n"],"sourceRoot":".."}
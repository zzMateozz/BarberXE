{"version":3,"sources":["../browser/src/connection/options-reader/ConnectionOptionsEnvReader.ts"],"names":[],"mappings":"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","file":"ConnectionOptionsEnvReader.js","sourcesContent":["import { DataSourceOptions } from \"../../data-source/DataSourceOptions\"\r\nimport { PlatformTools } from \"../../platform/PlatformTools\"\r\nimport { OrmUtils } from \"../../util/OrmUtils\"\r\n\r\n/**\r\n * Reads connection options from environment variables.\r\n * Environment variables can have only a single connection.\r\n * Its strongly required to define TYPEORM_CONNECTION env variable.\r\n *\r\n * @deprecated\r\n */\r\nexport class ConnectionOptionsEnvReader {\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Reads connection options from environment variables.\r\n     */\r\n    async read(): Promise<DataSourceOptions[]> {\r\n        return [\r\n            {\r\n                type:\r\n                    PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\") ||\r\n                    (PlatformTools.getEnvVariable(\"TYPEORM_URL\")\r\n                        ? PlatformTools.getEnvVariable(\"TYPEORM_URL\").split(\r\n                              \"://\",\r\n                          )[0]\r\n                        : undefined),\r\n                url: PlatformTools.getEnvVariable(\"TYPEORM_URL\"),\r\n                host: PlatformTools.getEnvVariable(\"TYPEORM_HOST\"),\r\n                port: this.stringToNumber(\r\n                    PlatformTools.getEnvVariable(\"TYPEORM_PORT\"),\r\n                ),\r\n                username: PlatformTools.getEnvVariable(\"TYPEORM_USERNAME\"),\r\n                password: PlatformTools.getEnvVariable(\"TYPEORM_PASSWORD\"),\r\n                database: PlatformTools.getEnvVariable(\"TYPEORM_DATABASE\"),\r\n                sid: PlatformTools.getEnvVariable(\"TYPEORM_SID\"),\r\n                schema: PlatformTools.getEnvVariable(\"TYPEORM_SCHEMA\"),\r\n                extra: PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\")\r\n                    ? JSON.parse(\r\n                          PlatformTools.getEnvVariable(\"TYPEORM_DRIVER_EXTRA\"),\r\n                      )\r\n                    : undefined,\r\n                synchronize: OrmUtils.toBoolean(\r\n                    PlatformTools.getEnvVariable(\"TYPEORM_SYNCHRONIZE\"),\r\n                ),\r\n                dropSchema: OrmUtils.toBoolean(\r\n                    PlatformTools.getEnvVariable(\"TYPEORM_DROP_SCHEMA\"),\r\n                ),\r\n                migrationsRun: OrmUtils.toBoolean(\r\n                    PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS_RUN\"),\r\n                ),\r\n                entities: this.stringToArray(\r\n                    PlatformTools.getEnvVariable(\"TYPEORM_ENTITIES\"),\r\n                ),\r\n                migrations: this.stringToArray(\r\n                    PlatformTools.getEnvVariable(\"TYPEORM_MIGRATIONS\"),\r\n                ),\r\n                migrationsTableName: PlatformTools.getEnvVariable(\r\n                    \"TYPEORM_MIGRATIONS_TABLE_NAME\",\r\n                ),\r\n                metadataTableName: PlatformTools.getEnvVariable(\r\n                    \"TYPEORM_METADATA_TABLE_NAME\",\r\n                ),\r\n                subscribers: this.stringToArray(\r\n                    PlatformTools.getEnvVariable(\"TYPEORM_SUBSCRIBERS\"),\r\n                ),\r\n                logging: this.transformLogging(\r\n                    PlatformTools.getEnvVariable(\"TYPEORM_LOGGING\"),\r\n                ),\r\n                logger: PlatformTools.getEnvVariable(\"TYPEORM_LOGGER\"),\r\n                entityPrefix: PlatformTools.getEnvVariable(\r\n                    \"TYPEORM_ENTITY_PREFIX\",\r\n                ),\r\n                maxQueryExecutionTime: PlatformTools.getEnvVariable(\r\n                    \"TYPEORM_MAX_QUERY_EXECUTION_TIME\",\r\n                ),\r\n                debug: PlatformTools.getEnvVariable(\"TYPEORM_DEBUG\"),\r\n                cache: this.transformCaching(),\r\n                uuidExtension: PlatformTools.getEnvVariable(\r\n                    \"TYPEORM_UUID_EXTENSION\",\r\n                ),\r\n            },\r\n        ]\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Transforms logging string into real logging value connection requires.\r\n     */\r\n    protected transformLogging(logging: string): any {\r\n        if (logging === \"true\" || logging === \"TRUE\" || logging === \"1\")\r\n            return true\r\n        if (logging === \"all\") return \"all\"\r\n\r\n        return this.stringToArray(logging)\r\n    }\r\n\r\n    /**\r\n     * Transforms caching option into real caching value option requires.\r\n     */\r\n    protected transformCaching(): boolean | object | undefined {\r\n        const caching = PlatformTools.getEnvVariable(\"TYPEORM_CACHE\")\r\n        if (caching === \"true\" || caching === \"TRUE\" || caching === \"1\")\r\n            return true\r\n        if (caching === \"false\" || caching === \"FALSE\" || caching === \"0\")\r\n            return false\r\n        if (\r\n            caching === \"redis\" ||\r\n            caching === \"ioredis\" ||\r\n            caching === \"database\"\r\n        )\r\n            return {\r\n                type: caching,\r\n                options: PlatformTools.getEnvVariable(\"TYPEORM_CACHE_OPTIONS\")\r\n                    ? JSON.parse(\r\n                          PlatformTools.getEnvVariable(\"TYPEORM_CACHE_OPTIONS\"),\r\n                      )\r\n                    : undefined,\r\n                alwaysEnabled: PlatformTools.getEnvVariable(\r\n                    \"TYPEORM_CACHE_ALWAYS_ENABLED\",\r\n                ),\r\n                duration: parseInt(\r\n                    PlatformTools.getEnvVariable(\"TYPEORM_CACHE_DURATION\"),\r\n                ),\r\n            }\r\n\r\n        return undefined\r\n    }\r\n\r\n    /**\r\n     * Converts a string which contains multiple elements split by comma into a string array of strings.\r\n     */\r\n    protected stringToArray(variable?: string) {\r\n        if (!variable) return []\r\n        return variable.split(\",\").map((str) => str.trim())\r\n    }\r\n\r\n    /**\r\n     * Converts a string which contains a number into a javascript number\r\n     */\r\n    private stringToNumber(value: any): number | undefined {\r\n        if (!value) {\r\n            return undefined\r\n        }\r\n\r\n        return parseInt(value)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
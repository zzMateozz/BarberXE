{"version":3,"sources":["../browser/src/connection/ConnectionOptionsReader.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,eAAe,CAAA;AACvC,OAAO,IAAI,MAAM,MAAM,CAAA;AAEvB,OAAO,EAAE,aAAa,EAAE,MAAM,2BAA2B,CAAA;AACzD,OAAO,EAAE,0BAA0B,EAAE,MAAM,6CAA6C,CAAA;AACxF,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAA;AACvC,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAA;AAC9C,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAA;AAEzD;;GAEG;AACH,MAAM,OAAO,uBAAuB;IAChC,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YACc,OAWT;QAXS,YAAO,GAAP,OAAO,CAWhB;IACF,CAAC;IAEJ,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,KAAK,CAAC,GAAG;QACL,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAA;QACjC,IAAI,CAAC,OAAO;YACR,MAAM,IAAI,YAAY,CAClB,kEAAkE,CACrE,CAAA;QAEL,OAAO,OAAO,CAAA;IAClB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,GAAG,CAAC,IAAY;QAClB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,CAAA;QACnC,MAAM,aAAa,GAAG,UAAU,CAAC,IAAI,CACjC,CAAC,OAAO,EAAE,EAAE,CACR,OAAO,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CACrE,CAAA;QACD,IAAI,CAAC,aAAa;YACd,MAAM,IAAI,YAAY,CAClB,0BAA0B,IAAI,0DAA0D,CAC3F,CAAA;QAEL,OAAO,aAAa,CAAA;IACxB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,GAAG,CAAC,IAAY;QAClB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAA;QACpC,IAAI,CAAC,UAAU;YAAE,OAAO,KAAK,CAAA;QAE7B,MAAM,aAAa,GAAG,UAAU,CAAC,IAAI,CACjC,CAAC,OAAO,EAAE,EAAE,CACR,OAAO,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CACrE,CAAA;QACD,OAAO,CAAC,CAAC,aAAa,CAAA;IAC1B,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;;;OAIG;IACO,KAAK,CAAC,IAAI;QAChB,IAAI,iBAAiB,GAGH,SAAS,CAAA;QAE3B,MAAM,WAAW,GAAG;YAChB,KAAK;YACL,IAAI;YACJ,KAAK;YACL,KAAK;YACL,IAAI;YACJ,KAAK;YACL,KAAK;YACL,MAAM;SACT,CAAA;QAED,iDAAiD;QACjD,MAAM,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAC9C,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,CACrC,CAAA;QACD,MAAM,aAAa,GAAG,WAAW,CAAC,IAAI,CAClC,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,SAAS,EAAE,KAAK,iBAAiB,CACvD,CAAA;QAED,qDAAqD;QACrD,MAAM,eAAe,GACjB,aAAa;YACb,WAAW,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;gBACxB,OAAO,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,GAAG,GAAG,GAAG,MAAM,CAAC,CAAA;YACpE,CAAC,CAAC,CAAA;QAEN,6BAA6B;QAC7B,MAAM,UAAU,GAAG,aAAa;YAC5B,CAAC,CAAC,IAAI,CAAC,YAAY;YACnB,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,GAAG,GAAG,eAAe,CAAA;QAE/C,uFAAuF;QACvF,IAAI,eAAe,KAAK,KAAK,EAAE,CAAC;YAC5B,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,CAAA;QACpC,CAAC;aAAM,IAAI,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,EAAE,CAAC;YAC/D,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,CAAA;QACtD,CAAC;QAED,gFAAgF;QAChF,IACI,aAAa,CAAC,cAAc,CAAC,oBAAoB,CAAC;YAClD,aAAa,CAAC,cAAc,CAAC,aAAa,CAAC,EAC7C,CAAC;YACC,iBAAiB,GAAG,MAAM,IAAI,0BAA0B,EAAE,CAAC,IAAI,EAAE,CAAA;QACrE,CAAC;aAAM,IACH,eAAe,KAAK,IAAI;YACxB,eAAe,KAAK,KAAK;YACzB,eAAe,KAAK,KAAK;YACzB,eAAe,KAAK,IAAI;YACxB,eAAe,KAAK,KAAK;YACzB,eAAe,KAAK,KAAK,EAC3B,CAAC;YACC,MAAM,CAAC,qBAAqB,EAAE,YAAY,CAAC,GACvC,MAAM,mBAAmB,CAAC,UAAU,CAAC,CAAA;YACzC,MAAM,YAAY,GAAG,MAAM,qBAAqB,CAAA;YAEhD,IACI,YAAY,KAAK,KAAK;gBACtB,CAAC,YAAY;oBACT,YAAY,IAAI,YAAY;oBAC5B,SAAS,IAAI,YAAY,CAAC,EAChC,CAAC;gBACC,iBAAiB,GAAG,YAAY,CAAC,OAAO,CAAA;YAC5C,CAAC;iBAAM,CAAC;gBACJ,iBAAiB,GAAG,YAAY,CAAA;YACpC,CAAC;QACL,CAAC;aAAM,IAAI,eAAe,KAAK,MAAM,EAAE,CAAC;YACpC,iBAAiB,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;QAC3C,CAAC;QAED,0CAA0C;QAC1C,IAAI,iBAAiB,EAAE,CAAC;YACpB,OAAO,IAAI,CAAC,0BAA0B,CAAC,iBAAiB,CAAC,CAAA;QAC7D,CAAC;QAED,OAAO,SAAS,CAAA;IACpB,CAAC;IAED;;OAEG;IACO,0BAA0B,CAChC,iBAA0D;QAE1D,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,CAAC;YACjC,iBAAiB,GAAG,CAAC,iBAAiB,CAAC,CAAA;QAE3C,iBAAiB,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAClC,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAA;YAC1C,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;gBACnB,MAAM,QAAQ,GAAI,OAAO,CAAC,QAAkB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;oBACxD,IACI,OAAO,MAAM,KAAK,QAAQ;wBAC1B,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG;wBAE3B,OAAO,IAAI,CAAC,aAAa,GAAG,GAAG,GAAG,MAAM,CAAA;oBAE5C,OAAO,MAAM,CAAA;gBACjB,CAAC,CAAC,CAAA;gBACF,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAA;YAC5D,CAAC;YACD,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC;gBACtB,MAAM,WAAW,GAAI,OAAO,CAAC,WAAqB,CAAC,GAAG,CAClD,CAAC,UAAU,EAAE,EAAE;oBACX,IACI,OAAO,UAAU,KAAK,QAAQ;wBAC9B,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG;wBAE/B,OAAO,IAAI,CAAC,aAAa,GAAG,GAAG,GAAG,UAAU,CAAA;oBAEhD,OAAO,UAAU,CAAA;gBACrB,CAAC,CACJ,CAAA;gBACD,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAA;YAClE,CAAC;YACD,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;gBACrB,MAAM,UAAU,GAAI,OAAO,CAAC,UAAoB,CAAC,GAAG,CAChD,CAAC,SAAS,EAAE,EAAE;oBACV,IACI,OAAO,SAAS,KAAK,QAAQ;wBAC7B,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG;wBAE9B,OAAO,IAAI,CAAC,aAAa,GAAG,GAAG,GAAG,SAAS,CAAA;oBAE/C,OAAO,SAAS,CAAA;gBACpB,CAAC,CACJ,CAAA;gBACD,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAA;YAChE,CAAC;YAED,6DAA6D;YAC7D,IACI,OAAO,CAAC,IAAI,KAAK,QAAQ;gBACzB,OAAO,CAAC,IAAI,KAAK,gBAAgB,EACnC,CAAC;gBACC,IACI,OAAO,OAAO,CAAC,QAAQ,KAAK,QAAQ;oBACpC,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC;oBAC7B,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,IAAI,gBAAgB;oBACzD,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,mBAAmB;oBAC9D,OAAO,CAAC,QAAQ,KAAK,UAAU,EACjC,CAAC;oBACC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE;wBACnB,QAAQ,EAAE,IAAI,CAAC,aAAa,GAAG,GAAG,GAAG,OAAO,CAAC,QAAQ;qBACxD,CAAC,CAAA;gBACN,CAAC;YACL,CAAC;QACL,CAAC,CAAC,CAAA;QAEF,OAAO,iBAAiB,CAAA;IAC5B,CAAC;IAED;;OAEG;IACH,IAAc,YAAY;QACtB,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,CAAA;IAChE,CAAC;IAED;;OAEG;IACH,IAAc,aAAa;QACvB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAA;QAE/D,OAAO,WAAW,CAAC,IAAI,CAAA;IAC3B,CAAC;IAED;;OAEG;IACH,IAAc,cAAc;QACxB,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU;YACvC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAA;QAElC,OAAO,WAAW,CAAA;IACtB,CAAC;CACJ","file":"ConnectionOptionsReader.js","sourcesContent":["import appRootPath from \"app-root-path\"\r\nimport path from \"path\"\r\nimport { DataSourceOptions } from \"../data-source/DataSourceOptions\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport { ConnectionOptionsEnvReader } from \"./options-reader/ConnectionOptionsEnvReader\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { isAbsolute } from \"../util/PathUtils\"\r\nimport { importOrRequireFile } from \"../util/ImportUtils\"\r\n\r\n/**\r\n * Reads connection options from the ormconfig.\r\n */\r\nexport class ConnectionOptionsReader {\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        protected options?: {\r\n            /**\r\n             * Directory where ormconfig should be read from.\r\n             * By default its your application root (where your app package.json is located).\r\n             */\r\n            root?: string\r\n\r\n            /**\r\n             * Filename of the ormconfig configuration. By default its equal to \"ormconfig\".\r\n             */\r\n            configName?: string\r\n        },\r\n    ) {}\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Returns all connection options read from the ormconfig.\r\n     */\r\n    async all(): Promise<DataSourceOptions[]> {\r\n        const options = await this.load()\r\n        if (!options)\r\n            throw new TypeORMError(\r\n                `No connection options were found in any orm configuration files.`,\r\n            )\r\n\r\n        return options\r\n    }\r\n\r\n    /**\r\n     * Gets a connection with a given name read from ormconfig.\r\n     * If connection with such name would not be found then it throw error.\r\n     */\r\n    async get(name: string): Promise<DataSourceOptions> {\r\n        const allOptions = await this.all()\r\n        const targetOptions = allOptions.find(\r\n            (options) =>\r\n                options.name === name || (name === \"default\" && !options.name),\r\n        )\r\n        if (!targetOptions)\r\n            throw new TypeORMError(\r\n                `Cannot find connection ${name} because its not defined in any orm configuration files.`,\r\n            )\r\n\r\n        return targetOptions\r\n    }\r\n\r\n    /**\r\n     * Checks if there is a TypeORM configuration file.\r\n     */\r\n    async has(name: string): Promise<boolean> {\r\n        const allOptions = await this.load()\r\n        if (!allOptions) return false\r\n\r\n        const targetOptions = allOptions.find(\r\n            (options) =>\r\n                options.name === name || (name === \"default\" && !options.name),\r\n        )\r\n        return !!targetOptions\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads all connection options from a configuration file.\r\n     *\r\n     * todo: get in count NODE_ENV somehow\r\n     */\r\n    protected async load(): Promise<DataSourceOptions[] | undefined> {\r\n        let connectionOptions:\r\n            | DataSourceOptions\r\n            | DataSourceOptions[]\r\n            | undefined = undefined\r\n\r\n        const fileFormats = [\r\n            \"env\",\r\n            \"js\",\r\n            \"mjs\",\r\n            \"cjs\",\r\n            \"ts\",\r\n            \"mts\",\r\n            \"cts\",\r\n            \"json\",\r\n        ]\r\n\r\n        // Detect if baseFilePath contains file extension\r\n        const possibleExtension = this.baseFilePath.substr(\r\n            this.baseFilePath.lastIndexOf(\".\"),\r\n        )\r\n        const fileExtension = fileFormats.find(\r\n            (extension) => `.${extension}` === possibleExtension,\r\n        )\r\n\r\n        // try to find any of following configuration formats\r\n        const foundFileFormat =\r\n            fileExtension ||\r\n            fileFormats.find((format) => {\r\n                return PlatformTools.fileExist(this.baseFilePath + \".\" + format)\r\n            })\r\n\r\n        // Determine config file name\r\n        const configFile = fileExtension\r\n            ? this.baseFilePath\r\n            : this.baseFilePath + \".\" + foundFileFormat\r\n\r\n        // if .env file found then load all its variables into process.env using dotenv package\r\n        if (foundFileFormat === \"env\") {\r\n            PlatformTools.dotenv(configFile)\r\n        } else if (PlatformTools.fileExist(this.baseDirectory + \"/.env\")) {\r\n            PlatformTools.dotenv(this.baseDirectory + \"/.env\")\r\n        }\r\n\r\n        // try to find connection options from any of available sources of configuration\r\n        if (\r\n            PlatformTools.getEnvVariable(\"TYPEORM_CONNECTION\") ||\r\n            PlatformTools.getEnvVariable(\"TYPEORM_URL\")\r\n        ) {\r\n            connectionOptions = await new ConnectionOptionsEnvReader().read()\r\n        } else if (\r\n            foundFileFormat === \"js\" ||\r\n            foundFileFormat === \"mjs\" ||\r\n            foundFileFormat === \"cjs\" ||\r\n            foundFileFormat === \"ts\" ||\r\n            foundFileFormat === \"mts\" ||\r\n            foundFileFormat === \"cts\"\r\n        ) {\r\n            const [importOrRequireResult, moduleSystem] =\r\n                await importOrRequireFile(configFile)\r\n            const configModule = await importOrRequireResult\r\n\r\n            if (\r\n                moduleSystem === \"esm\" ||\r\n                (configModule &&\r\n                    \"__esModule\" in configModule &&\r\n                    \"default\" in configModule)\r\n            ) {\r\n                connectionOptions = configModule.default\r\n            } else {\r\n                connectionOptions = configModule\r\n            }\r\n        } else if (foundFileFormat === \"json\") {\r\n            connectionOptions = require(configFile)\r\n        }\r\n\r\n        // normalize and return connection options\r\n        if (connectionOptions) {\r\n            return this.normalizeConnectionOptions(connectionOptions)\r\n        }\r\n\r\n        return undefined\r\n    }\r\n\r\n    /**\r\n     * Normalize connection options.\r\n     */\r\n    protected normalizeConnectionOptions(\r\n        connectionOptions: DataSourceOptions | DataSourceOptions[],\r\n    ): DataSourceOptions[] {\r\n        if (!Array.isArray(connectionOptions))\r\n            connectionOptions = [connectionOptions]\r\n\r\n        connectionOptions.forEach((options) => {\r\n            options.baseDirectory = this.baseDirectory\r\n            if (options.entities) {\r\n                const entities = (options.entities as any[]).map((entity) => {\r\n                    if (\r\n                        typeof entity === \"string\" &&\r\n                        entity.substr(0, 1) !== \"/\"\r\n                    )\r\n                        return this.baseDirectory + \"/\" + entity\r\n\r\n                    return entity\r\n                })\r\n                Object.assign(connectionOptions, { entities: entities })\r\n            }\r\n            if (options.subscribers) {\r\n                const subscribers = (options.subscribers as any[]).map(\r\n                    (subscriber) => {\r\n                        if (\r\n                            typeof subscriber === \"string\" &&\r\n                            subscriber.substr(0, 1) !== \"/\"\r\n                        )\r\n                            return this.baseDirectory + \"/\" + subscriber\r\n\r\n                        return subscriber\r\n                    },\r\n                )\r\n                Object.assign(connectionOptions, { subscribers: subscribers })\r\n            }\r\n            if (options.migrations) {\r\n                const migrations = (options.migrations as any[]).map(\r\n                    (migration) => {\r\n                        if (\r\n                            typeof migration === \"string\" &&\r\n                            migration.substr(0, 1) !== \"/\"\r\n                        )\r\n                            return this.baseDirectory + \"/\" + migration\r\n\r\n                        return migration\r\n                    },\r\n                )\r\n                Object.assign(connectionOptions, { migrations: migrations })\r\n            }\r\n\r\n            // make database path file in sqlite relative to package.json\r\n            if (\r\n                options.type === \"sqlite\" ||\r\n                options.type === \"better-sqlite3\"\r\n            ) {\r\n                if (\r\n                    typeof options.database === \"string\" &&\r\n                    !isAbsolute(options.database) &&\r\n                    options.database.substr(0, 1) !== \"/\" && // unix absolute\r\n                    options.database.substr(1, 2) !== \":\\\\\" && // windows absolute\r\n                    options.database !== \":memory:\"\r\n                ) {\r\n                    Object.assign(options, {\r\n                        database: this.baseDirectory + \"/\" + options.database,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n\r\n        return connectionOptions\r\n    }\r\n\r\n    /**\r\n     * Gets directory where configuration file should be located and configuration file name.\r\n     */\r\n    protected get baseFilePath(): string {\r\n        return path.resolve(this.baseDirectory, this.baseConfigName)\r\n    }\r\n\r\n    /**\r\n     * Gets directory where configuration file should be located.\r\n     */\r\n    protected get baseDirectory(): string {\r\n        if (this.options && this.options.root) return this.options.root\r\n\r\n        return appRootPath.path\r\n    }\r\n\r\n    /**\r\n     * Gets configuration file name.\r\n     */\r\n    protected get baseConfigName(): string {\r\n        if (this.options && this.options.configName)\r\n            return this.options.configName\r\n\r\n        return \"ormconfig\"\r\n    }\r\n}\r\n"],"sourceRoot":".."}
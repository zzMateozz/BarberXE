{"version":3,"sources":["../browser/src/find-options/FindOperator.ts"],"names":[],"mappings":"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","file":"FindOperator.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { FindOperatorType } from \"./FindOperatorType\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\nimport { ValueTransformer } from \"../decorator/options/ValueTransformer\"\r\nimport { ApplyValueTransformers } from \"../util/ApplyValueTransformers\"\r\n\r\ntype SqlGeneratorType = (aliasPath: string) => string\r\n\r\n/**\r\n * Find Operator used in Find Conditions.\r\n */\r\nexport class FindOperator<T> {\r\n    readonly \"@instanceof\" = Symbol.for(\"FindOperator\")\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Operator type.\r\n     */\r\n    private _type: FindOperatorType\r\n\r\n    /**\r\n     * Parameter value.\r\n     */\r\n    private _value: T | FindOperator<T>\r\n\r\n    /**\r\n     * ObjectLiteral parameters.\r\n     */\r\n    private _objectLiteralParameters: ObjectLiteral | undefined\r\n\r\n    /**\r\n     * Indicates if parameter is used or not for this operator.\r\n     */\r\n    private _useParameter: boolean\r\n\r\n    /**\r\n     * Indicates if multiple parameters must be used for this operator.\r\n     */\r\n    private _multipleParameters: boolean\r\n\r\n    /**\r\n     * SQL generator\r\n     */\r\n    private _getSql: SqlGeneratorType | undefined\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        type: FindOperatorType,\r\n        value: T | FindOperator<T>,\r\n        useParameter: boolean = true,\r\n        multipleParameters: boolean = false,\r\n        getSql?: SqlGeneratorType,\r\n        objectLiteralParameters?: ObjectLiteral,\r\n    ) {\r\n        this._type = type\r\n        this._value = value\r\n        this._useParameter = useParameter\r\n        this._multipleParameters = multipleParameters\r\n        this._getSql = getSql\r\n        this._objectLiteralParameters = objectLiteralParameters\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if parameter is used or not for this operator.\r\n     * Extracts final value if value is another find operator.\r\n     */\r\n    get useParameter(): boolean {\r\n        if (InstanceChecker.isFindOperator(this._value))\r\n            return this._value.useParameter\r\n\r\n        return this._useParameter\r\n    }\r\n\r\n    /**\r\n     * Indicates if multiple parameters must be used for this operator.\r\n     * Extracts final value if value is another find operator.\r\n     */\r\n    get multipleParameters(): boolean {\r\n        if (InstanceChecker.isFindOperator(this._value))\r\n            return this._value.multipleParameters\r\n\r\n        return this._multipleParameters\r\n    }\r\n\r\n    /**\r\n     * Gets the Type of this FindOperator\r\n     */\r\n    get type(): FindOperatorType {\r\n        return this._type\r\n    }\r\n\r\n    /**\r\n     * Gets the final value needs to be used as parameter value.\r\n     */\r\n    get value(): T {\r\n        if (InstanceChecker.isFindOperator(this._value))\r\n            return this._value.value\r\n\r\n        return this._value\r\n    }\r\n\r\n    /**\r\n     * Gets ObjectLiteral parameters.\r\n     */\r\n    get objectLiteralParameters(): ObjectLiteral | undefined {\r\n        if (InstanceChecker.isFindOperator(this._value))\r\n            return this._value.objectLiteralParameters\r\n\r\n        return this._objectLiteralParameters\r\n    }\r\n\r\n    /**\r\n     * Gets the child FindOperator if it exists\r\n     */\r\n    get child(): FindOperator<T> | undefined {\r\n        if (InstanceChecker.isFindOperator(this._value)) return this._value\r\n\r\n        return undefined\r\n    }\r\n\r\n    /**\r\n     * Gets the SQL generator\r\n     */\r\n    get getSql(): SqlGeneratorType | undefined {\r\n        if (InstanceChecker.isFindOperator(this._value))\r\n            return this._value.getSql\r\n\r\n        return this._getSql\r\n    }\r\n\r\n    transformValue(transformer: ValueTransformer | ValueTransformer[]) {\r\n        if (this._value instanceof FindOperator) {\r\n            this._value.transformValue(transformer)\r\n        } else {\r\n            this._value =\r\n                Array.isArray(this._value) && this._multipleParameters\r\n                    ? this._value.map(\r\n                          (v: any) =>\r\n                              transformer &&\r\n                              ApplyValueTransformers.transformTo(\r\n                                  transformer,\r\n                                  v,\r\n                              ),\r\n                      )\r\n                    : ApplyValueTransformers.transformTo(\r\n                          transformer,\r\n                          this._value,\r\n                      )\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
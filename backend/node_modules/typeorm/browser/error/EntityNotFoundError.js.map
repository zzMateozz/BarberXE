{"version":3,"sources":["../browser/src/error/EntityNotFoundError.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAA;AAC7C,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AAEzD;;GAEG;AACH,MAAM,OAAO,mBAAoB,SAAQ,YAAY;IAIjD,YAAY,WAA8B,EAAE,QAAa;QACrD,KAAK,EAAE,CAAA;QAEP,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;QAExB,IAAI,CAAC,OAAO;YACR,sCAAsC,IAAI,CAAC,eAAe,CACtD,WAAW,CACd,IAAI,GAAG,aAAa,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,EAAE,CAAA;IAC/D,CAAC;IAEO,eAAe,CAAC,MAAyB;QAC7C,IAAI,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC;YACzC,OAAO,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA;QAC9B,CAAC;aAAM,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE,CAAC;YACtC,OAAO,MAAM,CAAC,IAAI,CAAA;QACtB,CAAC;aAAM,IAAI,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,MAAM,IAAK,MAAc,EAAE,CAAC;YACnE,OAAQ,MAAc,CAAC,IAAI,CAAA;QAC/B,CAAC;aAAM,CAAC;YACJ,OAAO,MAAa,CAAA;QACxB,CAAC;IACL,CAAC;IAEO,iBAAiB,CAAC,QAAa;QACnC,IAAI,CAAC;YACD,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA;QAC5C,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC,CAAA,CAAC;QACd,OAAO,EAAE,GAAG,QAAQ,CAAA;IACxB,CAAC;CACJ","file":"EntityNotFoundError.js","sourcesContent":["import { EntityTarget } from \"../common/EntityTarget\"\r\nimport { TypeORMError } from \"./TypeORMError\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\n\r\n/**\r\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\r\n */\r\nexport class EntityNotFoundError extends TypeORMError {\r\n    public readonly entityClass: EntityTarget<any>\r\n    public readonly criteria: any\r\n\r\n    constructor(entityClass: EntityTarget<any>, criteria: any) {\r\n        super()\r\n\r\n        this.entityClass = entityClass\r\n        this.criteria = criteria\r\n\r\n        this.message =\r\n            `Could not find any entity of type \"${this.stringifyTarget(\r\n                entityClass,\r\n            )}\" ` + `matching: ${this.stringifyCriteria(criteria)}`\r\n    }\r\n\r\n    private stringifyTarget(target: EntityTarget<any>): string {\r\n        if (InstanceChecker.isEntitySchema(target)) {\r\n            return target.options.name\r\n        } else if (typeof target === \"function\") {\r\n            return target.name\r\n        } else if (ObjectUtils.isObject(target) && \"name\" in (target as any)) {\r\n            return (target as any).name\r\n        } else {\r\n            return target as any\r\n        }\r\n    }\r\n\r\n    private stringifyCriteria(criteria: any): string {\r\n        try {\r\n            return JSON.stringify(criteria, null, 4)\r\n        } catch (e) {}\r\n        return \"\" + criteria\r\n    }\r\n}\r\n"],"sourceRoot":".."}
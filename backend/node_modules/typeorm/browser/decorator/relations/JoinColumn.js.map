{"version":3,"sources":["../browser/src/decorator/relations/JoinColumn.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,eAAe,CAAA;AAyBtD;;;;GAIG;AACH,MAAM,UAAU,UAAU,CACtB,qBAA+D;IAE/D,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,qBAAqB,CAAC;YAChD,CAAC,CAAC,qBAAqB;YACvB,CAAC,CAAC,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAA;QACnC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YACxB,sBAAsB,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC;gBACtC,MAAM,EAAE,MAAM,CAAC,WAAW;gBAC1B,YAAY,EAAE,YAAY;gBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;gBAClD,wBAAwB,EAAE,OAAO,CAAC,wBAAwB;aACnC,CAAC,CAAA;QAChC,CAAC,CAAC,CAAA;IACN,CAAC,CAAA;AACL,CAAC","file":"JoinColumn.js","sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\r\nimport { JoinColumnMetadataArgs } from \"../../metadata-args/JoinColumnMetadataArgs\"\r\nimport { JoinColumnOptions } from \"../options/JoinColumnOptions\"\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(): PropertyDecorator\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(options: JoinColumnOptions): PropertyDecorator\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(options: JoinColumnOptions[]): PropertyDecorator\r\n\r\n/**\r\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\r\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\r\n * or custom referenced column.\r\n */\r\nexport function JoinColumn(\r\n    optionsOrOptionsArray?: JoinColumnOptions | JoinColumnOptions[],\r\n): PropertyDecorator {\r\n    return function (object: Object, propertyName: string) {\r\n        const options = Array.isArray(optionsOrOptionsArray)\r\n            ? optionsOrOptionsArray\r\n            : [optionsOrOptionsArray || {}]\r\n        options.forEach((options) => {\r\n            getMetadataArgsStorage().joinColumns.push({\r\n                target: object.constructor,\r\n                propertyName: propertyName,\r\n                name: options.name,\r\n                referencedColumnName: options.referencedColumnName,\r\n                foreignKeyConstraintName: options.foreignKeyConstraintName,\r\n            } as JoinColumnMetadataArgs)\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
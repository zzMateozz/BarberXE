{"version":3,"sources":["../browser/src/decorator/relations/JoinTable.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,eAAe,CAAA;AAyBtD;;;GAGG;AACH,MAAM,UAAU,SAAS,CACrB,OAA4D;IAE5D,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,OAAO;YACH,OAAO;gBACN,EAAyD,CAAA;QAC9D,sBAAsB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC;YACrC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,WAAW,EAAE,CAAC,OAAO,IAAK,OAA4B,CAAC,UAAU;gBAC7D,CAAC,CAAC,CAAE,OAA4B,CAAC,UAAW,CAAC;gBAC7C,CAAC,CAAE,OAA2C;qBACvC,WAAW,CAAQ;YAC9B,kBAAkB,EAAE,CAAC,OAAO;gBAC3B,OAA4B,CAAC,iBAAiB;gBAC3C,CAAC,CAAC,CAAE,OAA4B,CAAC,iBAAkB,CAAC;gBACpD,CAAC,CAAE,OAA2C;qBACvC,kBAAkB,CAAQ;YACrC,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS;YAC9D,QAAQ,EACJ,OAAO,IAAI,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS;YAC9D,WAAW,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,KAAK,KAAK,CAAC;SAClC,CAAC,CAAA;IAC/B,CAAC,CAAA;AACL,CAAC","file":"JoinTable.js","sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\r\nimport { JoinTableMetadataArgs } from \"../../metadata-args/JoinTableMetadataArgs\"\r\nimport { JoinTableMultipleColumnsOptions } from \"../options/JoinTableMultipleColumnsOptions\"\r\nimport { JoinTableOptions } from \"../options/JoinTableOptions\"\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(): PropertyDecorator\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(options: JoinTableOptions): PropertyDecorator\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(\r\n    options: JoinTableMultipleColumnsOptions,\r\n): PropertyDecorator\r\n\r\n/**\r\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\r\n * Its also used to set a custom junction table's name, column names and referenced columns.\r\n */\r\nexport function JoinTable(\r\n    options?: JoinTableOptions | JoinTableMultipleColumnsOptions,\r\n): PropertyDecorator {\r\n    return function (object: Object, propertyName: string) {\r\n        options =\r\n            options ||\r\n            ({} as JoinTableOptions | JoinTableMultipleColumnsOptions)\r\n        getMetadataArgsStorage().joinTables.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            name: options.name,\r\n            joinColumns: (options && (options as JoinTableOptions).joinColumn\r\n                ? [(options as JoinTableOptions).joinColumn!]\r\n                : (options as JoinTableMultipleColumnsOptions)\r\n                      .joinColumns) as any,\r\n            inverseJoinColumns: (options &&\r\n            (options as JoinTableOptions).inverseJoinColumn\r\n                ? [(options as JoinTableOptions).inverseJoinColumn!]\r\n                : (options as JoinTableMultipleColumnsOptions)\r\n                      .inverseJoinColumns) as any,\r\n            schema: options && options.schema ? options.schema : undefined,\r\n            database:\r\n                options && options.database ? options.database : undefined,\r\n            synchronize: !(options && options.synchronize === false),\r\n        } as JoinTableMetadataArgs)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../browser/src/decorator/EntityRepository.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,YAAY,CAAA;AAInD;;;;;;GAMG;AACH,MAAM,UAAU,gBAAgB,CAC5B,MAAqC;IAErC,OAAO,UAAU,MAAgB;QAC7B,sBAAsB,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC;YAC7C,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,MAAM;SACe,CAAC,CAAA;IACtC,CAAC,CAAA;AACL,CAAC","file":"EntityRepository.js","sourcesContent":["import { getMetadataArgsStorage } from \"../globals\"\r\nimport { EntityRepositoryMetadataArgs } from \"../metadata-args/EntityRepositoryMetadataArgs\"\r\nimport { EntitySchema } from \"../entity-schema/EntitySchema\"\r\n\r\n/**\r\n * Used to declare a class as a custom repository.\r\n * Custom repository can manage some specific entity or just be generic.\r\n * Custom repository optionally can extend AbstractRepository, Repository or TreeRepository.\r\n *\r\n * @deprecated use Repository.extend function to create a custom repository\r\n */\r\nexport function EntityRepository(\r\n    entity?: Function | EntitySchema<any>,\r\n): ClassDecorator {\r\n    return function (target: Function) {\r\n        getMetadataArgsStorage().entityRepositories.push({\r\n            target: target,\r\n            entity: entity,\r\n        } as EntityRepositoryMetadataArgs)\r\n    }\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../browser/src/decorator/options/RelationOptions.ts"],"names":[],"mappings":"","file":"RelationOptions.js","sourcesContent":["import { DeferrableType } from \"../../metadata/types/DeferrableType\"\r\nimport { OnDeleteType } from \"../../metadata/types/OnDeleteType\"\r\nimport { OnUpdateType } from \"../../metadata/types/OnUpdateType\"\r\n\r\n/**\r\n * Describes all relation's options.\r\n */\r\nexport interface RelationOptions {\r\n    /**\r\n     * Sets cascades options for the given relation.\r\n     * If set to true then it means that related object can be allowed to be inserted or updated in the database.\r\n     * You can separately restrict cascades to insertion or updation using following syntax:\r\n     *\r\n     * cascade: [\"insert\", \"update\", \"remove\", \"soft-remove\", \"recover\"] // include or exclude one of them\r\n     */\r\n    cascade?:\r\n        | boolean\r\n        | (\"insert\" | \"update\" | \"remove\" | \"soft-remove\" | \"recover\")[]\r\n\r\n    /**\r\n     * Indicates if relation column value can be nullable or not.\r\n     */\r\n    nullable?: boolean\r\n\r\n    /**\r\n     * Database cascade action on delete.\r\n     */\r\n    onDelete?: OnDeleteType\r\n\r\n    /**\r\n     * Database cascade action on update.\r\n     */\r\n    onUpdate?: OnUpdateType\r\n\r\n    /**\r\n     * Indicate if foreign key constraints can be deferred.\r\n     */\r\n    deferrable?: DeferrableType\r\n\r\n    /**\r\n     * Indicates whether foreign key constraints will be created for join columns.\r\n     * Can be used only for many-to-one and owner one-to-one relations.\r\n     * Defaults to true.\r\n     */\r\n    createForeignKeyConstraints?: boolean\r\n\r\n    /**\r\n     * Set this relation to be lazy. Note: lazy relations are promises. When you call them they return promise\r\n     * which resolve relation result then. If your property's type is Promise then this relation is set to lazy automatically.\r\n     */\r\n    lazy?: boolean\r\n\r\n    /**\r\n     * Set this relation to be eager.\r\n     * Eager relations are always loaded automatically when relation's owner entity is loaded using find* methods.\r\n     * Only using QueryBuilder prevents loading eager relations.\r\n     * Eager flag cannot be set from both sides of relation - you can eager load only one side of the relationship.\r\n     */\r\n    eager?: boolean\r\n\r\n    /**\r\n     * Indicates if persistence is enabled for the relation.\r\n     * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\r\n     * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\r\n     * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\r\n     */\r\n    persistence?: boolean\r\n\r\n    /**\r\n     * When a parent is saved (with cascading but) without a child row that still exists in database, this will control what shall happen to them.\r\n     * delete will remove these rows from database.\r\n     * nullify will remove the relation key.\r\n     * disable will keep the relation intact. Removal of related item is only possible through its own repo.\r\n     */\r\n    orphanedRowAction?: \"nullify\" | \"delete\" | \"soft-delete\" | \"disable\"\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../browser/src/decorator/tree/TreeParent.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,eAAe,CAAA;AAKtD;;;GAGG;AACH,MAAM,UAAU,UAAU,CAAC,OAE1B;IACG,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAqB,CAAA;QAE7C,4CAA4C;QAC5C,MAAM,aAAa,GACf,OAAO,IAAK,OAAe,CAAC,WAAW;YACnC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC;YAC1D,CAAC,CAAC,SAAS,CAAA;QACnB,MAAM,MAAM,GACR,CAAC,aAAa;YACV,OAAO,aAAa,CAAC,IAAI,KAAK,QAAQ;YACtC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;YACnD,KAAK,CAAA;QAET,sBAAsB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;YACpC,YAAY,EAAE,IAAI;YAClB,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,MAAM,EAAE,MAAM;YACd,YAAY,EAAE,aAAa;YAC3B,IAAI,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,WAAW;YAC9B,OAAO,EAAE,OAAO;SACK,CAAC,CAAA;IAC9B,CAAC,CAAA;AACL,CAAC","file":"TreeParent.js","sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\r\nimport { RelationMetadataArgs } from \"../../metadata-args/RelationMetadataArgs\"\r\nimport { OnDeleteType } from \"../../metadata/types/OnDeleteType\"\r\nimport { RelationOptions } from \"../options/RelationOptions\"\r\n\r\n/**\r\n * Marks a entity property as a parent of the tree.\r\n * \"Tree parent\" indicates who owns (is a parent) of this entity in tree structure.\r\n */\r\nexport function TreeParent(options?: {\r\n    onDelete?: OnDeleteType\r\n}): PropertyDecorator {\r\n    return function (object: Object, propertyName: string) {\r\n        if (!options) options = {} as RelationOptions\r\n\r\n        // now try to determine it its lazy relation\r\n        const reflectedType =\r\n            Reflect && (Reflect as any).getMetadata\r\n                ? Reflect.getMetadata(\"design:type\", object, propertyName)\r\n                : undefined\r\n        const isLazy =\r\n            (reflectedType &&\r\n                typeof reflectedType.name === \"string\" &&\r\n                reflectedType.name.toLowerCase() === \"promise\") ||\r\n            false\r\n\r\n        getMetadataArgsStorage().relations.push({\r\n            isTreeParent: true,\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            isLazy: isLazy,\r\n            relationType: \"many-to-one\",\r\n            type: () => object.constructor,\r\n            options: options,\r\n        } as RelationMetadataArgs)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
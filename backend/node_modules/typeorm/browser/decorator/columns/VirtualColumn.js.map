{"version":3,"sources":["../browser/src/decorator/columns/VirtualColumn.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,wBAAwB,EAAE,MAAM,aAAa,CAAA;AACtD,OAAO,EAAE,sBAAsB,EAAE,MAAM,eAAe,CAAA;AAgBtD;;GAEG;AACH,MAAM,UAAU,aAAa,CACzB,aAAiD,EACjD,OAA8B;IAE9B,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,uBAAuB;QACvB,IAAI,IAA4B,CAAA;QAChC,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE,CAAC;YACpC,IAAI,GAAe,aAAa,CAAA;QACpC,CAAC;aAAM,CAAC;YACJ,OAAO,GAAyB,aAAa,CAAA;YAC7C,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACvB,CAAC;QAED,IAAI,CAAC,OAAO,EAAE,KAAK,EAAE,CAAC;YAClB,MAAM,IAAI,KAAK,CACX,wDAAwD,CAC3D,CAAA;QACL,CAAC;QAED,uDAAuD;QACvD,MAAM,mBAAmB,GACrB,OAAO,IAAK,OAAe,CAAC,WAAW;YACnC,CAAC,CAAE,OAAe,CAAC,WAAW,CACxB,aAAa,EACb,MAAM,EACN,YAAY,CACf;YACH,CAAC,CAAC,SAAS,CAAA;QACnB,IAAI,CAAC,IAAI,IAAI,mBAAmB;YAC5B,uDAAuD;YACvD,IAAI,GAAG,mBAAmB,CAAA;QAE9B,yGAAyG;QACzG,IAAI,IAAI;YAAE,OAAO,CAAC,IAAI,GAAG,IAAI,CAAA;QAE7B,0CAA0C;QAC1C,IAAI,OAAO,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,UAAU;YAChD,OAAO,CAAC,UAAU;gBACd,mBAAmB,KAAK,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAA;QAE5D,yFAAyF;QACzF,IAAI,CAAC,OAAO,CAAC,IAAI;YACb,MAAM,IAAI,wBAAwB,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;QAE5D,sBAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,kBAAkB;YACxB,OAAO,EAAE,OAAO,IAAI,EAAE;SACH,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","file":"VirtualColumn.js","sourcesContent":["import { ColumnType } from \"../../driver/types/ColumnTypes\"\r\nimport { ColumnTypeUndefinedError } from \"../../error\"\r\nimport { getMetadataArgsStorage } from \"../../globals\"\r\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\r\nimport { VirtualColumnOptions } from \"../options/VirtualColumnOptions\"\r\n/**\r\n * VirtualColumn decorator is used to mark a specific class property as a Virtual column.\r\n */\r\nexport function VirtualColumn(options: VirtualColumnOptions): PropertyDecorator\r\n\r\n/**\r\n * VirtualColumn decorator is used to mark a specific class property as a Virtual column.\r\n */\r\nexport function VirtualColumn(\r\n    typeOrOptions: ColumnType,\r\n    options: VirtualColumnOptions,\r\n): PropertyDecorator\r\n\r\n/**\r\n * VirtualColumn decorator is used to mark a specific class property as a Virtual column.\r\n */\r\nexport function VirtualColumn(\r\n    typeOrOptions?: ColumnType | VirtualColumnOptions,\r\n    options?: VirtualColumnOptions,\r\n): PropertyDecorator {\r\n    return function (object: Object, propertyName: string) {\r\n        // normalize parameters\r\n        let type: ColumnType | undefined\r\n        if (typeof typeOrOptions === \"string\") {\r\n            type = <ColumnType>typeOrOptions\r\n        } else {\r\n            options = <VirtualColumnOptions>typeOrOptions\r\n            type = options.type\r\n        }\r\n\r\n        if (!options?.query) {\r\n            throw new Error(\r\n                \"Column options must be defined for calculated columns.\",\r\n            )\r\n        }\r\n\r\n        // if type is not given explicitly then try to guess it\r\n        const reflectMetadataType =\r\n            Reflect && (Reflect as any).getMetadata\r\n                ? (Reflect as any).getMetadata(\r\n                      \"design:type\",\r\n                      object,\r\n                      propertyName,\r\n                  )\r\n                : undefined\r\n        if (!type && reflectMetadataType)\r\n            // if type is not given explicitly then try to guess it\r\n            type = reflectMetadataType\r\n\r\n        // check if there is no type in column options then set type from first function argument, or guessed one\r\n        if (type) options.type = type\r\n\r\n        // specify HSTORE type if column is HSTORE\r\n        if (options.type === \"hstore\" && !options.hstoreType)\r\n            options.hstoreType =\r\n                reflectMetadataType === Object ? \"object\" : \"string\"\r\n\r\n        // if we still don't have a type then we need to give error to user that type is required\r\n        if (!options.type)\r\n            throw new ColumnTypeUndefinedError(object, propertyName)\r\n\r\n        getMetadataArgsStorage().columns.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            mode: \"virtual-property\",\r\n            options: options || {},\r\n        } as ColumnMetadataArgs)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
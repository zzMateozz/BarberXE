{"version":3,"sources":["../browser/src/decorator/columns/ObjectIdColumn.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,sBAAsB,EAAE,MAAM,eAAe,CAAA;AAItD;;;GAGG;AACH,MAAM,UAAU,cAAc,CAAC,OAAuB;IAClD,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,kEAAkE;QAClE,IAAI,CAAC,OAAO;YAAE,OAAO,GAAG,EAAmB,CAAA;QAC3C,OAAO,CAAC,OAAO,GAAG,IAAI,CAAA;QACtB,IAAI,CAAC,OAAO,CAAC,IAAI;YAAE,OAAO,CAAC,IAAI,GAAG,KAAK,CAAA;QAEvC,4CAA4C;QAC5C,sBAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;YAClC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,UAAU;YAChB,OAAO,EAAE,OAAO;SACG,CAAC,CAAA;IAC5B,CAAC,CAAA;AACL,CAAC","file":"ObjectIdColumn.js","sourcesContent":["import { getMetadataArgsStorage } from \"../../globals\"\r\nimport { ColumnMetadataArgs } from \"../../metadata-args/ColumnMetadataArgs\"\r\nimport { ColumnOptions } from \"../options/ColumnOptions\"\r\n\r\n/**\r\n * Special type of column that is available only for MongoDB database.\r\n * Marks your entity's column to be an object id.\r\n */\r\nexport function ObjectIdColumn(options?: ColumnOptions): PropertyDecorator {\r\n    return function (object: Object, propertyName: string) {\r\n        // if column options are not given then create a new empty options\r\n        if (!options) options = {} as ColumnOptions\r\n        options.primary = true\r\n        if (!options.name) options.name = \"_id\"\r\n\r\n        // create and register a new column metadata\r\n        getMetadataArgsStorage().columns.push({\r\n            target: object.constructor,\r\n            propertyName: propertyName,\r\n            mode: \"objectId\",\r\n            options: options,\r\n        } as ColumnMetadataArgs)\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../browser/src/entity-manager/SqljsEntityManager.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAA;AAG/C;;;GAGG;AACH,MAAM,OAAO,kBAAmB,SAAQ,aAAa;IAKjD,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,UAAsB,EAAE,WAAyB;QACzD,KAAK,CAAC,UAAU,EAAE,WAAW,CAAC,CAAA;QATzB,mBAAa,GAAG,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAA;QAUrD,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAqB,CAAA;IAClD,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACH,KAAK,CAAC,YAAY,CACd,4BAAiD;QAEjD,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAA;IACxD,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,YAAY,CAAC,sBAA+B;QAC9C,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAA;IAClD,CAAC;IAED;;OAEG;IACH,cAAc;QACV,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAA;IAC/B,CAAC;CACJ","file":"SqljsEntityManager.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { EntityManager } from \"./EntityManager\"\r\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\"\r\n\r\n/**\r\n * A special EntityManager that includes import/export and load/save function\r\n * that are unique to Sql.js.\r\n */\r\nexport class SqljsEntityManager extends EntityManager {\r\n    readonly \"@instanceof\" = Symbol.for(\"SqljsEntityManager\")\r\n\r\n    private driver: SqljsDriver\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: DataSource, queryRunner?: QueryRunner) {\r\n        super(connection, queryRunner)\r\n        this.driver = connection.driver as SqljsDriver\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads either the definition from a file (Node.js) or localstorage (browser)\r\n     * or uses the given definition to open a new database.\r\n     */\r\n    async loadDatabase(\r\n        fileNameOrLocalStorageOrData: string | Uint8Array,\r\n    ): Promise<void> {\r\n        await this.driver.load(fileNameOrLocalStorageOrData)\r\n    }\r\n\r\n    /**\r\n     * Saves the current database to a file (Node.js) or localstorage (browser)\r\n     * if fileNameOrLocalStorage is not set options.location is used.\r\n     */\r\n    async saveDatabase(fileNameOrLocalStorage?: string): Promise<void> {\r\n        await this.driver.save(fileNameOrLocalStorage)\r\n    }\r\n\r\n    /**\r\n     * Returns the current database definition.\r\n     */\r\n    exportDatabase(): Uint8Array {\r\n        return this.driver.export()\r\n    }\r\n}\r\n"],"sourceRoot":".."}
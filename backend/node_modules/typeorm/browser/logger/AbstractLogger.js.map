{"version":3,"sources":["../browser/src/logger/AbstractLogger.ts"],"names":[],"mappings":"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","file":"AbstractLogger.js","sourcesContent":["import {\r\n    Logger,\r\n    LogLevel,\r\n    LogMessage,\r\n    LogMessageType,\r\n    PrepareLogMessagesOptions,\r\n} from \"./Logger\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { LoggerOptions } from \"./LoggerOptions\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\n\r\nexport abstract class AbstractLogger implements Logger {\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected options?: LoggerOptions) {}\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Logs query and parameters used in it.\r\n     */\r\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\r\n        if (!this.isLogEnabledFor(\"query\")) {\r\n            return\r\n        }\r\n\r\n        this.writeLog(\r\n            \"query\",\r\n            {\r\n                type: \"query\",\r\n                prefix: \"query\",\r\n                message: query,\r\n                format: \"sql\",\r\n                parameters,\r\n            },\r\n            queryRunner,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Logs query that is failed.\r\n     */\r\n    logQueryError(\r\n        error: string,\r\n        query: string,\r\n        parameters?: any[],\r\n        queryRunner?: QueryRunner,\r\n    ) {\r\n        if (!this.isLogEnabledFor(\"query-error\")) {\r\n            return\r\n        }\r\n\r\n        this.writeLog(\r\n            \"warn\",\r\n            [\r\n                {\r\n                    type: \"query-error\",\r\n                    prefix: \"query failed\",\r\n                    message: query,\r\n                    format: \"sql\",\r\n                    parameters,\r\n                },\r\n                {\r\n                    type: \"query-error\",\r\n                    prefix: \"error\",\r\n                    message: error,\r\n                },\r\n            ],\r\n            queryRunner,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Logs query that is slow.\r\n     */\r\n    logQuerySlow(\r\n        time: number,\r\n        query: string,\r\n        parameters?: any[],\r\n        queryRunner?: QueryRunner,\r\n    ) {\r\n        if (!this.isLogEnabledFor(\"query-slow\")) {\r\n            return\r\n        }\r\n\r\n        this.writeLog(\r\n            \"warn\",\r\n            [\r\n                {\r\n                    type: \"query-slow\",\r\n                    prefix: \"query is slow\",\r\n                    message: query,\r\n                    format: \"sql\",\r\n                    parameters,\r\n                    additionalInfo: {\r\n                        time,\r\n                    },\r\n                },\r\n                {\r\n                    type: \"query-slow\",\r\n                    prefix: \"execution time\",\r\n                    message: time,\r\n                },\r\n            ],\r\n            queryRunner,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Logs events from the schema build process.\r\n     */\r\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\r\n        if (!this.isLogEnabledFor(\"schema-build\")) {\r\n            return\r\n        }\r\n\r\n        this.writeLog(\r\n            \"schema\",\r\n            {\r\n                type: \"schema-build\",\r\n                message,\r\n            },\r\n            queryRunner,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Logs events from the migration run process.\r\n     */\r\n    logMigration(message: string, queryRunner?: QueryRunner) {\r\n        if (!this.isLogEnabledFor(\"migration\")) {\r\n            return\r\n        }\r\n\r\n        this.writeLog(\r\n            \"log\",\r\n            {\r\n                type: \"migration\",\r\n                message,\r\n            },\r\n            queryRunner,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Perform logging using given logger, or by default to the console.\r\n     * Log has its own level and message.\r\n     */\r\n    log(\r\n        level: \"log\" | \"info\" | \"warn\",\r\n        message: any,\r\n        queryRunner?: QueryRunner,\r\n    ) {\r\n        switch (level) {\r\n            case \"log\":\r\n                if (!this.isLogEnabledFor(\"log\")) {\r\n                    return\r\n                }\r\n\r\n                this.writeLog(\r\n                    \"log\",\r\n                    {\r\n                        type: \"log\",\r\n                        message,\r\n                    },\r\n                    queryRunner,\r\n                )\r\n                break\r\n\r\n            case \"info\":\r\n                if (!this.isLogEnabledFor(\"info\")) {\r\n                    return\r\n                }\r\n\r\n                this.writeLog(\r\n                    \"info\",\r\n                    {\r\n                        type: \"info\",\r\n                        prefix: \"info\",\r\n                        message,\r\n                    },\r\n                    queryRunner,\r\n                )\r\n                break\r\n\r\n            case \"warn\":\r\n                if (!this.isLogEnabledFor(\"warn\")) {\r\n                    return\r\n                }\r\n\r\n                this.writeLog(\r\n                    \"warn\",\r\n                    {\r\n                        type: \"warn\",\r\n                        message,\r\n                    },\r\n                    queryRunner,\r\n                )\r\n                break\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Check is logging for level or message type is enabled.\r\n     */\r\n    protected isLogEnabledFor(type?: LogLevel | LogMessageType) {\r\n        switch (type) {\r\n            case \"query\":\r\n                return (\r\n                    this.options === \"all\" ||\r\n                    this.options === true ||\r\n                    (Array.isArray(this.options) &&\r\n                        this.options.indexOf(\"query\") !== -1)\r\n                )\r\n\r\n            case \"error\":\r\n            case \"query-error\":\r\n                return (\r\n                    this.options === \"all\" ||\r\n                    this.options === true ||\r\n                    (Array.isArray(this.options) &&\r\n                        this.options.indexOf(\"error\") !== -1)\r\n                )\r\n\r\n            case \"query-slow\":\r\n                return true\r\n\r\n            case \"schema\":\r\n            case \"schema-build\":\r\n                return (\r\n                    this.options === \"all\" ||\r\n                    (Array.isArray(this.options) &&\r\n                        this.options.indexOf(\"schema\") !== -1)\r\n                )\r\n\r\n            case \"migration\":\r\n                return true\r\n\r\n            case \"log\":\r\n                return (\r\n                    this.options === \"all\" ||\r\n                    (Array.isArray(this.options) &&\r\n                        this.options.indexOf(\"log\") !== -1)\r\n                )\r\n\r\n            case \"info\":\r\n                return (\r\n                    this.options === \"all\" ||\r\n                    (Array.isArray(this.options) &&\r\n                        this.options.indexOf(\"info\") !== -1)\r\n                )\r\n\r\n            case \"warn\":\r\n                return (\r\n                    this.options === \"all\" ||\r\n                    (Array.isArray(this.options) &&\r\n                        this.options.indexOf(\"warn\") !== -1)\r\n                )\r\n\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Write log to specific output.\r\n     */\r\n    protected abstract writeLog(\r\n        level: LogLevel,\r\n        message:\r\n            | LogMessage\r\n            | string\r\n            | number\r\n            | (LogMessage | string | number)[],\r\n        queryRunner?: QueryRunner,\r\n    ): void\r\n\r\n    /**\r\n     * Prepare and format log messages\r\n     */\r\n    protected prepareLogMessages(\r\n        logMessage:\r\n            | LogMessage\r\n            | string\r\n            | number\r\n            | (LogMessage | string | number)[],\r\n        options?: Partial<PrepareLogMessagesOptions>,\r\n    ): LogMessage[] {\r\n        options = {\r\n            ...{\r\n                addColonToPrefix: true,\r\n                appendParameterAsComment: true,\r\n                highlightSql: true,\r\n            },\r\n            ...options,\r\n        }\r\n        const messages = Array.isArray(logMessage) ? logMessage : [logMessage]\r\n\r\n        for (let message of messages) {\r\n            if (typeof message !== \"object\") {\r\n                message = {\r\n                    message,\r\n                }\r\n            }\r\n\r\n            if (message.format === \"sql\") {\r\n                let sql = String(message.message)\r\n\r\n                if (\r\n                    options.appendParameterAsComment &&\r\n                    message.parameters &&\r\n                    message.parameters.length\r\n                ) {\r\n                    sql += ` -- PARAMETERS: ${this.stringifyParams(\r\n                        message.parameters,\r\n                    )}`\r\n                }\r\n\r\n                if (options.highlightSql) {\r\n                    sql = PlatformTools.highlightSql(sql)\r\n                }\r\n\r\n                message.message = sql\r\n            }\r\n\r\n            if (options.addColonToPrefix && message.prefix) {\r\n                message.prefix += \":\"\r\n            }\r\n        }\r\n\r\n        return messages as LogMessage[]\r\n    }\r\n\r\n    /**\r\n     * Converts parameters to a string.\r\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\r\n     */\r\n    protected stringifyParams(parameters: any[]) {\r\n        try {\r\n            return JSON.stringify(parameters)\r\n        } catch (error) {\r\n            // most probably circular objects in parameters\r\n            return parameters\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
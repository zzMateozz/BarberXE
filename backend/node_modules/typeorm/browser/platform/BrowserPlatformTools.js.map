{"version":3,"sources":["../browser/src/platform/BrowserPlatformTools.ts"],"names":[],"mappings":"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","file":"BrowserPlatformTools.js","sourcesContent":["/**\r\n * Browser's implementation of the platform-specific tools.\r\n *\r\n * This file gonna replace PlatformTools for browser environment.\r\n * For node.js environment this class is not getting packaged.\r\n * Don't use methods of this class in the code, use PlatformTools methods instead.\r\n */\r\nimport { Buffer } from \"buffer\";\r\n\r\nexport class PlatformTools {\r\n\r\n    /**\r\n     * Type of the currently running platform.\r\n     */\r\n    static type: \"browser\"|\"node\" = \"browser\";\r\n\r\n    /**\r\n     * Gets global variable where global stuff can be stored.\r\n     */\r\n    static getGlobalVariable(): any {\r\n        if (typeof window !== \"undefined\") {\r\n            return window\r\n        } else {\r\n            // NativeScript uses global, not window\r\n            return global\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads (\"require\"-s) given file or package.\r\n     * This operation only supports on node platform\r\n     */\r\n    static load(name: string): any {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Normalizes given path. Does \"path.normalize\".\r\n     */\r\n    static pathNormalize(pathStr: string): string {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Gets file extension. Does \"path.extname\".\r\n     */\r\n    static pathExtname(pathStr: string): string {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Resolved given path. Does \"path.resolve\".\r\n     */\r\n    static pathResolve(pathStr: string): string {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\r\n     */\r\n    static fileExist(pathStr: string): boolean {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\r\n\r\n        return false;\r\n    }\r\n\r\n    static dotenv(pathStr: string): void {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\r\n    }\r\n\r\n    /**\r\n     * Gets environment variable.\r\n     */\r\n    static getEnvVariable(name: string): any {\r\n        // if (this.type === \"browser\")\r\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\r\n        return undefined;\r\n    }\r\n\r\n    static readFileSync(filename: string): any {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\r\n        return null;\r\n    }\r\n\r\n    static appendFileSync(filename: string, data: any) {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\r\n    }\r\n\r\n    static writeFile(path: string, data: any): Promise<void> {\r\n        if (this.type === \"browser\")\r\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\r\n        return Promise.reject(null);\r\n    }\r\n\r\n    /**\r\n     * Highlights sql string to be printed in the console.\r\n     */\r\n    static highlightSql(sql: string) {\r\n        return sql;\r\n    }\r\n\r\n    /**\r\n     * Logging functions needed by AdvancedConsoleLogger (but here without ANSI colors)\r\n     */\r\n    static logInfo(prefix: string, info: any) {\r\n        console.info(prefix + \" \", info);\r\n    }\r\n\r\n    static logError(prefix: string, error: any) {\r\n        console.error(prefix + \" \", error);\r\n    }\r\n\r\n    static logWarn(prefix: string, warning: any) {\r\n        console.warn(prefix + \" \", warning);\r\n    }\r\n\r\n    static log(message: string) {\r\n        console.log(message);\r\n    }\r\n\r\n    static warn(message: string) {\r\n        return message;\r\n    }\r\n}\r\n\r\n/**\r\n * These classes are needed for stream operations or\r\n * in the mongodb driver. Both aren't supported in the browser.\r\n */\r\nexport class EventEmitter {}\r\n\r\nexport class Readable {}\r\n\r\nexport class Writable {}\r\n\r\nexport interface ReadStream {}\r\n\r\n/**\r\n * This loads a polyfill to enable Buffers in the browser.\r\n */\r\ninterface Window {\r\n    Buffer: any;\r\n}\r\n\r\ndeclare var window: Window;\r\nif (typeof window !== \"undefined\") {\r\n    window.Buffer = Buffer;\r\n}\r\n// NativeScript uses global, not window\r\nif (typeof global !== \"undefined\" && typeof require !== \"undefined\") {\r\n    global.Buffer = require(\"buffer/\").Buffer;\r\n}\r\n"],"sourceRoot":".."}
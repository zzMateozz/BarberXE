{"version":3,"sources":["../../src/logger/DebugLogger.ts"],"names":[],"mappings":";;;AAAA,qDAAiD;AACjD,iCAAuC;AAIvC;;GAEG;AACH,MAAa,WAAY,SAAQ,+BAAc;IAA/C;;QACI;;WAEG;QACK,WAAM,GAA6B;YACvC,GAAG,EAAE,IAAA,aAAK,EAAC,aAAa,CAAC;YACzB,IAAI,EAAE,IAAA,aAAK,EAAC,cAAc,CAAC;YAC3B,IAAI,EAAE,IAAA,aAAK,EAAC,cAAc,CAAC;YAC3B,KAAK,EAAE,IAAA,aAAK,EAAC,eAAe,CAAC;YAC7B,KAAK,EAAE,IAAA,aAAK,EAAC,mBAAmB,CAAC;YACjC,aAAa,EAAE,IAAA,aAAK,EAAC,qBAAqB,CAAC;YAC3C,YAAY,EAAE,IAAA,aAAK,EAAC,oBAAoB,CAAC;YACzC,cAAc,EAAE,IAAA,aAAK,EAAC,gBAAgB,CAAC;YACvC,SAAS,EAAE,IAAA,aAAK,EAAC,mBAAmB,CAAC;SACxC,CAAA;IAuEL,CAAC;IArEG;;OAEG;IACO,eAAe,CAAC,IAAgC;QACtD,QAAQ,IAAI,EAAE,CAAC;YACX,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,OAAO,CAAA;YAEvC,KAAK,aAAa;gBACd,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAAA;YAE7C,KAAK,YAAY;gBACb,OAAO,IAAI,CAAA;YAEf,KAAK,QAAQ,CAAC;YACd,KAAK,cAAc;gBACf,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,OAAO,CAAA;YAE9C,KAAK,WAAW;gBACZ,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAA;YAE3C,KAAK,KAAK;gBACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAA;YAErC,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAA;YAEtC,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAA;YAEtC;gBACI,OAAO,KAAK,CAAA;QACpB,CAAC;IACL,CAAC;IAED;;OAEG;IACO,QAAQ,CACd,KAAe,EACf,UAAqC,EACrC,WAAyB;QAEzB,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE;YACjD,wBAAwB,EAAE,KAAK;SAClC,CAAC,CAAA;QAEF,KAAK,IAAI,OAAO,IAAI,QAAQ,EAAE,CAAC;YAC3B,MAAM,kBAAkB,GAAG,OAAO,CAAC,IAAI,IAAI,KAAK,CAAA;YAEhD,IAAI,kBAAkB,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBACpC,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;oBACjB,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAC3B,OAAO,CAAC,MAAM,EACd,OAAO,CAAC,OAAO,CAClB,CAAA;gBACL,CAAC;qBAAM,CAAC;oBACJ,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;gBACpD,CAAC;gBAED,IAAI,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;oBAClD,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAC3B,aAAa,EACb,OAAO,CAAC,UAAU,CACrB,CAAA;gBACL,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;CACJ;AArFD,kCAqFC","file":"DebugLogger.js","sourcesContent":["import { AbstractLogger } from \"./AbstractLogger\"\r\nimport { debug, Debugger } from \"debug\"\r\nimport { LogLevel, LogMessage, LogMessageType } from \"./Logger\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\n\r\n/**\r\n * Performs logging of the events in TypeORM via debug library.\r\n */\r\nexport class DebugLogger extends AbstractLogger {\r\n    /**\r\n     * Object with all debug logger.\r\n     */\r\n    private logger: Record<string, Debugger> = {\r\n        log: debug(\"typeorm:log\"),\r\n        info: debug(\"typeorm:info\"),\r\n        warn: debug(\"typeorm:warn\"),\r\n        error: debug(\"typeorm:error\"),\r\n        query: debug(\"typeorm:query:log\"),\r\n        \"query-error\": debug(\"typeorm:query:error\"),\r\n        \"query-slow\": debug(\"typeorm:query:slow\"),\r\n        \"schema-build\": debug(\"typeorm:schema\"),\r\n        migration: debug(\"typeorm:migration\"),\r\n    }\r\n\r\n    /**\r\n     * Check is logging for level or message type is enabled.\r\n     */\r\n    protected isLogEnabledFor(type?: LogLevel | LogMessageType) {\r\n        switch (type) {\r\n            case \"query\":\r\n                return this.logger[\"query\"].enabled\r\n\r\n            case \"query-error\":\r\n                return this.logger[\"query-error\"].enabled\r\n\r\n            case \"query-slow\":\r\n                return true\r\n\r\n            case \"schema\":\r\n            case \"schema-build\":\r\n                return this.logger[\"schema-build\"].enabled\r\n\r\n            case \"migration\":\r\n                return this.logger[\"migration\"].enabled\r\n\r\n            case \"log\":\r\n                return this.logger[\"log\"].enabled\r\n\r\n            case \"info\":\r\n                return this.logger[\"info\"].enabled\r\n\r\n            case \"warn\":\r\n                return this.logger[\"warn\"].enabled\r\n\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Write log to specific output.\r\n     */\r\n    protected writeLog(\r\n        level: LogLevel,\r\n        logMessage: LogMessage | LogMessage[],\r\n        queryRunner?: QueryRunner,\r\n    ) {\r\n        const messages = this.prepareLogMessages(logMessage, {\r\n            appendParameterAsComment: false,\r\n        })\r\n\r\n        for (let message of messages) {\r\n            const messageTypeOrLevel = message.type ?? level\r\n\r\n            if (messageTypeOrLevel in this.logger) {\r\n                if (message.prefix) {\r\n                    this.logger[messageTypeOrLevel](\r\n                        message.prefix,\r\n                        message.message,\r\n                    )\r\n                } else {\r\n                    this.logger[messageTypeOrLevel](message.message)\r\n                }\r\n\r\n                if (message.parameters && message.parameters.length) {\r\n                    this.logger[messageTypeOrLevel](\r\n                        \"parameters:\",\r\n                        message.parameters,\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../../src/logger/FileLogger.ts"],"names":[],"mappings":"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","file":"FileLogger.js","sourcesContent":["import { FileLoggerOptions, LoggerOptions } from \"./LoggerOptions\"\r\nimport { LogLevel, LogMessage } from \"./Logger\"\r\nimport appRootPath from \"app-root-path\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { PlatformTools } from \"../platform/PlatformTools\"\r\nimport { AbstractLogger } from \"./AbstractLogger\"\r\n\r\n/**\r\n * Performs logging of the events in TypeORM.\r\n * This version of logger logs everything into ormlogs.log file.\r\n */\r\nexport class FileLogger extends AbstractLogger {\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        options?: LoggerOptions,\r\n        private fileLoggerOptions?: FileLoggerOptions,\r\n    ) {\r\n        super(options)\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Write log to specific output.\r\n     */\r\n    protected writeLog(\r\n        level: LogLevel,\r\n        logMessage: LogMessage | LogMessage[],\r\n        queryRunner?: QueryRunner,\r\n    ) {\r\n        const messages = this.prepareLogMessages(logMessage, {\r\n            highlightSql: false,\r\n            addColonToPrefix: false,\r\n        })\r\n\r\n        const strings: string[] = []\r\n\r\n        for (let message of messages) {\r\n            switch (message.type ?? level) {\r\n                case \"log\":\r\n                    strings.push(`[LOG]: ${message.message}`)\r\n                    break\r\n\r\n                case \"schema-build\":\r\n                case \"migration\":\r\n                    strings.push(String(message.message))\r\n                    break\r\n\r\n                case \"info\":\r\n                    strings.push(`[INFO]: ${message.message}`)\r\n                    break\r\n\r\n                case \"query\":\r\n                    strings.push(`[QUERY]: ${message.message}`)\r\n                    break\r\n\r\n                case \"warn\":\r\n                    strings.push(`[WARN]: ${message.message}`)\r\n                    break\r\n\r\n                case \"query-slow\":\r\n                    if (message.prefix === \"execution time\") {\r\n                        continue\r\n                    }\r\n\r\n                    this.write(\r\n                        `[SLOW QUERY: ${message.additionalInfo?.time} ms]: ${message.message}`,\r\n                    )\r\n                    break\r\n\r\n                case \"error\":\r\n                case \"query-error\":\r\n                    if (message.prefix === \"query failed\") {\r\n                        strings.push(`[FAILED QUERY]: ${message.message}`)\r\n                    } else if (message.type === \"query-error\") {\r\n                        strings.push(`[QUERY ERROR]: ${message.message}`)\r\n                    } else {\r\n                        strings.push(`[ERROR]: ${message.message}`)\r\n                    }\r\n                    break\r\n            }\r\n        }\r\n\r\n        this.write(strings)\r\n    }\r\n\r\n    /**\r\n     * Writes given strings into the log file.\r\n     */\r\n    protected write(strings: string | string[]) {\r\n        strings = Array.isArray(strings) ? strings : [strings]\r\n        const basePath = appRootPath.path + \"/\"\r\n        let logPath = \"ormlogs.log\"\r\n        if (this.fileLoggerOptions && this.fileLoggerOptions.logPath) {\r\n            logPath = PlatformTools.pathNormalize(\r\n                this.fileLoggerOptions.logPath,\r\n            )\r\n        }\r\n        strings = (strings as string[]).map(\r\n            (str) => \"[\" + new Date().toISOString() + \"]\" + str,\r\n        )\r\n        PlatformTools.appendFileSync(\r\n            basePath + logPath,\r\n            strings.join(\"\\r\\n\") + \"\\r\\n\",\r\n        ) // todo: use async or implement promises?\r\n    }\r\n}\r\n"],"sourceRoot":".."}
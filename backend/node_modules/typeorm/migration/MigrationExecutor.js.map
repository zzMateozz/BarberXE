{"version":3,"sources":["../../src/migration/MigrationExecutor.ts"],"names":[],"mappings":"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","file":"MigrationExecutor.js","sourcesContent":["import { Table } from \"../schema-builder/table/Table\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { Migration } from \"./Migration\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { MssqlParameter } from \"../driver/sqlserver/MssqlParameter\"\r\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\r\nimport { ForbiddenTransactionModeOverrideError, TypeORMError } from \"../error\"\r\nimport { InstanceChecker } from \"../util/InstanceChecker\"\r\n\r\n/**\r\n * Executes migrations: runs pending and reverts previously executed migrations.\r\n */\r\nexport class MigrationExecutor {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates how migrations should be run in transactions.\r\n     *   all: all migrations are run in a single transaction\r\n     *   none: all migrations are run without a transaction\r\n     *   each: each migration is run in a separate transaction\r\n     */\r\n    transaction: \"all\" | \"none\" | \"each\" = \"all\"\r\n\r\n    /**\r\n     * Option to fake-run or fake-revert a migration, adding to the\r\n     * executed migrations table, but not actually running it. This feature is\r\n     * useful for when migrations are added after the fact or for\r\n     * interoperability between applications which are desired to each keep\r\n     * a consistent migration history.\r\n     */\r\n    fake: boolean\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    private readonly migrationsDatabase?: string\r\n    private readonly migrationsSchema?: string\r\n    private readonly migrationsTable: string\r\n    private readonly migrationsTableName: string\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        protected connection: DataSource,\r\n        protected queryRunner?: QueryRunner,\r\n    ) {\r\n        const { schema } = this.connection.driver.options as any\r\n        const database = this.connection.driver.database\r\n        this.migrationsDatabase = database\r\n        this.migrationsSchema = schema\r\n        this.migrationsTableName =\r\n            connection.options.migrationsTableName || \"migrations\"\r\n        this.migrationsTable = this.connection.driver.buildTableName(\r\n            this.migrationsTableName,\r\n            schema,\r\n            database,\r\n        )\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Tries to execute a single migration given.\r\n     */\r\n    public async executeMigration(migration: Migration): Promise<Migration> {\r\n        return this.withQueryRunner(async (queryRunner) => {\r\n            await this.createMigrationsTableIfNotExist(queryRunner)\r\n\r\n            // create typeorm_metadata table if it's not created yet\r\n            const schemaBuilder = this.connection.driver.createSchemaBuilder()\r\n            if (InstanceChecker.isRdbmsSchemaBuilder(schemaBuilder)) {\r\n                await schemaBuilder.createMetadataTableIfNecessary(queryRunner)\r\n            }\r\n\r\n            await queryRunner.beforeMigration()\r\n            await (migration.instance as any).up(queryRunner)\r\n            await queryRunner.afterMigration()\r\n            await this.insertExecutedMigration(queryRunner, migration)\r\n\r\n            return migration\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all migrations.\r\n     */\r\n    public async getAllMigrations(): Promise<Migration[]> {\r\n        return Promise.resolve(this.getMigrations())\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all executed migrations.\r\n     */\r\n    public async getExecutedMigrations(): Promise<Migration[]> {\r\n        return this.withQueryRunner(async (queryRunner) => {\r\n            await this.createMigrationsTableIfNotExist(queryRunner)\r\n\r\n            return await this.loadExecutedMigrations(queryRunner)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all pending migrations.\r\n     */\r\n    public async getPendingMigrations(): Promise<Migration[]> {\r\n        const allMigrations = await this.getAllMigrations()\r\n        const executedMigrations = await this.getExecutedMigrations()\r\n\r\n        return allMigrations.filter(\r\n            (migration) =>\r\n                !executedMigrations.find(\r\n                    (executedMigration) =>\r\n                        executedMigration.name === migration.name,\r\n                ),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Inserts an executed migration.\r\n     */\r\n    public insertMigration(migration: Migration): Promise<void> {\r\n        return this.withQueryRunner((q) =>\r\n            this.insertExecutedMigration(q, migration),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Deletes an executed migration.\r\n     */\r\n    public deleteMigration(migration: Migration): Promise<void> {\r\n        return this.withQueryRunner((q) =>\r\n            this.deleteExecutedMigration(q, migration),\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Lists all migrations and whether they have been executed or not\r\n     * returns true if there are unapplied migrations\r\n     */\r\n    async showMigrations(): Promise<boolean> {\r\n        let hasUnappliedMigrations = false\r\n        const queryRunner =\r\n            this.queryRunner || this.connection.createQueryRunner()\r\n        // create migrations table if its not created yet\r\n        await this.createMigrationsTableIfNotExist(queryRunner)\r\n\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations(\r\n            queryRunner,\r\n        )\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations()\r\n\r\n        for (const migration of allMigrations) {\r\n            const executedMigration = executedMigrations.find(\r\n                (executedMigration) =>\r\n                    executedMigration.name === migration.name,\r\n            )\r\n\r\n            if (executedMigration) {\r\n                this.connection.logger.logSchemaBuild(\r\n                    `[X] ${executedMigration.id} ${migration.name}`,\r\n                )\r\n            } else {\r\n                hasUnappliedMigrations = true\r\n                this.connection.logger.logSchemaBuild(`[ ] ${migration.name}`)\r\n            }\r\n        }\r\n\r\n        // if query runner was created by us then release it\r\n        if (!this.queryRunner) {\r\n            await queryRunner.release()\r\n        }\r\n\r\n        return hasUnappliedMigrations\r\n    }\r\n\r\n    /**\r\n     * Executes all pending migrations. Pending migrations are migrations that are not yet executed,\r\n     * thus not saved in the database.\r\n     */\r\n    async executePendingMigrations(): Promise<Migration[]> {\r\n        const queryRunner =\r\n            this.queryRunner || this.connection.createQueryRunner()\r\n        // create migrations table if it's not created yet\r\n        await this.createMigrationsTableIfNotExist(queryRunner)\r\n\r\n        // create the typeorm_metadata table if it's not created yet\r\n        const schemaBuilder = this.connection.driver.createSchemaBuilder()\r\n        if (InstanceChecker.isRdbmsSchemaBuilder(schemaBuilder)) {\r\n            await schemaBuilder.createMetadataTableIfNecessary(queryRunner)\r\n        }\r\n\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations(\r\n            queryRunner,\r\n        )\r\n\r\n        // get the time when last migration was executed\r\n        let lastTimeExecutedMigration =\r\n            this.getLatestTimestampMigration(executedMigrations)\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations()\r\n\r\n        // variable to store all migrations we did successfully\r\n        const successMigrations: Migration[] = []\r\n\r\n        // find all migrations that needs to be executed\r\n        const pendingMigrations = allMigrations.filter((migration) => {\r\n            // check if we already have executed migration\r\n            const executedMigration = executedMigrations.find(\r\n                (executedMigration) =>\r\n                    executedMigration.name === migration.name,\r\n            )\r\n            if (executedMigration) return false\r\n\r\n            // migration is new and not executed. now check if its timestamp is correct\r\n            // if (lastTimeExecutedMigration && migration.timestamp < lastTimeExecutedMigration.timestamp)\r\n            //     throw new TypeORMError(`New migration found: ${migration.name}, however this migration's timestamp is not valid. Migration's timestamp should not be older then migrations already executed in the database.`);\r\n\r\n            // every check is passed means that migration was not run yet and we need to run it\r\n            return true\r\n        })\r\n\r\n        // if no migrations are pending then nothing to do here\r\n        if (!pendingMigrations.length) {\r\n            this.connection.logger.logSchemaBuild(`No migrations are pending`)\r\n            // if query runner was created by us then release it\r\n            if (!this.queryRunner) await queryRunner.release()\r\n            return []\r\n        }\r\n\r\n        // log information about migration execution\r\n        this.connection.logger.logSchemaBuild(\r\n            `${executedMigrations.length} migrations are already loaded in the database.`,\r\n        )\r\n        this.connection.logger.logSchemaBuild(\r\n            `${allMigrations.length} migrations were found in the source code.`,\r\n        )\r\n        if (lastTimeExecutedMigration)\r\n            this.connection.logger.logSchemaBuild(\r\n                `${\r\n                    lastTimeExecutedMigration.name\r\n                } is the last executed migration. It was executed on ${new Date(\r\n                    lastTimeExecutedMigration.timestamp,\r\n                ).toString()}.`,\r\n            )\r\n        this.connection.logger.logSchemaBuild(\r\n            `${pendingMigrations.length} migrations are new migrations must be executed.`,\r\n        )\r\n\r\n        if (this.transaction === \"all\") {\r\n            // If we desire to run all migrations in a single transaction\r\n            // but there is a migration that explicitly overrides the transaction mode\r\n            // then we have to fail since we cannot properly resolve that intent\r\n            // In theory we could support overrides that are set to `true`,\r\n            // however to keep the interface more rigid, we fail those too\r\n            const migrationsOverridingTransactionMode =\r\n                pendingMigrations.filter(\r\n                    (migration) =>\r\n                        !(migration.instance?.transaction === undefined),\r\n                )\r\n\r\n            if (migrationsOverridingTransactionMode.length > 0) {\r\n                const error = new ForbiddenTransactionModeOverrideError(\r\n                    migrationsOverridingTransactionMode,\r\n                )\r\n                this.connection.logger.logMigration(\r\n                    `Migrations failed, error: ${error.message}`,\r\n                )\r\n                throw error\r\n            }\r\n        }\r\n\r\n        // Set the per-migration defaults for the transaction mode\r\n        // so that we have one centralized place that controls this behavior\r\n\r\n        // When transaction mode is `each` the default is to run in a transaction\r\n        // When transaction mode is `none` the default is to not run in a transaction\r\n        // When transaction mode is `all` the default is to not run in a transaction\r\n        // since all the migrations are already running in one single transaction\r\n\r\n        const txModeDefault = {\r\n            each: true,\r\n            none: false,\r\n            all: false,\r\n        }[this.transaction]\r\n\r\n        for (const migration of pendingMigrations) {\r\n            if (migration.instance) {\r\n                const instanceTx = migration.instance.transaction\r\n\r\n                if (instanceTx === undefined) {\r\n                    migration.transaction = txModeDefault\r\n                } else {\r\n                    migration.transaction = instanceTx\r\n                }\r\n            }\r\n        }\r\n\r\n        // start transaction if its not started yet\r\n        let transactionStartedByUs = false\r\n        if (this.transaction === \"all\" && !queryRunner.isTransactionActive) {\r\n            await queryRunner.beforeMigration()\r\n            await queryRunner.startTransaction()\r\n            transactionStartedByUs = true\r\n        }\r\n\r\n        // run all pending migrations in a sequence\r\n        try {\r\n            for (const migration of pendingMigrations) {\r\n                if (this.fake) {\r\n                    // directly insert migration record into the database if it is fake\r\n                    await this.insertExecutedMigration(queryRunner, migration)\r\n\r\n                    // nothing else needs to be done, continue to next migration\r\n                    continue\r\n                }\r\n\r\n                if (migration.transaction && !queryRunner.isTransactionActive) {\r\n                    await queryRunner.beforeMigration()\r\n                    await queryRunner.startTransaction()\r\n                    transactionStartedByUs = true\r\n                }\r\n\r\n                await migration\r\n                    .instance!.up(queryRunner)\r\n                    .catch((error) => {\r\n                        // informative log about migration failure\r\n                        this.connection.logger.logMigration(\r\n                            `Migration \"${migration.name}\" failed, error: ${error?.message}`,\r\n                        )\r\n                        throw error\r\n                    })\r\n                    .then(async () => {\r\n                        // now when migration is executed we need to insert record about it into the database\r\n                        await this.insertExecutedMigration(\r\n                            queryRunner,\r\n                            migration,\r\n                        )\r\n                        // commit transaction if we started it\r\n                        if (migration.transaction && transactionStartedByUs) {\r\n                            await queryRunner.commitTransaction()\r\n                            await queryRunner.afterMigration()\r\n                        }\r\n                    })\r\n                    .then(() => {\r\n                        // informative log about migration success\r\n                        successMigrations.push(migration)\r\n                        this.connection.logger.logSchemaBuild(\r\n                            `Migration ${migration.name} has been ${\r\n                                this.fake ? \"(fake)\" : \"\"\r\n                            } executed successfully.`,\r\n                        )\r\n                    })\r\n            }\r\n\r\n            // commit transaction if we started it\r\n            if (this.transaction === \"all\" && transactionStartedByUs) {\r\n                await queryRunner.commitTransaction()\r\n                await queryRunner.afterMigration()\r\n            }\r\n        } catch (err) {\r\n            // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try {\r\n                    // we throw original error even if rollback thrown an error\r\n                    await queryRunner.rollbackTransaction()\r\n                } catch (rollbackError) {}\r\n            }\r\n\r\n            throw err\r\n        } finally {\r\n            // if query runner was created by us then release it\r\n            if (!this.queryRunner) await queryRunner.release()\r\n        }\r\n        return successMigrations\r\n    }\r\n\r\n    /**\r\n     * Reverts last migration that were run.\r\n     */\r\n    async undoLastMigration(): Promise<void> {\r\n        const queryRunner =\r\n            this.queryRunner || this.connection.createQueryRunner()\r\n\r\n        // create migrations table if it's not created yet\r\n        await this.createMigrationsTableIfNotExist(queryRunner)\r\n\r\n        // create typeorm_metadata table if it's not created yet\r\n        const schemaBuilder = this.connection.driver.createSchemaBuilder()\r\n        if (InstanceChecker.isRdbmsSchemaBuilder(schemaBuilder)) {\r\n            await schemaBuilder.createMetadataTableIfNecessary(queryRunner)\r\n        }\r\n\r\n        // get all migrations that are executed and saved in the database\r\n        const executedMigrations = await this.loadExecutedMigrations(\r\n            queryRunner,\r\n        )\r\n\r\n        // get the time when last migration was executed\r\n        let lastTimeExecutedMigration =\r\n            this.getLatestExecutedMigration(executedMigrations)\r\n\r\n        // if no migrations found in the database then nothing to revert\r\n        if (!lastTimeExecutedMigration) {\r\n            this.connection.logger.logSchemaBuild(\r\n                `No migrations were found in the database. Nothing to revert!`,\r\n            )\r\n            return\r\n        }\r\n\r\n        // get all user's migrations in the source code\r\n        const allMigrations = this.getMigrations()\r\n\r\n        // find the instance of the migration we need to remove\r\n        const migrationToRevert = allMigrations.find(\r\n            (migration) => migration.name === lastTimeExecutedMigration!.name,\r\n        )\r\n\r\n        // if no migrations found in the database then nothing to revert\r\n        if (!migrationToRevert)\r\n            throw new TypeORMError(\r\n                `No migration ${lastTimeExecutedMigration.name} was found in the source code. Make sure you have this migration in your codebase and its included in the connection options.`,\r\n            )\r\n\r\n        // log information about migration execution\r\n        this.connection.logger.logSchemaBuild(\r\n            `${executedMigrations.length} migrations are already loaded in the database.`,\r\n        )\r\n        this.connection.logger.logSchemaBuild(\r\n            `${\r\n                lastTimeExecutedMigration.name\r\n            } is the last executed migration. It was executed on ${new Date(\r\n                lastTimeExecutedMigration.timestamp,\r\n            ).toString()}.`,\r\n        )\r\n        this.connection.logger.logSchemaBuild(`Now reverting it...`)\r\n\r\n        // start transaction if its not started yet\r\n        let transactionStartedByUs = false\r\n        if (this.transaction !== \"none\" && !queryRunner.isTransactionActive) {\r\n            await queryRunner.startTransaction()\r\n            transactionStartedByUs = true\r\n        }\r\n\r\n        try {\r\n            if (!this.fake) {\r\n                await queryRunner.beforeMigration()\r\n                await migrationToRevert.instance!.down(queryRunner)\r\n                await queryRunner.afterMigration()\r\n            }\r\n\r\n            await this.deleteExecutedMigration(queryRunner, migrationToRevert)\r\n            this.connection.logger.logSchemaBuild(\r\n                `Migration ${migrationToRevert.name} has been ${\r\n                    this.fake ? \"(fake)\" : \"\"\r\n                } reverted successfully.`,\r\n            )\r\n\r\n            // commit transaction if we started it\r\n            if (transactionStartedByUs) await queryRunner.commitTransaction()\r\n        } catch (err) {\r\n            // rollback transaction if we started it\r\n            if (transactionStartedByUs) {\r\n                try {\r\n                    // we throw original error even if rollback thrown an error\r\n                    await queryRunner.rollbackTransaction()\r\n                } catch (rollbackError) {}\r\n            }\r\n\r\n            throw err\r\n        } finally {\r\n            // if query runner was created by us then release it\r\n            if (!this.queryRunner) await queryRunner.release()\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates table \"migrations\" that will store information about executed migrations.\r\n     */\r\n    protected async createMigrationsTableIfNotExist(\r\n        queryRunner: QueryRunner,\r\n    ): Promise<void> {\r\n        // If driver is mongo no need to create\r\n        if (this.connection.driver.options.type === \"mongodb\") {\r\n            return\r\n        }\r\n        const tableExist = await queryRunner.hasTable(this.migrationsTable) // todo: table name should be configurable\r\n        if (!tableExist) {\r\n            await queryRunner.createTable(\r\n                new Table({\r\n                    database: this.migrationsDatabase,\r\n                    schema: this.migrationsSchema,\r\n                    name: this.migrationsTable,\r\n                    columns: [\r\n                        {\r\n                            name: \"id\",\r\n                            type: this.connection.driver.normalizeType({\r\n                                type: this.connection.driver.mappedDataTypes\r\n                                    .migrationId,\r\n                            }),\r\n                            isGenerated: true,\r\n                            generationStrategy: \"increment\",\r\n                            isPrimary: true,\r\n                            isNullable: false,\r\n                        },\r\n                        {\r\n                            name: \"timestamp\",\r\n                            type: this.connection.driver.normalizeType({\r\n                                type: this.connection.driver.mappedDataTypes\r\n                                    .migrationTimestamp,\r\n                            }),\r\n                            isPrimary: false,\r\n                            isNullable: false,\r\n                        },\r\n                        {\r\n                            name: \"name\",\r\n                            type: this.connection.driver.normalizeType({\r\n                                type: this.connection.driver.mappedDataTypes\r\n                                    .migrationName,\r\n                            }),\r\n                            isNullable: false,\r\n                        },\r\n                    ],\r\n                }),\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads all migrations that were executed and saved into the database (sorts by id).\r\n     */\r\n    protected async loadExecutedMigrations(\r\n        queryRunner: QueryRunner,\r\n    ): Promise<Migration[]> {\r\n        if (this.connection.driver.options.type === \"mongodb\") {\r\n            const mongoRunner = queryRunner as MongoQueryRunner\r\n            return mongoRunner\r\n                .cursor(this.migrationsTableName, {})\r\n                .sort({ _id: -1 })\r\n                .toArray()\r\n        } else {\r\n            const migrationsRaw: ObjectLiteral[] = await this.connection.manager\r\n                .createQueryBuilder(queryRunner)\r\n                .select()\r\n                .orderBy(this.connection.driver.escape(\"id\"), \"DESC\")\r\n                .from(this.migrationsTable, this.migrationsTableName)\r\n                .getRawMany()\r\n            return migrationsRaw.map((migrationRaw) => {\r\n                return new Migration(\r\n                    parseInt(migrationRaw[\"id\"]),\r\n                    parseInt(migrationRaw[\"timestamp\"]),\r\n                    migrationRaw[\"name\"],\r\n                )\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all migrations that setup for this connection.\r\n     */\r\n    protected getMigrations(): Migration[] {\r\n        const migrations = this.connection.migrations.map((migration) => {\r\n            const migrationClassName =\r\n                migration.name || (migration.constructor as any).name\r\n            const migrationTimestamp = parseInt(\r\n                migrationClassName.substr(-13),\r\n                10,\r\n            )\r\n            if (!migrationTimestamp || isNaN(migrationTimestamp)) {\r\n                throw new TypeORMError(\r\n                    `${migrationClassName} migration name is wrong. Migration class name should have a JavaScript timestamp appended.`,\r\n                )\r\n            }\r\n\r\n            return new Migration(\r\n                undefined,\r\n                migrationTimestamp,\r\n                migrationClassName,\r\n                migration,\r\n            )\r\n        })\r\n\r\n        this.checkForDuplicateMigrations(migrations)\r\n\r\n        // sort them by timestamp\r\n        return migrations.sort((a, b) => a.timestamp - b.timestamp)\r\n    }\r\n\r\n    protected checkForDuplicateMigrations(migrations: Migration[]) {\r\n        const migrationNames = migrations.map((migration) => migration.name)\r\n        const duplicates = Array.from(\r\n            new Set(\r\n                migrationNames.filter(\r\n                    (migrationName, index) =>\r\n                        migrationNames.indexOf(migrationName) < index,\r\n                ),\r\n            ),\r\n        )\r\n        if (duplicates.length > 0) {\r\n            throw Error(`Duplicate migrations: ${duplicates.join(\", \")}`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Finds the latest migration (sorts by timestamp) in the given array of migrations.\r\n     */\r\n    protected getLatestTimestampMigration(\r\n        migrations: Migration[],\r\n    ): Migration | undefined {\r\n        const sortedMigrations = migrations\r\n            .map((migration) => migration)\r\n            .sort((a, b) => (a.timestamp - b.timestamp) * -1)\r\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined\r\n    }\r\n\r\n    /**\r\n     * Finds the latest migration in the given array of migrations.\r\n     * PRE: Migration array must be sorted by descending id.\r\n     */\r\n    protected getLatestExecutedMigration(\r\n        sortedMigrations: Migration[],\r\n    ): Migration | undefined {\r\n        return sortedMigrations.length > 0 ? sortedMigrations[0] : undefined\r\n    }\r\n\r\n    /**\r\n     * Inserts new executed migration's data into migrations table.\r\n     */\r\n    protected async insertExecutedMigration(\r\n        queryRunner: QueryRunner,\r\n        migration: Migration,\r\n    ): Promise<void> {\r\n        const values: ObjectLiteral = {}\r\n        if (this.connection.driver.options.type === \"mssql\") {\r\n            values[\"timestamp\"] = new MssqlParameter(\r\n                migration.timestamp,\r\n                this.connection.driver.normalizeType({\r\n                    type: this.connection.driver.mappedDataTypes\r\n                        .migrationTimestamp,\r\n                }) as any,\r\n            )\r\n            values[\"name\"] = new MssqlParameter(\r\n                migration.name,\r\n                this.connection.driver.normalizeType({\r\n                    type: this.connection.driver.mappedDataTypes.migrationName,\r\n                }) as any,\r\n            )\r\n        } else {\r\n            values[\"timestamp\"] = migration.timestamp\r\n            values[\"name\"] = migration.name\r\n        }\r\n        if (this.connection.driver.options.type === \"mongodb\") {\r\n            const mongoRunner = queryRunner as MongoQueryRunner\r\n            await mongoRunner.databaseConnection\r\n                .db(this.connection.driver.database!)\r\n                .collection(this.migrationsTableName)\r\n                .insertOne(values)\r\n        } else {\r\n            const qb = queryRunner.manager.createQueryBuilder()\r\n            await qb\r\n                .insert()\r\n                .into(this.migrationsTable)\r\n                .values(values)\r\n                .execute()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Delete previously executed migration's data from the migrations table.\r\n     */\r\n    protected async deleteExecutedMigration(\r\n        queryRunner: QueryRunner,\r\n        migration: Migration,\r\n    ): Promise<void> {\r\n        const conditions: ObjectLiteral = {}\r\n        if (this.connection.driver.options.type === \"mssql\") {\r\n            conditions[\"timestamp\"] = new MssqlParameter(\r\n                migration.timestamp,\r\n                this.connection.driver.normalizeType({\r\n                    type: this.connection.driver.mappedDataTypes\r\n                        .migrationTimestamp,\r\n                }) as any,\r\n            )\r\n            conditions[\"name\"] = new MssqlParameter(\r\n                migration.name,\r\n                this.connection.driver.normalizeType({\r\n                    type: this.connection.driver.mappedDataTypes.migrationName,\r\n                }) as any,\r\n            )\r\n        } else {\r\n            conditions[\"timestamp\"] = migration.timestamp\r\n            conditions[\"name\"] = migration.name\r\n        }\r\n\r\n        if (this.connection.driver.options.type === \"mongodb\") {\r\n            const mongoRunner = queryRunner as MongoQueryRunner\r\n            await mongoRunner.databaseConnection\r\n                .db(this.connection.driver.database!)\r\n                .collection(this.migrationsTableName)\r\n                .deleteOne(conditions)\r\n        } else {\r\n            const qb = queryRunner.manager.createQueryBuilder()\r\n            await qb\r\n                .delete()\r\n                .from(this.migrationsTable)\r\n                .where(`${qb.escape(\"timestamp\")} = :timestamp`)\r\n                .andWhere(`${qb.escape(\"name\")} = :name`)\r\n                .setParameters(conditions)\r\n                .execute()\r\n        }\r\n    }\r\n\r\n    protected async withQueryRunner<T extends any>(\r\n        callback: (queryRunner: QueryRunner) => T | Promise<T>,\r\n    ) {\r\n        const queryRunner =\r\n            this.queryRunner || this.connection.createQueryRunner()\r\n\r\n        try {\r\n            return await callback(queryRunner)\r\n        } finally {\r\n            if (!this.queryRunner) {\r\n                await queryRunner.release()\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
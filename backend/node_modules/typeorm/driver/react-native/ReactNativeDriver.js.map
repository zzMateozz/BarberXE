{"version":3,"sources":["../../src/driver/react-native/ReactNativeDriver.ts"],"names":[],"mappings":"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","file":"ReactNativeDriver.js","sourcesContent":["import { Driver } from \"../Driver\"\r\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\r\nimport { DateUtils } from \"../../util/DateUtils\"\r\nimport { DataSource } from \"../../data-source/DataSource\"\r\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\r\nimport { CteCapabilities } from \"../types/CteCapabilities\"\r\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\r\nimport { ColumnType } from \"../types/ColumnTypes\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\r\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\r\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\r\nimport { OrmUtils } from \"../../util/OrmUtils\"\r\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { DriverPackageNotInstalledError } from \"../../error\"\r\nimport { Table } from \"../../schema-builder/table/Table\"\r\nimport { View } from \"../../schema-builder/view/View\"\r\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\r\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\r\nimport { UpsertType } from \"../types/UpsertType\"\r\nimport { ReactNativeConnectionOptions } from \"./ReactNativeConnectionOptions\"\r\nimport { ReactNativeQueryRunner } from \"./ReactNativeQueryRunner\"\r\n\r\ntype DatabasesMap = Record<\r\n    string,\r\n    {\r\n        attachFilepathAbsolute: string\r\n        attachFilepathRelative: string\r\n        attachHandle: string\r\n    }\r\n>\r\n\r\n/**\r\n * Organizes communication with sqlite DBMS.\r\n */\r\nexport class ReactNativeDriver implements Driver {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by driver.\r\n     */\r\n    connection: DataSource\r\n\r\n    /**\r\n     * Sqlite has a single QueryRunner because it works on a single database connection.\r\n     */\r\n    queryRunner?: QueryRunner\r\n\r\n    /**\r\n     * Real database connection with sqlite database.\r\n     */\r\n    databaseConnection: any\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: ReactNativeConnectionOptions\r\n\r\n    /**\r\n     * Master database used to perform all write queries.\r\n     */\r\n    database?: string\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean = false\r\n\r\n    /**\r\n     * SQLite underlying library.\r\n     */\r\n    sqlite: any\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport = true\r\n\r\n    /**\r\n     * Represent transaction support by this driver\r\n     */\r\n    transactionSupport: \"simple\" | \"nested\" | \"none\" = \"nested\"\r\n\r\n    /**\r\n     * Gets list of supported column data types by a driver.\r\n     *\r\n     * @see https://www.tutorialspoint.com/sqlite/sqlite_data_types.htm\r\n     * @see https://sqlite.org/datatype3.html\r\n     */\r\n    supportedDataTypes: ColumnType[] = [\r\n        \"int\",\r\n        \"integer\",\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"mediumint\",\r\n        \"bigint\",\r\n        \"unsigned big int\",\r\n        \"int2\",\r\n        \"int8\",\r\n        \"integer\",\r\n        \"character\",\r\n        \"varchar\",\r\n        \"varying character\",\r\n        \"nchar\",\r\n        \"native character\",\r\n        \"nvarchar\",\r\n        \"text\",\r\n        \"clob\",\r\n        \"text\",\r\n        \"blob\",\r\n        \"real\",\r\n        \"double\",\r\n        \"double precision\",\r\n        \"float\",\r\n        \"real\",\r\n        \"numeric\",\r\n        \"decimal\",\r\n        \"boolean\",\r\n        \"date\",\r\n        \"time\",\r\n        \"datetime\",\r\n    ]\r\n\r\n    /**\r\n     * Returns type of upsert supported by driver if any\r\n     */\r\n    supportedUpsertTypes: UpsertType[] = [\"on-conflict-do-update\"]\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[] = [\r\n        \"character\",\r\n        \"varchar\",\r\n        \"varying character\",\r\n        \"nchar\",\r\n        \"native character\",\r\n        \"nvarchar\",\r\n        \"text\",\r\n        \"blob\",\r\n        \"clob\",\r\n    ]\r\n\r\n    /**\r\n     * Gets list of spatial column data types.\r\n     */\r\n    spatialTypes: ColumnType[] = []\r\n\r\n    /**\r\n     * Gets list of column data types that support precision by a driver.\r\n     */\r\n    withPrecisionColumnTypes: ColumnType[] = [\r\n        \"real\",\r\n        \"double\",\r\n        \"double precision\",\r\n        \"float\",\r\n        \"real\",\r\n        \"numeric\",\r\n        \"decimal\",\r\n        \"date\",\r\n        \"time\",\r\n        \"datetime\",\r\n    ]\r\n\r\n    /**\r\n     * Gets list of column data types that support scale by a driver.\r\n     */\r\n    withScaleColumnTypes: ColumnType[] = [\r\n        \"real\",\r\n        \"double\",\r\n        \"double precision\",\r\n        \"float\",\r\n        \"real\",\r\n        \"numeric\",\r\n        \"decimal\",\r\n    ]\r\n\r\n    /**\r\n     * Orm has special columns and we need to know what database column types should be for those types.\r\n     * Column types are driver dependant.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"datetime\",\r\n        createDateDefault: \"datetime('now')\",\r\n        updateDate: \"datetime\",\r\n        updateDateDefault: \"datetime('now')\",\r\n        deleteDate: \"datetime\",\r\n        deleteDateNullable: true,\r\n        version: \"integer\",\r\n        treeLevel: \"integer\",\r\n        migrationId: \"integer\",\r\n        migrationName: \"varchar\",\r\n        migrationTimestamp: \"bigint\",\r\n        cacheId: \"int\",\r\n        cacheIdentifier: \"varchar\",\r\n        cacheTime: \"bigint\",\r\n        cacheDuration: \"int\",\r\n        cacheQuery: \"text\",\r\n        cacheResult: \"text\",\r\n        metadataType: \"varchar\",\r\n        metadataDatabase: \"varchar\",\r\n        metadataSchema: \"varchar\",\r\n        metadataTable: \"varchar\",\r\n        metadataName: \"varchar\",\r\n        metadataValue: \"text\",\r\n    }\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults\r\n\r\n    /**\r\n     * No documentation specifying a maximum length for identifiers could be found\r\n     * for SQLite.\r\n     */\r\n    maxAliasLength?: number\r\n\r\n    cteCapabilities: CteCapabilities = {\r\n        enabled: true,\r\n        requiresRecursiveHint: true,\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Any attached databases (excepting default 'main')\r\n     */\r\n    attachedDatabases: DatabasesMap = {}\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: DataSource) {\r\n        this.connection = connection\r\n        this.options = connection.options as ReactNativeConnectionOptions\r\n        // this.database = DriverUtils.buildDriverOptions(this.options).database\r\n        this.database = this.options.database\r\n\r\n        this.loadDependencies()\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Abstract\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\r\n        if (!this.queryRunner)\r\n            this.queryRunner = new ReactNativeQueryRunner(this)\r\n\r\n        return this.queryRunner\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<void> {\r\n        this.databaseConnection = await this.createDatabaseConnection()\r\n    }\r\n\r\n    /**\r\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\r\n     */\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.queryRunner = undefined\r\n            this.databaseConnection.close(ok, fail)\r\n        })\r\n    }\r\n\r\n    hasAttachedDatabases(): boolean {\r\n        return !!Object.keys(this.attachedDatabases).length\r\n    }\r\n\r\n    getAttachedDatabaseHandleByRelativePath(path: string): string | undefined {\r\n        return this.attachedDatabases?.[path]?.attachHandle\r\n    }\r\n\r\n    getAttachedDatabasePathRelativeByHandle(\r\n        handle: string,\r\n    ): string | undefined {\r\n        return Object.values(this.attachedDatabases).find(\r\n            ({ attachHandle }) => handle === attachHandle,\r\n        )?.attachFilepathRelative\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build and sync a schema.\r\n     */\r\n    createSchemaBuilder() {\r\n        return new RdbmsSchemaBuilder(this.connection)\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformTo(\r\n                columnMetadata.transformer,\r\n                value,\r\n            )\r\n\r\n        if (value === null || value === undefined) return value\r\n\r\n        if (\r\n            columnMetadata.type === Boolean ||\r\n            columnMetadata.type === \"boolean\"\r\n        ) {\r\n            return value === true ? 1 : 0\r\n        } else if (columnMetadata.type === \"date\") {\r\n            return DateUtils.mixedDateToDateString(value)\r\n        } else if (columnMetadata.type === \"time\") {\r\n            return DateUtils.mixedDateToTimeString(value)\r\n        } else if (\r\n            columnMetadata.type === \"datetime\" ||\r\n            columnMetadata.type === Date\r\n        ) {\r\n            // to string conversation needs because SQLite stores date as integer number, when date came as Object\r\n            // TODO: think about `toUTC` conversion\r\n            return DateUtils.mixedDateToUtcDatetimeString(value)\r\n        } else if (columnMetadata.type === \"simple-array\") {\r\n            return DateUtils.simpleArrayToString(value)\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            return DateUtils.simpleJsonToString(value)\r\n        } else if (columnMetadata.type === \"simple-enum\") {\r\n            return DateUtils.simpleEnumToString(value)\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be hydrated, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return columnMetadata.transformer\r\n                ? ApplyValueTransformers.transformFrom(\r\n                      columnMetadata.transformer,\r\n                      value,\r\n                  )\r\n                : value\r\n\r\n        if (\r\n            columnMetadata.type === Boolean ||\r\n            columnMetadata.type === \"boolean\"\r\n        ) {\r\n            value = value ? true : false\r\n        } else if (\r\n            columnMetadata.type === \"datetime\" ||\r\n            columnMetadata.type === Date\r\n        ) {\r\n            /**\r\n             * Fix date conversion issue\r\n             *\r\n             * If the format of the date string is \"2018-03-14 02:33:33.906\", Safari (and iOS WKWebView) will convert it to an invalid date object.\r\n             * We need to modify the date string to \"2018-03-14T02:33:33.906Z\" and Safari will convert it correctly.\r\n             *\r\n             * ISO 8601\r\n             * https://www.w3.org/TR/NOTE-datetime\r\n             */\r\n            if (value && typeof value === \"string\") {\r\n                // There are various valid time string formats a sqlite time string might have:\r\n                // https://www.sqlite.org/lang_datefunc.html\r\n                // There are two separate fixes we may need to do:\r\n                //   1) Add 'T' separator if space is used instead\r\n                //   2) Add 'Z' UTC suffix if no timezone or offset specified\r\n\r\n                if (/^\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d/.test(value)) {\r\n                    value = value.replace(\" \", \"T\")\r\n                }\r\n                if (\r\n                    /^\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d:\\d\\d(:\\d\\d(\\.\\d\\d\\d)?)?$/.test(\r\n                        value,\r\n                    )\r\n                ) {\r\n                    value += \"Z\"\r\n                }\r\n            }\r\n\r\n            value = DateUtils.normalizeHydratedDate(value)\r\n        } else if (columnMetadata.type === \"date\") {\r\n            value = DateUtils.mixedDateToDateString(value)\r\n        } else if (columnMetadata.type === \"time\") {\r\n            value = DateUtils.mixedTimeToString(value)\r\n        } else if (columnMetadata.type === \"simple-array\") {\r\n            value = DateUtils.stringToSimpleArray(value)\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            value = DateUtils.stringToSimpleJson(value)\r\n        } else if (columnMetadata.type === \"simple-enum\") {\r\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata)\r\n        } else if (columnMetadata.type === Number) {\r\n            // convert to number if number\r\n            value = !isNaN(+value) ? parseInt(value) : value\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformFrom(\r\n                columnMetadata.transformer,\r\n                value,\r\n            )\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(\r\n        sql: string,\r\n        parameters: ObjectLiteral,\r\n        nativeParameters: ObjectLiteral,\r\n    ): [string, any[]] {\r\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\r\n            (key) => {\r\n                // Mapping boolean values to their numeric representation\r\n                if (typeof nativeParameters[key] === \"boolean\") {\r\n                    return nativeParameters[key] === true ? 1 : 0\r\n                }\r\n\r\n                if (nativeParameters[key] instanceof Date) {\r\n                    return DateUtils.mixedDateToUtcDatetimeString(\r\n                        nativeParameters[key],\r\n                    )\r\n                }\r\n\r\n                return nativeParameters[key]\r\n            },\r\n        )\r\n\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, escapedParameters]\r\n\r\n        sql = sql.replace(\r\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\r\n            (full, isArray: string, key: string): string => {\r\n                if (!parameters.hasOwnProperty(key)) {\r\n                    return full\r\n                }\r\n\r\n                let value: any = parameters[key]\r\n\r\n                if (isArray) {\r\n                    return value\r\n                        .map((v: any) => {\r\n                            escapedParameters.push(v)\r\n                            return this.createParameter(\r\n                                key,\r\n                                escapedParameters.length - 1,\r\n                            )\r\n                        })\r\n                        .join(\", \")\r\n                }\r\n\r\n                if (typeof value === \"function\") {\r\n                    return value()\r\n                } else if (typeof value === \"number\") {\r\n                    return String(value)\r\n                }\r\n\r\n                // Sqlite does not have a boolean data type so we have to transform\r\n                // it to 1 or 0\r\n                if (typeof value === \"boolean\") {\r\n                    escapedParameters.push(+value)\r\n                    return this.createParameter(\r\n                        key,\r\n                        escapedParameters.length - 1,\r\n                    )\r\n                }\r\n\r\n                if (value instanceof Date) {\r\n                    escapedParameters.push(\r\n                        DateUtils.mixedDateToUtcDatetimeString(value),\r\n                    )\r\n                    return this.createParameter(\r\n                        key,\r\n                        escapedParameters.length - 1,\r\n                    )\r\n                }\r\n\r\n                escapedParameters.push(value)\r\n                return this.createParameter(key, escapedParameters.length - 1)\r\n            },\r\n        ) // todo: make replace only in value statements, otherwise problems\r\n        return [sql, escapedParameters]\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return '\"' + columnName + '\"'\r\n    }\r\n\r\n    /**\r\n     * Build full table name with database name, schema name and table name.\r\n     * E.g. myDB.mySchema.myTable\r\n     *\r\n     * Returns only simple table name because all inherited drivers does not supports schema and database.\r\n     */\r\n    buildTableName(\r\n        tableName: string,\r\n        schema?: string,\r\n        database?: string,\r\n    ): string {\r\n        return tableName\r\n    }\r\n\r\n    /**\r\n     * Parse a target table name or other types and return a normalized table definition.\r\n     */\r\n    parseTableName(\r\n        target: EntityMetadata | Table | View | TableForeignKey | string,\r\n    ): { database?: string; schema?: string; tableName: string } {\r\n        const driverDatabase = this.database\r\n        const driverSchema = undefined\r\n\r\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\r\n            const parsed = this.parseTableName(\r\n                target.schema\r\n                    ? `\"${target.schema}\".\"${target.name}\"`\r\n                    : target.name,\r\n            )\r\n\r\n            return {\r\n                database: target.database || parsed.database || driverDatabase,\r\n                schema: target.schema || parsed.schema || driverSchema,\r\n                tableName: parsed.tableName,\r\n            }\r\n        }\r\n\r\n        if (InstanceChecker.isTableForeignKey(target)) {\r\n            const parsed = this.parseTableName(target.referencedTableName)\r\n\r\n            return {\r\n                database:\r\n                    target.referencedDatabase ||\r\n                    parsed.database ||\r\n                    driverDatabase,\r\n                schema:\r\n                    target.referencedSchema || parsed.schema || driverSchema,\r\n                tableName: parsed.tableName,\r\n            }\r\n        }\r\n\r\n        if (InstanceChecker.isEntityMetadata(target)) {\r\n            // EntityMetadata tableName is never a path\r\n\r\n            return {\r\n                database: target.database || driverDatabase,\r\n                schema: target.schema || driverSchema,\r\n                tableName: target.tableName,\r\n            }\r\n        }\r\n\r\n        const parts = target.split(\".\")\r\n\r\n        if (parts.length === 3) {\r\n            return {\r\n                database: parts[0] || driverDatabase,\r\n                schema: parts[1] || driverSchema,\r\n                tableName: parts[2],\r\n            }\r\n        } else if (parts.length === 2) {\r\n            const database =\r\n                this.getAttachedDatabasePathRelativeByHandle(parts[0]) ??\r\n                driverDatabase\r\n            return {\r\n                database: database,\r\n                schema: parts[0],\r\n                tableName: parts[1],\r\n            }\r\n        } else {\r\n            return {\r\n                database: driverDatabase,\r\n                schema: driverSchema,\r\n                tableName: target,\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(column: {\r\n        type?: ColumnType\r\n        length?: number | string\r\n        precision?: number | null\r\n        scale?: number\r\n    }): string {\r\n        if (column.type === Number || column.type === \"int\") {\r\n            return \"integer\"\r\n        } else if (column.type === String) {\r\n            return \"varchar\"\r\n        } else if (column.type === Date) {\r\n            return \"datetime\"\r\n        } else if (column.type === Boolean) {\r\n            return \"boolean\"\r\n        } else if (column.type === \"uuid\") {\r\n            return \"varchar\"\r\n        } else if (column.type === \"simple-array\") {\r\n            return \"text\"\r\n        } else if (column.type === \"simple-json\") {\r\n            return \"text\"\r\n        } else if (column.type === \"simple-enum\") {\r\n            return \"varchar\"\r\n        } else {\r\n            return (column.type as string) || \"\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\r\n        const defaultValue = columnMetadata.default\r\n\r\n        if (typeof defaultValue === \"number\") {\r\n            return \"\" + defaultValue\r\n        }\r\n\r\n        if (typeof defaultValue === \"boolean\") {\r\n            return defaultValue ? \"1\" : \"0\"\r\n        }\r\n\r\n        if (typeof defaultValue === \"function\") {\r\n            return defaultValue()\r\n        }\r\n\r\n        if (typeof defaultValue === \"string\") {\r\n            return `'${defaultValue}'`\r\n        }\r\n\r\n        if (defaultValue === null || defaultValue === undefined) {\r\n            return undefined\r\n        }\r\n\r\n        return `${defaultValue}`\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        return column.entityMetadata.uniques.some(\r\n            (uq) => uq.columns.length === 1 && uq.columns[0] === column,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Calculates column length taking into account the default length values.\r\n     */\r\n    getColumnLength(column: ColumnMetadata): string {\r\n        return column.length ? column.length.toString() : \"\"\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    createFullType(column: TableColumn): string {\r\n        let type = column.type\r\n        if (column.enum) {\r\n            return \"varchar\"\r\n        }\r\n        if (column.length) {\r\n            type += \"(\" + column.length + \")\"\r\n        } else if (\r\n            column.precision !== null &&\r\n            column.precision !== undefined &&\r\n            column.scale !== null &&\r\n            column.scale !== undefined\r\n        ) {\r\n            type += \"(\" + column.precision + \",\" + column.scale + \")\"\r\n        } else if (\r\n            column.precision !== null &&\r\n            column.precision !== undefined\r\n        ) {\r\n            type += \"(\" + column.precision + \")\"\r\n        }\r\n\r\n        if (column.isArray) type += \" array\"\r\n\r\n        return type\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Creates generated map of values generated or returned by database after INSERT query.\r\n     */\r\n    createGeneratedMap(\r\n        metadata: EntityMetadata,\r\n        insertResult: any,\r\n        entityIndex: number,\r\n        entityNum: number,\r\n    ) {\r\n        const generatedMap = metadata.generatedColumns.reduce(\r\n            (map, generatedColumn) => {\r\n                let value: any\r\n                if (\r\n                    generatedColumn.generationStrategy === \"increment\" &&\r\n                    insertResult\r\n                ) {\r\n                    // NOTE: When INSERT statement is successfully completed, the last inserted row ID is returned.\r\n                    // see also: SqliteQueryRunner.query()\r\n                    value = insertResult - entityNum + entityIndex + 1\r\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\r\n                    //     value = insertValue[generatedColumn.databaseName];\r\n                }\r\n\r\n                if (!value) return map\r\n                return OrmUtils.mergeDeep(\r\n                    map,\r\n                    generatedColumn.createValueMap(value),\r\n                )\r\n            },\r\n            {} as ObjectLiteral,\r\n        )\r\n\r\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(\r\n        tableColumns: TableColumn[],\r\n        columnMetadatas: ColumnMetadata[],\r\n    ): ColumnMetadata[] {\r\n        return columnMetadatas.filter((columnMetadata) => {\r\n            const tableColumn = tableColumns.find(\r\n                (c) => c.name === columnMetadata.databaseName,\r\n            )\r\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\r\n\r\n            const isColumnChanged =\r\n                tableColumn.name !== columnMetadata.databaseName ||\r\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\r\n                tableColumn.length !== columnMetadata.length ||\r\n                tableColumn.precision !== columnMetadata.precision ||\r\n                tableColumn.scale !== columnMetadata.scale ||\r\n                this.normalizeDefault(columnMetadata) !== tableColumn.default ||\r\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\r\n                tableColumn.isNullable !== columnMetadata.isNullable ||\r\n                tableColumn.generatedType !== columnMetadata.generatedType ||\r\n                tableColumn.asExpression !== columnMetadata.asExpression ||\r\n                tableColumn.isUnique !==\r\n                    this.normalizeIsUnique(columnMetadata) ||\r\n                (tableColumn.enum &&\r\n                    columnMetadata.enum &&\r\n                    !OrmUtils.isArraysEqual(\r\n                        tableColumn.enum,\r\n                        columnMetadata.enum.map((val) => val + \"\"),\r\n                    )) ||\r\n                (columnMetadata.generationStrategy !== \"uuid\" &&\r\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\r\n\r\n            // DEBUG SECTION\r\n            // if (isColumnChanged) {\r\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\r\n            //     console.log(\r\n            //         \"name:\",\r\n            //         tableColumn.name,\r\n            //         columnMetadata.databaseName,\r\n            //     )\r\n            //     console.log(\r\n            //         \"type:\",\r\n            //         tableColumn.type,\r\n            //         this.normalizeType(columnMetadata),\r\n            //     )\r\n            //     console.log(\r\n            //         \"length:\",\r\n            //         tableColumn.length,\r\n            //         columnMetadata.length,\r\n            //     )\r\n            //     console.log(\r\n            //         \"precision:\",\r\n            //         tableColumn.precision,\r\n            //         columnMetadata.precision,\r\n            //     )\r\n            //     console.log(\"scale:\", tableColumn.scale, columnMetadata.scale)\r\n            //     console.log(\r\n            //         \"default:\",\r\n            //         this.normalizeDefault(columnMetadata),\r\n            //         columnMetadata.default,\r\n            //     )\r\n            //     console.log(\r\n            //         \"isPrimary:\",\r\n            //         tableColumn.isPrimary,\r\n            //         columnMetadata.isPrimary,\r\n            //     )\r\n            //     console.log(\r\n            //         \"isNullable:\",\r\n            //         tableColumn.isNullable,\r\n            //         columnMetadata.isNullable,\r\n            //     )\r\n            //     console.log(\r\n            //         \"generatedType:\",\r\n            //         tableColumn.generatedType,\r\n            //         columnMetadata.generatedType,\r\n            //     )\r\n            //     console.log(\r\n            //         \"asExpression:\",\r\n            //         tableColumn.asExpression,\r\n            //         columnMetadata.asExpression,\r\n            //     )\r\n            //     console.log(\r\n            //         \"isUnique:\",\r\n            //         tableColumn.isUnique,\r\n            //         this.normalizeIsUnique(columnMetadata),\r\n            //     )\r\n            //     console.log(\r\n            //         \"enum:\",\r\n            //         tableColumn.enum &&\r\n            //             columnMetadata.enum &&\r\n            //             !OrmUtils.isArraysEqual(\r\n            //                 tableColumn.enum,\r\n            //                 columnMetadata.enum.map((val) => val + \"\"),\r\n            //             ),\r\n            //     )\r\n            //     console.log(\r\n            //         \"isGenerated:\",\r\n            //         tableColumn.isGenerated,\r\n            //         columnMetadata.isGenerated,\r\n            //     )\r\n            // }\r\n\r\n            return isColumnChanged\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports RETURNING / OUTPUT statement.\r\n     */\r\n    isReturningSqlSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports uuid values generation on its own.\r\n     */\r\n    isUUIDGenerationSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports fulltext indices.\r\n     */\r\n    isFullTextColumnTypeSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Creates an escaped parameter.\r\n     */\r\n    createParameter(parameterName: string, index: number): string {\r\n        // return \"$\" + (index + 1);\r\n        return \"?\"\r\n        // return \"$\" + parameterName;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     */\r\n    protected createDatabaseConnection() {\r\n        return new Promise<void>((ok, fail) => {\r\n            const options = Object.assign(\r\n                {},\r\n                {\r\n                    name: this.options.database,\r\n                    location: this.options.location,\r\n                },\r\n                this.options.extra || {},\r\n            )\r\n\r\n            this.sqlite.openDatabase(\r\n                options,\r\n                (db: any) => {\r\n                    const databaseConnection = db\r\n\r\n                    // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n                    // working properly. this also makes onDelete work with sqlite.\r\n                    databaseConnection.executeSql(\r\n                        `PRAGMA foreign_keys = ON`,\r\n                        [],\r\n                        (result: any) => {\r\n                            ok(databaseConnection)\r\n                        },\r\n                        (error: any) => {\r\n                            fail(error)\r\n                        },\r\n                    )\r\n                },\r\n                (error: any) => {\r\n                    fail(error)\r\n                },\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            const sqlite =\r\n                this.options.driver || require(\"react-native-sqlite-storage\")\r\n            this.sqlite = sqlite\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\r\n                \"React-Native\",\r\n                \"react-native-sqlite-storage\",\r\n            )\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/driver/mongodb/MongoQueryRunner.ts"],"names":[],"mappings":"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","file":"MongoQueryRunner.js","sourcesContent":["import { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\r\nimport { Table } from \"../../schema-builder/table/Table\"\r\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\r\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\r\nimport { View } from \"../../schema-builder/view/View\"\r\n// import {Connection} from \"../../connection/Connection\";\r\nimport { ReadStream } from \"../../platform/PlatformTools\"\r\nimport { MongoEntityManager } from \"../../entity-manager/MongoEntityManager\"\r\nimport { SqlInMemory } from \"../SqlInMemory\"\r\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\r\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\r\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\r\nimport { TypeORMError } from \"../../error\"\r\n\r\nimport {\r\n    BulkWriteResult,\r\n    AggregationCursor,\r\n    MongoClient,\r\n    Collection,\r\n    FindCursor,\r\n    Document,\r\n    AggregateOptions,\r\n    AnyBulkWriteOperation,\r\n    BulkWriteOptions,\r\n    Filter,\r\n    CountOptions,\r\n    CountDocumentsOptions,\r\n    IndexSpecification,\r\n    CreateIndexesOptions,\r\n    IndexDescription,\r\n    DeleteResult,\r\n    DeleteOptions,\r\n    CommandOperationOptions,\r\n    FindOneAndDeleteOptions,\r\n    FindOneAndReplaceOptions,\r\n    UpdateFilter,\r\n    FindOneAndUpdateOptions,\r\n    RenameOptions,\r\n    ReplaceOptions,\r\n    UpdateResult,\r\n    CollStats,\r\n    CollStatsOptions,\r\n    ChangeStreamOptions,\r\n    ChangeStream,\r\n    UpdateOptions,\r\n    ListIndexesOptions,\r\n    ListIndexesCursor,\r\n    OptionalId,\r\n    InsertOneOptions,\r\n    InsertOneResult,\r\n    InsertManyResult,\r\n    UnorderedBulkOperation,\r\n    OrderedBulkOperation,\r\n    IndexInformationOptions,\r\n} from \"../../driver/mongodb/typings\"\r\nimport { DataSource } from \"../../data-source/DataSource\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\n\r\n/**\r\n * Runs queries on a single MongoDB connection.\r\n */\r\nexport class MongoQueryRunner implements QueryRunner {\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by this query runner.\r\n     */\r\n    connection: DataSource\r\n\r\n    /**\r\n     * Broadcaster used on this query runner to broadcast entity events.\r\n     */\r\n    broadcaster: Broadcaster\r\n\r\n    /**\r\n     * Entity manager working only with current query runner.\r\n     */\r\n    manager: MongoEntityManager\r\n\r\n    /**\r\n     * Indicates if connection for this query runner is released.\r\n     * Once its released, query runner cannot run queries anymore.\r\n     * Always false for mongodb since mongodb has a single query executor instance.\r\n     */\r\n    isReleased = false\r\n\r\n    /**\r\n     * Indicates if transaction is active in this query executor.\r\n     * Always false for mongodb since mongodb does not support transactions.\r\n     */\r\n    isTransactionActive = false\r\n\r\n    /**\r\n     * Stores temporarily user data.\r\n     * Useful for sharing data with subscribers.\r\n     */\r\n    data = {}\r\n\r\n    /**\r\n     * All synchronized tables in the database.\r\n     */\r\n    loadedTables: Table[]\r\n\r\n    /**\r\n     * All synchronized views in the database.\r\n     */\r\n    loadedViews: View[]\r\n\r\n    /**\r\n     * Real database connection from a connection pool used to perform queries.\r\n     */\r\n    databaseConnection: MongoClient\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: DataSource, databaseConnection: MongoClient) {\r\n        this.connection = connection\r\n        this.databaseConnection = databaseConnection\r\n        this.broadcaster = new Broadcaster(this)\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        // Do nothing\r\n    }\r\n\r\n    /**\r\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\r\n     */\r\n    cursor(collectionName: string, filter: Filter<Document>): FindCursor<any> {\r\n        return this.getCollection(collectionName).find(filter || {})\r\n    }\r\n\r\n    /**\r\n     * Execute an aggregation framework pipeline against the collection.\r\n     */\r\n    aggregate(\r\n        collectionName: string,\r\n        pipeline: Document[],\r\n        options?: AggregateOptions,\r\n    ): AggregationCursor<any> {\r\n        return this.getCollection(collectionName).aggregate(\r\n            pipeline,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Perform a bulkWrite operation without a fluent API.\r\n     */\r\n    async bulkWrite(\r\n        collectionName: string,\r\n        operations: AnyBulkWriteOperation<Document>[],\r\n        options?: BulkWriteOptions,\r\n    ): Promise<BulkWriteResult> {\r\n        return await this.getCollection(collectionName).bulkWrite(\r\n            operations,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    async count(\r\n        collectionName: string,\r\n        filter: Filter<Document>,\r\n        options?: CountOptions,\r\n    ): Promise<number> {\r\n        return this.getCollection(collectionName).count(\r\n            filter || {},\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Count number of matching documents in the db to a query.\r\n     */\r\n    async countDocuments(\r\n        collectionName: string,\r\n        filter: Filter<Document>,\r\n        options?: CountDocumentsOptions,\r\n    ): Promise<any> {\r\n        return this.getCollection(collectionName).countDocuments(\r\n            filter || {},\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates an index on the db and collection.\r\n     */\r\n    async createCollectionIndex(\r\n        collectionName: string,\r\n        indexSpec: IndexSpecification,\r\n        options?: CreateIndexesOptions,\r\n    ): Promise<string> {\r\n        return this.getCollection(collectionName).createIndex(\r\n            indexSpec,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\r\n     * Earlier version of MongoDB will throw a command not supported error. Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\r\n     */\r\n    async createCollectionIndexes(\r\n        collectionName: string,\r\n        indexSpecs: IndexDescription[],\r\n    ): Promise<string[]> {\r\n        return this.getCollection(collectionName).createIndexes(indexSpecs)\r\n    }\r\n\r\n    /**\r\n     * Delete multiple documents on MongoDB.\r\n     */\r\n    async deleteMany(\r\n        collectionName: string,\r\n        filter: Filter<Document>,\r\n        options: DeleteOptions,\r\n    ): Promise<DeleteResult> {\r\n        return this.getCollection(collectionName).deleteMany(\r\n            filter,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Delete a document on MongoDB.\r\n     */\r\n    async deleteOne(\r\n        collectionName: string,\r\n        filter: Filter<Document>,\r\n        options?: DeleteOptions,\r\n    ): Promise<DeleteResult> {\r\n        return this.getCollection(collectionName).deleteOne(\r\n            filter,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\r\n     */\r\n    async distinct(\r\n        collectionName: string,\r\n        key: any,\r\n        filter: Filter<Document>,\r\n        options?: CommandOperationOptions,\r\n    ): Promise<any> {\r\n        return this.getCollection(collectionName).distinct(\r\n            key,\r\n            filter,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops an index from this collection.\r\n     */\r\n    async dropCollectionIndex(\r\n        collectionName: string,\r\n        indexName: string,\r\n        options?: CommandOperationOptions,\r\n    ): Promise<Document> {\r\n        return this.getCollection(collectionName).dropIndex(\r\n            indexName,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops all indexes from the collection.\r\n     */\r\n    async dropCollectionIndexes(collectionName: string): Promise<Document> {\r\n        return this.getCollection(collectionName).dropIndexes()\r\n    }\r\n\r\n    /**\r\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndDelete(\r\n        collectionName: string,\r\n        filter: Filter<Document>,\r\n        options?: FindOneAndDeleteOptions,\r\n    ): Promise<Document | null> {\r\n        return this.getCollection(collectionName).findOneAndDelete(\r\n            filter,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndReplace(\r\n        collectionName: string,\r\n        filter: Filter<Document>,\r\n        replacement: Document,\r\n        options?: FindOneAndReplaceOptions,\r\n    ): Promise<Document | null> {\r\n        return this.getCollection(collectionName).findOneAndReplace(\r\n            filter,\r\n            replacement,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\r\n     */\r\n    async findOneAndUpdate(\r\n        collectionName: string,\r\n        filter: Filter<Document>,\r\n        update: UpdateFilter<Document>,\r\n        options?: FindOneAndUpdateOptions,\r\n    ): Promise<Document | null> {\r\n        return this.getCollection(collectionName).findOneAndUpdate(\r\n            filter,\r\n            update,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexes(collectionName: string): Promise<Document> {\r\n        return this.getCollection(collectionName).indexes()\r\n    }\r\n\r\n    /**\r\n     * Retrieve all the indexes on the collection.\r\n     */\r\n    async collectionIndexExists(\r\n        collectionName: string,\r\n        indexes: string | string[],\r\n    ): Promise<boolean> {\r\n        return this.getCollection(collectionName).indexExists(indexes)\r\n    }\r\n\r\n    /**\r\n     * Retrieves this collections index info.\r\n     */\r\n    async collectionIndexInformation(\r\n        collectionName: string,\r\n        options?: IndexInformationOptions,\r\n    ): Promise<any> {\r\n        return this.getCollection(collectionName).indexInformation(\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\r\n     */\r\n    initializeOrderedBulkOp(\r\n        collectionName: string,\r\n        options?: BulkWriteOptions,\r\n    ): OrderedBulkOperation {\r\n        return this.getCollection(collectionName).initializeOrderedBulkOp(\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\r\n     */\r\n    initializeUnorderedBulkOp(\r\n        collectionName: string,\r\n        options?: BulkWriteOptions,\r\n    ): UnorderedBulkOperation {\r\n        return this.getCollection(collectionName).initializeUnorderedBulkOp(\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Inserts an array of documents into MongoDB.\r\n     */\r\n    async insertMany(\r\n        collectionName: string,\r\n        docs: OptionalId<Document>[],\r\n        options?: BulkWriteOptions,\r\n    ): Promise<InsertManyResult> {\r\n        return this.getCollection(collectionName).insertMany(\r\n            docs,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Inserts a single document into MongoDB.\r\n     */\r\n    async insertOne(\r\n        collectionName: string,\r\n        doc: OptionalId<Document>,\r\n        options?: InsertOneOptions,\r\n    ): Promise<InsertOneResult> {\r\n        return this.getCollection(collectionName).insertOne(doc, options || {})\r\n    }\r\n\r\n    /**\r\n     * Returns if the collection is a capped collection.\r\n     */\r\n    async isCapped(collectionName: string): Promise<boolean> {\r\n        return this.getCollection(collectionName).isCapped()\r\n    }\r\n\r\n    /**\r\n     * Get the list of all indexes information for the collection.\r\n     */\r\n    listCollectionIndexes(\r\n        collectionName: string,\r\n        options?: ListIndexesOptions,\r\n    ): ListIndexesCursor {\r\n        return this.getCollection(collectionName).listIndexes(options)\r\n    }\r\n\r\n    /**\r\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\r\n     */\r\n    async rename(\r\n        collectionName: string,\r\n        newName: string,\r\n        options?: RenameOptions,\r\n    ): Promise<Collection<Document>> {\r\n        return this.getCollection(collectionName).rename(newName, options || {})\r\n    }\r\n\r\n    /**\r\n     * Replace a document on MongoDB.\r\n     */\r\n    async replaceOne(\r\n        collectionName: string,\r\n        filter: Filter<Document>,\r\n        replacement: Document,\r\n        options?: ReplaceOptions,\r\n    ): Promise<Document | UpdateResult> {\r\n        return this.getCollection(collectionName).replaceOne(\r\n            filter,\r\n            replacement,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Get all the collection statistics.\r\n     */\r\n    async stats(\r\n        collectionName: string,\r\n        options?: CollStatsOptions,\r\n    ): Promise<CollStats> {\r\n        return this.getCollection(collectionName).stats(options || {})\r\n    }\r\n\r\n    /**\r\n     * Watching new changes as stream.\r\n     */\r\n    watch(\r\n        collectionName: string,\r\n        pipeline?: Document[],\r\n        options?: ChangeStreamOptions,\r\n    ): ChangeStream {\r\n        return this.getCollection(collectionName).watch(pipeline, options)\r\n    }\r\n\r\n    /**\r\n     * Update multiple documents on MongoDB.\r\n     */\r\n    async updateMany(\r\n        collectionName: string,\r\n        filter: Filter<Document>,\r\n        update: UpdateFilter<Document>,\r\n        options?: UpdateOptions,\r\n    ): Promise<Document | UpdateResult> {\r\n        return this.getCollection(collectionName).updateMany(\r\n            filter,\r\n            update,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Update a single document on MongoDB.\r\n     */\r\n    async updateOne(\r\n        collectionName: string,\r\n        filter: Filter<Document>,\r\n        update: UpdateFilter<Document>,\r\n        options?: UpdateOptions,\r\n    ): Promise<Document | UpdateResult> {\r\n        return await this.getCollection(collectionName).updateOne(\r\n            filter,\r\n            update,\r\n            options || {},\r\n        )\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods (from QueryRunner)\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Removes all collections from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        await this.databaseConnection\r\n            .db(this.connection.driver.database!)\r\n            .dropDatabase()\r\n    }\r\n\r\n    /**\r\n     * For MongoDB database we don't create connection, because its single connection already created by a driver.\r\n     */\r\n    async connect(): Promise<any> {}\r\n\r\n    /**\r\n     * For MongoDB database we don't release connection, because its single connection.\r\n     */\r\n    async release(): Promise<void> {\r\n        // releasing connection are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Starts transaction.\r\n     */\r\n    async startTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        // transactions are not supported by mongodb driver, so simply don't do anything here\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        throw new TypeORMError(\r\n            `Executing SQL query is not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns raw data stream.\r\n     */\r\n    stream(\r\n        query: string,\r\n        parameters?: any[],\r\n        onEnd?: Function,\r\n        onError?: Function,\r\n    ): Promise<ReadStream> {\r\n        throw new TypeORMError(\r\n            `Stream is not supported by MongoDB driver. Use watch instead.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into the given table.\r\n     * Returns value of inserted object id.\r\n\r\n    async insert(collectionName: string, keyValues: ObjectLiteral): Promise<any> { // todo: fix any\r\n        const results = await this.databaseConnection\r\n            .collection(collectionName)\r\n            .insertOne(keyValues);\r\n        const generatedMap = this.connection.getMetadata(collectionName).objectIdColumn!.createValueMap(results.insertedId);\r\n        return {\r\n            result: results,\r\n            generatedMap: generatedMap\r\n        };\r\n    }*/\r\n\r\n    /**\r\n     * Updates rows that match given conditions in the given table.\r\n\r\n    async update(collectionName: string, valuesMap: ObjectLiteral, conditions: ObjectLiteral): Promise<any> { // todo: fix any\r\n        await this.databaseConnection\r\n            .collection(collectionName)\r\n            .updateOne(conditions, valuesMap);\r\n    }*/\r\n\r\n    /**\r\n     * Deletes from the given table by a given conditions.\r\n\r\n    async delete(collectionName: string, conditions: ObjectLiteral|ObjectLiteral[]|string, maybeParameters?: any[]): Promise<any> { // todo: fix any\r\n        if (typeof conditions === \"string\")\r\n            throw new TypeORMError(`String condition is not supported by MongoDB driver.`);\r\n\r\n        await this.databaseConnection\r\n            .collection(collectionName)\r\n            .deleteOne(conditions);\r\n    }*/\r\n\r\n    /**\r\n     * Returns all available database names including system databases.\r\n     */\r\n    async getDatabases(): Promise<string[]> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns all available schema names including system schemas.\r\n     * If database parameter specified, returns schemas of that database.\r\n     */\r\n    async getSchemas(database?: string): Promise<string[]> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Loads given table's data from the database.\r\n     */\r\n    async getTable(collectionName: string): Promise<Table | undefined> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Loads all tables (with given names) from the database and creates a Table from them.\r\n     */\r\n    async getTables(collectionNames: string[]): Promise<Table[]> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Loads given views's data from the database.\r\n     */\r\n    async getView(collectionName: string): Promise<View | undefined> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Loads all views (with given names) from the database and creates a Table from them.\r\n     */\r\n    async getViews(collectionNames: string[]): Promise<View[]> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    getReplicationMode(): ReplicationMode {\r\n        return \"master\"\r\n    }\r\n\r\n    /**\r\n     * Checks if database with the given name exist.\r\n     */\r\n    async hasDatabase(database: string): Promise<boolean> {\r\n        throw new TypeORMError(\r\n            `Check database queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Loads currently using database\r\n     */\r\n    async getCurrentDatabase(): Promise<undefined> {\r\n        throw new TypeORMError(\r\n            `Check database queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if schema with the given name exist.\r\n     */\r\n    async hasSchema(schema: string): Promise<boolean> {\r\n        throw new TypeORMError(\r\n            `Check schema queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Loads currently using database schema\r\n     */\r\n    async getCurrentSchema(): Promise<undefined> {\r\n        throw new TypeORMError(\r\n            `Check schema queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if table with the given name exist in the database.\r\n     */\r\n    async hasTable(collectionName: string): Promise<boolean> {\r\n        throw new TypeORMError(\r\n            `Check schema queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if column with the given name exist in the given table.\r\n     */\r\n    async hasColumn(\r\n        tableOrName: Table | string,\r\n        columnName: string,\r\n    ): Promise<boolean> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a database if it's not created.\r\n     */\r\n    async createDatabase(database: string): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Database create queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops database.\r\n     */\r\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Database drop queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new table schema.\r\n     */\r\n    async createSchema(\r\n        schemaPath: string,\r\n        ifNotExist?: boolean,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema create queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops table schema.\r\n     */\r\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema drop queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new table from the given table and columns inside it.\r\n     */\r\n    async createTable(table: Table): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops the table.\r\n     */\r\n    async dropTable(tableName: Table | string): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new view.\r\n     */\r\n    async createView(view: View): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops the view.\r\n     */\r\n    async dropView(target: View | string): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Renames the given table.\r\n     */\r\n    async renameTable(\r\n        oldTableOrName: Table | string,\r\n        newTableOrName: Table | string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new column from the column in the table.\r\n     */\r\n    async addColumn(\r\n        tableOrName: Table | string,\r\n        column: TableColumn,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new columns from the column in the table.\r\n     */\r\n    async addColumns(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Renames column in the given table.\r\n     */\r\n    async renameColumn(\r\n        tableOrName: Table | string,\r\n        oldTableColumnOrName: TableColumn | string,\r\n        newTableColumnOrName: TableColumn | string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumn(\r\n        tableOrName: Table | string,\r\n        oldTableColumnOrName: TableColumn | string,\r\n        newColumn: TableColumn,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Changes a column in the table.\r\n     */\r\n    async changeColumns(\r\n        tableOrName: Table | string,\r\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops column in the table.\r\n     */\r\n    async dropColumn(\r\n        tableOrName: Table | string,\r\n        columnOrName: TableColumn | string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops the columns in the table.\r\n     */\r\n    async dropColumns(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[] | string[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new primary key.\r\n     */\r\n    async createPrimaryKey(\r\n        tableOrName: Table | string,\r\n        columnNames: string[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Updates composite primary keys.\r\n     */\r\n    async updatePrimaryKeys(\r\n        tableOrName: Table | string,\r\n        columns: TableColumn[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops a primary key.\r\n     */\r\n    async dropPrimaryKey(tableOrName: Table | string): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraint.\r\n     */\r\n    async createUniqueConstraint(\r\n        tableOrName: Table | string,\r\n        uniqueConstraint: TableUnique,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new unique constraints.\r\n     */\r\n    async createUniqueConstraints(\r\n        tableOrName: Table | string,\r\n        uniqueConstraints: TableUnique[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops an unique constraint.\r\n     */\r\n    async dropUniqueConstraint(\r\n        tableOrName: Table | string,\r\n        uniqueOrName: TableUnique | string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops an unique constraints.\r\n     */\r\n    async dropUniqueConstraints(\r\n        tableOrName: Table | string,\r\n        uniqueConstraints: TableUnique[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new check constraint.\r\n     */\r\n    async createCheckConstraint(\r\n        tableOrName: Table | string,\r\n        checkConstraint: TableCheck,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new check constraints.\r\n     */\r\n    async createCheckConstraints(\r\n        tableOrName: Table | string,\r\n        checkConstraints: TableCheck[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops check constraint.\r\n     */\r\n    async dropCheckConstraint(\r\n        tableOrName: Table | string,\r\n        checkOrName: TableCheck | string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops check constraints.\r\n     */\r\n    async dropCheckConstraints(\r\n        tableOrName: Table | string,\r\n        checkConstraints: TableCheck[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new exclusion constraint.\r\n     */\r\n    async createExclusionConstraint(\r\n        tableOrName: Table | string,\r\n        exclusionConstraint: TableExclusion,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new exclusion constraints.\r\n     */\r\n    async createExclusionConstraints(\r\n        tableOrName: Table | string,\r\n        exclusionConstraints: TableExclusion[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraint.\r\n     */\r\n    async dropExclusionConstraint(\r\n        tableOrName: Table | string,\r\n        exclusionOrName: TableExclusion | string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops exclusion constraints.\r\n     */\r\n    async dropExclusionConstraints(\r\n        tableOrName: Table | string,\r\n        exclusionConstraints: TableExclusion[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign key.\r\n     */\r\n    async createForeignKey(\r\n        tableOrName: Table | string,\r\n        foreignKey: TableForeignKey,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new foreign keys.\r\n     */\r\n    async createForeignKeys(\r\n        tableOrName: Table | string,\r\n        foreignKeys: TableForeignKey[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign key from the table.\r\n     */\r\n    async dropForeignKey(\r\n        tableOrName: Table | string,\r\n        foreignKey: TableForeignKey,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops a foreign keys from the table.\r\n     */\r\n    async dropForeignKeys(\r\n        tableOrName: Table | string,\r\n        foreignKeys: TableForeignKey[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new index.\r\n     */\r\n    async createIndex(\r\n        tableOrName: Table | string,\r\n        index: TableIndex,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new indices\r\n     */\r\n    async createIndices(\r\n        tableOrName: Table | string,\r\n        indices: TableIndex[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops an index from the table.\r\n     */\r\n    async dropIndex(collectionName: string, indexName: string): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops an indices from the table.\r\n     */\r\n    async dropIndices(\r\n        tableOrName: Table | string,\r\n        indices: TableIndex[],\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `Schema update queries are not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Drops collection.\r\n     */\r\n    async clearTable(collectionName: string): Promise<void> {\r\n        await this.databaseConnection\r\n            .db(this.connection.driver.database!)\r\n            .dropCollection(collectionName)\r\n    }\r\n\r\n    /**\r\n     * Enables special query runner mode in which sql queries won't be executed,\r\n     * instead they will be memorized into a special variable inside query runner.\r\n     * You can get memorized sql using getMemorySql() method.\r\n     */\r\n    enableSqlMemory(): void {\r\n        throw new TypeORMError(\r\n            `This operation is not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Disables special query runner mode in which sql queries won't be executed\r\n     * started by calling enableSqlMemory() method.\r\n     *\r\n     * Previously memorized sql will be flushed.\r\n     */\r\n    disableSqlMemory(): void {\r\n        throw new TypeORMError(\r\n            `This operation is not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Flushes all memorized sqls.\r\n     */\r\n    clearSqlMemory(): void {\r\n        throw new TypeORMError(\r\n            `This operation is not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\r\n     */\r\n    getMemorySql(): SqlInMemory {\r\n        throw new TypeORMError(\r\n            `This operation is not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Executes up sql queries.\r\n     */\r\n    async executeMemoryUpSql(): Promise<void> {\r\n        throw new TypeORMError(\r\n            `This operation is not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Executes down sql queries.\r\n     */\r\n    async executeMemoryDownSql(): Promise<void> {\r\n        throw new TypeORMError(\r\n            `This operation is not supported by MongoDB driver.`,\r\n        )\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Gets collection from the database with a given name.\r\n     */\r\n    protected getCollection(collectionName: string): Collection<any> {\r\n        return this.databaseConnection\r\n            .db(this.connection.driver.database!)\r\n            .collection(collectionName)\r\n    }\r\n\r\n    /**\r\n     * Change table comment.\r\n     */\r\n    changeTableComment(\r\n        tableOrName: Table | string,\r\n        comment?: string,\r\n    ): Promise<void> {\r\n        throw new TypeORMError(\r\n            `mongodb driver does not support change table comment.`,\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/driver/DriverUtils.ts"],"names":[],"mappings":"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","file":"DriverUtils.js","sourcesContent":["import { Driver } from \"./Driver\"\r\nimport { hash, shorten } from \"../util/StringUtils\"\r\nimport { VersionUtils } from \"../util/VersionUtils\"\r\n\r\n/**\r\n * Common driver utility functions.\r\n */\r\nexport class DriverUtils {\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Returns true if given driver is SQLite-based driver.\r\n     */\r\n    static isSQLiteFamily(driver: Driver): boolean {\r\n        return [\r\n            \"sqlite\",\r\n            \"cordova\",\r\n            \"react-native\",\r\n            \"nativescript\",\r\n            \"sqljs\",\r\n            \"expo\",\r\n            \"better-sqlite3\",\r\n            \"capacitor\",\r\n        ].includes(driver.options.type)\r\n    }\r\n\r\n    /**\r\n     * Returns true if given driver is MySQL-based driver.\r\n     */\r\n    static isMySQLFamily(driver: Driver): boolean {\r\n        return [\"mysql\", \"mariadb\"].includes(driver.options.type)\r\n    }\r\n\r\n    static isReleaseVersionOrGreater(driver: Driver, version: string): boolean {\r\n        return (\r\n            driver.version != null &&\r\n            VersionUtils.isGreaterOrEqual(driver.version, version)\r\n        )\r\n    }\r\n\r\n    static isPostgresFamily(driver: Driver): boolean {\r\n        return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(\r\n            driver.options.type,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Normalizes and builds a new driver options.\r\n     * Extracts settings from connection url and sets to a new options object.\r\n     */\r\n    static buildDriverOptions(\r\n        options: any,\r\n        buildOptions?: { useSid: boolean },\r\n    ): any {\r\n        if (options.url) {\r\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as {\r\n                [key: string]: any\r\n            }\r\n\r\n            if (\r\n                buildOptions &&\r\n                buildOptions.useSid &&\r\n                urlDriverOptions.database\r\n            ) {\r\n                urlDriverOptions.sid = urlDriverOptions.database\r\n            }\r\n\r\n            for (const key of Object.keys(urlDriverOptions)) {\r\n                if (typeof urlDriverOptions[key] === \"undefined\") {\r\n                    delete urlDriverOptions[key]\r\n                }\r\n            }\r\n\r\n            return Object.assign({}, options, urlDriverOptions)\r\n        }\r\n        return Object.assign({}, options)\r\n    }\r\n\r\n    /**\r\n     * buildDriverOptions for MongodDB only to support replica set\r\n     */\r\n    static buildMongoDBDriverOptions(\r\n        options: any,\r\n        buildOptions?: { useSid: boolean },\r\n    ): any {\r\n        if (options.url) {\r\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(\r\n                options.url,\r\n            ) as { [key: string]: any }\r\n\r\n            if (\r\n                buildOptions &&\r\n                buildOptions.useSid &&\r\n                urlDriverOptions.database\r\n            ) {\r\n                urlDriverOptions.sid = urlDriverOptions.database\r\n            }\r\n\r\n            for (const key of Object.keys(urlDriverOptions)) {\r\n                if (typeof urlDriverOptions[key] === \"undefined\") {\r\n                    delete urlDriverOptions[key]\r\n                }\r\n            }\r\n\r\n            return Object.assign({}, options, urlDriverOptions)\r\n        }\r\n        return Object.assign({}, options)\r\n    }\r\n\r\n    /**\r\n     * Joins and shortens alias if needed.\r\n     *\r\n     * If the alias length is greater than the limit allowed by the current\r\n     * driver, replaces it with a shortend string, if the shortend string\r\n     * is still too long, it will then hash the alias.\r\n     *\r\n     * @param driver Current `Driver`.\r\n     * @param buildOptions Optional settings.\r\n     * @param alias Alias parts.\r\n     *\r\n     * @return An alias that is no longer than the divers max alias length.\r\n     */\r\n    static buildAlias(\r\n        { maxAliasLength }: Driver,\r\n        buildOptions: { shorten?: boolean; joiner?: string } | undefined,\r\n        ...alias: string[]\r\n    ): string {\r\n        const joiner =\r\n            buildOptions && buildOptions.joiner ? buildOptions.joiner : \"_\"\r\n\r\n        let newAlias = alias.length === 1 ? alias[0] : alias.join(joiner)\r\n\r\n        if (\r\n            maxAliasLength &&\r\n            maxAliasLength > 0 &&\r\n            newAlias.length > maxAliasLength\r\n        ) {\r\n            if (buildOptions && buildOptions.shorten === true) {\r\n                const shortenedAlias = shorten(newAlias)\r\n                if (shortenedAlias.length < maxAliasLength) {\r\n                    return shortenedAlias\r\n                }\r\n            }\r\n\r\n            return hash(newAlias, { length: maxAliasLength })\r\n        }\r\n\r\n        return newAlias\r\n    }\r\n\r\n    /**\r\n     * @deprecated use `buildAlias` instead.\r\n     */\r\n    static buildColumnAlias(\r\n        { maxAliasLength }: Driver,\r\n        buildOptions: { shorten?: boolean; joiner?: string } | string,\r\n        ...alias: string[]\r\n    ) {\r\n        if (typeof buildOptions === \"string\") {\r\n            alias.unshift(buildOptions)\r\n            buildOptions = { shorten: false, joiner: \"_\" }\r\n        } else {\r\n            buildOptions = Object.assign(\r\n                { shorten: false, joiner: \"_\" },\r\n                buildOptions,\r\n            )\r\n        }\r\n        return this.buildAlias(\r\n            { maxAliasLength } as Driver,\r\n            buildOptions,\r\n            ...alias,\r\n        )\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Extracts connection data from the connection url.\r\n     */\r\n    private static parseConnectionUrl(url: string) {\r\n        const type = url.split(\":\")[0]\r\n        const firstSlashes = url.indexOf(\"//\")\r\n        const preBase = url.substr(firstSlashes + 2)\r\n        const secondSlash = preBase.indexOf(\"/\")\r\n        const base =\r\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\r\n        let afterBase =\r\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\r\n        // remove mongodb query params\r\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\r\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\r\n        }\r\n\r\n        const lastAtSign = base.lastIndexOf(\"@\")\r\n        const usernameAndPassword = base.substr(0, lastAtSign)\r\n        const hostAndPort = base.substr(lastAtSign + 1)\r\n\r\n        let username = usernameAndPassword\r\n        let password = \"\"\r\n        const firstColon = usernameAndPassword.indexOf(\":\")\r\n        if (firstColon !== -1) {\r\n            username = usernameAndPassword.substr(0, firstColon)\r\n            password = usernameAndPassword.substr(firstColon + 1)\r\n        }\r\n        const [host, port] = hostAndPort.split(\":\")\r\n\r\n        return {\r\n            type: type,\r\n            host: host,\r\n            username: decodeURIComponent(username),\r\n            password: decodeURIComponent(password),\r\n            port: port ? parseInt(port) : undefined,\r\n            database: afterBase || undefined,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts connection data from the connection url for MongoDB to support replica set.\r\n     */\r\n    private static parseMongoDBConnectionUrl(url: string) {\r\n        const type = url.split(\":\")[0]\r\n        const firstSlashes = url.indexOf(\"//\")\r\n        const preBase = url.substr(firstSlashes + 2)\r\n        const secondSlash = preBase.indexOf(\"/\")\r\n        const base =\r\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\r\n        let afterBase =\r\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\r\n        let afterQuestionMark = \"\"\r\n        let host = undefined\r\n        let port = undefined\r\n        let hostReplicaSet = undefined\r\n        let replicaSet = undefined\r\n\r\n        let optionsObject: any = {}\r\n\r\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\r\n            // split params\r\n            afterQuestionMark = afterBase.substr(\r\n                afterBase.indexOf(\"?\") + 1,\r\n                afterBase.length,\r\n            )\r\n\r\n            const optionsList = afterQuestionMark.split(\"&\")\r\n            let optionKey: string\r\n            let optionValue: string\r\n\r\n            // create optionsObject for merge with connectionUrl object before return\r\n            optionsList.forEach((optionItem) => {\r\n                optionKey = optionItem.split(\"=\")[0]\r\n                optionValue = optionItem.split(\"=\")[1]\r\n                optionsObject[optionKey] = optionValue\r\n            })\r\n\r\n            // specific replicaSet value to set options about hostReplicaSet\r\n            replicaSet = optionsObject[\"replicaSet\"]\r\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\r\n        }\r\n\r\n        const lastAtSign = base.lastIndexOf(\"@\")\r\n        const usernameAndPassword = base.substr(0, lastAtSign)\r\n        const hostAndPort = base.substr(lastAtSign + 1)\r\n\r\n        let username = usernameAndPassword\r\n        let password = \"\"\r\n        const firstColon = usernameAndPassword.indexOf(\":\")\r\n        if (firstColon !== -1) {\r\n            username = usernameAndPassword.substr(0, firstColon)\r\n            password = usernameAndPassword.substr(firstColon + 1)\r\n        }\r\n\r\n        // If replicaSet have value set It as hostlist, If not set like standalone host\r\n        if (replicaSet) {\r\n            hostReplicaSet = hostAndPort\r\n        } else {\r\n            ;[host, port] = hostAndPort.split(\":\")\r\n        }\r\n\r\n        let connectionUrl: any = {\r\n            type: type,\r\n            host: host,\r\n            hostReplicaSet: hostReplicaSet,\r\n            username: decodeURIComponent(username),\r\n            password: decodeURIComponent(password),\r\n            port: port ? parseInt(port) : undefined,\r\n            database: afterBase || undefined,\r\n        }\r\n\r\n        // Loop to set every options in connectionUrl to object\r\n        for (const [key, value] of Object.entries(optionsObject)) {\r\n            connectionUrl[key] = value\r\n        }\r\n\r\n        return connectionUrl\r\n    }\r\n}\r\n"],"sourceRoot":".."}
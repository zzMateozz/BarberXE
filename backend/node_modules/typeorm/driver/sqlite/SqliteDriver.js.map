{"version":3,"sources":["../../src/driver/sqlite/SqliteDriver.ts"],"names":[],"mappings":"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","file":"SqliteDriver.js","sourcesContent":["import fs from \"fs/promises\"\r\nimport path from \"path\"\r\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\r\nimport { SqliteQueryRunner } from \"./SqliteQueryRunner\"\r\nimport { PlatformTools } from \"../../platform/PlatformTools\"\r\nimport { DataSource } from \"../../data-source/DataSource\"\r\nimport { SqliteConnectionOptions } from \"./SqliteConnectionOptions\"\r\nimport { ColumnType } from \"../types/ColumnTypes\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { filepathToName, isAbsolute } from \"../../util/PathUtils\"\r\n\r\n/**\r\n * Organizes communication with sqlite DBMS.\r\n */\r\nexport class SqliteDriver extends AbstractSqliteDriver {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: SqliteConnectionOptions\r\n\r\n    /**\r\n     * SQLite underlying library.\r\n     */\r\n    sqlite: any\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: DataSource) {\r\n        super(connection)\r\n        this.connection = connection\r\n        this.options = connection.options as SqliteConnectionOptions\r\n        this.database = this.options.database\r\n\r\n        // load sqlite package\r\n        this.loadDependencies()\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.queryRunner = undefined\r\n            this.databaseConnection.close((err: any) =>\r\n                err ? fail(err) : ok(),\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\r\n        if (!this.queryRunner) this.queryRunner = new SqliteQueryRunner(this)\r\n\r\n        return this.queryRunner\r\n    }\r\n\r\n    normalizeType(column: {\r\n        type?: ColumnType\r\n        length?: number | string\r\n        precision?: number | null\r\n        scale?: number\r\n    }): string {\r\n        if ((column.type as any) === Buffer) {\r\n            return \"blob\"\r\n        }\r\n\r\n        return super.normalizeType(column)\r\n    }\r\n\r\n    async afterConnect(): Promise<void> {\r\n        return this.attachDatabases()\r\n    }\r\n\r\n    /**\r\n     * For SQLite, the database may be added in the decorator metadata. It will be a filepath to a database file.\r\n     */\r\n    buildTableName(\r\n        tableName: string,\r\n        _schema?: string,\r\n        database?: string,\r\n    ): string {\r\n        if (!database) return tableName\r\n        if (this.getAttachedDatabaseHandleByRelativePath(database))\r\n            return `${this.getAttachedDatabaseHandleByRelativePath(\r\n                database,\r\n            )}.${tableName}`\r\n\r\n        if (database === this.options.database) return tableName\r\n\r\n        // we use the decorated name as supplied when deriving attach handle (ideally without non-portable absolute path)\r\n        const identifierHash = filepathToName(database)\r\n        // decorated name will be assumed relative to main database file when non absolute. Paths supplied as absolute won't be portable\r\n        const absFilepath = isAbsolute(database)\r\n            ? database\r\n            : path.join(this.getMainDatabasePath(), database)\r\n\r\n        this.attachedDatabases[database] = {\r\n            attachFilepathAbsolute: absFilepath,\r\n            attachFilepathRelative: database,\r\n            attachHandle: identifierHash,\r\n        }\r\n\r\n        return `${identifierHash}.${tableName}`\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     */\r\n    protected async createDatabaseConnection() {\r\n        if (\r\n            this.options.flags === undefined ||\r\n            !(this.options.flags & this.sqlite.OPEN_URI)\r\n        ) {\r\n            await this.createDatabaseDirectory(this.options.database)\r\n        }\r\n\r\n        const databaseConnection: any = await new Promise((ok, fail) => {\r\n            if (this.options.flags === undefined) {\r\n                const connection = new this.sqlite.Database(\r\n                    this.options.database,\r\n                    (err: any) => {\r\n                        if (err) return fail(err)\r\n                        ok(connection)\r\n                    },\r\n                )\r\n            } else {\r\n                const connection = new this.sqlite.Database(\r\n                    this.options.database,\r\n                    this.options.flags,\r\n                    (err: any) => {\r\n                        if (err) return fail(err)\r\n                        ok(connection)\r\n                    },\r\n                )\r\n            }\r\n        })\r\n\r\n        // Internal function to run a command on the connection and fail if an error occured.\r\n        function run(line: string): Promise<void> {\r\n            return new Promise((ok, fail) => {\r\n                databaseConnection.run(line, (err: any) => {\r\n                    if (err) return fail(err)\r\n                    ok()\r\n                })\r\n            })\r\n        }\r\n        // in the options, if encryption key for SQLCipher is setted.\r\n        // Must invoke key pragma before trying to do any other interaction with the database.\r\n        if (this.options.key) {\r\n            await run(`PRAGMA key = ${JSON.stringify(this.options.key)}`)\r\n        }\r\n\r\n        if (this.options.enableWAL) {\r\n            await run(`PRAGMA journal_mode = WAL`)\r\n        }\r\n\r\n        if (\r\n            this.options.busyTimeout &&\r\n            typeof this.options.busyTimeout === \"number\" &&\r\n            this.options.busyTimeout > 0\r\n        ) {\r\n            await run(`PRAGMA busy_timeout = ${this.options.busyTimeout}`)\r\n        }\r\n\r\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n        // working properly. this also makes onDelete to work with sqlite.\r\n        await run(`PRAGMA foreign_keys = ON`)\r\n\r\n        return databaseConnection\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            const sqlite = this.options.driver || PlatformTools.load(\"sqlite3\")\r\n            this.sqlite = sqlite.verbose()\r\n        } catch (e) {\r\n            throw new DriverPackageNotInstalledError(\"SQLite\", \"sqlite3\")\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Auto creates database directory if it does not exist.\r\n     */\r\n    protected async createDatabaseDirectory(fullPath: string): Promise<void> {\r\n        await fs.mkdir(path.dirname(fullPath), { recursive: true })\r\n    }\r\n\r\n    /**\r\n     * Performs the attaching of the database files. The attachedDatabase should have been populated during calls to #buildTableName\r\n     * during EntityMetadata production (see EntityMetadata#buildTablePath)\r\n     *\r\n     * https://sqlite.org/lang_attach.html\r\n     */\r\n    protected async attachDatabases() {\r\n        // @todo - possibly check number of databases (but unqueriable at runtime sadly) - https://www.sqlite.org/limits.html#max_attached\r\n        for await (const {\r\n            attachHandle,\r\n            attachFilepathAbsolute,\r\n        } of Object.values(this.attachedDatabases)) {\r\n            await this.createDatabaseDirectory(attachFilepathAbsolute)\r\n            await this.connection.query(\r\n                `ATTACH \"${attachFilepathAbsolute}\" AS \"${attachHandle}\"`,\r\n            )\r\n        }\r\n    }\r\n\r\n    protected getMainDatabasePath(): string {\r\n        const optionsDb = this.options.database\r\n        return path.dirname(\r\n            isAbsolute(optionsDb)\r\n                ? optionsDb\r\n                : path.join(process.cwd(), optionsDb),\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
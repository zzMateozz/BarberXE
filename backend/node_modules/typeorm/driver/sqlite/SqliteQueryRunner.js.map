{"version":3,"sources":["../../src/driver/sqlite/SqliteQueryRunner.ts"],"names":[],"mappings":"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","file":"SqliteQueryRunner.js","sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\r\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\r\nimport { SqliteConnectionOptions } from \"./SqliteConnectionOptions\"\r\nimport { SqliteDriver } from \"./SqliteDriver\"\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\r\nimport { ConnectionIsNotSetError } from \"../../error/ConnectionIsNotSetError\"\r\nimport { QueryResult } from \"../../query-runner/QueryResult\"\r\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n *\r\n * Does not support compose primary keys with autoincrement field.\r\n * todo: need to throw exception for this case.\r\n */\r\nexport class SqliteQueryRunner extends AbstractSqliteQueryRunner {\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: SqliteDriver\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: SqliteDriver) {\r\n        super()\r\n        this.driver = driver\r\n        this.connection = driver.connection\r\n        this.broadcaster = new Broadcaster(this)\r\n    }\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = OFF`)\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = ON`)\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(\r\n        query: string,\r\n        parameters?: any[],\r\n        useStructuredResult = false,\r\n    ): Promise<any> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        const connection = this.driver.connection\r\n        const options = connection.options as SqliteConnectionOptions\r\n        const maxQueryExecutionTime = this.driver.options.maxQueryExecutionTime\r\n        const broadcasterResult = new BroadcasterResult()\r\n        const broadcaster = this.broadcaster\r\n\r\n        broadcaster.broadcastBeforeQueryEvent(\r\n            broadcasterResult,\r\n            query,\r\n            parameters,\r\n        )\r\n\r\n        if (!connection.isInitialized) {\r\n            throw new ConnectionIsNotSetError(\"sqlite\")\r\n        }\r\n\r\n        return new Promise(async (ok, fail) => {\r\n            try {\r\n                const databaseConnection = await this.connect()\r\n                this.driver.connection.logger.logQuery(query, parameters, this)\r\n                const queryStartTime = +new Date()\r\n                const isInsertQuery = query.startsWith(\"INSERT \")\r\n                const isDeleteQuery = query.startsWith(\"DELETE \")\r\n                const isUpdateQuery = query.startsWith(\"UPDATE \")\r\n\r\n                const execute = async () => {\r\n                    if (isInsertQuery || isDeleteQuery || isUpdateQuery) {\r\n                        await databaseConnection.run(query, parameters, handler)\r\n                    } else {\r\n                        await databaseConnection.all(query, parameters, handler)\r\n                    }\r\n                }\r\n\r\n                const self = this\r\n                const handler = function (this: any, err: any, rows: any) {\r\n                    if (err && err.toString().indexOf(\"SQLITE_BUSY:\") !== -1) {\r\n                        if (\r\n                            typeof options.busyErrorRetry === \"number\" &&\r\n                            options.busyErrorRetry > 0\r\n                        ) {\r\n                            setTimeout(execute, options.busyErrorRetry)\r\n                            return\r\n                        }\r\n                    }\r\n\r\n                    // log slow queries if maxQueryExecution time is set\r\n                    const queryEndTime = +new Date()\r\n                    const queryExecutionTime = queryEndTime - queryStartTime\r\n                    if (\r\n                        maxQueryExecutionTime &&\r\n                        queryExecutionTime > maxQueryExecutionTime\r\n                    )\r\n                        connection.logger.logQuerySlow(\r\n                            queryExecutionTime,\r\n                            query,\r\n                            parameters,\r\n                            self,\r\n                        )\r\n\r\n                    if (err) {\r\n                        connection.logger.logQueryError(\r\n                            err,\r\n                            query,\r\n                            parameters,\r\n                            self,\r\n                        )\r\n                        broadcaster.broadcastAfterQueryEvent(\r\n                            broadcasterResult,\r\n                            query,\r\n                            parameters,\r\n                            false,\r\n                            undefined,\r\n                            undefined,\r\n                            err,\r\n                        )\r\n\r\n                        return fail(\r\n                            new QueryFailedError(query, parameters, err),\r\n                        )\r\n                    } else {\r\n                        const result = new QueryResult()\r\n\r\n                        if (isInsertQuery) {\r\n                            result.raw = this[\"lastID\"]\r\n                        } else {\r\n                            result.raw = rows\r\n                        }\r\n\r\n                        broadcaster.broadcastAfterQueryEvent(\r\n                            broadcasterResult,\r\n                            query,\r\n                            parameters,\r\n                            true,\r\n                            queryExecutionTime,\r\n                            result.raw,\r\n                            undefined,\r\n                        )\r\n\r\n                        if (Array.isArray(rows)) {\r\n                            result.records = rows\r\n                        }\r\n\r\n                        result.affected = this[\"changes\"]\r\n\r\n                        if (useStructuredResult) {\r\n                            ok(result)\r\n                        } else {\r\n                            ok(result.raw)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                await execute()\r\n            } catch (err) {\r\n                fail(err)\r\n            } finally {\r\n                await broadcasterResult.wait()\r\n            }\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
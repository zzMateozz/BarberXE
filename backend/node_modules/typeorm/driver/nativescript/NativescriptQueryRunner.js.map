{"version":3,"sources":["../../src/driver/nativescript/NativescriptQueryRunner.ts"],"names":[],"mappings":"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","file":"NativescriptQueryRunner.js","sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\r\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\r\nimport { NativescriptDriver } from \"./NativescriptDriver\"\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\r\nimport { QueryResult } from \"../../query-runner/QueryResult\"\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n */\r\nexport class NativescriptQueryRunner extends AbstractSqliteQueryRunner {\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: NativescriptDriver\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: NativescriptDriver) {\r\n        super()\r\n        this.driver = driver\r\n        this.connection = driver.connection\r\n        this.broadcaster = new Broadcaster(this)\r\n    }\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = OFF`)\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = ON`)\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(\r\n        query: string,\r\n        parameters?: any[],\r\n        useStructuredResult = false,\r\n    ): Promise<any> {\r\n        if (this.isReleased) {\r\n            throw new QueryRunnerAlreadyReleasedError()\r\n        }\r\n\r\n        const connection = this.driver.connection\r\n\r\n        return new Promise(async (ok, fail) => {\r\n            const databaseConnection = await this.connect()\r\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\"\r\n            connection.logger.logQuery(query, parameters, this)\r\n\r\n            const handler = (err: any, raw: any) => {\r\n                // log slow queries if maxQueryExecution time is set\r\n                const maxQueryExecutionTime =\r\n                    this.driver.options.maxQueryExecutionTime\r\n                const queryEndTime = +new Date()\r\n                const queryExecutionTime = queryEndTime - queryStartTime\r\n\r\n                if (\r\n                    maxQueryExecutionTime &&\r\n                    queryExecutionTime > maxQueryExecutionTime\r\n                ) {\r\n                    connection.logger.logQuerySlow(\r\n                        queryExecutionTime,\r\n                        query,\r\n                        parameters,\r\n                        this,\r\n                    )\r\n                }\r\n\r\n                if (err) {\r\n                    connection.logger.logQueryError(\r\n                        err,\r\n                        query,\r\n                        parameters,\r\n                        this,\r\n                    )\r\n                    fail(new QueryFailedError(query, parameters, err))\r\n                }\r\n\r\n                const result = new QueryResult()\r\n                result.raw = raw\r\n\r\n                if (!isInsertQuery && Array.isArray(raw)) {\r\n                    result.records = raw\r\n                }\r\n\r\n                if (useStructuredResult) {\r\n                    ok(result)\r\n                } else {\r\n                    ok(result.raw)\r\n                }\r\n            }\r\n            const queryStartTime = +new Date()\r\n\r\n            if (isInsertQuery) {\r\n                databaseConnection.execSQL(query, parameters, handler)\r\n            } else {\r\n                databaseConnection.all(query, parameters, handler)\r\n            }\r\n        })\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(\r\n        objectLiteral: ObjectLiteral,\r\n        startIndex: number = 0,\r\n    ): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\")\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/driver/nativescript/NativescriptDriver.ts"],"names":[],"mappings":"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","file":"NativescriptDriver.js","sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\r\nimport { NativescriptConnectionOptions } from \"./NativescriptConnectionOptions\"\r\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { DataSource } from \"../../data-source/DataSource\"\r\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\r\nimport { ColumnType } from \"../types/ColumnTypes\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\n\r\n/**\r\n * Organizes communication with sqlite DBMS within Nativescript.\r\n */\r\nexport class NativescriptDriver extends AbstractSqliteDriver {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: NativescriptConnectionOptions\r\n\r\n    /**\r\n     * Nativescript driver module\r\n     * this is most likely `nativescript-sqlite`\r\n     * but user can pass his own\r\n     */\r\n    driver: any\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: DataSource) {\r\n        super(connection)\r\n\r\n        this.connection = connection\r\n        this.options = connection.options as NativescriptConnectionOptions\r\n        this.database = this.options.database\r\n        this.driver = this.options.driver\r\n\r\n        // load sqlite package\r\n        this.loadDependencies()\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        return new Promise<void>((ok, fail) => {\r\n            this.queryRunner = undefined\r\n            this.databaseConnection.close().then(ok).catch(fail)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\r\n        if (!this.queryRunner) {\r\n            this.queryRunner = new NativescriptQueryRunner(this)\r\n        }\r\n\r\n        return this.queryRunner\r\n    }\r\n\r\n    normalizeType(column: {\r\n        type?: ColumnType\r\n        length?: number | string\r\n        precision?: number | null\r\n        scale?: number\r\n    }): string {\r\n        if ((column.type as any) === Buffer) {\r\n            return \"blob\"\r\n        }\r\n\r\n        return super.normalizeType(column)\r\n    }\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     */\r\n    protected createDatabaseConnection() {\r\n        return new Promise<void>((ok, fail) => {\r\n            const options = Object.assign(\r\n                {},\r\n                {\r\n                    readOnly: this.options.readOnly,\r\n                    key: this.options.key,\r\n                    multithreading: this.options.multithreading,\r\n                    migrate: this.options.migrate,\r\n                    iosFlags: this.options.iosFlags,\r\n                    androidFlags: this.options.androidFlags,\r\n                },\r\n                this.options.extra || {},\r\n            )\r\n\r\n            new this.sqlite(\r\n                this.options.database,\r\n                options,\r\n                (err: Error, db: any): any => {\r\n                    if (err) return fail(err)\r\n\r\n                    // use object mode to work with TypeORM\r\n                    db.resultType(this.sqlite.RESULTSASOBJECT)\r\n\r\n                    // we need to enable foreign keys in sqlite to make sure all foreign key related features\r\n                    // working properly. this also makes onDelete work with sqlite.\r\n                    db.execSQL(\r\n                        `PRAGMA foreign_keys = ON`,\r\n                        [],\r\n                        (err: Error, result: any): any => {\r\n                            if (err) return fail(err)\r\n                            // We are all set\r\n                            ok(db)\r\n                        },\r\n                    )\r\n                },\r\n            )\r\n        })\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        this.sqlite = this.driver\r\n        if (!this.driver) {\r\n            throw new DriverPackageNotInstalledError(\r\n                \"Nativescript\",\r\n                \"nativescript-sqlite\",\r\n            )\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
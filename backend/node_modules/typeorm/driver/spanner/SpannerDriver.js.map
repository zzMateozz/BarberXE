{"version":3,"sources":["../../src/driver/spanner/SpannerDriver.ts"],"names":[],"mappings":"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","file":"SpannerDriver.js","sourcesContent":["import { Driver, ReturningType } from \"../Driver\"\r\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\r\nimport { SpannerQueryRunner } from \"./SpannerQueryRunner\"\r\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\r\nimport { DateUtils } from \"../../util/DateUtils\"\r\nimport { PlatformTools } from \"../../platform/PlatformTools\"\r\nimport { Connection } from \"../../connection/Connection\"\r\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\r\nimport { SpannerConnectionOptions } from \"./SpannerConnectionOptions\"\r\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\r\nimport { ColumnType } from \"../types/ColumnTypes\"\r\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\r\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\r\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\r\nimport { OrmUtils } from \"../../util/OrmUtils\"\r\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { Table } from \"../../schema-builder/table/Table\"\r\nimport { View } from \"../../schema-builder/view/View\"\r\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\r\nimport { CteCapabilities } from \"../types/CteCapabilities\"\r\nimport { UpsertType } from \"../types/UpsertType\"\r\n\r\n/**\r\n * Organizes communication with Spanner DBMS.\r\n */\r\nexport class SpannerDriver implements Driver {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by driver.\r\n     */\r\n    connection: Connection\r\n\r\n    /**\r\n     * Cloud Spanner underlying library.\r\n     */\r\n    spanner: any\r\n\r\n    /**\r\n     * Cloud Spanner instance.\r\n     */\r\n    instance: any\r\n\r\n    /**\r\n     * Cloud Spanner database.\r\n     */\r\n    instanceDatabase: any\r\n\r\n    /**\r\n     * Database name.\r\n     */\r\n    database?: string\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: SpannerConnectionOptions\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean = false\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport = true\r\n\r\n    /**\r\n     * Represent transaction support by this driver\r\n     */\r\n    transactionSupport = \"none\" as const\r\n\r\n    /**\r\n     * Gets list of supported column data types by a driver.\r\n     *\r\n     * @see https://cloud.google.com/spanner/docs/reference/standard-sql/data-types\r\n     */\r\n    supportedDataTypes: ColumnType[] = [\r\n        \"bool\",\r\n        \"int64\",\r\n        \"float64\",\r\n        \"numeric\",\r\n        \"string\",\r\n        \"json\",\r\n        \"bytes\",\r\n        \"date\",\r\n        \"timestamp\",\r\n        \"array\",\r\n    ]\r\n\r\n    /**\r\n     * Returns type of upsert supported by driver if any\r\n     */\r\n    supportedUpsertTypes: UpsertType[] = []\r\n\r\n    /**\r\n     * Gets list of spatial column data types.\r\n     */\r\n    spatialTypes: ColumnType[] = []\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[] = [\"string\", \"bytes\"]\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withWidthColumnTypes: ColumnType[] = []\r\n\r\n    /**\r\n     * Gets list of column data types that support precision by a driver.\r\n     */\r\n    withPrecisionColumnTypes: ColumnType[] = []\r\n\r\n    /**\r\n     * Gets list of column data types that supports scale by a driver.\r\n     */\r\n    withScaleColumnTypes: ColumnType[] = []\r\n\r\n    /**\r\n     * ORM has special columns and we need to know what database column types should be for those columns.\r\n     * Column types are driver dependant.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"timestamp\",\r\n        createDateDefault: \"\",\r\n        updateDate: \"timestamp\",\r\n        updateDateDefault: \"\",\r\n        deleteDate: \"timestamp\",\r\n        deleteDateNullable: true,\r\n        version: \"int64\",\r\n        treeLevel: \"int64\",\r\n        migrationId: \"int64\",\r\n        migrationName: \"string\",\r\n        migrationTimestamp: \"int64\",\r\n        cacheId: \"string\",\r\n        cacheIdentifier: \"string\",\r\n        cacheTime: \"int64\",\r\n        cacheDuration: \"int64\",\r\n        cacheQuery: \"string\",\r\n        cacheResult: \"string\",\r\n        metadataType: \"string\",\r\n        metadataDatabase: \"string\",\r\n        metadataSchema: \"string\",\r\n        metadataTable: \"string\",\r\n        metadataName: \"string\",\r\n        metadataValue: \"string\",\r\n    }\r\n\r\n    /**\r\n     * The prefix used for the parameters\r\n     */\r\n    parametersPrefix: string = \"@param\"\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults = {}\r\n\r\n    /**\r\n     * Max length allowed by MySQL for aliases.\r\n     * @see https://dev.mysql.com/doc/refman/5.5/en/identifiers.html\r\n     */\r\n    maxAliasLength = 63\r\n\r\n    cteCapabilities: CteCapabilities = {\r\n        enabled: true,\r\n    }\r\n\r\n    /**\r\n     * Supported returning types\r\n     */\r\n    private readonly _isReturningSqlSupported: Record<ReturningType, boolean> =\r\n        {\r\n            delete: false,\r\n            insert: false,\r\n            update: false,\r\n        }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        this.connection = connection\r\n        this.options = connection.options as SpannerConnectionOptions\r\n        this.isReplicated = this.options.replication ? true : false\r\n\r\n        // load mysql package\r\n        this.loadDependencies()\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<void> {\r\n        this.instance = this.spanner.instance(this.options.instanceId)\r\n        this.instanceDatabase = this.instance.database(this.options.databaseId)\r\n    }\r\n\r\n    /**\r\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\r\n     */\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve()\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        this.instanceDatabase.close()\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build and sync a schema.\r\n     */\r\n    createSchemaBuilder() {\r\n        return new RdbmsSchemaBuilder(this.connection)\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode) {\r\n        return new SpannerQueryRunner(this, mode)\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(\r\n        sql: string,\r\n        parameters: ObjectLiteral,\r\n        nativeParameters: ObjectLiteral,\r\n    ): [string, any[]] {\r\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\r\n            (key) => nativeParameters[key],\r\n        )\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, escapedParameters]\r\n\r\n        const parameterIndexMap = new Map<string, number>()\r\n        sql = sql.replace(\r\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\r\n            (full, isArray: string, key: string): string => {\r\n                if (!parameters.hasOwnProperty(key)) {\r\n                    return full\r\n                }\r\n\r\n                if (parameterIndexMap.has(key)) {\r\n                    return this.parametersPrefix + parameterIndexMap.get(key)\r\n                }\r\n\r\n                let value: any = parameters[key]\r\n\r\n                if (value === null) {\r\n                    return full\r\n                }\r\n\r\n                if (isArray) {\r\n                    return value\r\n                        .map((v: any) => {\r\n                            escapedParameters.push(v)\r\n                            return this.createParameter(\r\n                                key,\r\n                                escapedParameters.length - 1,\r\n                            )\r\n                        })\r\n                        .join(\", \")\r\n                }\r\n\r\n                if (value instanceof Function) {\r\n                    return value()\r\n                }\r\n\r\n                escapedParameters.push(value)\r\n                parameterIndexMap.set(key, escapedParameters.length - 1)\r\n                return this.createParameter(key, escapedParameters.length - 1)\r\n            },\r\n        ) // todo: make replace only in value statements, otherwise problems\r\n\r\n        sql = sql.replace(\r\n            /([ ]+)?=([ ]+)?:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\r\n            (\r\n                full,\r\n                emptySpaceBefore: string,\r\n                emptySpaceAfter: string,\r\n                isArray: string,\r\n                key: string,\r\n            ): string => {\r\n                if (!parameters.hasOwnProperty(key)) {\r\n                    return full\r\n                }\r\n\r\n                let value: any = parameters[key]\r\n                if (value === null) {\r\n                    return \" IS NULL\"\r\n                }\r\n\r\n                return full\r\n            },\r\n        )\r\n        return [sql, escapedParameters]\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return `\\`${columnName}\\``\r\n    }\r\n\r\n    /**\r\n     * Build full table name with database name, schema name and table name.\r\n     * E.g. myDB.mySchema.myTable\r\n     */\r\n    buildTableName(\r\n        tableName: string,\r\n        schema?: string,\r\n        database?: string,\r\n    ): string {\r\n        let tablePath = [tableName]\r\n\r\n        if (database) {\r\n            tablePath.unshift(database)\r\n        }\r\n\r\n        return tablePath.join(\".\")\r\n    }\r\n\r\n    /**\r\n     * Parse a target table name or other types and return a normalized table definition.\r\n     */\r\n    parseTableName(\r\n        target: EntityMetadata | Table | View | TableForeignKey | string,\r\n    ): { database?: string; schema?: string; tableName: string } {\r\n        const driverDatabase = this.database\r\n        const driverSchema = undefined\r\n\r\n        if (target instanceof Table || target instanceof View) {\r\n            const parsed = this.parseTableName(target.name)\r\n\r\n            return {\r\n                database: target.database || parsed.database || driverDatabase,\r\n                schema: target.schema || parsed.schema || driverSchema,\r\n                tableName: parsed.tableName,\r\n            }\r\n        }\r\n\r\n        if (target instanceof TableForeignKey) {\r\n            const parsed = this.parseTableName(target.referencedTableName)\r\n\r\n            return {\r\n                database:\r\n                    target.referencedDatabase ||\r\n                    parsed.database ||\r\n                    driverDatabase,\r\n                schema:\r\n                    target.referencedSchema || parsed.schema || driverSchema,\r\n                tableName: parsed.tableName,\r\n            }\r\n        }\r\n\r\n        if (target instanceof EntityMetadata) {\r\n            // EntityMetadata tableName is never a path\r\n\r\n            return {\r\n                database: target.database || driverDatabase,\r\n                schema: target.schema || driverSchema,\r\n                tableName: target.tableName,\r\n            }\r\n        }\r\n\r\n        const parts = target.split(\".\")\r\n\r\n        return {\r\n            database:\r\n                (parts.length > 1 ? parts[0] : undefined) || driverDatabase,\r\n            schema: driverSchema,\r\n            tableName: parts.length > 1 ? parts[1] : parts[0],\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformTo(\r\n                columnMetadata.transformer,\r\n                value,\r\n            )\r\n\r\n        if (value === null || value === undefined) return value\r\n\r\n        if (columnMetadata.type === \"numeric\") {\r\n            const lib = this.options.driver || PlatformTools.load(\"spanner\")\r\n            return lib.Spanner.numeric(value)\r\n        } else if (columnMetadata.type === \"date\") {\r\n            return DateUtils.mixedDateToDateString(value)\r\n        } else if (columnMetadata.type === \"json\") {\r\n            return value\r\n        } else if (\r\n            columnMetadata.type === \"timestamp\" ||\r\n            columnMetadata.type === Date\r\n        ) {\r\n            return DateUtils.mixedDateToDate(value)\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return columnMetadata.transformer\r\n                ? ApplyValueTransformers.transformFrom(\r\n                      columnMetadata.transformer,\r\n                      value,\r\n                  )\r\n                : value\r\n\r\n        if (columnMetadata.type === Boolean || columnMetadata.type === \"bool\") {\r\n            value = value ? true : false\r\n        } else if (\r\n            columnMetadata.type === \"timestamp\" ||\r\n            columnMetadata.type === Date\r\n        ) {\r\n            value = new Date(value)\r\n        } else if (columnMetadata.type === \"numeric\") {\r\n            value = value.value\r\n        } else if (columnMetadata.type === \"date\") {\r\n            value = DateUtils.mixedDateToDateString(value)\r\n        } else if (columnMetadata.type === \"json\") {\r\n            value = typeof value === \"string\" ? JSON.parse(value) : value\r\n        } else if (columnMetadata.type === Number) {\r\n            // convert to number if number\r\n            value = !isNaN(+value) ? parseInt(value) : value\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformFrom(\r\n                columnMetadata.transformer,\r\n                value,\r\n            )\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(column: {\r\n        type: ColumnType\r\n        length?: number | string\r\n        precision?: number | null\r\n        scale?: number\r\n    }): string {\r\n        if (column.type === Number) {\r\n            return \"int64\"\r\n        } else if (column.type === String || column.type === \"uuid\") {\r\n            return \"string\"\r\n        } else if (column.type === Date) {\r\n            return \"timestamp\"\r\n        } else if ((column.type as any) === Buffer) {\r\n            return \"bytes\"\r\n        } else if (column.type === Boolean) {\r\n            return \"bool\"\r\n        } else {\r\n            return (column.type as string) || \"\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     *\r\n     * Spanner does not support default values.\r\n     */\r\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\r\n        return columnMetadata.default === \"\"\r\n            ? `\"${columnMetadata.default}\"`\r\n            : `${columnMetadata.default}`\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        return column.entityMetadata.indices.some(\r\n            (idx) =>\r\n                idx.isUnique &&\r\n                idx.columns.length === 1 &&\r\n                idx.columns[0] === column,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns default column lengths, which is required on column creation.\r\n     */\r\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\r\n        if (column.length) return column.length.toString()\r\n        if (column.generationStrategy === \"uuid\") return \"36\"\r\n\r\n        switch (column.type) {\r\n            case String:\r\n            case \"string\":\r\n            case \"bytes\":\r\n                return \"max\"\r\n            default:\r\n                return \"\"\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates column type definition including length, precision and scale\r\n     */\r\n    createFullType(column: TableColumn): string {\r\n        let type = column.type\r\n\r\n        // used 'getColumnLength()' method, because Spanner requires column length for `string` and `bytes` data types\r\n        if (this.getColumnLength(column)) {\r\n            type += `(${this.getColumnLength(column)})`\r\n        } else if (column.width) {\r\n            type += `(${column.width})`\r\n        } else if (\r\n            column.precision !== null &&\r\n            column.precision !== undefined &&\r\n            column.scale !== null &&\r\n            column.scale !== undefined\r\n        ) {\r\n            type += `(${column.precision},${column.scale})`\r\n        } else if (\r\n            column.precision !== null &&\r\n            column.precision !== undefined\r\n        ) {\r\n            type += `(${column.precision})`\r\n        }\r\n\r\n        if (column.isArray) type = `array<${type}>`\r\n\r\n        return type\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any> {\r\n        return this.instanceDatabase\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any> {\r\n        return this.instanceDatabase\r\n    }\r\n\r\n    /**\r\n     * Creates generated map of values generated or returned by database after INSERT query.\r\n     */\r\n    createGeneratedMap(\r\n        metadata: EntityMetadata,\r\n        insertResult: any,\r\n        entityIndex: number,\r\n    ) {\r\n        if (!insertResult) {\r\n            return undefined\r\n        }\r\n\r\n        if (insertResult.insertId === undefined) {\r\n            return Object.keys(insertResult).reduce((map, key) => {\r\n                const column = metadata.findColumnWithDatabaseName(key)\r\n                if (column) {\r\n                    OrmUtils.mergeDeep(\r\n                        map,\r\n                        column.createValueMap(insertResult[key]),\r\n                    )\r\n                    // OrmUtils.mergeDeep(map, column.createValueMap(this.prepareHydratedValue(insertResult[key], column))); // TODO: probably should be like there, but fails on enums, fix later\r\n                }\r\n                return map\r\n            }, {} as ObjectLiteral)\r\n        }\r\n\r\n        const generatedMap = metadata.generatedColumns.reduce(\r\n            (map, generatedColumn) => {\r\n                let value: any\r\n                if (\r\n                    generatedColumn.generationStrategy === \"increment\" &&\r\n                    insertResult.insertId\r\n                ) {\r\n                    // NOTE: When multiple rows is inserted by a single INSERT statement,\r\n                    // `insertId` is the value generated for the first inserted row only.\r\n                    value = insertResult.insertId + entityIndex\r\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\r\n                    //     console.log(\"getting db value:\", generatedColumn.databaseName);\r\n                    //     value = generatedColumn.getEntityValue(uuidMap);\r\n                }\r\n\r\n                return OrmUtils.mergeDeep(\r\n                    map,\r\n                    generatedColumn.createValueMap(value),\r\n                )\r\n            },\r\n            {} as ObjectLiteral,\r\n        )\r\n\r\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(\r\n        tableColumns: TableColumn[],\r\n        columnMetadatas: ColumnMetadata[],\r\n    ): ColumnMetadata[] {\r\n        return columnMetadatas.filter((columnMetadata) => {\r\n            const tableColumn = tableColumns.find(\r\n                (c) => c.name === columnMetadata.databaseName,\r\n            )\r\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\r\n\r\n            const isColumnChanged =\r\n                tableColumn.name !== columnMetadata.databaseName ||\r\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\r\n                tableColumn.length !== this.getColumnLength(columnMetadata) ||\r\n                tableColumn.asExpression !== columnMetadata.asExpression ||\r\n                tableColumn.generatedType !== columnMetadata.generatedType ||\r\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\r\n                !this.compareNullableValues(columnMetadata, tableColumn) ||\r\n                tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\r\n\r\n            // DEBUG SECTION\r\n            // if (isColumnChanged) {\r\n            //     console.log(\"table:\", columnMetadata.entityMetadata.tableName)\r\n            //     console.log(\r\n            //         \"name:\",\r\n            //         tableColumn.name,\r\n            //         columnMetadata.databaseName,\r\n            //     )\r\n            //     console.log(\r\n            //         \"type:\",\r\n            //         tableColumn.type,\r\n            //         this.normalizeType(columnMetadata),\r\n            //     )\r\n            //     console.log(\r\n            //         \"length:\",\r\n            //         tableColumn.length,\r\n            //         this.getColumnLength(columnMetadata),\r\n            //     )\r\n            //     console.log(\r\n            //         \"asExpression:\",\r\n            //         tableColumn.asExpression,\r\n            //         columnMetadata.asExpression,\r\n            //     )\r\n            //     console.log(\r\n            //         \"generatedType:\",\r\n            //         tableColumn.generatedType,\r\n            //         columnMetadata.generatedType,\r\n            //     )\r\n            //     console.log(\r\n            //         \"isPrimary:\",\r\n            //         tableColumn.isPrimary,\r\n            //         columnMetadata.isPrimary,\r\n            //     )\r\n            //     console.log(\r\n            //         \"isNullable:\",\r\n            //         tableColumn.isNullable,\r\n            //         columnMetadata.isNullable,\r\n            //     )\r\n            //     console.log(\r\n            //         \"isUnique:\",\r\n            //         tableColumn.isUnique,\r\n            //         this.normalizeIsUnique(columnMetadata),\r\n            //     )\r\n            //     console.log(\"==========================================\")\r\n            // }\r\n\r\n            return isColumnChanged\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports RETURNING / OUTPUT statement.\r\n     */\r\n    isReturningSqlSupported(returningType: ReturningType): boolean {\r\n        return this._isReturningSqlSupported[returningType]\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports uuid values generation on its own.\r\n     */\r\n    isUUIDGenerationSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports fulltext indices.\r\n     */\r\n    isFullTextColumnTypeSupported(): boolean {\r\n        return false\r\n    }\r\n\r\n    /**\r\n     * Creates an escaped parameter.\r\n     */\r\n    createParameter(parameterName: string, index: number): string {\r\n        return this.parametersPrefix + index\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Loads all driver dependencies.\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            const lib = this.options.driver || PlatformTools.load(\"spanner\")\r\n            this.spanner = new lib.Spanner({\r\n                projectId: this.options.projectId,\r\n            })\r\n        } catch (e) {\r\n            console.error(e)\r\n            throw new DriverPackageNotInstalledError(\r\n                \"Spanner\",\r\n                \"@google-cloud/spanner\",\r\n            )\r\n        }\r\n    }\r\n\r\n    compareNullableValues(\r\n        columnMetadata: ColumnMetadata,\r\n        tableColumn: TableColumn,\r\n    ): boolean {\r\n        // Spanner does not support NULL/NOT NULL expressions for generated columns\r\n        if (columnMetadata.generatedType) {\r\n            return true\r\n        }\r\n\r\n        return columnMetadata.isNullable === tableColumn.isNullable\r\n    }\r\n\r\n    /**\r\n     * Checks if \"DEFAULT\" values in the column metadata and in the database are equal.\r\n     */\r\n    protected compareDefaultValues(\r\n        columnMetadataValue: string | undefined,\r\n        databaseValue: string | undefined,\r\n    ): boolean {\r\n        if (\r\n            typeof columnMetadataValue === \"string\" &&\r\n            typeof databaseValue === \"string\"\r\n        ) {\r\n            // we need to cut out \"'\" because in mysql we can understand returned value is a string or a function\r\n            // as result compare cannot understand if default is really changed or not\r\n            columnMetadataValue = columnMetadataValue.replace(/^'+|'+$/g, \"\")\r\n            databaseValue = databaseValue.replace(/^'+|'+$/g, \"\")\r\n        }\r\n\r\n        return columnMetadataValue === databaseValue\r\n    }\r\n\r\n    /**\r\n     * If parameter is a datetime function, e.g. \"CURRENT_TIMESTAMP\", normalizes it.\r\n     * Otherwise returns original input.\r\n     */\r\n    protected normalizeDatetimeFunction(value?: string) {\r\n        if (!value) return value\r\n\r\n        // check if input is datetime function\r\n        const isDatetimeFunction =\r\n            value.toUpperCase().indexOf(\"CURRENT_TIMESTAMP\") !== -1 ||\r\n            value.toUpperCase().indexOf(\"NOW\") !== -1\r\n\r\n        if (isDatetimeFunction) {\r\n            // extract precision, e.g. \"(3)\"\r\n            const precision = value.match(/\\(\\d+\\)/)\r\n            return precision\r\n                ? `CURRENT_TIMESTAMP${precision[0]}`\r\n                : \"CURRENT_TIMESTAMP\"\r\n        } else {\r\n            return value\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Escapes a given comment.\r\n     */\r\n    protected escapeComment(comment?: string) {\r\n        if (!comment) return comment\r\n\r\n        comment = comment.replace(/\\u0000/g, \"\") // Null bytes aren't allowed in comments\r\n\r\n        return comment\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
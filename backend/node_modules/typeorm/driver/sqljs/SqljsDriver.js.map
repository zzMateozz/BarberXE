{"version":3,"sources":["../../src/driver/sqljs/SqljsDriver.ts"],"names":[],"mappings":"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","file":"SqljsDriver.js","sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\"\r\nimport { SqljsConnectionOptions } from \"./SqljsConnectionOptions\"\r\nimport { SqljsQueryRunner } from \"./SqljsQueryRunner\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { DataSource } from \"../../data-source/DataSource\"\r\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\r\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\"\r\nimport { PlatformTools } from \"../../platform/PlatformTools\"\r\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\r\nimport { OrmUtils } from \"../../util/OrmUtils\"\r\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { ReplicationMode } from \"../types/ReplicationMode\"\r\nimport { TypeORMError } from \"../../error\"\r\n\r\n// This is needed to satisfy the typescript compiler.\r\ninterface Window {\r\n    SQL: any\r\n    localforage: any\r\n}\r\ndeclare let window: Window\r\n\r\nexport class SqljsDriver extends AbstractSqliteDriver {\r\n    // The driver specific options.\r\n    options: SqljsConnectionOptions\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: DataSource) {\r\n        super(connection)\r\n\r\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\r\n        // because either autoSave saves to location or calls autoSaveCallback.\r\n        if (\r\n            this.options.autoSave &&\r\n            !this.options.location &&\r\n            !this.options.autoSaveCallback\r\n        ) {\r\n            throw new DriverOptionNotSetError(`location or autoSaveCallback`)\r\n        }\r\n\r\n        // load sql.js package\r\n        this.loadDependencies()\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     */\r\n    async connect(): Promise<void> {\r\n        this.databaseConnection = await this.createDatabaseConnection()\r\n    }\r\n\r\n    /**\r\n     * Closes connection with database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        this.queryRunner = undefined\r\n        this.databaseConnection.close()\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\r\n        if (!this.queryRunner) this.queryRunner = new SqljsQueryRunner(this)\r\n\r\n        return this.queryRunner\r\n    }\r\n\r\n    /**\r\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\r\n     * This will delete the current database!\r\n     */\r\n    async load(\r\n        fileNameOrLocalStorageOrData: string | Uint8Array,\r\n        checkIfFileOrLocalStorageExists: boolean = true,\r\n    ): Promise<any> {\r\n        if (typeof fileNameOrLocalStorageOrData === \"string\") {\r\n            // content has to be loaded\r\n            if (PlatformTools.type === \"node\") {\r\n                // Node.js\r\n                // fileNameOrLocalStorageOrData should be a path to the file\r\n                if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\r\n                    const database = PlatformTools.readFileSync(\r\n                        fileNameOrLocalStorageOrData,\r\n                    )\r\n                    return this.createDatabaseConnectionWithImport(database)\r\n                } else if (checkIfFileOrLocalStorageExists) {\r\n                    throw new TypeORMError(\r\n                        `File ${fileNameOrLocalStorageOrData} does not exist`,\r\n                    )\r\n                } else {\r\n                    // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\r\n                    // Therefore open a database without importing an existing file.\r\n                    // File will be written on first write operation.\r\n                    return this.createDatabaseConnectionWithImport()\r\n                }\r\n            } else {\r\n                // browser\r\n                // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\r\n                let localStorageContent = null\r\n                if (this.options.useLocalForage) {\r\n                    if (window.localforage) {\r\n                        localStorageContent = await window.localforage.getItem(\r\n                            fileNameOrLocalStorageOrData,\r\n                        )\r\n                    } else {\r\n                        throw new TypeORMError(\r\n                            `localforage is not defined - please import localforage.js into your site`,\r\n                        )\r\n                    }\r\n                } else {\r\n                    localStorageContent =\r\n                        PlatformTools.getGlobalVariable().localStorage.getItem(\r\n                            fileNameOrLocalStorageOrData,\r\n                        )\r\n                }\r\n\r\n                if (localStorageContent != null) {\r\n                    // localStorage value exists.\r\n                    return this.createDatabaseConnectionWithImport(\r\n                        JSON.parse(localStorageContent),\r\n                    )\r\n                } else if (checkIfFileOrLocalStorageExists) {\r\n                    throw new TypeORMError(\r\n                        `File ${fileNameOrLocalStorageOrData} does not exist`,\r\n                    )\r\n                } else {\r\n                    // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\r\n                    // Therefore open a database without importing anything.\r\n                    // localStorage value will be written on first write operation.\r\n                    return this.createDatabaseConnectionWithImport()\r\n                }\r\n            }\r\n        } else {\r\n            return this.createDatabaseConnectionWithImport(\r\n                fileNameOrLocalStorageOrData,\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Saved the current database to the given file (Node.js), local storage key (browser) or\r\n     * indexedDB key (browser with enabled useLocalForage option).\r\n     * If no location path is given, the location path in the options (if specified) will be used.\r\n     */\r\n    async save(location?: string) {\r\n        if (!location && !this.options.location) {\r\n            throw new TypeORMError(\r\n                `No location is set, specify a location parameter or add the location option to your configuration`,\r\n            )\r\n        }\r\n\r\n        let path = \"\"\r\n        if (location) {\r\n            path = location\r\n        } else if (this.options.location) {\r\n            path = this.options.location\r\n        }\r\n\r\n        if (PlatformTools.type === \"node\") {\r\n            try {\r\n                const content = Buffer.from(this.databaseConnection.export())\r\n                await PlatformTools.writeFile(path, content)\r\n            } catch (e) {\r\n                throw new TypeORMError(`Could not save database, error: ${e}`)\r\n            }\r\n        } else {\r\n            const database: Uint8Array = this.databaseConnection.export()\r\n            // convert Uint8Array to number array to improve local-storage storage\r\n            const databaseArray = [].slice.call(database)\r\n            if (this.options.useLocalForage) {\r\n                if (window.localforage) {\r\n                    await window.localforage.setItem(\r\n                        path,\r\n                        JSON.stringify(databaseArray),\r\n                    )\r\n                } else {\r\n                    throw new TypeORMError(\r\n                        `localforage is not defined - please import localforage.js into your site`,\r\n                    )\r\n                }\r\n            } else {\r\n                PlatformTools.getGlobalVariable().localStorage.setItem(\r\n                    path,\r\n                    JSON.stringify(databaseArray),\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This gets called by the QueryRunner when a change to the database is made.\r\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\r\n     * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\r\n     * or indexedDB (browser with enabled useLocalForage option).\r\n     * Don't auto-save when in transaction as the call to export will end the current transaction\r\n     */\r\n    async autoSave() {\r\n        if (this.options.autoSave && !this.queryRunner?.isTransactionActive) {\r\n            if (this.options.autoSaveCallback) {\r\n                await this.options.autoSaveCallback(this.export())\r\n            } else {\r\n                await this.save()\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current database as Uint8Array.\r\n     */\r\n    export(): Uint8Array {\r\n        return this.databaseConnection.export()\r\n    }\r\n\r\n    /**\r\n     * Creates generated map of values generated or returned by database after INSERT query.\r\n     */\r\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\r\n        const generatedMap = metadata.generatedColumns.reduce(\r\n            (map, generatedColumn) => {\r\n                // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\r\n                if (\r\n                    generatedColumn.isPrimary &&\r\n                    generatedColumn.generationStrategy === \"increment\"\r\n                ) {\r\n                    const query = \"SELECT last_insert_rowid()\"\r\n                    try {\r\n                        let result = this.databaseConnection.exec(query)\r\n                        this.connection.logger.logQuery(query)\r\n                        return OrmUtils.mergeDeep(\r\n                            map,\r\n                            generatedColumn.createValueMap(\r\n                                result[0].values[0][0],\r\n                            ),\r\n                        )\r\n                    } catch (e) {\r\n                        this.connection.logger.logQueryError(e, query, [])\r\n                    }\r\n                }\r\n\r\n                return map\r\n            },\r\n            {} as ObjectLiteral,\r\n        )\r\n\r\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates connection with the database.\r\n     * If the location option is set, the database is loaded first.\r\n     */\r\n    protected createDatabaseConnection(): Promise<any> {\r\n        if (this.options.location) {\r\n            return this.load(this.options.location, false)\r\n        }\r\n\r\n        return this.createDatabaseConnectionWithImport(this.options.database)\r\n    }\r\n\r\n    /**\r\n     * Creates connection with an optional database.\r\n     * If database is specified it is loaded, otherwise a new empty database is created.\r\n     */\r\n    protected async createDatabaseConnectionWithImport(\r\n        database?: Uint8Array,\r\n    ): Promise<any> {\r\n        // sql.js < 1.0 exposes an object with a `Database` method.\r\n        const isLegacyVersion = typeof this.sqlite.Database === \"function\"\r\n        const sqlite = isLegacyVersion\r\n            ? this.sqlite\r\n            : await this.sqlite(this.options.sqlJsConfig)\r\n        if (database && database.length > 0) {\r\n            this.databaseConnection = new sqlite.Database(database)\r\n        } else {\r\n            this.databaseConnection = new sqlite.Database()\r\n        }\r\n\r\n        this.databaseConnection.exec(`PRAGMA foreign_keys = ON`)\r\n\r\n        return this.databaseConnection\r\n    }\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        if (PlatformTools.type === \"browser\") {\r\n            const sqlite = this.options.driver || window.SQL\r\n            this.sqlite = sqlite\r\n        } else {\r\n            try {\r\n                const sqlite =\r\n                    this.options.driver || PlatformTools.load(\"sql.js\")\r\n                this.sqlite = sqlite\r\n            } catch (e) {\r\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\")\r\n            }\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/driver/sqljs/SqljsQueryRunner.ts"],"names":[],"mappings":"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","file":"SqljsQueryRunner.js","sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\r\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\r\nimport { SqljsDriver } from \"./SqljsDriver\"\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\r\nimport { QueryResult } from \"../../query-runner/QueryResult\"\r\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n */\r\nexport class SqljsQueryRunner extends AbstractSqliteQueryRunner {\r\n    /**\r\n     * Flag to determine if a modification has happened since the last time this query runner has requested a save.\r\n     */\r\n    private isDirty = false\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: SqljsDriver\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: SqljsDriver) {\r\n        super()\r\n        this.driver = driver\r\n        this.connection = driver.connection\r\n        this.broadcaster = new Broadcaster(this)\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = OFF`)\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = ON`)\r\n    }\r\n\r\n    private async flush() {\r\n        if (this.isDirty) {\r\n            await this.driver.autoSave()\r\n            this.isDirty = false\r\n        }\r\n    }\r\n\r\n    async release(): Promise<void> {\r\n        await this.flush()\r\n        return super.release()\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        await super.commitTransaction()\r\n        if (!this.isTransactionActive) {\r\n            await this.flush()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(\r\n        query: string,\r\n        parameters: any[] = [],\r\n        useStructuredResult = false,\r\n    ): Promise<any> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        const command = query.trim().split(\" \", 1)[0]\r\n\r\n        const databaseConnection = this.driver.databaseConnection\r\n        const broadcasterResult = new BroadcasterResult()\r\n\r\n        this.driver.connection.logger.logQuery(query, parameters, this)\r\n        this.broadcaster.broadcastBeforeQueryEvent(\r\n            broadcasterResult,\r\n            query,\r\n            parameters,\r\n        )\r\n\r\n        const queryStartTime = +new Date()\r\n        let statement: any\r\n        try {\r\n            statement = databaseConnection.prepare(query)\r\n            if (parameters) {\r\n                parameters = parameters.map((p) =>\r\n                    typeof p !== \"undefined\" ? p : null,\r\n                )\r\n\r\n                statement.bind(parameters)\r\n            }\r\n\r\n            // log slow queries if maxQueryExecution time is set\r\n            const maxQueryExecutionTime =\r\n                this.driver.options.maxQueryExecutionTime\r\n            const queryEndTime = +new Date()\r\n            const queryExecutionTime = queryEndTime - queryStartTime\r\n\r\n            if (\r\n                maxQueryExecutionTime &&\r\n                queryExecutionTime > maxQueryExecutionTime\r\n            )\r\n                this.driver.connection.logger.logQuerySlow(\r\n                    queryExecutionTime,\r\n                    query,\r\n                    parameters,\r\n                    this,\r\n                )\r\n\r\n            const records: any[] = []\r\n\r\n            while (statement.step()) {\r\n                records.push(statement.getAsObject())\r\n            }\r\n\r\n            this.broadcaster.broadcastAfterQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n                true,\r\n                queryExecutionTime,\r\n                records,\r\n                undefined,\r\n            )\r\n\r\n            const result = new QueryResult()\r\n\r\n            result.affected = databaseConnection.getRowsModified()\r\n            result.records = records\r\n            result.raw = records\r\n\r\n            statement.free()\r\n\r\n            if (command !== \"SELECT\") {\r\n                this.isDirty = true\r\n            }\r\n\r\n            if (useStructuredResult) {\r\n                return result\r\n            } else {\r\n                return result.raw\r\n            }\r\n        } catch (err) {\r\n            if (statement) {\r\n                statement.free()\r\n            }\r\n\r\n            this.driver.connection.logger.logQueryError(\r\n                err,\r\n                query,\r\n                parameters,\r\n                this,\r\n            )\r\n            this.broadcaster.broadcastAfterQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n                false,\r\n                undefined,\r\n                undefined,\r\n                err,\r\n            )\r\n\r\n            throw new QueryFailedError(query, parameters, err)\r\n        } finally {\r\n            await broadcasterResult.wait()\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/driver/cordova/CordovaQueryRunner.ts"],"names":[],"mappings":"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","file":"CordovaQueryRunner.js","sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\r\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\r\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\"\r\nimport { CordovaDriver } from \"./CordovaDriver\"\r\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\r\nimport { TypeORMError } from \"../../error\"\r\nimport { QueryResult } from \"../../query-runner/QueryResult\"\r\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\"\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n */\r\nexport class CordovaQueryRunner extends AbstractSqliteQueryRunner {\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: CordovaDriver\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: CordovaDriver) {\r\n        super()\r\n        this.driver = driver\r\n        this.connection = driver.connection\r\n        this.broadcaster = new Broadcaster(this)\r\n    }\r\n\r\n    /**\r\n     * Called before migrations are run.\r\n     */\r\n    async beforeMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = OFF`)\r\n    }\r\n\r\n    /**\r\n     * Called after migrations are run.\r\n     */\r\n    async afterMigration(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = ON`)\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(\r\n        query: string,\r\n        parameters?: any[],\r\n        useStructuredResult = false,\r\n    ): Promise<any> {\r\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\r\n\r\n        const databaseConnection = await this.connect()\r\n        const broadcasterResult = new BroadcasterResult()\r\n\r\n        this.driver.connection.logger.logQuery(query, parameters, this)\r\n        this.broadcaster.broadcastBeforeQueryEvent(\r\n            broadcasterResult,\r\n            query,\r\n            parameters,\r\n        )\r\n\r\n        const queryStartTime = +new Date()\r\n\r\n        try {\r\n            const raw = await new Promise<any>(async (ok, fail) => {\r\n                databaseConnection.executeSql(\r\n                    query,\r\n                    parameters,\r\n                    (raw: any) => ok(raw),\r\n                    (err: any) => fail(err),\r\n                )\r\n            })\r\n\r\n            // log slow queries if maxQueryExecution time is set\r\n            const maxQueryExecutionTime =\r\n                this.driver.options.maxQueryExecutionTime\r\n            const queryEndTime = +new Date()\r\n            const queryExecutionTime = queryEndTime - queryStartTime\r\n\r\n            this.broadcaster.broadcastAfterQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n                true,\r\n                queryExecutionTime,\r\n                raw,\r\n                undefined,\r\n            )\r\n\r\n            if (\r\n                maxQueryExecutionTime &&\r\n                queryExecutionTime > maxQueryExecutionTime\r\n            ) {\r\n                this.driver.connection.logger.logQuerySlow(\r\n                    queryExecutionTime,\r\n                    query,\r\n                    parameters,\r\n                    this,\r\n                )\r\n            }\r\n\r\n            const result = new QueryResult()\r\n\r\n            if (query.substr(0, 11) === \"INSERT INTO\") {\r\n                result.raw = raw.insertId\r\n            } else {\r\n                let resultSet = []\r\n                for (let i = 0; i < raw.rows.length; i++) {\r\n                    resultSet.push(raw.rows.item(i))\r\n                }\r\n\r\n                result.records = resultSet\r\n                result.raw = resultSet\r\n            }\r\n\r\n            if (useStructuredResult) {\r\n                return result\r\n            } else {\r\n                return result.raw\r\n            }\r\n        } catch (err) {\r\n            this.driver.connection.logger.logQueryError(\r\n                err,\r\n                query,\r\n                parameters,\r\n                this,\r\n            )\r\n            this.broadcaster.broadcastAfterQueryEvent(\r\n                broadcasterResult,\r\n                query,\r\n                parameters,\r\n                false,\r\n                undefined,\r\n                undefined,\r\n                err,\r\n            )\r\n\r\n            throw new QueryFailedError(query, parameters, err)\r\n        } finally {\r\n            await broadcasterResult.wait()\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Insert a new row with given values into the given table.\r\n     * Returns value of the generated column if given and generate column exist in the table.\r\n     // todo: implement new syntax\r\n    async insert(tableName: string, keyValues: ObjectLiteral): Promise<InsertResult> {\r\n        const keys = Object.keys(keyValues);\r\n        const columns = keys.map(key => `\"${key}\"`).join(\", \");\r\n        const values = keys.map(key => \"?\").join(\",\");\r\n        const generatedColumns = this.connection.hasMetadata(tableName) ? this.connection.getMetadata(tableName).generatedColumns : [];\r\n        const sql = columns.length > 0 ? (`INSERT INTO \"${tableName}\"(${columns}) VALUES (${values})`) : `INSERT INTO \"${tableName}\" DEFAULT VALUES`;\r\n        const parameters = keys.map(key => keyValues[key]);\r\n\r\n        return new Promise<InsertResult>(async (ok, fail) => {\r\n            this.driver.connection.logger.logQuery(sql, parameters, this);\r\n            const __this = this;\r\n            const databaseConnection = await this.connect();\r\n            databaseConnection.executeSql(sql, parameters, (resultSet: any) => {\r\n                const generatedMap = generatedColumns.reduce((map, generatedColumn) => {\r\n                    const value = generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\" && resultSet.insertId ? resultSet.insertId : keyValues[generatedColumn.databaseName];\r\n                    if (!value) return map;\r\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\r\n                }, {} as ObjectLiteral);\r\n\r\n                ok({\r\n                    result: undefined,\r\n                    generatedMap: Object.keys(generatedMap).length > 0 ? generatedMap : undefined\r\n                });\r\n            }, (err: any) => {\r\n                __this.driver.connection.logger.logQueryError(err, sql, parameters, this);\r\n                fail(err);\r\n            });\r\n        });\r\n    }*/\r\n\r\n    /**\r\n     * Would start a transaction but this driver does not support transactions.\r\n     */\r\n    async startTransaction(): Promise<void> {\r\n        throw new TypeORMError(\r\n            \"Transactions are not supported by the Cordova driver\",\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Would start a transaction but this driver does not support transactions.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        throw new TypeORMError(\r\n            \"Transactions are not supported by the Cordova driver\",\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Would start a transaction but this driver does not support transactions.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        throw new TypeORMError(\r\n            \"Transactions are not supported by the Cordova driver\",\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Removes all tables from the currently connected database.\r\n     * Be careful with using this method and avoid using it in production or migrations\r\n     * (because it can clear all your database).\r\n     */\r\n    async clearDatabase(): Promise<void> {\r\n        await this.query(`PRAGMA foreign_keys = OFF`)\r\n        try {\r\n            const selectViewDropsQuery = `SELECT 'DROP VIEW \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'view'`\r\n            const dropViewQueries: ObjectLiteral[] = await this.query(\r\n                selectViewDropsQuery,\r\n            )\r\n\r\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || name || '\";' as query FROM \"sqlite_master\" WHERE \"type\" = 'table' AND \"name\" != 'sqlite_sequence'`\r\n            const dropTableQueries: ObjectLiteral[] = await this.query(\r\n                selectTableDropsQuery,\r\n            )\r\n\r\n            await Promise.all(\r\n                dropViewQueries.map((q) => this.query(q[\"query\"])),\r\n            )\r\n            await Promise.all(\r\n                dropTableQueries.map((q) => this.query(q[\"query\"])),\r\n            )\r\n        } finally {\r\n            await this.query(`PRAGMA foreign_keys = ON`)\r\n        }\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Parametrizes given object of values. Used to create column=value queries.\r\n     */\r\n    protected parametrize(\r\n        objectLiteral: ObjectLiteral,\r\n        startIndex: number = 0,\r\n    ): string[] {\r\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\")\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/subscriber/BroadcasterResult.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,MAAa,iBAAiB;IAA9B;QACI;;WAEG;QACH,UAAK,GAAW,CAAC,CAAA;QAEjB;;WAEG;QACH,aAAQ,GAAmB,EAAE,CAAA;IAYjC,CAAC;IAVG;;OAEG;IACH,KAAK,CAAC,IAAI;QACN,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3B,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACpC,CAAC;QAED,OAAO,IAAI,CAAA;IACf,CAAC;CACJ;AArBD,8CAqBC","file":"BroadcasterResult.js","sourcesContent":["/**\r\n * Broadcaster execution result - promises executed by operations and number of executed listeners and subscribers.\r\n */\r\nexport class BroadcasterResult {\r\n    /**\r\n     * Number of executed listeners and subscribers.\r\n     */\r\n    count: number = 0\r\n\r\n    /**\r\n     * Promises returned by listeners and subscribers which needs to be awaited.\r\n     */\r\n    promises: Promise<any>[] = []\r\n\r\n    /**\r\n     * Wait for all promises to settle\r\n     */\r\n    async wait(): Promise<BroadcasterResult> {\r\n        if (this.promises.length > 0) {\r\n            await Promise.all(this.promises)\r\n        }\r\n\r\n        return this\r\n    }\r\n}\r\n"],"sourceRoot":".."}
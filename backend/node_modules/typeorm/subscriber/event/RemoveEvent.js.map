{"version":3,"sources":["../../src/subscriber/event/RemoveEvent.ts"],"names":[],"mappings":"","file":"RemoveEvent.js","sourcesContent":["import { EntityManager } from \"../../entity-manager/EntityManager\"\r\nimport { DataSource } from \"../../data-source/DataSource\"\r\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\r\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\"\r\n\r\n/**\r\n * RemoveEvent is an object that broadcaster sends to the entity subscriber when entity is being removed to the database.\r\n */\r\nexport interface RemoveEvent<Entity> {\r\n    /**\r\n     * Connection used in the event.\r\n     */\r\n    connection: DataSource\r\n\r\n    /**\r\n     * QueryRunner used in the event transaction.\r\n     * All database operations in the subscribed event listener should be performed using this query runner instance.\r\n     */\r\n    queryRunner: QueryRunner\r\n\r\n    /**\r\n     * EntityManager used in the event transaction.\r\n     * All database operations in the subscribed event listener should be performed using this entity manager instance.\r\n     */\r\n    manager: EntityManager\r\n\r\n    /**\r\n     * Entity that is being removed.\r\n     * This may absent if entity is removed without being loaded (for examples by cascades).\r\n     */\r\n    entity?: Entity\r\n\r\n    /**\r\n     * Metadata of the entity.\r\n     */\r\n    metadata: EntityMetadata\r\n\r\n    /**\r\n     * Database representation of entity that is being removed.\r\n     */\r\n    databaseEntity: Entity\r\n\r\n    /**\r\n     * Id or ids of the entity that is being removed.\r\n     */\r\n    entityId?: any\r\n}\r\n"],"sourceRoot":"../.."}
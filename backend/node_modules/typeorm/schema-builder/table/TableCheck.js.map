{"version":3,"sources":["../../src/schema-builder/table/TableCheck.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,MAAa,UAAU;IAsBnB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAA0B;QAzB7B,mBAAa,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QAWjD;;WAEG;QACH,gBAAW,GAAc,EAAE,CAAA;QAYvB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACxB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAA;QACtC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;IACxC,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,KAAK;QACD,OAAO,IAAI,UAAU,CAAoB;YACrC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;YAC1D,UAAU,EAAE,IAAI,CAAC,UAAU;SAC9B,CAAC,CAAA;IACN,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,MAAM,CAAC,MAAM,CAAC,aAA4B;QACtC,OAAO,IAAI,UAAU,CAAoB;YACrC,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,UAAU,EAAE,aAAa,CAAC,UAAU;SACvC,CAAC,CAAA;IACN,CAAC;CACJ;AA5DD,gCA4DC","file":"TableCheck.js","sourcesContent":["import { TableCheckOptions } from \"../options/TableCheckOptions\"\r\nimport { CheckMetadata } from \"../../metadata/CheckMetadata\"\r\n\r\n/**\r\n * Database's table check constraint stored in this class.\r\n */\r\nexport class TableCheck {\r\n    readonly \"@instanceof\" = Symbol.for(\"TableCheck\")\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Constraint name.\r\n     */\r\n    name?: string\r\n\r\n    /**\r\n     * Column that contains this constraint.\r\n     */\r\n    columnNames?: string[] = []\r\n\r\n    /**\r\n     * Check expression.\r\n     */\r\n    expression?: string\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(options: TableCheckOptions) {\r\n        this.name = options.name\r\n        this.columnNames = options.columnNames\r\n        this.expression = options.expression\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new copy of this constraint with exactly same properties.\r\n     */\r\n    clone(): TableCheck {\r\n        return new TableCheck(<TableCheckOptions>{\r\n            name: this.name,\r\n            columnNames: this.columnNames ? [...this.columnNames] : [],\r\n            expression: this.expression,\r\n        })\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates checks from the check metadata object.\r\n     */\r\n    static create(checkMetadata: CheckMetadata): TableCheck {\r\n        return new TableCheck(<TableCheckOptions>{\r\n            name: checkMetadata.name,\r\n            expression: checkMetadata.expression,\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/schema-builder/MongoSchemaBuilder.ts"],"names":[],"mappings":";;;AAGA,uDAAmD;AAGnD;;;;;;;;;;;;;GAaG;AACH,MAAa,kBAAkB;IAC3B,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAsB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAEhD,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,KAAK,CAAC,KAAK;QACP,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAsB,CAAA;QAC3D,MAAM,QAAQ,GAAmB,EAAE,CAAA;QACnC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACjD,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC/B,MAAM,OAAO,GAAyB,MAAM,CAAC,MAAM,CAC/C,EAAE,EACF;oBACI,IAAI,EAAE,KAAK,CAAC,IAAI;oBAChB,MAAM,EAAE,KAAK,CAAC,QAAQ;oBACtB,MAAM,EAAE,KAAK,CAAC,QAAQ;oBACtB,UAAU,EAAE,KAAK,CAAC,YAAY;iBACjC,EACD,KAAK,CAAC,kBAAkB,KAAK,SAAS;oBAClC,CAAC,CAAC,EAAE;oBACJ,CAAC,CAAC,EAAE,kBAAkB,EAAE,KAAK,CAAC,kBAAkB,EAAE,CACzD,CAAA;gBACD,QAAQ,CAAC,IAAI,CACT,WAAW,CAAC,qBAAqB,CAC7B,QAAQ,CAAC,SAAS,EAClB,KAAK,CAAC,0BAA0B,EAChC,OAAO,CACV,CACJ,CAAA;YACL,CAAC,CAAC,CAAA;YACF,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBAChC,MAAM,OAAO,GAAyB;oBAClC,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,MAAM,EAAE,IAAI;iBACf,CAAA;gBACD,QAAQ,CAAC,IAAI,CACT,WAAW,CAAC,qBAAqB,CAC7B,QAAQ,CAAC,SAAS,EAClB,MAAM,CAAC,0BAA0B,EACjC,OAAO,CACV,CACJ,CAAA;YACL,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;QACF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG;IACH,GAAG;QACC,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,yBAAW,EAAE,CAAC,CAAA;IAC7C,CAAC;CACJ;AA/DD,gDA+DC","file":"MongoSchemaBuilder.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\r\nimport { SchemaBuilder } from \"./SchemaBuilder\"\r\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\r\nimport { SqlInMemory } from \"../driver/SqlInMemory\"\r\nimport { CreateIndexesOptions } from \"../driver/mongodb/typings\"\r\n\r\n/**\r\n * Creates complete tables schemas in the database based on the entity metadatas.\r\n *\r\n * Steps how schema is being built:\r\n * 1. load list of all tables with complete column and keys information from the db\r\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\r\n * 3. create new tables that does not exist in the db, but exist in the metadata\r\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\r\n * 5. add columns from metadata which does not exist in the table\r\n * 6. update all exist columns which metadata has changed\r\n * 7. update primary keys - update old and create new primary key from changed columns\r\n * 8. create foreign keys which does not exist in the table yet\r\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\r\n */\r\nexport class MongoSchemaBuilder implements SchemaBuilder {\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: DataSource) {}\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates complete schemas for the given entity metadatas.\r\n     */\r\n    async build(): Promise<void> {\r\n        const queryRunner =\r\n            this.connection.createQueryRunner() as MongoQueryRunner\r\n        const promises: Promise<any>[] = []\r\n        this.connection.entityMetadatas.forEach((metadata) => {\r\n            metadata.indices.forEach((index) => {\r\n                const options: CreateIndexesOptions = Object.assign(\r\n                    {},\r\n                    {\r\n                        name: index.name,\r\n                        unique: index.isUnique,\r\n                        sparse: index.isSparse,\r\n                        background: index.isBackground,\r\n                    },\r\n                    index.expireAfterSeconds === undefined\r\n                        ? {}\r\n                        : { expireAfterSeconds: index.expireAfterSeconds },\r\n                )\r\n                promises.push(\r\n                    queryRunner.createCollectionIndex(\r\n                        metadata.tableName,\r\n                        index.columnNamesWithOrderingMap,\r\n                        options,\r\n                    ),\r\n                )\r\n            })\r\n            metadata.uniques.forEach((unique) => {\r\n                const options = <CreateIndexesOptions>{\r\n                    name: unique.name,\r\n                    unique: true,\r\n                }\r\n                promises.push(\r\n                    queryRunner.createCollectionIndex(\r\n                        metadata.tableName,\r\n                        unique.columnNamesWithOrderingMap,\r\n                        options,\r\n                    ),\r\n                )\r\n            })\r\n        })\r\n        await Promise.all(promises)\r\n    }\r\n\r\n    /**\r\n     * Returns query to be executed by schema builder.\r\n     */\r\n    log(): Promise<SqlInMemory> {\r\n        return Promise.resolve(new SqlInMemory())\r\n    }\r\n}\r\n"],"sourceRoot":".."}
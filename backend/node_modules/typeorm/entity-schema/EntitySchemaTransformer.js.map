{"version":3,"sources":["../../src/entity-schema/EntitySchemaTransformer.ts"],"names":[],"mappings":"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","file":"EntitySchemaTransformer.js","sourcesContent":["import { EntitySchema } from \"./EntitySchema\"\r\nimport { MetadataArgsStorage } from \"../metadata-args/MetadataArgsStorage\"\r\nimport { TableMetadataArgs } from \"../metadata-args/TableMetadataArgs\"\r\nimport { ColumnMetadataArgs } from \"../metadata-args/ColumnMetadataArgs\"\r\nimport { IndexMetadataArgs } from \"../metadata-args/IndexMetadataArgs\"\r\nimport { RelationMetadataArgs } from \"../metadata-args/RelationMetadataArgs\"\r\nimport { JoinColumnMetadataArgs } from \"../metadata-args/JoinColumnMetadataArgs\"\r\nimport { JoinTableMetadataArgs } from \"../metadata-args/JoinTableMetadataArgs\"\r\nimport { JoinTableOptions } from \"../decorator/options/JoinTableOptions\"\r\nimport { JoinTableMultipleColumnsOptions } from \"../decorator/options/JoinTableMultipleColumnsOptions\"\r\nimport { ColumnMode } from \"../metadata-args/types/ColumnMode\"\r\nimport { GeneratedMetadataArgs } from \"../metadata-args/GeneratedMetadataArgs\"\r\nimport { UniqueMetadataArgs } from \"../metadata-args/UniqueMetadataArgs\"\r\nimport { CheckMetadataArgs } from \"../metadata-args/CheckMetadataArgs\"\r\nimport { ExclusionMetadataArgs } from \"../metadata-args/ExclusionMetadataArgs\"\r\nimport { EntitySchemaColumnOptions } from \"./EntitySchemaColumnOptions\"\r\nimport { EntitySchemaOptions } from \"./EntitySchemaOptions\"\r\nimport { EntitySchemaEmbeddedError } from \"./EntitySchemaEmbeddedError\"\r\nimport { InheritanceMetadataArgs } from \"../metadata-args/InheritanceMetadataArgs\"\r\nimport { RelationIdMetadataArgs } from \"../metadata-args/RelationIdMetadataArgs\"\r\n\r\n/**\r\n * Transforms entity schema into metadata args storage.\r\n * The result will be just like entities read from decorators.\r\n */\r\nexport class EntitySchemaTransformer {\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Transforms entity schema into new metadata args storage object.\r\n     */\r\n    transform(schemas: EntitySchema<any>[]): MetadataArgsStorage {\r\n        const metadataArgsStorage = new MetadataArgsStorage()\r\n\r\n        schemas.forEach((entitySchema) => {\r\n            const options = entitySchema.options\r\n\r\n            // add table metadata args from the schema\r\n            const tableMetadata: TableMetadataArgs = {\r\n                target: options.target || options.name,\r\n                name: options.tableName,\r\n                database: options.database,\r\n                schema: options.schema,\r\n                type: options.type || \"regular\",\r\n                orderBy: options.orderBy,\r\n                synchronize: options.synchronize,\r\n                withoutRowid: !!options.withoutRowid,\r\n                expression: options.expression,\r\n            }\r\n            metadataArgsStorage.tables.push(tableMetadata)\r\n\r\n            const { inheritance } = options\r\n\r\n            if (inheritance) {\r\n                metadataArgsStorage.inheritances.push({\r\n                    target: options.target,\r\n                    pattern: inheritance.pattern ?? \"STI\",\r\n                    column: inheritance.column\r\n                        ? typeof inheritance.column === \"string\"\r\n                            ? { name: inheritance.column }\r\n                            : inheritance.column\r\n                        : undefined,\r\n                } as InheritanceMetadataArgs)\r\n            }\r\n\r\n            const { discriminatorValue } = options\r\n\r\n            if (discriminatorValue) {\r\n                metadataArgsStorage.discriminatorValues.push({\r\n                    target: options.target || options.name,\r\n                    value: discriminatorValue,\r\n                })\r\n            }\r\n\r\n            this.transformColumnsRecursive(options, metadataArgsStorage)\r\n        })\r\n\r\n        return metadataArgsStorage\r\n    }\r\n\r\n    private transformColumnsRecursive(\r\n        options: EntitySchemaOptions<any>,\r\n        metadataArgsStorage: MetadataArgsStorage,\r\n    ): void {\r\n        // add columns metadata args from the schema\r\n        Object.keys(options.columns).forEach((columnName) => {\r\n            const column = options.columns[columnName]!\r\n\r\n            const regularColumn = column as EntitySchemaColumnOptions\r\n            let mode: ColumnMode = \"regular\"\r\n            if (regularColumn.createDate) mode = \"createDate\"\r\n            if (regularColumn.updateDate) mode = \"updateDate\"\r\n            if (regularColumn.deleteDate) mode = \"deleteDate\"\r\n            if (regularColumn.version) mode = \"version\"\r\n            if (regularColumn.treeChildrenCount) mode = \"treeChildrenCount\"\r\n            if (regularColumn.treeLevel) mode = \"treeLevel\"\r\n            if (regularColumn.objectId) mode = \"objectId\"\r\n\r\n            const columnArgs: ColumnMetadataArgs = {\r\n                target: options.target || options.name,\r\n                mode: mode,\r\n                propertyName: columnName,\r\n                options: {\r\n                    type: regularColumn.type,\r\n                    name: regularColumn.objectId ? \"_id\" : regularColumn.name,\r\n                    primaryKeyConstraintName:\r\n                        regularColumn.primaryKeyConstraintName,\r\n                    length: regularColumn.length,\r\n                    width: regularColumn.width,\r\n                    nullable: regularColumn.nullable,\r\n                    readonly: regularColumn.readonly,\r\n                    update: regularColumn.update,\r\n                    select: regularColumn.select,\r\n                    insert: regularColumn.insert,\r\n                    primary: regularColumn.primary,\r\n                    unique: regularColumn.unique,\r\n                    comment: regularColumn.comment,\r\n                    default: regularColumn.default,\r\n                    onUpdate: regularColumn.onUpdate,\r\n                    precision: regularColumn.precision,\r\n                    scale: regularColumn.scale,\r\n                    zerofill: regularColumn.zerofill,\r\n                    unsigned: regularColumn.unsigned,\r\n                    charset: regularColumn.charset,\r\n                    collation: regularColumn.collation,\r\n                    enum: regularColumn.enum,\r\n                    enumName: regularColumn.enumName,\r\n                    asExpression: regularColumn.asExpression,\r\n                    generatedType: regularColumn.generatedType,\r\n                    hstoreType: regularColumn.hstoreType,\r\n                    array: regularColumn.array,\r\n                    transformer: regularColumn.transformer,\r\n                    spatialFeatureType: regularColumn.spatialFeatureType,\r\n                    srid: regularColumn.srid,\r\n                },\r\n            }\r\n            metadataArgsStorage.columns.push(columnArgs)\r\n\r\n            if (regularColumn.generated) {\r\n                const generationArgs: GeneratedMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    propertyName: columnName,\r\n                    strategy:\r\n                        typeof regularColumn.generated === \"string\"\r\n                            ? regularColumn.generated\r\n                            : \"increment\",\r\n                }\r\n                metadataArgsStorage.generations.push(generationArgs)\r\n            }\r\n\r\n            if (regularColumn.unique)\r\n                metadataArgsStorage.uniques.push({\r\n                    target: options.target || options.name,\r\n                    columns: [columnName],\r\n                })\r\n        })\r\n\r\n        // add relation metadata args from the schema\r\n        if (options.relations) {\r\n            Object.keys(options.relations).forEach((relationName) => {\r\n                const relationSchema = options.relations![relationName]!\r\n                const relation: RelationMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    propertyName: relationName,\r\n                    relationType: relationSchema.type,\r\n                    isLazy: relationSchema.lazy || false,\r\n                    type: relationSchema.target,\r\n                    inverseSideProperty: relationSchema.inverseSide,\r\n                    isTreeParent: relationSchema.treeParent,\r\n                    isTreeChildren: relationSchema.treeChildren,\r\n                    options: {\r\n                        eager: relationSchema.eager || false,\r\n                        cascade: relationSchema.cascade,\r\n                        nullable: relationSchema.nullable,\r\n                        onDelete: relationSchema.onDelete,\r\n                        onUpdate: relationSchema.onUpdate,\r\n                        deferrable: relationSchema.deferrable,\r\n                        // primary: relationSchema.primary,\r\n                        createForeignKeyConstraints:\r\n                            relationSchema.createForeignKeyConstraints,\r\n                        persistence: relationSchema.persistence,\r\n                        orphanedRowAction: relationSchema.orphanedRowAction,\r\n                    },\r\n                }\r\n\r\n                metadataArgsStorage.relations.push(relation)\r\n\r\n                // add join column\r\n                if (relationSchema.joinColumn) {\r\n                    if (typeof relationSchema.joinColumn === \"boolean\") {\r\n                        const joinColumn: JoinColumnMetadataArgs = {\r\n                            target: options.target || options.name,\r\n                            propertyName: relationName,\r\n                        }\r\n                        metadataArgsStorage.joinColumns.push(joinColumn)\r\n                    } else {\r\n                        const joinColumnsOptions = Array.isArray(\r\n                            relationSchema.joinColumn,\r\n                        )\r\n                            ? relationSchema.joinColumn\r\n                            : [relationSchema.joinColumn]\r\n\r\n                        for (const joinColumnOption of joinColumnsOptions) {\r\n                            const joinColumn: JoinColumnMetadataArgs = {\r\n                                target: options.target || options.name,\r\n                                propertyName: relationName,\r\n                                name: joinColumnOption.name,\r\n                                referencedColumnName:\r\n                                    joinColumnOption.referencedColumnName,\r\n                                foreignKeyConstraintName:\r\n                                    joinColumnOption.foreignKeyConstraintName,\r\n                            }\r\n                            metadataArgsStorage.joinColumns.push(joinColumn)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // add join table\r\n                if (relationSchema.joinTable) {\r\n                    if (typeof relationSchema.joinTable === \"boolean\") {\r\n                        const joinTable: JoinTableMetadataArgs = {\r\n                            target: options.target || options.name,\r\n                            propertyName: relationName,\r\n                        }\r\n                        metadataArgsStorage.joinTables.push(joinTable)\r\n                    } else {\r\n                        const joinTable: JoinTableMetadataArgs = {\r\n                            target: options.target || options.name,\r\n                            propertyName: relationName,\r\n                            name: relationSchema.joinTable.name,\r\n                            database: relationSchema.joinTable.database,\r\n                            schema: relationSchema.joinTable.schema,\r\n                            joinColumns: ((\r\n                                relationSchema.joinTable as JoinTableOptions\r\n                            ).joinColumn\r\n                                ? [\r\n                                      (\r\n                                          relationSchema.joinTable as JoinTableOptions\r\n                                      ).joinColumn!,\r\n                                  ]\r\n                                : (\r\n                                      relationSchema.joinTable as JoinTableMultipleColumnsOptions\r\n                                  ).joinColumns) as any,\r\n                            inverseJoinColumns: ((\r\n                                relationSchema.joinTable as JoinTableOptions\r\n                            ).inverseJoinColumn\r\n                                ? [\r\n                                      (\r\n                                          relationSchema.joinTable as JoinTableOptions\r\n                                      ).inverseJoinColumn!,\r\n                                  ]\r\n                                : (\r\n                                      relationSchema.joinTable as JoinTableMultipleColumnsOptions\r\n                                  ).inverseJoinColumns) as any,\r\n                        }\r\n                        metadataArgsStorage.joinTables.push(joinTable)\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        // add relation id metadata args from the schema\r\n        if (options.relationIds) {\r\n            Object.keys(options.relationIds).forEach((relationIdName) => {\r\n                const relationIdOptions = options.relationIds![relationIdName]!\r\n                const relationId: RelationIdMetadataArgs = {\r\n                    propertyName: relationIdName,\r\n                    relation: relationIdOptions.relationName,\r\n                    target: options.target || options.name,\r\n                    alias: relationIdOptions.alias,\r\n                    queryBuilderFactory: relationIdOptions.queryBuilderFactory,\r\n                }\r\n                metadataArgsStorage.relationIds.push(relationId)\r\n            })\r\n        }\r\n\r\n        // add index metadata args from the schema\r\n        if (options.indices) {\r\n            options.indices.forEach((index) => {\r\n                const indexArgs: IndexMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    name: index.name,\r\n                    unique: index.unique === true ? true : false,\r\n                    spatial: index.spatial === true ? true : false,\r\n                    fulltext: index.fulltext === true ? true : false,\r\n                    nullFiltered: index.nullFiltered === true ? true : false,\r\n                    parser: index.parser,\r\n                    synchronize: index.synchronize === false ? false : true,\r\n                    where: index.where,\r\n                    sparse: index.sparse,\r\n                    columns: index.columns,\r\n                }\r\n                metadataArgsStorage.indices.push(indexArgs)\r\n            })\r\n        }\r\n\r\n        // add unique metadata args from the schema\r\n        if (options.uniques) {\r\n            options.uniques.forEach((unique) => {\r\n                const uniqueArgs: UniqueMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    name: unique.name,\r\n                    columns: unique.columns,\r\n                    deferrable: unique.deferrable,\r\n                }\r\n                metadataArgsStorage.uniques.push(uniqueArgs)\r\n            })\r\n        }\r\n\r\n        // add check metadata args from the schema\r\n        if (options.checks) {\r\n            options.checks.forEach((check) => {\r\n                const checkArgs: CheckMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    name: check.name,\r\n                    expression: check.expression,\r\n                }\r\n                metadataArgsStorage.checks.push(checkArgs)\r\n            })\r\n        }\r\n\r\n        // add exclusion metadata args from the schema\r\n        if (options.exclusions) {\r\n            options.exclusions.forEach((exclusion) => {\r\n                const exclusionArgs: ExclusionMetadataArgs = {\r\n                    target: options.target || options.name,\r\n                    name: exclusion.name,\r\n                    expression: exclusion.expression,\r\n                }\r\n                metadataArgsStorage.exclusions.push(exclusionArgs)\r\n            })\r\n        }\r\n\r\n        if (options.embeddeds) {\r\n            Object.keys(options.embeddeds).forEach((columnName) => {\r\n                const embeddedOptions = options.embeddeds![columnName]\r\n\r\n                if (!embeddedOptions.schema)\r\n                    throw EntitySchemaEmbeddedError.createEntitySchemaIsRequiredException(\r\n                        columnName,\r\n                    )\r\n\r\n                const embeddedSchema = embeddedOptions.schema.options\r\n\r\n                metadataArgsStorage.embeddeds.push({\r\n                    target: options.target || options.name,\r\n                    propertyName: columnName,\r\n                    isArray: embeddedOptions.array === true,\r\n                    prefix:\r\n                        embeddedOptions.prefix !== undefined\r\n                            ? embeddedOptions.prefix\r\n                            : undefined,\r\n                    type: () => embeddedSchema?.target || embeddedSchema.name,\r\n                })\r\n\r\n                this.transformColumnsRecursive(\r\n                    embeddedSchema,\r\n                    metadataArgsStorage,\r\n                )\r\n            })\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
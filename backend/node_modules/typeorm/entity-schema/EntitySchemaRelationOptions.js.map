{"version":3,"sources":["../../src/entity-schema/EntitySchemaRelationOptions.ts"],"names":[],"mappings":"","file":"EntitySchemaRelationOptions.js","sourcesContent":["import { JoinColumnOptions } from \"../decorator/options/JoinColumnOptions\"\r\nimport { RelationType } from \"../metadata/types/RelationTypes\"\r\nimport { JoinTableMultipleColumnsOptions } from \"../decorator/options/JoinTableMultipleColumnsOptions\"\r\nimport { DeferrableType } from \"../metadata/types/DeferrableType\"\r\nimport { OnDeleteType } from \"../metadata/types/OnDeleteType\"\r\nimport { OnUpdateType } from \"../metadata/types/OnUpdateType\"\r\nimport { JoinTableOptions } from \"../decorator/options/JoinTableOptions\"\r\nimport { EntityTarget } from \"../common/EntityTarget\"\r\n\r\nexport interface EntitySchemaRelationOptions {\r\n    /**\r\n     * Indicates with which entity this relation is made.\r\n     */\r\n    target: EntityTarget<any>\r\n\r\n    /**\r\n     * Type of relation. Can be one of the value of the RelationTypes class.\r\n     */\r\n    type: RelationType\r\n\r\n    /**\r\n     * Inverse side of the relation.\r\n     */\r\n    inverseSide?: string\r\n\r\n    /**\r\n     * Indicates if this relation will be lazily loaded.\r\n     */\r\n    lazy?: boolean\r\n\r\n    /**\r\n     * Indicates if this relation will be eagerly loaded.\r\n     */\r\n    eager?: boolean\r\n\r\n    /**\r\n     * Indicates if persistence is enabled for the relation.\r\n     * By default its enabled, but if you want to avoid any changes in the relation to be reflected in the database you can disable it.\r\n     * If its disabled you can only change a relation from inverse side of a relation or using relation query builder functionality.\r\n     * This is useful for performance optimization since its disabling avoid multiple extra queries during entity save.\r\n     */\r\n    persistence?: boolean\r\n\r\n    /**\r\n     * Indicates if this relation will be a primary key.\r\n     * Can be used only for many-to-one and owner one-to-one relations.\r\n     */\r\n    primary?: boolean\r\n\r\n    /**\r\n     * Indicates whether foreign key constraints will be created for join columns.\r\n     * Can be used only for many-to-one and owner one-to-one relations.\r\n     * Defaults to true.\r\n     */\r\n    createForeignKeyConstraints?: boolean\r\n\r\n    /**\r\n     * Join table options of this column. If set to true then it simply means that it has a join table.\r\n     */\r\n    joinTable?: boolean | JoinTableOptions | JoinTableMultipleColumnsOptions\r\n\r\n    /**\r\n     * Join column options of this column. If set to true then it simply means that it has a join column.\r\n     */\r\n    joinColumn?: boolean | JoinColumnOptions | JoinColumnOptions[]\r\n\r\n    /**\r\n     * Indicates if this is a parent (can be only many-to-one relation) relation in the tree tables.\r\n     */\r\n    treeParent?: boolean\r\n\r\n    /**\r\n     * Indicates if this is a children (can be only one-to-many relation) relation in the tree tables.\r\n     */\r\n    treeChildren?: boolean\r\n\r\n    /**\r\n     * If set to true then it means that related object can be allowed to be inserted / updated / removed to the db.\r\n     * This is option a shortcut if you would like to set cascadeInsert, cascadeUpdate and cascadeRemove to true.\r\n     */\r\n    cascade?:\r\n        | boolean\r\n        | (\"insert\" | \"update\" | \"remove\" | \"soft-remove\" | \"recover\")[]\r\n\r\n    /**\r\n     * Default database value.\r\n     */\r\n    default?: any\r\n\r\n    /**\r\n     * Indicates if relation column value can be nullable or not.\r\n     */\r\n    nullable?: boolean\r\n\r\n    /**\r\n     * Database cascade action on delete.\r\n     */\r\n    onDelete?: OnDeleteType\r\n\r\n    /**\r\n     * Database cascade action on update.\r\n     */\r\n    onUpdate?: OnUpdateType\r\n\r\n    /**\r\n     * Indicate if foreign key constraints can be deferred.\r\n     */\r\n    deferrable?: DeferrableType\r\n\r\n    /**\r\n     * When a parent is saved (with cascading but) without a child row that still exists in database, this will control what shall happen to them.\r\n     * delete will remove these rows from database. nullify will remove the relation key.\r\n     * skip will keep the relation intact. Removal of related item is only possible through its own repo.\r\n     */\r\n    orphanedRowAction?: \"nullify\" | \"delete\" | \"soft-delete\" | \"disable\"\r\n}\r\n"],"sourceRoot":".."}
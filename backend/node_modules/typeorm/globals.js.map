{"version":3,"sources":["../../src/globals.ts"],"names":[],"mappings":"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","file":"globals.js","sourcesContent":["import { MetadataArgsStorage } from \"./metadata-args/MetadataArgsStorage\"\r\nimport { PlatformTools } from \"./platform/PlatformTools\"\r\nimport { DataSourceOptions } from \"./data-source/DataSourceOptions\"\r\nimport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\"\r\nimport { ConnectionManager } from \"./connection/ConnectionManager\"\r\nimport { getFromContainer } from \"./container\"\r\nimport { DataSource } from \"./data-source/DataSource\"\r\nimport { EntityManager } from \"./entity-manager/EntityManager\"\r\nimport { MongoEntityManager } from \"./entity-manager/MongoEntityManager\"\r\nimport { SqljsEntityManager } from \"./entity-manager/SqljsEntityManager\"\r\nimport { EntityTarget } from \"./common/EntityTarget\"\r\nimport { Repository } from \"./repository/Repository\"\r\nimport { TreeRepository } from \"./repository/TreeRepository\"\r\nimport { ObjectType } from \"./common/ObjectType\"\r\nimport { MongoRepository } from \"./repository/MongoRepository\"\r\nimport { SelectQueryBuilder } from \"./query-builder/SelectQueryBuilder\"\r\nimport { ObjectUtils } from \"./util/ObjectUtils\"\r\nimport { ObjectLiteral } from \"./common/ObjectLiteral\"\r\n\r\n/**\r\n * Gets metadata args storage.\r\n */\r\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\r\n    // we should store metadata storage in a global variable otherwise it brings too much problems\r\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\r\n    // useContainer method with his own container implementation, that entity will be registered in the\r\n    // old old container (default one post probably) and consumer will his entity.\r\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\r\n    // another reason is that when we run migrations typeorm is being called from a global package\r\n    // and it may load entities which register decorators in typeorm of local package\r\n    // this leads to impossibility of usage of entities in migrations and cli related operations\r\n    const globalScope = PlatformTools.getGlobalVariable()\r\n    if (!globalScope.typeormMetadataArgsStorage)\r\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage()\r\n\r\n    return globalScope.typeormMetadataArgsStorage\r\n}\r\n\r\n/**\r\n * Reads connection options stored in ormconfig configuration file.\r\n *\r\n * @deprecated\r\n */\r\nexport async function getConnectionOptions(\r\n    connectionName: string = \"default\",\r\n): Promise<DataSourceOptions> {\r\n    return new ConnectionOptionsReader().get(connectionName)\r\n}\r\n\r\n/**\r\n * Gets a ConnectionManager which creates connections.\r\n *\r\n * @deprecated\r\n */\r\nexport function getConnectionManager(): ConnectionManager {\r\n    return getFromContainer(ConnectionManager)\r\n}\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\r\n *\r\n * @deprecated\r\n */\r\nexport async function createConnection(): Promise<DataSource>\r\n\r\n/**\r\n * Creates a new connection from the ormconfig file with a given name.\r\n *\r\n * @deprecated\r\n */\r\nexport async function createConnection(name: string): Promise<DataSource>\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n *\r\n * @deprecated\r\n */\r\nexport async function createConnection(\r\n    options: DataSourceOptions,\r\n): Promise<DataSource>\r\n\r\n/**\r\n * Creates a new connection and registers it in the manager.\r\n *\r\n * If connection options were not specified, then it will try to create connection automatically,\r\n * based on content of ormconfig (json/js/env) file or environment variables.\r\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\r\n *\r\n * @deprecated\r\n */\r\nexport async function createConnection(\r\n    optionsOrName?: any,\r\n): Promise<DataSource> {\r\n    const connectionName =\r\n        typeof optionsOrName === \"string\" ? optionsOrName : \"default\"\r\n    const options = ObjectUtils.isObject(optionsOrName)\r\n        ? (optionsOrName as DataSourceOptions)\r\n        : await getConnectionOptions(connectionName)\r\n    return getConnectionManager().create(options).connect()\r\n}\r\n\r\n/**\r\n * Creates new connections and registers them in the manager.\r\n *\r\n * If connection options were not specified, then it will try to create connection automatically,\r\n * based on content of ormconfig (json/js/env) file or environment variables.\r\n * All connections from the ormconfig will be created.\r\n *\r\n * @deprecated\r\n */\r\nexport async function createConnections(\r\n    options?: DataSourceOptions[],\r\n): Promise<DataSource[]> {\r\n    if (!options) options = await new ConnectionOptionsReader().all()\r\n    const connections = options.map((options) =>\r\n        getConnectionManager().create(options),\r\n    )\r\n    // Do not use Promise.all or test 8522 will produce a dangling sqlite connection\r\n    for (const connection of connections) {\r\n        await connection.connect()\r\n    }\r\n    return connections\r\n}\r\n\r\n/**\r\n * Gets connection from the connection manager.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n *\r\n * @deprecated\r\n */\r\nexport function getConnection(connectionName: string = \"default\"): DataSource {\r\n    return getConnectionManager().get(connectionName)\r\n}\r\n\r\n/**\r\n * Gets entity manager from the connection.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n *\r\n * @deprecated\r\n */\r\nexport function getManager(connectionName: string = \"default\"): EntityManager {\r\n    return getConnectionManager().get(connectionName).manager\r\n}\r\n\r\n/**\r\n * Gets MongoDB entity manager from the connection.\r\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\r\n *\r\n * @deprecated\r\n */\r\nexport function getMongoManager(\r\n    connectionName: string = \"default\",\r\n): MongoEntityManager {\r\n    return getConnectionManager().get(connectionName)\r\n        .manager as MongoEntityManager\r\n}\r\n\r\n/**\r\n * Gets Sqljs entity manager from connection name.\r\n * \"default\" connection is used, when no name is specified.\r\n * Only works when Sqljs driver is used.\r\n *\r\n * @deprecated\r\n */\r\nexport function getSqljsManager(\r\n    connectionName: string = \"default\",\r\n): SqljsEntityManager {\r\n    return getConnectionManager().get(connectionName)\r\n        .manager as SqljsEntityManager\r\n}\r\n\r\n/**\r\n * Gets repository for the given entity class.\r\n *\r\n * @deprecated\r\n */\r\nexport function getRepository<Entity extends ObjectLiteral>(\r\n    entityClass: EntityTarget<Entity>,\r\n    connectionName: string = \"default\",\r\n): Repository<Entity> {\r\n    return getConnectionManager()\r\n        .get(connectionName)\r\n        .getRepository<Entity>(entityClass)\r\n}\r\n\r\n/**\r\n * Gets tree repository for the given entity class.\r\n *\r\n * @deprecated\r\n */\r\nexport function getTreeRepository<Entity extends ObjectLiteral>(\r\n    entityClass: EntityTarget<Entity>,\r\n    connectionName: string = \"default\",\r\n): TreeRepository<Entity> {\r\n    return getConnectionManager()\r\n        .get(connectionName)\r\n        .getTreeRepository<Entity>(entityClass)\r\n}\r\n\r\n/**\r\n * Gets tree repository for the given entity class.\r\n *\r\n * @deprecated\r\n */\r\nexport function getCustomRepository<T>(\r\n    customRepository: ObjectType<T>,\r\n    connectionName: string = \"default\",\r\n): T {\r\n    return getConnectionManager()\r\n        .get(connectionName)\r\n        .getCustomRepository(customRepository)\r\n}\r\n\r\n/**\r\n * Gets mongodb repository for the given entity class or name.\r\n *\r\n * @deprecated\r\n */\r\nexport function getMongoRepository<Entity extends ObjectLiteral>(\r\n    entityClass: EntityTarget<Entity>,\r\n    connectionName: string = \"default\",\r\n): MongoRepository<Entity> {\r\n    return getConnectionManager()\r\n        .get(connectionName)\r\n        .getMongoRepository<Entity>(entityClass)\r\n}\r\n\r\n/**\r\n * Creates a new query builder.\r\n *\r\n * @deprecated\r\n */\r\nexport function createQueryBuilder<Entity extends ObjectLiteral>(\r\n    entityClass?: EntityTarget<Entity>,\r\n    alias?: string,\r\n    connectionName: string = \"default\",\r\n): SelectQueryBuilder<Entity> {\r\n    if (entityClass) {\r\n        return getRepository(entityClass, connectionName).createQueryBuilder(\r\n            alias,\r\n        )\r\n    }\r\n\r\n    return getConnection(connectionName).createQueryBuilder()\r\n}\r\n"],"sourceRoot":"."}
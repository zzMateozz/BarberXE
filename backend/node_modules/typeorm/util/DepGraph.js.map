{"version":3,"sources":["../../src/util/DepGraph.ts"],"names":[],"mappings":"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","file":"DepGraph.js","sourcesContent":["/**\r\n * This source code is from https://github.com/jriecken/dependency-graph\r\n * Just added \"any\" types here, wrapper everything into exported class.\r\n * We cant use a package itself because we want to package \"everything-in-it\" for the frontend users of TypeORM.\r\n */\r\n\r\n/**\r\n * A simple dependency graph\r\n */\r\n\r\nimport { TypeORMError } from \"../error\"\r\n\r\n/**\r\n * Helper for creating a Depth-First-Search on\r\n * a set of edges.\r\n *\r\n * Detects cycles and throws an Error if one is detected.\r\n *\r\n * @param edges The set of edges to DFS through\r\n * @param leavesOnly Whether to only return \"leaf\" nodes (ones who have no edges)\r\n * @param result An array in which the results will be populated\r\n */\r\nfunction createDFS(edges: any, leavesOnly: any, result: any) {\r\n    let currentPath: any[] = []\r\n    let visited: any = {}\r\n    return function DFS(currentNode: any) {\r\n        visited[currentNode] = true\r\n        currentPath.push(currentNode)\r\n        edges[currentNode].forEach(function (node: any) {\r\n            if (!visited[node]) {\r\n                DFS(node)\r\n            } else if (currentPath.indexOf(node) >= 0) {\r\n                currentPath.push(node)\r\n                throw new TypeORMError(\r\n                    `Dependency Cycle Found: ${currentPath.join(\" -> \")}`,\r\n                )\r\n            }\r\n        })\r\n        currentPath.pop()\r\n        if (\r\n            (!leavesOnly || edges[currentNode].length === 0) &&\r\n            result.indexOf(currentNode) === -1\r\n        ) {\r\n            result.push(currentNode)\r\n        }\r\n    }\r\n}\r\n\r\nexport class DepGraph {\r\n    nodes: any = {}\r\n    outgoingEdges: any = {} // Node -> [Dependency Node]\r\n    incomingEdges: any = {} // Node -> [Dependant Node]\r\n\r\n    /**\r\n     * Add a node to the dependency graph. If a node already exists, this method will do nothing.\r\n     */\r\n    addNode(node: any, data?: any) {\r\n        if (!this.hasNode(node)) {\r\n            // Checking the arguments length allows the user to add a node with undefined data\r\n            if (arguments.length === 2) {\r\n                this.nodes[node] = data\r\n            } else {\r\n                this.nodes[node] = node\r\n            }\r\n            this.outgoingEdges[node] = []\r\n            this.incomingEdges[node] = []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a node from the dependency graph. If a node does not exist, this method will do nothing.\r\n     */\r\n    removeNode(node: any) {\r\n        if (this.hasNode(node)) {\r\n            delete this.nodes[node]\r\n            delete this.outgoingEdges[node]\r\n            delete this.incomingEdges[node]\r\n            ;[this.incomingEdges, this.outgoingEdges].forEach(function (\r\n                edgeList,\r\n            ) {\r\n                Object.keys(edgeList).forEach(function (key: any) {\r\n                    const idx = edgeList[key].indexOf(node)\r\n                    if (idx >= 0) {\r\n                        edgeList[key].splice(idx, 1)\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if a node exists in the graph\r\n     */\r\n    hasNode(node: any) {\r\n        return this.nodes.hasOwnProperty(node)\r\n    }\r\n\r\n    /**\r\n     * Get the data associated with a node name\r\n     */\r\n    getNodeData(node: any) {\r\n        if (this.hasNode(node)) {\r\n            return this.nodes[node]\r\n        } else {\r\n            throw new TypeORMError(`Node does not exist: ${node}`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the associated data for a given node name. If the node does not exist, this method will throw an error\r\n     */\r\n    setNodeData(node: any, data: any) {\r\n        if (this.hasNode(node)) {\r\n            this.nodes[node] = data\r\n        } else {\r\n            throw new TypeORMError(`Node does not exist: ${node}`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a dependency between two nodes. If either of the nodes does not exist,\r\n     * an Error will be thrown.\r\n     */\r\n    addDependency(from: any, to: any) {\r\n        if (!this.hasNode(from)) {\r\n            throw new TypeORMError(`Node does not exist: ${from}`)\r\n        }\r\n        if (!this.hasNode(to)) {\r\n            throw new TypeORMError(`Node does not exist: ${to}`)\r\n        }\r\n        if (this.outgoingEdges[from].indexOf(to) === -1) {\r\n            this.outgoingEdges[from].push(to)\r\n        }\r\n        if (this.incomingEdges[to].indexOf(from) === -1) {\r\n            this.incomingEdges[to].push(from)\r\n        }\r\n        return true\r\n    }\r\n\r\n    /**\r\n     * Remove a dependency between two nodes.\r\n     */\r\n    removeDependency(from: any, to: any) {\r\n        let idx: any\r\n        if (this.hasNode(from)) {\r\n            idx = this.outgoingEdges[from].indexOf(to)\r\n            if (idx >= 0) {\r\n                this.outgoingEdges[from].splice(idx, 1)\r\n            }\r\n        }\r\n\r\n        if (this.hasNode(to)) {\r\n            idx = this.incomingEdges[to].indexOf(from)\r\n            if (idx >= 0) {\r\n                this.incomingEdges[to].splice(idx, 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get an array containing the nodes that the specified node depends on (transitively).\r\n     *\r\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned\r\n     * in the array.\r\n     */\r\n    dependenciesOf(node: any, leavesOnly: any) {\r\n        if (this.hasNode(node)) {\r\n            let result: any[] = []\r\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result)\r\n            DFS(node)\r\n            let idx = result.indexOf(node)\r\n            if (idx >= 0) {\r\n                result.splice(idx, 1)\r\n            }\r\n            return result\r\n        } else {\r\n            throw new TypeORMError(`Node does not exist: ${node}`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * get an array containing the nodes that depend on the specified node (transitively).\r\n     *\r\n     * Throws an Error if the graph has a cycle, or the specified node does not exist.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not have any dependants will be returned in the array.\r\n     */\r\n    dependantsOf(node: any, leavesOnly: any) {\r\n        if (this.hasNode(node)) {\r\n            let result: any[] = []\r\n            let DFS = createDFS(this.incomingEdges, leavesOnly, result)\r\n            DFS(node)\r\n            let idx = result.indexOf(node)\r\n            if (idx >= 0) {\r\n                result.splice(idx, 1)\r\n            }\r\n            return result\r\n        } else {\r\n            throw new TypeORMError(`Node does not exist: ${node}`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Construct the overall processing order for the dependency graph.\r\n     *\r\n     * Throws an Error if the graph has a cycle.\r\n     *\r\n     * If `leavesOnly` is true, only nodes that do not depend on any other nodes will be returned.\r\n     */\r\n    overallOrder(leavesOnly?: any) {\r\n        let self = this\r\n        let result: any[] = []\r\n        let keys = Object.keys(this.nodes)\r\n        if (keys.length === 0) {\r\n            return result // Empty graph\r\n        } else {\r\n            // Look for cycles - we run the DFS starting at all the nodes in case there\r\n            // are several disconnected subgraphs inside this dependency graph.\r\n            let CycleDFS = createDFS(this.outgoingEdges, false, [])\r\n            keys.forEach(function (n: any) {\r\n                CycleDFS(n)\r\n            })\r\n\r\n            let DFS = createDFS(this.outgoingEdges, leavesOnly, result)\r\n            // Find all potential starting points (nodes with nothing depending on them) an\r\n            // run a DFS starting at these points to get the order\r\n            keys.filter(function (node) {\r\n                return self.incomingEdges[node].length === 0\r\n            }).forEach(function (n) {\r\n                DFS(n)\r\n            })\r\n\r\n            return result\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
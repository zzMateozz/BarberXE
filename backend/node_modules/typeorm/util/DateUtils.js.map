{"version":3,"sources":["../../src/util/DateUtils.ts"],"names":[],"mappings":"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","file":"DateUtils.js","sourcesContent":["import { ColumnMetadata } from \"../metadata/ColumnMetadata\"\r\nimport dayjs from \"dayjs\"\r\n\r\n/**\r\n * Provides utilities to transform hydrated and persisted data.\r\n */\r\nexport class DateUtils {\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Normalizes date object hydrated from the database.\r\n     */\r\n    static normalizeHydratedDate(\r\n        mixedDate: Date | string | undefined,\r\n    ): Date | string | undefined {\r\n        if (!mixedDate) return mixedDate\r\n\r\n        return typeof mixedDate === \"string\"\r\n            ? new Date(mixedDate)\r\n            : (mixedDate as Date)\r\n    }\r\n\r\n    /**\r\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\r\n     */\r\n    static mixedDateToDateString(value: string | Date): string {\r\n        if (value instanceof Date) {\r\n            return (\r\n                this.formatZerolessValue(value.getFullYear(), 4) +\r\n                \"-\" +\r\n                this.formatZerolessValue(value.getMonth() + 1) +\r\n                \"-\" +\r\n                this.formatZerolessValue(value.getDate())\r\n            )\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Converts given value into date object.\r\n     */\r\n    static mixedDateToDate(\r\n        mixedDate: Date | string,\r\n        toUtc: boolean = false,\r\n        useMilliseconds = true,\r\n    ): Date {\r\n        /**\r\n         * new Date(ISOString) is not a reliable parser to date strings.\r\n         * It's better to use 'date-fns' parser to parser string in ISO Format.\r\n         *\r\n         * The problem here is with wrong timezone.\r\n         *\r\n         * For example:\r\n         *\r\n         * ``new Date('2021-04-28')`` will generate `2021-04-28T00:00:00.000Z`\r\n         * in my timezone, which is not true for my timezone (GMT-0300). It should\r\n         * be `2021-04-28T03:00:00.000Z` as `new Date(2021, 3, 28)` generates.\r\n         *\r\n         * https://stackoverflow.com/a/2587398\r\n         */\r\n        let date =\r\n            typeof mixedDate === \"string\"\r\n                ? dayjs(mixedDate).toDate()\r\n                : mixedDate\r\n\r\n        if (toUtc)\r\n            date = new Date(\r\n                date.getUTCFullYear(),\r\n                date.getUTCMonth(),\r\n                date.getUTCDate(),\r\n                date.getUTCHours(),\r\n                date.getUTCMinutes(),\r\n                date.getUTCSeconds(),\r\n                date.getUTCMilliseconds(),\r\n            )\r\n\r\n        if (!useMilliseconds) date.setUTCMilliseconds(0)\r\n\r\n        return date\r\n    }\r\n\r\n    /**\r\n     * Converts given value into time string in a \"HH:mm:ss\" format.\r\n     */\r\n    static mixedDateToTimeString(\r\n        value: Date | any,\r\n        skipSeconds: boolean = false,\r\n    ): string | any {\r\n        if (value instanceof Date)\r\n            return (\r\n                this.formatZerolessValue(value.getHours()) +\r\n                \":\" +\r\n                this.formatZerolessValue(value.getMinutes()) +\r\n                (!skipSeconds\r\n                    ? \":\" + this.formatZerolessValue(value.getSeconds())\r\n                    : \"\")\r\n            )\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Converts given value into time string in a \"HH:mm:ss\" format.\r\n     */\r\n    static mixedTimeToDate(value: Date | any): string | any {\r\n        if (typeof value === \"string\") {\r\n            const [hours, minutes, seconds] = value.split(\":\")\r\n            const date = new Date()\r\n            if (hours) date.setHours(parseInt(hours))\r\n            if (minutes) date.setMinutes(parseInt(minutes))\r\n            if (seconds) date.setSeconds(parseInt(seconds))\r\n            return date\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\r\n     */\r\n    static mixedTimeToString(\r\n        value: string | any,\r\n        skipSeconds: boolean = false,\r\n    ): string | any {\r\n        value =\r\n            value instanceof Date\r\n                ? value.getHours() +\r\n                  \":\" +\r\n                  value.getMinutes() +\r\n                  (!skipSeconds ? \":\" + value.getSeconds() : \"\")\r\n                : value\r\n        if (typeof value === \"string\") {\r\n            return value\r\n                .split(\":\")\r\n                .map((v) => (v.length === 1 ? \"0\" + v : v)) // append zero at beginning if we have a first-zero-less number\r\n                .join(\":\")\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\r\n     */\r\n    static mixedDateToDatetimeString(\r\n        value: Date | any,\r\n        useMilliseconds?: boolean,\r\n    ): string | any {\r\n        if (typeof value === \"string\") {\r\n            value = new Date(value)\r\n        }\r\n        if (value instanceof Date) {\r\n            let finalValue =\r\n                this.formatZerolessValue(value.getFullYear(), 4) +\r\n                \"-\" +\r\n                this.formatZerolessValue(value.getMonth() + 1) +\r\n                \"-\" +\r\n                this.formatZerolessValue(value.getDate()) +\r\n                \" \" +\r\n                this.formatZerolessValue(value.getHours()) +\r\n                \":\" +\r\n                this.formatZerolessValue(value.getMinutes()) +\r\n                \":\" +\r\n                this.formatZerolessValue(value.getSeconds())\r\n\r\n            if (useMilliseconds)\r\n                finalValue += `.${this.formatMilliseconds(\r\n                    value.getMilliseconds(),\r\n                )}`\r\n\r\n            value = finalValue\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss.sss\" format.\r\n     */\r\n    static mixedDateToUtcDatetimeString(value: Date | any): string | any {\r\n        if (typeof value === \"string\") {\r\n            value = new Date(value)\r\n        }\r\n        if (value instanceof Date) {\r\n            return (\r\n                this.formatZerolessValue(value.getUTCFullYear(), 4) +\r\n                \"-\" +\r\n                this.formatZerolessValue(value.getUTCMonth() + 1) +\r\n                \"-\" +\r\n                this.formatZerolessValue(value.getUTCDate()) +\r\n                \" \" +\r\n                this.formatZerolessValue(value.getUTCHours()) +\r\n                \":\" +\r\n                this.formatZerolessValue(value.getUTCMinutes()) +\r\n                \":\" +\r\n                this.formatZerolessValue(value.getUTCSeconds()) +\r\n                \".\" +\r\n                this.formatMilliseconds(value.getUTCMilliseconds())\r\n            )\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Converts each item in the given array to string joined by \",\" separator.\r\n     */\r\n    static simpleArrayToString(value: any[] | any): string[] | any {\r\n        if (Array.isArray(value)) {\r\n            return (value as any[]).map((i) => String(i)).join(\",\")\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Converts given string to simple array split by \",\" separator.\r\n     */\r\n    static stringToSimpleArray(value: string | any): string | any {\r\n        if (typeof value === \"string\") {\r\n            if (value.length > 0) {\r\n                return value.split(\",\")\r\n            } else {\r\n                return []\r\n            }\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    static simpleJsonToString(value: any): string {\r\n        return JSON.stringify(value)\r\n    }\r\n\r\n    static stringToSimpleJson(value: any) {\r\n        return typeof value === \"string\" ? JSON.parse(value) : value\r\n    }\r\n\r\n    static simpleEnumToString(value: any) {\r\n        return \"\" + value\r\n    }\r\n\r\n    static stringToSimpleEnum(value: any, columnMetadata: ColumnMetadata) {\r\n        if (\r\n            columnMetadata.enum &&\r\n            !isNaN(value) &&\r\n            columnMetadata.enum.indexOf(parseInt(value)) >= 0\r\n        ) {\r\n            // convert to number if that exists in poosible enum options\r\n            value = parseInt(value)\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Formats given number to \"0x\" format, e.g. if the totalLength = 2 and the value is 1 then it will return \"01\".\r\n     */\r\n    private static formatZerolessValue(value: number, totalLength = 2): string {\r\n        const pad = \"0\".repeat(totalLength)\r\n\r\n        return String(`${pad}${value}`).slice(-totalLength)\r\n    }\r\n\r\n    /**\r\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\r\n     */\r\n    private static formatMilliseconds(value: number): string {\r\n        if (value < 10) {\r\n            return \"00\" + value\r\n        } else if (value < 100) {\r\n            return \"0\" + value\r\n        } else {\r\n            return String(value)\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}
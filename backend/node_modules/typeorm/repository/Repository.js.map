{"version":3,"sources":["../../src/repository/Repository.ts"],"names":[],"mappings":"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","file":"Repository.js","sourcesContent":["import { FindManyOptions } from \"../find-options/FindManyOptions\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\r\nimport { DeepPartial } from \"../common/DeepPartial\"\r\nimport { SaveOptions } from \"./SaveOptions\"\r\nimport { RemoveOptions } from \"./RemoveOptions\"\r\nimport { EntityManager } from \"../entity-manager/EntityManager\"\r\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\r\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\r\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\r\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\r\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\r\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\r\nimport { ObjectId } from \"../driver/mongodb/typings\"\r\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\r\nimport { UpsertOptions } from \"./UpsertOptions\"\r\nimport { EntityTarget } from \"../common/EntityTarget\"\r\nimport { PickKeysByType } from \"../common/PickKeysByType\"\r\n\r\n/**\r\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\r\n */\r\nexport class Repository<Entity extends ObjectLiteral> {\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity target that is managed by this repository.\r\n     * If this repository manages entity from schema,\r\n     * then it returns a name of that schema instead.\r\n     */\r\n    readonly target: EntityTarget<Entity>\r\n\r\n    /**\r\n     * Entity Manager used by this repository.\r\n     */\r\n    readonly manager: EntityManager\r\n\r\n    /**\r\n     * Query runner provider used for this repository.\r\n     */\r\n    readonly queryRunner?: QueryRunner\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the entity current repository manages.\r\n     */\r\n    get metadata() {\r\n        return this.manager.connection.getMetadata(this.target)\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        target: EntityTarget<Entity>,\r\n        manager: EntityManager,\r\n        queryRunner?: QueryRunner,\r\n    ) {\r\n        this.target = target\r\n        this.manager = manager\r\n        this.queryRunner = queryRunner\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a SQL query.\r\n     */\r\n    createQueryBuilder(\r\n        alias?: string,\r\n        queryRunner?: QueryRunner,\r\n    ): SelectQueryBuilder<Entity> {\r\n        return this.manager.createQueryBuilder<Entity>(\r\n            this.metadata.target as any,\r\n            alias || this.metadata.targetName,\r\n            queryRunner || this.queryRunner,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     * If entity composite compose ids, it will check them all.\r\n     */\r\n    hasId(entity: Entity): boolean {\r\n        return this.manager.hasId(this.metadata.target, entity)\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    getId(entity: Entity): any {\r\n        return this.manager.getId(this.metadata.target, entity)\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    create(): Entity\r\n\r\n    /**\r\n     * Creates new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that are present in entity schema.\r\n     */\r\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[]\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that are present in entity schema.\r\n     */\r\n    create(entityLike: DeepPartial<Entity>): Entity\r\n\r\n    /**\r\n     * Creates a new entity instance or instances.\r\n     * Can copy properties from the given object into new entities.\r\n     */\r\n    create(\r\n        plainEntityLikeOrPlainEntityLikes?:\r\n            | DeepPartial<Entity>\r\n            | DeepPartial<Entity>[],\r\n    ): Entity | Entity[] {\r\n        return this.manager.create(\r\n            this.metadata.target as any,\r\n            plainEntityLikeOrPlainEntityLikes as any,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Merges multiple entities (or entity-like objects) into a given entity.\r\n     */\r\n    merge(\r\n        mergeIntoEntity: Entity,\r\n        ...entityLikes: DeepPartial<Entity>[]\r\n    ): Entity {\r\n        return this.manager.merge(\r\n            this.metadata.target as any,\r\n            mergeIntoEntity,\r\n            ...entityLikes,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     *\r\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\r\n     * Returns undefined if entity with given id was not found.\r\n     */\r\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity | undefined> {\r\n        return this.manager.preload(this.metadata.target as any, entityLike)\r\n    }\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<T extends DeepPartial<Entity>>(\r\n        entities: T[],\r\n        options: SaveOptions & { reload: false },\r\n    ): Promise<T[]>\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<T extends DeepPartial<Entity>>(\r\n        entities: T[],\r\n        options?: SaveOptions,\r\n    ): Promise<(T & Entity)[]>\r\n\r\n    /**\r\n     * Saves a given entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<T extends DeepPartial<Entity>>(\r\n        entity: T,\r\n        options: SaveOptions & { reload: false },\r\n    ): Promise<T>\r\n\r\n    /**\r\n     * Saves a given entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save<T extends DeepPartial<Entity>>(\r\n        entity: T,\r\n        options?: SaveOptions,\r\n    ): Promise<T & Entity>\r\n\r\n    /**\r\n     * Saves one or many given entities.\r\n     */\r\n    save<T extends DeepPartial<Entity>>(\r\n        entityOrEntities: T | T[],\r\n        options?: SaveOptions,\r\n    ): Promise<T | T[]> {\r\n        return this.manager.save<Entity, T>(\r\n            this.metadata.target as any,\r\n            entityOrEntities as any,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Removes a given entities from the database.\r\n     */\r\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>\r\n\r\n    /**\r\n     * Removes one or many given entities.\r\n     */\r\n    remove(\r\n        entityOrEntities: Entity | Entity[],\r\n        options?: RemoveOptions,\r\n    ): Promise<Entity | Entity[]> {\r\n        return this.manager.remove(\r\n            this.metadata.target as any,\r\n            entityOrEntities as any,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Records the delete date of all given entities.\r\n     */\r\n    softRemove<T extends DeepPartial<Entity>>(\r\n        entities: T[],\r\n        options: SaveOptions & { reload: false },\r\n    ): Promise<T[]>\r\n\r\n    /**\r\n     * Records the delete date of all given entities.\r\n     */\r\n    softRemove<T extends DeepPartial<Entity>>(\r\n        entities: T[],\r\n        options?: SaveOptions,\r\n    ): Promise<(T & Entity)[]>\r\n\r\n    /**\r\n     * Records the delete date of a given entity.\r\n     */\r\n    softRemove<T extends DeepPartial<Entity>>(\r\n        entity: T,\r\n        options: SaveOptions & { reload: false },\r\n    ): Promise<T>\r\n\r\n    /**\r\n     * Records the delete date of a given entity.\r\n     */\r\n    softRemove<T extends DeepPartial<Entity>>(\r\n        entity: T,\r\n        options?: SaveOptions,\r\n    ): Promise<T & Entity>\r\n\r\n    /**\r\n     * Records the delete date of one or many given entities.\r\n     */\r\n    softRemove<T extends DeepPartial<Entity>>(\r\n        entityOrEntities: T | T[],\r\n        options?: SaveOptions,\r\n    ): Promise<T | T[]> {\r\n        return this.manager.softRemove<Entity, T>(\r\n            this.metadata.target as any,\r\n            entityOrEntities as any,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Recovers all given entities in the database.\r\n     */\r\n    recover<T extends DeepPartial<Entity>>(\r\n        entities: T[],\r\n        options: SaveOptions & { reload: false },\r\n    ): Promise<T[]>\r\n\r\n    /**\r\n     * Recovers all given entities in the database.\r\n     */\r\n    recover<T extends DeepPartial<Entity>>(\r\n        entities: T[],\r\n        options?: SaveOptions,\r\n    ): Promise<(T & Entity)[]>\r\n\r\n    /**\r\n     * Recovers a given entity in the database.\r\n     */\r\n    recover<T extends DeepPartial<Entity>>(\r\n        entity: T,\r\n        options: SaveOptions & { reload: false },\r\n    ): Promise<T>\r\n\r\n    /**\r\n     * Recovers a given entity in the database.\r\n     */\r\n    recover<T extends DeepPartial<Entity>>(\r\n        entity: T,\r\n        options?: SaveOptions,\r\n    ): Promise<T & Entity>\r\n\r\n    /**\r\n     * Recovers one or many given entities.\r\n     */\r\n    recover<T extends DeepPartial<Entity>>(\r\n        entityOrEntities: T | T[],\r\n        options?: SaveOptions,\r\n    ): Promise<T | T[]> {\r\n        return this.manager.recover<Entity, T>(\r\n            this.metadata.target as any,\r\n            entityOrEntities as any,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Inserts a given entity into the database.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient INSERT query.\r\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\r\n     */\r\n    insert(\r\n        entity:\r\n            | QueryDeepPartialEntity<Entity>\r\n            | QueryDeepPartialEntity<Entity>[],\r\n    ): Promise<InsertResult> {\r\n        return this.manager.insert(this.metadata.target as any, entity)\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient UPDATE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    update(\r\n        criteria:\r\n            | string\r\n            | string[]\r\n            | number\r\n            | number[]\r\n            | Date\r\n            | Date[]\r\n            | ObjectId\r\n            | ObjectId[]\r\n            | FindOptionsWhere<Entity>,\r\n        partialEntity: QueryDeepPartialEntity<Entity>,\r\n    ): Promise<UpdateResult> {\r\n        return this.manager.update(\r\n            this.metadata.target as any,\r\n            criteria as any,\r\n            partialEntity,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\r\n     */\r\n    upsert(\r\n        entityOrEntities:\r\n            | QueryDeepPartialEntity<Entity>\r\n            | QueryDeepPartialEntity<Entity>[],\r\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\r\n    ): Promise<InsertResult> {\r\n        return this.manager.upsert(\r\n            this.metadata.target as any,\r\n            entityOrEntities,\r\n            conflictPathsOrOptions,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Deletes entities by a given criteria.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient DELETE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    delete(\r\n        criteria:\r\n            | string\r\n            | string[]\r\n            | number\r\n            | number[]\r\n            | Date\r\n            | Date[]\r\n            | ObjectId\r\n            | ObjectId[]\r\n            | FindOptionsWhere<Entity>,\r\n    ): Promise<DeleteResult> {\r\n        return this.manager.delete(this.metadata.target as any, criteria as any)\r\n    }\r\n\r\n    /**\r\n     * Records the delete date of entities by a given criteria.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient SOFT-DELETE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    softDelete(\r\n        criteria:\r\n            | string\r\n            | string[]\r\n            | number\r\n            | number[]\r\n            | Date\r\n            | Date[]\r\n            | ObjectId\r\n            | ObjectId[]\r\n            | FindOptionsWhere<Entity>,\r\n    ): Promise<UpdateResult> {\r\n        return this.manager.softDelete(\r\n            this.metadata.target as any,\r\n            criteria as any,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Restores entities by a given criteria.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient SOFT-DELETE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    restore(\r\n        criteria:\r\n            | string\r\n            | string[]\r\n            | number\r\n            | number[]\r\n            | Date\r\n            | Date[]\r\n            | ObjectId\r\n            | ObjectId[]\r\n            | FindOptionsWhere<Entity>,\r\n    ): Promise<UpdateResult> {\r\n        return this.manager.restore(\r\n            this.metadata.target as any,\r\n            criteria as any,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks whether any entity exists that matches the given options.\r\n     *\r\n     * @deprecated use `exists` method instead, for example:\r\n     *\r\n     * .exists()\r\n     */\r\n    exist(options?: FindManyOptions<Entity>): Promise<boolean> {\r\n        return this.manager.exists(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Checks whether any entity exists that matches the given options.\r\n     */\r\n    exists(options?: FindManyOptions<Entity>): Promise<boolean> {\r\n        return this.manager.exists(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Checks whether any entity exists that matches the given conditions.\r\n     */\r\n    existsBy(\r\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\r\n    ): Promise<boolean> {\r\n        return this.manager.existsBy(this.metadata.target, where)\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     * Useful for pagination.\r\n     */\r\n    count(options?: FindManyOptions<Entity>): Promise<number> {\r\n        return this.manager.count(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given conditions.\r\n     * Useful for pagination.\r\n     */\r\n    countBy(\r\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\r\n    ): Promise<number> {\r\n        return this.manager.countBy(this.metadata.target, where)\r\n    }\r\n\r\n    /**\r\n     * Return the SUM of a column\r\n     */\r\n    sum(\r\n        columnName: PickKeysByType<Entity, number>,\r\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\r\n    ): Promise<number | null> {\r\n        return this.manager.sum(this.metadata.target, columnName, where)\r\n    }\r\n\r\n    /**\r\n     * Return the AVG of a column\r\n     */\r\n    average(\r\n        columnName: PickKeysByType<Entity, number>,\r\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\r\n    ): Promise<number | null> {\r\n        return this.manager.average(this.metadata.target, columnName, where)\r\n    }\r\n\r\n    /**\r\n     * Return the MIN of a column\r\n     */\r\n    minimum(\r\n        columnName: PickKeysByType<Entity, number>,\r\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\r\n    ): Promise<number | null> {\r\n        return this.manager.minimum(this.metadata.target, columnName, where)\r\n    }\r\n\r\n    /**\r\n     * Return the MAX of a column\r\n     */\r\n    maximum(\r\n        columnName: PickKeysByType<Entity, number>,\r\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\r\n    ): Promise<number | null> {\r\n        return this.manager.maximum(this.metadata.target, columnName, where)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     */\r\n    async find(options?: FindManyOptions<Entity>): Promise<Entity[]> {\r\n        return this.manager.find(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     */\r\n    async findBy(\r\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\r\n    ): Promise<Entity[]> {\r\n        return this.manager.findBy(this.metadata.target, where)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCount(\r\n        options?: FindManyOptions<Entity>,\r\n    ): Promise<[Entity[], number]> {\r\n        return this.manager.findAndCount(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given WHERE conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    findAndCountBy(\r\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\r\n    ): Promise<[Entity[], number]> {\r\n        return this.manager.findAndCountBy(this.metadata.target, where)\r\n    }\r\n\r\n    /**\r\n     * Finds entities with ids.\r\n     * Optionally find options or conditions can be applied.\r\n     *\r\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\r\n     *\r\n     * .findBy({\r\n     *     id: In([1, 2, 3])\r\n     * })\r\n     */\r\n    async findByIds(ids: any[]): Promise<Entity[]> {\r\n        return this.manager.findByIds(this.metadata.target, ids)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity by a given find options.\r\n     * If entity was not found in the database - returns null.\r\n     */\r\n    async findOne(options: FindOneOptions<Entity>): Promise<Entity | null> {\r\n        return this.manager.findOne(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given where condition.\r\n     * If entity was not found in the database - returns null.\r\n     */\r\n    async findOneBy(\r\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\r\n    ): Promise<Entity | null> {\r\n        return this.manager.findOneBy(this.metadata.target, where)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given id.\r\n     * If entity was not found in the database - returns null.\r\n     *\r\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\r\n     *\r\n     * .findOneBy({\r\n     *     id: 1 // where \"id\" is your primary column name\r\n     * })\r\n     */\r\n    async findOneById(\r\n        id: number | string | Date | ObjectId,\r\n    ): Promise<Entity | null> {\r\n        return this.manager.findOneById(this.metadata.target, id)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity by a given find options.\r\n     * If entity was not found in the database - rejects with error.\r\n     */\r\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\r\n        return this.manager.findOneOrFail(this.metadata.target, options)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given where condition.\r\n     * If entity was not found in the database - rejects with error.\r\n     */\r\n    async findOneByOrFail(\r\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\r\n    ): Promise<Entity> {\r\n        return this.manager.findOneByOrFail(this.metadata.target, where)\r\n    }\r\n\r\n    /**\r\n     * Executes a raw SQL query and returns a raw database results.\r\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\r\n     * \r\n     * @see [Official docs](https://typeorm.io/repository-api) for examples.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        return this.manager.query(query, parameters)\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table/collection (truncates/drops it).\r\n     *\r\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\r\n     * @see https://stackoverflow.com/a/5972738/925151\r\n     */\r\n    clear(): Promise<void> {\r\n        return this.manager.clear(this.metadata.target)\r\n    }\r\n\r\n    /**\r\n     * Increments some column by provided value of the entities matched given conditions.\r\n     */\r\n    increment(\r\n        conditions: FindOptionsWhere<Entity>,\r\n        propertyPath: string,\r\n        value: number | string,\r\n    ): Promise<UpdateResult> {\r\n        return this.manager.increment(\r\n            this.metadata.target,\r\n            conditions,\r\n            propertyPath,\r\n            value,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Decrements some column by provided value of the entities matched given conditions.\r\n     */\r\n    decrement(\r\n        conditions: FindOptionsWhere<Entity>,\r\n        propertyPath: string,\r\n        value: number | string,\r\n    ): Promise<UpdateResult> {\r\n        return this.manager.decrement(\r\n            this.metadata.target,\r\n            conditions,\r\n            propertyPath,\r\n            value,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Extends repository with provided functions.\r\n     */\r\n    extend<CustomRepository>(\r\n        customs: CustomRepository & ThisType<this & CustomRepository>,\r\n    ): this & CustomRepository {\r\n        // return {\r\n        //     ...this,\r\n        //     ...custom\r\n        // };\r\n        const thisRepo: any = this.constructor\r\n        const { target, manager, queryRunner } = this\r\n        const ChildClass = class extends thisRepo {\r\n            constructor(\r\n                target: EntityTarget<Entity>,\r\n                manager: EntityManager,\r\n                queryRunner?: QueryRunner,\r\n            ) {\r\n                super(target, manager, queryRunner)\r\n            }\r\n        }\r\n        for (const custom in customs)\r\n            ChildClass.prototype[custom] = customs[custom]\r\n        return new ChildClass(target, manager, queryRunner) as any\r\n    }\r\n}\r\n"],"sourceRoot":".."}
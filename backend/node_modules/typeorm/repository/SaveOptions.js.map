{"version":3,"sources":["../../src/repository/SaveOptions.ts"],"names":[],"mappings":"","file":"SaveOptions.js","sourcesContent":["/**\r\n * Special options passed to Repository#save, Repository#insert and Repository#update methods.\r\n */\r\nexport interface SaveOptions {\r\n    /**\r\n     * Additional data to be passed with persist method.\r\n     * This data can be used in subscribers then.\r\n     */\r\n    data?: any\r\n\r\n    /**\r\n     * Indicates if listeners and subscribers are called for this operation.\r\n     * By default they are enabled, you can disable them by setting { listeners: false } in save/remove options.\r\n     */\r\n    listeners?: boolean\r\n\r\n    /**\r\n     * By default transactions are enabled and all queries in persistence operation are wrapped into the transaction.\r\n     * You can disable this behaviour by setting { transaction: false } in the persistence options.\r\n     */\r\n    transaction?: boolean\r\n\r\n    /**\r\n     * Breaks save execution into chunks of a given size.\r\n     * For example, if you want to save 100,000 objects but you have issues with saving them,\r\n     * you can break them into 10 groups of 10,000 objects (by setting { chunk: 10000 }) and save each group separately.\r\n     * This option is needed to perform very big insertions when you have issues with underlying driver parameter number limitation.\r\n     */\r\n    chunk?: number\r\n\r\n    /**\r\n     * Flag to determine whether the entity that is being persisted\r\n     * should be reloaded during the persistence operation.\r\n     *\r\n     * It will work only on databases which does not support RETURNING / OUTPUT statement.\r\n     * Enabled by default.\r\n     */\r\n    reload?: boolean\r\n}\r\n"],"sourceRoot":".."}
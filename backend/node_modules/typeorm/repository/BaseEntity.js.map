{"version":3,"sources":["../../src/repository/BaseEntity.ts"],"names":[],"mappings":"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","file":"BaseEntity.js","sourcesContent":["import { Repository } from \"./Repository\"\r\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\r\nimport { DeepPartial } from \"../common/DeepPartial\"\r\nimport { SaveOptions } from \"./SaveOptions\"\r\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\r\nimport { RemoveOptions } from \"./RemoveOptions\"\r\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\r\nimport { DataSource } from \"../data-source\"\r\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\r\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\r\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\r\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\r\nimport { ObjectId } from \"../driver/mongodb/typings\"\r\nimport { ObjectUtils } from \"../util/ObjectUtils\"\r\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\r\nimport { UpsertOptions } from \"./UpsertOptions\"\r\nimport { EntityTarget } from \"../common/EntityTarget\"\r\nimport { PickKeysByType } from \"../common/PickKeysByType\"\r\n\r\n/**\r\n * Base abstract entity for all entities, used in ActiveRecord patterns.\r\n */\r\nexport class BaseEntity {\r\n    // -------------------------------------------------------------------------\r\n    // Private Static Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * DataSource used in all static methods of the BaseEntity.\r\n     */\r\n    private static dataSource: DataSource | null\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if entity has an id.\r\n     * If entity composite compose ids, it will check them all.\r\n     */\r\n    hasId(): boolean {\r\n        const baseEntity = this.constructor as typeof BaseEntity\r\n        return baseEntity.getRepository().hasId(this)\r\n    }\r\n\r\n    /**\r\n     * Saves current entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    save(options?: SaveOptions): Promise<this> {\r\n        const baseEntity = this.constructor as typeof BaseEntity\r\n        return baseEntity.getRepository().save(this, options)\r\n    }\r\n\r\n    /**\r\n     * Removes current entity from the database.\r\n     */\r\n    remove(options?: RemoveOptions): Promise<this> {\r\n        const baseEntity = this.constructor as typeof BaseEntity\r\n        return baseEntity.getRepository().remove(this, options) as Promise<this>\r\n    }\r\n\r\n    /**\r\n     * Records the delete date of current entity.\r\n     */\r\n    softRemove(options?: SaveOptions): Promise<this> {\r\n        const baseEntity = this.constructor as typeof BaseEntity\r\n        return baseEntity.getRepository().softRemove(this, options)\r\n    }\r\n\r\n    /**\r\n     * Recovers a given entity in the database.\r\n     */\r\n    recover(options?: SaveOptions): Promise<this> {\r\n        const baseEntity = this.constructor as typeof BaseEntity\r\n        return baseEntity.getRepository().recover(this, options)\r\n    }\r\n\r\n    /**\r\n     * Reloads entity data from the database.\r\n     */\r\n    async reload(): Promise<void> {\r\n        const baseEntity = this.constructor as typeof BaseEntity\r\n        const id = baseEntity.getRepository().metadata.getEntityIdMap(this)\r\n        if (!id) {\r\n            throw new Error(\r\n                `Entity doesn't have id-s set, cannot reload entity`,\r\n            )\r\n        }\r\n        const reloadedEntity: BaseEntity = await baseEntity\r\n            .getRepository()\r\n            .findOneByOrFail(id)\r\n\r\n        ObjectUtils.assign(this, reloadedEntity)\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Sets DataSource to be used by entity.\r\n     */\r\n    static useDataSource(dataSource: DataSource | null) {\r\n        this.dataSource = dataSource\r\n    }\r\n\r\n    /**\r\n     * Gets current entity's Repository.\r\n     */\r\n    static getRepository<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n    ): Repository<T> {\r\n        const dataSource = (this as typeof BaseEntity).dataSource\r\n        if (!dataSource)\r\n            throw new Error(`DataSource is not set for this entity.`)\r\n        return dataSource.getRepository<T>(this)\r\n    }\r\n\r\n    /**\r\n     * Returns object that is managed by this repository.\r\n     * If this repository manages entity from schema,\r\n     * then it returns a name of that schema instead.\r\n     */\r\n    static get target(): EntityTarget<any> {\r\n        return this.getRepository().target\r\n    }\r\n\r\n    /**\r\n     * Checks entity has an id.\r\n     * If entity composite compose ids, it will check them all.\r\n     */\r\n    static hasId(entity: BaseEntity): boolean {\r\n        return this.getRepository().hasId(entity)\r\n    }\r\n\r\n    /**\r\n     * Gets entity mixed id.\r\n     */\r\n    static getId<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entity: T,\r\n    ): any {\r\n        return this.getRepository<T>().getId(entity)\r\n    }\r\n\r\n    /**\r\n     * Creates a new query builder that can be used to build a SQL query.\r\n     */\r\n    static createQueryBuilder<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        alias?: string,\r\n    ): SelectQueryBuilder<T> {\r\n        return this.getRepository<T>().createQueryBuilder(alias)\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity instance.\r\n     */\r\n    static create<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n    ): T\r\n\r\n    /**\r\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    static create<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entityLikeArray: DeepPartial<T>[],\r\n    ): T[]\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    static create<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entityLike: DeepPartial<T>,\r\n    ): T\r\n\r\n    /**\r\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\r\n     * Note that it copies only properties that present in entity schema.\r\n     */\r\n    static create<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entityOrEntities?: any,\r\n    ) {\r\n        return this.getRepository<T>().create(entityOrEntities)\r\n    }\r\n\r\n    /**\r\n     * Merges multiple entities (or entity-like objects) into a given entity.\r\n     */\r\n    static merge<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        mergeIntoEntity: T,\r\n        ...entityLikes: DeepPartial<T>[]\r\n    ): T {\r\n        return this.getRepository<T>().merge(\r\n            mergeIntoEntity,\r\n            ...entityLikes,\r\n        ) as T\r\n    }\r\n\r\n    /**\r\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\r\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\r\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\r\n     * replaced from the new object.\r\n     *\r\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\r\n     * Returns undefined if entity with given id was not found.\r\n     */\r\n    static preload<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entityLike: DeepPartial<T>,\r\n    ): Promise<T | undefined> {\r\n        const thisRepository = this.getRepository<T>()\r\n        return thisRepository.preload(entityLike)\r\n    }\r\n\r\n    /**\r\n     * Saves all given entities in the database.\r\n     * If entities do not exist in the database then inserts, otherwise updates.\r\n     */\r\n    static save<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entities: DeepPartial<T>[],\r\n        options?: SaveOptions,\r\n    ): Promise<T[]>\r\n\r\n    /**\r\n     * Saves a given entity in the database.\r\n     * If entity does not exist in the database then inserts, otherwise updates.\r\n     */\r\n    static save<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entity: DeepPartial<T>,\r\n        options?: SaveOptions,\r\n    ): Promise<T>\r\n\r\n    /**\r\n     * Saves one or many given entities.\r\n     */\r\n    static save<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entityOrEntities: DeepPartial<T> | DeepPartial<T>[],\r\n        options?: SaveOptions,\r\n    ) {\r\n        return this.getRepository<T>().save(entityOrEntities as any, options)\r\n    }\r\n\r\n    /**\r\n     * Removes a given entities from the database.\r\n     */\r\n    static remove<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entities: T[],\r\n        options?: RemoveOptions,\r\n    ): Promise<T[]>\r\n\r\n    /**\r\n     * Removes a given entity from the database.\r\n     */\r\n    static remove<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entity: T,\r\n        options?: RemoveOptions,\r\n    ): Promise<T>\r\n\r\n    /**\r\n     * Removes one or many given entities.\r\n     */\r\n    static remove<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entityOrEntities: T | T[],\r\n        options?: RemoveOptions,\r\n    ) {\r\n        return this.getRepository<T>().remove(entityOrEntities as any, options)\r\n    }\r\n\r\n    /**\r\n     * Records the delete date of all given entities.\r\n     */\r\n    static softRemove<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entities: T[],\r\n        options?: SaveOptions,\r\n    ): Promise<T[]>\r\n\r\n    /**\r\n     * Records the delete date of a given entity.\r\n     */\r\n    static softRemove<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entity: T,\r\n        options?: SaveOptions,\r\n    ): Promise<T>\r\n\r\n    /**\r\n     * Records the delete date of one or many given entities.\r\n     */\r\n    static softRemove<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entityOrEntities: T | T[],\r\n        options?: SaveOptions,\r\n    ) {\r\n        return this.getRepository<T>().softRemove(\r\n            entityOrEntities as any,\r\n            options,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Inserts a given entity into the database.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient INSERT query.\r\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\r\n     */\r\n    static insert<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entity: QueryDeepPartialEntity<T> | QueryDeepPartialEntity<T>[],\r\n    ): Promise<InsertResult> {\r\n        return this.getRepository<T>().insert(entity)\r\n    }\r\n\r\n    /**\r\n     * Updates entity partially. Entity can be found by a given conditions.\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient UPDATE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    static update<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        criteria:\r\n            | string\r\n            | string[]\r\n            | number\r\n            | number[]\r\n            | Date\r\n            | Date[]\r\n            | ObjectId\r\n            | ObjectId[]\r\n            | FindOptionsWhere<T>,\r\n        partialEntity: QueryDeepPartialEntity<T>,\r\n    ): Promise<UpdateResult> {\r\n        return this.getRepository<T>().update(criteria, partialEntity)\r\n    }\r\n\r\n    /**\r\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\r\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\r\n     */\r\n    static upsert<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        entityOrEntities:\r\n            | QueryDeepPartialEntity<T>\r\n            | QueryDeepPartialEntity<T>[],\r\n        conflictPathsOrOptions: string[] | UpsertOptions<T>,\r\n    ): Promise<InsertResult> {\r\n        return this.getRepository<T>().upsert(\r\n            entityOrEntities,\r\n            conflictPathsOrOptions,\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Deletes entities by a given criteria.\r\n     * Unlike remove method executes a primitive operation without cascades, relations and other operations included.\r\n     * Executes fast and efficient DELETE query.\r\n     * Does not check if entity exist in the database.\r\n     */\r\n    static delete<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        criteria:\r\n            | string\r\n            | string[]\r\n            | number\r\n            | number[]\r\n            | Date\r\n            | Date[]\r\n            | ObjectId\r\n            | ObjectId[]\r\n            | FindOptionsWhere<T>,\r\n    ): Promise<DeleteResult> {\r\n        return this.getRepository<T>().delete(criteria)\r\n    }\r\n\r\n    /**\r\n     * Checks whether any entity exists that matches the given options.\r\n     */\r\n    static exists<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        options?: FindManyOptions<T>,\r\n    ): Promise<boolean> {\r\n        return this.getRepository<T>().exists(options)\r\n    }\r\n\r\n    /**\r\n     * Checks whether any entity exists that matches the given conditions.\r\n     */\r\n    static existsBy<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        where: FindOptionsWhere<T>,\r\n    ): Promise<boolean> {\r\n        return this.getRepository<T>().existsBy(where)\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given options.\r\n     */\r\n    static count<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        options?: FindManyOptions<T>,\r\n    ): Promise<number> {\r\n        return this.getRepository<T>().count(options)\r\n    }\r\n\r\n    /**\r\n     * Counts entities that match given WHERE conditions.\r\n     */\r\n    static countBy<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        where: FindOptionsWhere<T>,\r\n    ): Promise<number> {\r\n        return this.getRepository<T>().countBy(where)\r\n    }\r\n\r\n    /**\r\n     * Return the SUM of a column\r\n     */\r\n    static sum<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        columnName: PickKeysByType<T, number>,\r\n        where: FindOptionsWhere<T>,\r\n    ): Promise<number | null> {\r\n        return this.getRepository<T>().sum(columnName, where)\r\n    }\r\n\r\n    /**\r\n     * Return the AVG of a column\r\n     */\r\n    static average<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        columnName: PickKeysByType<T, number>,\r\n        where: FindOptionsWhere<T>,\r\n    ): Promise<number | null> {\r\n        return this.getRepository<T>().average(columnName, where)\r\n    }\r\n\r\n    /**\r\n     * Return the MIN of a column\r\n     */\r\n    static minimum<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        columnName: PickKeysByType<T, number>,\r\n        where: FindOptionsWhere<T>,\r\n    ): Promise<number | null> {\r\n        return this.getRepository<T>().minimum(columnName, where)\r\n    }\r\n\r\n    /**\r\n     * Return the MAX of a column\r\n     */\r\n    static maximum<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        columnName: PickKeysByType<T, number>,\r\n        where: FindOptionsWhere<T>,\r\n    ): Promise<number | null> {\r\n        return this.getRepository<T>().maximum(columnName, where)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given options.\r\n     */\r\n    static find<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        options?: FindManyOptions<T>,\r\n    ): Promise<T[]> {\r\n        return this.getRepository<T>().find(options)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given WHERE conditions.\r\n     */\r\n    static findBy<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        where: FindOptionsWhere<T>,\r\n    ): Promise<T[]> {\r\n        return this.getRepository<T>().findBy(where)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given find options.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    static findAndCount<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        options?: FindManyOptions<T>,\r\n    ): Promise<[T[], number]> {\r\n        return this.getRepository<T>().findAndCount(options)\r\n    }\r\n\r\n    /**\r\n     * Finds entities that match given WHERE conditions.\r\n     * Also counts all entities that match given conditions,\r\n     * but ignores pagination settings (from and take options).\r\n     */\r\n    static findAndCountBy<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        where: FindOptionsWhere<T>,\r\n    ): Promise<[T[], number]> {\r\n        return this.getRepository<T>().findAndCountBy(where)\r\n    }\r\n\r\n    /**\r\n     * Finds entities by ids.\r\n     * Optionally find options can be applied.\r\n     *\r\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\r\n     *\r\n     * .findBy({\r\n     *     id: In([1, 2, 3])\r\n     * })\r\n     */\r\n    static findByIds<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        ids: any[],\r\n    ): Promise<T[]> {\r\n        return this.getRepository<T>().findByIds(ids)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    static findOne<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        options: FindOneOptions<T>,\r\n    ): Promise<T | null> {\r\n        return this.getRepository<T>().findOne(options)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    static findOneBy<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        where: FindOptionsWhere<T>,\r\n    ): Promise<T | null> {\r\n        return this.getRepository<T>().findOneBy(where)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given options.\r\n     *\r\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\r\n     *\r\n     * .findOneBy({\r\n     *     id: 1 // where \"id\" is your primary column name\r\n     * })\r\n     */\r\n    static findOneById<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        id: string | number | Date | ObjectId,\r\n    ): Promise<T | null> {\r\n        return this.getRepository<T>().findOneById(id)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    static findOneOrFail<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        options: FindOneOptions<T>,\r\n    ): Promise<T> {\r\n        return this.getRepository<T>().findOneOrFail(options)\r\n    }\r\n\r\n    /**\r\n     * Finds first entity that matches given conditions.\r\n     */\r\n    static findOneByOrFail<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        where: FindOptionsWhere<T>,\r\n    ): Promise<T> {\r\n        return this.getRepository<T>().findOneByOrFail(where)\r\n    }\r\n\r\n    /**\r\n     * Executes a raw SQL query and returns a raw database results.\r\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\r\n     */\r\n    static query<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n        query: string,\r\n        parameters?: any[],\r\n    ): Promise<any> {\r\n        return this.getRepository<T>().query(query, parameters)\r\n    }\r\n\r\n    /**\r\n     * Clears all the data from the given table/collection (truncates/drops it).\r\n     */\r\n    static clear<T extends BaseEntity>(\r\n        this: { new (): T } & typeof BaseEntity,\r\n    ): Promise<void> {\r\n        return this.getRepository<T>().clear()\r\n    }\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../../src/find-options/FindOptionsUtils.ts"],"names":[],"mappings":"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","file":"FindOptionsUtils.js","sourcesContent":["import { FindManyOptions } from \"./FindManyOptions\"\r\nimport { FindOneOptions } from \"./FindOneOptions\"\r\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\r\nimport { FindRelationsNotFoundError } from \"../error\"\r\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\r\nimport { DriverUtils } from \"../driver/DriverUtils\"\r\nimport { FindTreeOptions } from \"./FindTreeOptions\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\r\nimport { EntityPropertyNotFoundError } from \"../error\"\r\n\r\n/**\r\n * Utilities to work with FindOptions.\r\n */\r\nexport class FindOptionsUtils {\r\n    // -------------------------------------------------------------------------\r\n    // Public Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOneOptions interface.\r\n     */\r\n    static isFindOneOptions<Entity = any>(\r\n        obj: any,\r\n    ): obj is FindOneOptions<Entity> {\r\n        const possibleOptions: FindOneOptions<Entity> = obj\r\n        return (\r\n            possibleOptions &&\r\n            (Array.isArray(possibleOptions.select) ||\r\n                Array.isArray(possibleOptions.relations) ||\r\n                typeof possibleOptions.select === \"object\" ||\r\n                typeof possibleOptions.relations === \"object\" ||\r\n                typeof possibleOptions.where === \"object\" ||\r\n                // typeof possibleOptions.where === \"string\" ||\r\n                typeof possibleOptions.join === \"object\" ||\r\n                typeof possibleOptions.order === \"object\" ||\r\n                typeof possibleOptions.cache === \"object\" ||\r\n                typeof possibleOptions.cache === \"boolean\" ||\r\n                typeof possibleOptions.cache === \"number\" ||\r\n                typeof possibleOptions.comment === \"string\" ||\r\n                typeof possibleOptions.lock === \"object\" ||\r\n                typeof possibleOptions.loadRelationIds === \"object\" ||\r\n                typeof possibleOptions.loadRelationIds === \"boolean\" ||\r\n                typeof possibleOptions.loadEagerRelations === \"boolean\" ||\r\n                typeof possibleOptions.withDeleted === \"boolean\" ||\r\n                typeof possibleOptions.relationLoadStrategy === \"string\" ||\r\n                typeof possibleOptions.transaction === \"boolean\")\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindManyOptions interface.\r\n     */\r\n    static isFindManyOptions<Entity = any>(\r\n        obj: any,\r\n    ): obj is FindManyOptions<Entity> {\r\n        const possibleOptions: FindManyOptions<Entity> = obj\r\n        return (\r\n            possibleOptions &&\r\n            (this.isFindOneOptions(possibleOptions) ||\r\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\r\n                    \"number\" ||\r\n                typeof (possibleOptions as FindManyOptions<any>).take ===\r\n                    \"number\" ||\r\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\r\n                    \"string\" ||\r\n                typeof (possibleOptions as FindManyOptions<any>).take ===\r\n                    \"string\")\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Checks if given object is really instance of FindOptions interface.\r\n     */\r\n    static extractFindManyOptionsAlias(object: any): string | undefined {\r\n        if (this.isFindManyOptions(object) && object.join)\r\n            return object.join.alias\r\n\r\n        return undefined\r\n    }\r\n\r\n    /**\r\n     * Applies give find many options to the given query builder.\r\n\r\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\r\n        if (this.isFindManyOptions(options))\r\n            return this.applyOptionsToQueryBuilder(qb, options);\r\n\r\n        if (options)\r\n            return qb.where(options);\r\n\r\n        return qb;\r\n    }*/\r\n\r\n    /**\r\n     * Applies give find options to the given query builder.\r\n\r\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\r\n\r\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\r\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\r\n            return qb;\r\n\r\n        if (options.transaction === true) {\r\n            qb.expressionMap.useTransaction = true;\r\n        }\r\n\r\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\r\n            return qb;\r\n\r\n        const metadata = qb.expressionMap.mainAlias!.metadata;\r\n\r\n        // apply all options from FindOptions\r\n        if (options.comment) {\r\n            qb.comment(options.comment);\r\n        }\r\n\r\n        if (options.withDeleted) {\r\n            qb.withDeleted();\r\n        }\r\n\r\n        if (options.select) {\r\n            qb.select([]);\r\n            options.select.forEach(select => {\r\n                if (!metadata.hasColumnWithPropertyPath(`${select}`))\r\n                    throw new TypeORMError(`${select} column was not found in the ${metadata.name} entity.`);\r\n\r\n                const columns = metadata.findColumnsWithPropertyPath(`${select}`);\r\n\r\n                for (const column of columns) {\r\n                    qb.addSelect(qb.alias + \".\" + column.propertyPath);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (options.relations) {\r\n            // Copy because `applyRelationsRecursively` modifies it\r\n            const allRelations = [...options.relations];\r\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias!.name, qb.expressionMap.mainAlias!.metadata, \"\");\r\n            // recursive removes found relations from allRelations array\r\n            // if there are relations left in this array it means those relations were not found in the entity structure\r\n            // so, we give an exception about not found relations\r\n            if (allRelations.length > 0)\r\n                throw new FindRelationsNotFoundError(allRelations);\r\n        }\r\n\r\n        if (options.join) {\r\n            if (options.join.leftJoin)\r\n                Object.keys(options.join.leftJoin).forEach(key => {\r\n                    qb.leftJoin(options.join!.leftJoin![key], key);\r\n                });\r\n\r\n            if (options.join.innerJoin)\r\n                Object.keys(options.join.innerJoin).forEach(key => {\r\n                    qb.innerJoin(options.join!.innerJoin![key], key);\r\n                });\r\n\r\n            if (options.join.leftJoinAndSelect)\r\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\r\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\r\n                });\r\n\r\n            if (options.join.innerJoinAndSelect)\r\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\r\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\r\n                });\r\n        }\r\n\r\n        if (options.cache) {\r\n            if (options.cache instanceof Object) {\r\n                const cache = options.cache as { id: any, milliseconds: number };\r\n                qb.cache(cache.id, cache.milliseconds);\r\n            } else {\r\n                qb.cache(options.cache);\r\n            }\r\n        }\r\n\r\n        if (options.lock) {\r\n            if (options.lock.mode === \"optimistic\") {\r\n                qb.setLock(options.lock.mode, options.lock.version);\r\n            } else if (\r\n                options.lock.mode === \"pessimistic_read\" ||\r\n                options.lock.mode === \"pessimistic_write\" ||\r\n                options.lock.mode === \"dirty_read\" ||\r\n                options.lock.mode === \"pessimistic_partial_write\" ||\r\n                options.lock.mode === \"pessimistic_write_or_fail\" ||\r\n                options.lock.mode === \"for_no_key_update\" ||\r\n                options.lock.mode === \"for_key_share\"\r\n            ) {\r\n                const tableNames = options.lock.tables ? options.lock.tables.map((table) => {\r\n                    const tableAlias = qb.expressionMap.aliases.find((alias) => {\r\n                        return alias.metadata.tableNameWithoutPrefix === table;\r\n                    });\r\n                    if (!tableAlias) {\r\n                        throw new TypeORMError(`\"${table}\" is not part of this query`);\r\n                    }\r\n                    return qb.escape(tableAlias.name);\r\n                }) : undefined;\r\n                qb.setLock(options.lock.mode, undefined, tableNames);\r\n            }\r\n        }\r\n\r\n        if (options.loadRelationIds === true) {\r\n            qb.loadAllRelationIds();\r\n\r\n        } else if (options.loadRelationIds instanceof Object) {\r\n            qb.loadAllRelationIds(options.loadRelationIds as any);\r\n        }\r\n\r\n        if (options.where)\r\n            qb.where(options.where);\r\n\r\n        if ((options as FindManyOptions<T>).skip)\r\n            qb.skip((options as FindManyOptions<T>).skip!);\r\n\r\n        if ((options as FindManyOptions<T>).take)\r\n            qb.take((options as FindManyOptions<T>).take!);\r\n\r\n        if (options.order)\r\n            Object.keys(options.order).forEach(key => {\r\n                const order = ((options as FindOneOptions<T>).order as any)[key as any];\r\n\r\n                if (!metadata.findColumnWithPropertyPath(key))\r\n                    throw new Error(`${key} column was not found in the ${metadata.name} entity.`);\r\n\r\n                switch (order) {\r\n                    case 1:\r\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\r\n                        break;\r\n                    case -1:\r\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\r\n                        break;\r\n                    case \"ASC\":\r\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\r\n                        break;\r\n                    case \"DESC\":\r\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\r\n                        break;\r\n                }\r\n            });\r\n\r\n        return qb;\r\n    }*/\r\n\r\n    static applyOptionsToTreeQueryBuilder<T extends ObjectLiteral>(\r\n        qb: SelectQueryBuilder<T>,\r\n        options?: FindTreeOptions,\r\n    ): SelectQueryBuilder<T> {\r\n        if (options?.relations) {\r\n            // Copy because `applyRelationsRecursively` modifies it\r\n            const allRelations = [...options.relations]\r\n\r\n            FindOptionsUtils.applyRelationsRecursively(\r\n                qb,\r\n                allRelations,\r\n                qb.expressionMap.mainAlias!.name,\r\n                qb.expressionMap.mainAlias!.metadata,\r\n                \"\",\r\n            )\r\n\r\n            // recursive removes found relations from allRelations array\r\n            // if there are relations left in this array it means those relations were not found in the entity structure\r\n            // so, we give an exception about not found relations\r\n            if (allRelations.length > 0)\r\n                throw new FindRelationsNotFoundError(allRelations)\r\n        }\r\n\r\n        return qb\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Static Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\r\n     */\r\n    public static applyRelationsRecursively(\r\n        qb: SelectQueryBuilder<any>,\r\n        allRelations: string[],\r\n        alias: string,\r\n        metadata: EntityMetadata,\r\n        prefix: string,\r\n    ): void {\r\n        // find all relations that match given prefix\r\n        let matchedBaseRelations: RelationMetadata[] = []\r\n        if (prefix) {\r\n            const regexp = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\")\r\n            matchedBaseRelations = allRelations\r\n                .filter((relation) => relation.match(regexp))\r\n                .map((relation) =>\r\n                    metadata.findRelationWithPropertyPath(\r\n                        relation.replace(regexp, \"\"),\r\n                    ),\r\n                )\r\n                .filter((entity) => entity) as RelationMetadata[]\r\n        } else {\r\n            matchedBaseRelations = allRelations\r\n                .map((relation) =>\r\n                    metadata.findRelationWithPropertyPath(relation),\r\n                )\r\n                .filter((entity) => entity) as RelationMetadata[]\r\n        }\r\n\r\n        // go through all matched relations and add join for them\r\n        matchedBaseRelations.forEach((relation) => {\r\n            // generate a relation alias\r\n            let relationAlias: string = DriverUtils.buildAlias(\r\n                qb.connection.driver,\r\n                { joiner: \"__\" },\r\n                alias,\r\n                relation.propertyPath,\r\n            )\r\n\r\n            // add a join for the found relation\r\n            const selection = alias + \".\" + relation.propertyPath\r\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\r\n                qb.concatRelationMetadata(relation)\r\n            } else {\r\n                qb.leftJoinAndSelect(selection, relationAlias)\r\n            }\r\n\r\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\r\n            allRelations.splice(\r\n                allRelations.indexOf(\r\n                    prefix\r\n                        ? prefix + \".\" + relation.propertyPath\r\n                        : relation.propertyPath,\r\n                ),\r\n                1,\r\n            )\r\n\r\n            // try to find sub-relations\r\n            let relationMetadata: EntityMetadata | undefined\r\n            let relationName: string | undefined\r\n\r\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\r\n                relationMetadata = relation.inverseEntityMetadata\r\n                relationName = relationAlias\r\n            } else {\r\n                const join = qb.expressionMap.joinAttributes.find(\r\n                    (join) => join.entityOrProperty === selection,\r\n                )\r\n                relationMetadata = join!.metadata!\r\n                relationName = join!.alias.name\r\n            }\r\n\r\n            if (!relationName || !relationMetadata) {\r\n                throw new EntityPropertyNotFoundError(\r\n                    relation.propertyPath,\r\n                    metadata,\r\n                )\r\n            }\r\n\r\n            this.applyRelationsRecursively(\r\n                qb,\r\n                allRelations,\r\n                relationName,\r\n                relationMetadata,\r\n                prefix\r\n                    ? prefix + \".\" + relation.propertyPath\r\n                    : relation.propertyPath,\r\n            )\r\n\r\n            // join the eager relations of the found relation\r\n            // Only supported for \"join\" relationLoadStrategy\r\n            if (qb.expressionMap.relationLoadStrategy === \"join\") {\r\n                const relMetadata = metadata.relations.find(\r\n                    (metadata) =>\r\n                        metadata.propertyName === relation.propertyPath,\r\n                )\r\n                if (relMetadata) {\r\n                    this.joinEagerRelations(\r\n                        qb,\r\n                        relationAlias,\r\n                        relMetadata.inverseEntityMetadata,\r\n                    )\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public static joinEagerRelations(\r\n        qb: SelectQueryBuilder<any>,\r\n        alias: string,\r\n        metadata: EntityMetadata,\r\n    ) {\r\n        metadata.eagerRelations.forEach((relation) => {\r\n            // generate a relation alias\r\n            let relationAlias: string = DriverUtils.buildAlias(\r\n                qb.connection.driver,\r\n                { joiner: \"__\" },\r\n                alias,\r\n                relation.propertyName,\r\n            )\r\n\r\n            // add a join for the relation\r\n            // Checking whether the relation wasn't joined yet.\r\n            let addJoin = true\r\n            // TODO: Review this validation\r\n            for (const join of qb.expressionMap.joinAttributes) {\r\n                if (\r\n                    join.condition !== undefined ||\r\n                    join.mapToProperty !== undefined ||\r\n                    join.isMappingMany !== undefined ||\r\n                    join.direction !== \"LEFT\" ||\r\n                    join.entityOrProperty !==\r\n                        `${alias}.${relation.propertyPath}`\r\n                ) {\r\n                    continue\r\n                }\r\n                addJoin = false\r\n                relationAlias = join.alias.name\r\n                break\r\n            }\r\n\r\n            const joinAlreadyAdded = Boolean(\r\n                qb.expressionMap.joinAttributes.find(\r\n                    (joinAttribute) =>\r\n                        joinAttribute.alias.name === relationAlias,\r\n                ),\r\n            )\r\n\r\n            if (addJoin && !joinAlreadyAdded) {\r\n                qb.leftJoin(alias + \".\" + relation.propertyPath, relationAlias)\r\n            }\r\n\r\n            // Checking whether the relation wasn't selected yet.\r\n            // This check shall be after the join check to detect relationAlias.\r\n            let addSelect = true\r\n            for (const select of qb.expressionMap.selects) {\r\n                if (\r\n                    select.aliasName !== undefined ||\r\n                    select.virtual !== undefined ||\r\n                    select.selection !== relationAlias\r\n                ) {\r\n                    continue\r\n                }\r\n                addSelect = false\r\n                break\r\n            }\r\n\r\n            if (addSelect) {\r\n                qb.addSelect(relationAlias)\r\n            }\r\n\r\n            // (recursive) join the eager relations\r\n            this.joinEagerRelations(\r\n                qb,\r\n                relationAlias,\r\n                relation.inverseEntityMetadata,\r\n            )\r\n        })\r\n    }\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../../src/find-options/operator/Raw.ts"],"names":[],"mappings":";;AA2BA,kBAgBC;AA3CD,kDAA8C;AA2B9C,SAAgB,GAAG,CACf,mBAA+D,EAC/D,sBAAsC;IAEtC,IAAI,OAAO,mBAAmB,KAAK,UAAU,EAAE,CAAC;QAC5C,OAAO,IAAI,2BAAY,CAAC,KAAK,EAAE,mBAAmB,EAAE,KAAK,CAAC,CAAA;IAC9D,CAAC;IAED,OAAO,IAAI,2BAAY,CACnB,KAAK,EACL,EAAE,EACF,IAAI,EACJ,IAAI,EACJ,mBAAmB,EACnB,sBAAsB,CACzB,CAAA;AACL,CAAC","file":"Raw.js","sourcesContent":["import { FindOperator } from \"../FindOperator\"\r\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\r\n\r\n/**\r\n * Find Options Operator.\r\n * Example: { someField: Raw(\"12\") }\r\n */\r\nexport function Raw<T>(value: string): FindOperator<any>\r\n\r\n/**\r\n * Find Options Operator.\r\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = 5`) }\r\n */\r\nexport function Raw<T>(\r\n    sqlGenerator: (columnAlias: string) => string,\r\n): FindOperator<any>\r\n\r\n/**\r\n * Find Options Operator.\r\n * For escaping parameters use next syntax:\r\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = :value`, { value: 5 }) }\r\n */\r\nexport function Raw<T>(\r\n    sqlGenerator: (columnAlias: string) => string,\r\n    parameters: ObjectLiteral,\r\n): FindOperator<any>\r\n\r\nexport function Raw<T>(\r\n    valueOrSqlGenerator: string | ((columnAlias: string) => string),\r\n    sqlGeneratorParameters?: ObjectLiteral,\r\n): FindOperator<any> {\r\n    if (typeof valueOrSqlGenerator !== \"function\") {\r\n        return new FindOperator(\"raw\", valueOrSqlGenerator, false)\r\n    }\r\n\r\n    return new FindOperator(\r\n        \"raw\",\r\n        [],\r\n        true,\r\n        true,\r\n        valueOrSqlGenerator,\r\n        sqlGeneratorParameters,\r\n    )\r\n}\r\n"],"sourceRoot":"../.."}
{"version":3,"sources":["../../src/metadata-args/MetadataArgsStorage.ts"],"names":[],"mappings":"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","file":"MetadataArgsStorage.js","sourcesContent":["import { RelationMetadataArgs } from \"./RelationMetadataArgs\"\r\nimport { ColumnMetadataArgs } from \"./ColumnMetadataArgs\"\r\nimport { RelationCountMetadataArgs } from \"./RelationCountMetadataArgs\"\r\nimport { IndexMetadataArgs } from \"./IndexMetadataArgs\"\r\nimport { EntityListenerMetadataArgs } from \"./EntityListenerMetadataArgs\"\r\nimport { TableMetadataArgs } from \"./TableMetadataArgs\"\r\nimport { NamingStrategyMetadataArgs } from \"./NamingStrategyMetadataArgs\"\r\nimport { JoinTableMetadataArgs } from \"./JoinTableMetadataArgs\"\r\nimport { JoinColumnMetadataArgs } from \"./JoinColumnMetadataArgs\"\r\nimport { EmbeddedMetadataArgs } from \"./EmbeddedMetadataArgs\"\r\nimport { EntitySubscriberMetadataArgs } from \"./EntitySubscriberMetadataArgs\"\r\nimport { RelationIdMetadataArgs } from \"./RelationIdMetadataArgs\"\r\nimport { InheritanceMetadataArgs } from \"./InheritanceMetadataArgs\"\r\nimport { DiscriminatorValueMetadataArgs } from \"./DiscriminatorValueMetadataArgs\"\r\nimport { EntityRepositoryMetadataArgs } from \"./EntityRepositoryMetadataArgs\"\r\nimport { TransactionEntityMetadataArgs } from \"./TransactionEntityMetadataArgs\"\r\nimport { TransactionRepositoryMetadataArgs } from \"./TransactionRepositoryMetadataArgs\"\r\nimport { MetadataUtils } from \"../metadata-builder/MetadataUtils\"\r\nimport { GeneratedMetadataArgs } from \"./GeneratedMetadataArgs\"\r\nimport { TreeMetadataArgs } from \"./TreeMetadataArgs\"\r\nimport { UniqueMetadataArgs } from \"./UniqueMetadataArgs\"\r\nimport { CheckMetadataArgs } from \"./CheckMetadataArgs\"\r\nimport { ExclusionMetadataArgs } from \"./ExclusionMetadataArgs\"\r\n\r\n/**\r\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\r\n * Each metadata args represents some specifications of what it represents.\r\n * MetadataArgs used to create a real Metadata objects.\r\n */\r\nexport class MetadataArgsStorage {\r\n    // -------------------------------------------------------------------------\r\n    // Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    readonly tables: TableMetadataArgs[] = []\r\n    readonly trees: TreeMetadataArgs[] = []\r\n    readonly entityRepositories: EntityRepositoryMetadataArgs[] = []\r\n    readonly transactionEntityManagers: TransactionEntityMetadataArgs[] = []\r\n    readonly transactionRepositories: TransactionRepositoryMetadataArgs[] = []\r\n    readonly namingStrategies: NamingStrategyMetadataArgs[] = []\r\n    readonly entitySubscribers: EntitySubscriberMetadataArgs[] = []\r\n    readonly indices: IndexMetadataArgs[] = []\r\n    readonly uniques: UniqueMetadataArgs[] = []\r\n    readonly checks: CheckMetadataArgs[] = []\r\n    readonly exclusions: ExclusionMetadataArgs[] = []\r\n    readonly columns: ColumnMetadataArgs[] = []\r\n    readonly generations: GeneratedMetadataArgs[] = []\r\n    readonly relations: RelationMetadataArgs[] = []\r\n    readonly joinColumns: JoinColumnMetadataArgs[] = []\r\n    readonly joinTables: JoinTableMetadataArgs[] = []\r\n    readonly entityListeners: EntityListenerMetadataArgs[] = []\r\n    readonly relationCounts: RelationCountMetadataArgs[] = []\r\n    readonly relationIds: RelationIdMetadataArgs[] = []\r\n    readonly embeddeds: EmbeddedMetadataArgs[] = []\r\n    readonly inheritances: InheritanceMetadataArgs[] = []\r\n    readonly discriminatorValues: DiscriminatorValueMetadataArgs[] = []\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    filterTables(target: Function | string): TableMetadataArgs[]\r\n    filterTables(target: (Function | string)[]): TableMetadataArgs[]\r\n    filterTables(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): TableMetadataArgs[] {\r\n        return this.filterByTarget(this.tables, target)\r\n    }\r\n\r\n    filterColumns(target: Function | string): ColumnMetadataArgs[]\r\n    filterColumns(target: (Function | string)[]): ColumnMetadataArgs[]\r\n    filterColumns(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): ColumnMetadataArgs[] {\r\n        return this.filterByTargetAndWithoutDuplicateProperties(\r\n            this.columns,\r\n            target,\r\n        )\r\n    }\r\n\r\n    findGenerated(\r\n        target: Function | string,\r\n        propertyName: string,\r\n    ): GeneratedMetadataArgs | undefined\r\n    findGenerated(\r\n        target: (Function | string)[],\r\n        propertyName: string,\r\n    ): GeneratedMetadataArgs | undefined\r\n    findGenerated(\r\n        target: (Function | string) | (Function | string)[],\r\n        propertyName: string,\r\n    ): GeneratedMetadataArgs | undefined {\r\n        return this.generations.find((generated) => {\r\n            return (\r\n                (Array.isArray(target)\r\n                    ? target.indexOf(generated.target) !== -1\r\n                    : generated.target === target) &&\r\n                generated.propertyName === propertyName\r\n            )\r\n        })\r\n    }\r\n\r\n    findTree(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): TreeMetadataArgs | undefined {\r\n        return this.trees.find((tree) => {\r\n            return Array.isArray(target)\r\n                ? target.indexOf(tree.target) !== -1\r\n                : tree.target === target\r\n        })\r\n    }\r\n\r\n    filterRelations(target: Function | string): RelationMetadataArgs[]\r\n    filterRelations(target: (Function | string)[]): RelationMetadataArgs[]\r\n    filterRelations(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): RelationMetadataArgs[] {\r\n        return this.filterByTargetAndWithoutDuplicateRelationProperties(\r\n            this.relations,\r\n            target,\r\n        )\r\n    }\r\n\r\n    filterRelationIds(target: Function | string): RelationIdMetadataArgs[]\r\n    filterRelationIds(target: (Function | string)[]): RelationIdMetadataArgs[]\r\n    filterRelationIds(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): RelationIdMetadataArgs[] {\r\n        return this.filterByTargetAndWithoutDuplicateProperties(\r\n            this.relationIds,\r\n            target,\r\n        )\r\n    }\r\n\r\n    filterRelationCounts(target: Function | string): RelationCountMetadataArgs[]\r\n    filterRelationCounts(\r\n        target: (Function | string)[],\r\n    ): RelationCountMetadataArgs[]\r\n    filterRelationCounts(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): RelationCountMetadataArgs[] {\r\n        return this.filterByTargetAndWithoutDuplicateProperties(\r\n            this.relationCounts,\r\n            target,\r\n        )\r\n    }\r\n\r\n    filterIndices(target: Function | string): IndexMetadataArgs[]\r\n    filterIndices(target: (Function | string)[]): IndexMetadataArgs[]\r\n    filterIndices(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): IndexMetadataArgs[] {\r\n        // todo: implement parent-entity overrides?\r\n        return this.indices.filter((index) => {\r\n            return Array.isArray(target)\r\n                ? target.indexOf(index.target) !== -1\r\n                : index.target === target\r\n        })\r\n    }\r\n\r\n    filterUniques(target: Function | string): UniqueMetadataArgs[]\r\n    filterUniques(target: (Function | string)[]): UniqueMetadataArgs[]\r\n    filterUniques(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): UniqueMetadataArgs[] {\r\n        return this.uniques.filter((unique) => {\r\n            return Array.isArray(target)\r\n                ? target.indexOf(unique.target) !== -1\r\n                : unique.target === target\r\n        })\r\n    }\r\n\r\n    filterChecks(target: Function | string): CheckMetadataArgs[]\r\n    filterChecks(target: (Function | string)[]): CheckMetadataArgs[]\r\n    filterChecks(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): CheckMetadataArgs[] {\r\n        return this.checks.filter((check) => {\r\n            return Array.isArray(target)\r\n                ? target.indexOf(check.target) !== -1\r\n                : check.target === target\r\n        })\r\n    }\r\n\r\n    filterExclusions(target: Function | string): ExclusionMetadataArgs[]\r\n    filterExclusions(target: (Function | string)[]): ExclusionMetadataArgs[]\r\n    filterExclusions(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): ExclusionMetadataArgs[] {\r\n        return this.exclusions.filter((exclusion) => {\r\n            return Array.isArray(target)\r\n                ? target.indexOf(exclusion.target) !== -1\r\n                : exclusion.target === target\r\n        })\r\n    }\r\n\r\n    filterListeners(target: Function | string): EntityListenerMetadataArgs[]\r\n    filterListeners(target: (Function | string)[]): EntityListenerMetadataArgs[]\r\n    filterListeners(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): EntityListenerMetadataArgs[] {\r\n        return this.filterByTarget(this.entityListeners, target)\r\n    }\r\n\r\n    filterEmbeddeds(target: Function | string): EmbeddedMetadataArgs[]\r\n    filterEmbeddeds(target: (Function | string)[]): EmbeddedMetadataArgs[]\r\n    filterEmbeddeds(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): EmbeddedMetadataArgs[] {\r\n        return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(\r\n            this.embeddeds,\r\n            target,\r\n        )\r\n    }\r\n\r\n    findJoinTable(\r\n        target: Function | string,\r\n        propertyName: string,\r\n    ): JoinTableMetadataArgs | undefined {\r\n        return this.joinTables.find((joinTable) => {\r\n            return (\r\n                joinTable.target === target &&\r\n                joinTable.propertyName === propertyName\r\n            )\r\n        })\r\n    }\r\n\r\n    filterJoinColumns(\r\n        target: Function | string,\r\n        propertyName: string,\r\n    ): JoinColumnMetadataArgs[] {\r\n        // todo: implement parent-entity overrides?\r\n        return this.joinColumns.filter((joinColumn) => {\r\n            return (\r\n                joinColumn.target === target &&\r\n                joinColumn.propertyName === propertyName\r\n            )\r\n        })\r\n    }\r\n\r\n    filterSubscribers(target: Function | string): EntitySubscriberMetadataArgs[]\r\n    filterSubscribers(\r\n        target: (Function | string)[],\r\n    ): EntitySubscriberMetadataArgs[]\r\n    filterSubscribers(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): EntitySubscriberMetadataArgs[] {\r\n        return this.filterByTarget(this.entitySubscribers, target)\r\n    }\r\n\r\n    filterNamingStrategies(\r\n        target: Function | string,\r\n    ): NamingStrategyMetadataArgs[]\r\n    filterNamingStrategies(\r\n        target: (Function | string)[],\r\n    ): NamingStrategyMetadataArgs[]\r\n    filterNamingStrategies(\r\n        target: (Function | string) | (Function | string)[],\r\n    ): NamingStrategyMetadataArgs[] {\r\n        return this.filterByTarget(this.namingStrategies, target)\r\n    }\r\n\r\n    filterTransactionEntityManagers(\r\n        target: Function | string,\r\n        propertyName: string,\r\n    ): TransactionEntityMetadataArgs[] {\r\n        return this.transactionEntityManagers.filter((transactionEm) => {\r\n            return (\r\n                (Array.isArray(target)\r\n                    ? target.indexOf(transactionEm.target) !== -1\r\n                    : transactionEm.target === target) &&\r\n                transactionEm.methodName === propertyName\r\n            )\r\n        })\r\n    }\r\n\r\n    filterTransactionRepository(\r\n        target: Function | string,\r\n        propertyName: string,\r\n    ): TransactionRepositoryMetadataArgs[] {\r\n        return this.transactionRepositories.filter((transactionEm) => {\r\n            return (\r\n                (Array.isArray(target)\r\n                    ? target.indexOf(transactionEm.target) !== -1\r\n                    : transactionEm.target === target) &&\r\n                transactionEm.methodName === propertyName\r\n            )\r\n        })\r\n    }\r\n\r\n    filterSingleTableChildren(target: Function | string): TableMetadataArgs[] {\r\n        return this.tables.filter((table) => {\r\n            return (\r\n                typeof table.target === \"function\" &&\r\n                typeof target === \"function\" &&\r\n                MetadataUtils.isInherited(table.target, target) &&\r\n                table.type === \"entity-child\"\r\n            )\r\n        })\r\n    }\r\n\r\n    findInheritanceType(\r\n        target: Function | string,\r\n    ): InheritanceMetadataArgs | undefined {\r\n        return this.inheritances.find(\r\n            (inheritance) => inheritance.target === target,\r\n        )\r\n    }\r\n\r\n    findDiscriminatorValue(\r\n        target: Function | string,\r\n    ): DiscriminatorValueMetadataArgs | undefined {\r\n        return this.discriminatorValues.find(\r\n            (discriminatorValue) => discriminatorValue.target === target,\r\n        )\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Filters given array by a given target or targets.\r\n     */\r\n    protected filterByTarget<T extends { target: Function | string }>(\r\n        array: T[],\r\n        target: (Function | string) | (Function | string)[],\r\n    ): T[] {\r\n        return array.filter((table) => {\r\n            return Array.isArray(target)\r\n                ? target.indexOf(table.target) !== -1\r\n                : table.target === target\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Filters given array by a given target or targets and prevents duplicate property names.\r\n     */\r\n    protected filterByTargetAndWithoutDuplicateProperties<\r\n        T extends { target: Function | string; propertyName: string },\r\n    >(array: T[], target: (Function | string) | (Function | string)[]): T[] {\r\n        const newArray: T[] = []\r\n        array.forEach((item) => {\r\n            const sameTarget = Array.isArray(target)\r\n                ? target.indexOf(item.target) !== -1\r\n                : item.target === target\r\n            if (sameTarget) {\r\n                if (\r\n                    !newArray.find(\r\n                        (newItem) => newItem.propertyName === item.propertyName,\r\n                    )\r\n                )\r\n                    newArray.push(item)\r\n            }\r\n        })\r\n        return newArray\r\n    }\r\n\r\n    /**\r\n     * Filters given array by a given target or targets and prevents duplicate relation property names.\r\n     */\r\n    protected filterByTargetAndWithoutDuplicateRelationProperties<\r\n        T extends RelationMetadataArgs,\r\n    >(array: T[], target: (Function | string) | (Function | string)[]): T[] {\r\n        const newArray: T[] = []\r\n        array.forEach((item) => {\r\n            const sameTarget = Array.isArray(target)\r\n                ? target.indexOf(item.target) !== -1\r\n                : item.target === target\r\n            if (sameTarget) {\r\n                const existingIndex = newArray.findIndex(\r\n                    (newItem) => newItem.propertyName === item.propertyName,\r\n                )\r\n                if (\r\n                    Array.isArray(target) &&\r\n                    existingIndex !== -1 &&\r\n                    target.indexOf(item.target) <\r\n                        target.indexOf(newArray[existingIndex].target)\r\n                ) {\r\n                    const clone = Object.create(newArray[existingIndex])\r\n                    clone.type = item.type\r\n                    newArray[existingIndex] = clone\r\n                } else if (existingIndex === -1) {\r\n                    newArray.push(item)\r\n                }\r\n            }\r\n        })\r\n        return newArray\r\n    }\r\n\r\n    /**\r\n     * Filters given array by a given target or targets and prevents duplicate embedded property names.\r\n     */\r\n    protected filterByTargetAndWithoutDuplicateEmbeddedProperties<\r\n        T extends EmbeddedMetadataArgs,\r\n    >(array: T[], target: (Function | string) | (Function | string)[]): T[] {\r\n        const newArray: T[] = []\r\n        array.forEach((item) => {\r\n            const sameTarget = Array.isArray(target)\r\n                ? target.indexOf(item.target) !== -1\r\n                : item.target === target\r\n            if (sameTarget) {\r\n                const isDuplicateEmbeddedProperty = newArray.find(\r\n                    (newItem: EmbeddedMetadataArgs): boolean =>\r\n                        newItem.prefix === item.prefix &&\r\n                        newItem.propertyName === item.propertyName,\r\n                )\r\n                if (!isDuplicateEmbeddedProperty) newArray.push(item)\r\n            }\r\n        })\r\n        return newArray\r\n    }\r\n}\r\n"],"sourceRoot":".."}
{"version":3,"sources":["../../src/metadata/UniqueMetadata.ts"],"names":[],"mappings":"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","file":"UniqueMetadata.js","sourcesContent":["import { EmbeddedMetadata } from \"./EmbeddedMetadata\"\r\nimport { EntityMetadata } from \"./EntityMetadata\"\r\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\r\nimport { ColumnMetadata } from \"./ColumnMetadata\"\r\nimport { UniqueMetadataArgs } from \"../metadata-args/UniqueMetadataArgs\"\r\nimport { TypeORMError } from \"../error\"\r\nimport { DeferrableType } from \"./types/DeferrableType\"\r\n\r\n/**\r\n * Unique metadata contains all information about table's unique constraints.\r\n */\r\nexport class UniqueMetadata {\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the class to which this unique constraint is applied.\r\n     */\r\n    entityMetadata: EntityMetadata\r\n\r\n    /**\r\n     * Embedded metadata if this unique was applied on embedded.\r\n     */\r\n    embeddedMetadata?: EmbeddedMetadata\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     */\r\n    target?: Function | string\r\n\r\n    /**\r\n     * Unique columns.\r\n     */\r\n    columns: ColumnMetadata[] = []\r\n\r\n    /**\r\n     * Indicate if unique constraints can be deferred.\r\n     */\r\n    deferrable?: DeferrableType\r\n\r\n    /**\r\n     * User specified unique constraint name.\r\n     */\r\n    givenName?: string\r\n\r\n    /**\r\n     * User specified column names.\r\n     */\r\n    givenColumnNames?:\r\n        | ((object?: any) => any[] | { [key: string]: number })\r\n        | string[]\r\n\r\n    /**\r\n     * Final unique constraint name.\r\n     * If unique constraint name was given by a user then it stores normalized (by naming strategy) givenName.\r\n     * If unique constraint name was not given then its generated.\r\n     */\r\n    name: string\r\n\r\n    /**\r\n     * Map of column names with order set.\r\n     * Used only by MongoDB driver.\r\n     */\r\n    columnNamesWithOrderingMap: { [key: string]: number } = {}\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata\r\n        embeddedMetadata?: EmbeddedMetadata\r\n        columns?: ColumnMetadata[]\r\n        args?: UniqueMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata\r\n        this.embeddedMetadata = options.embeddedMetadata\r\n        if (options.columns) this.columns = options.columns\r\n\r\n        if (options.args) {\r\n            this.target = options.args.target\r\n            this.givenName = options.args.name\r\n            this.givenColumnNames = options.args.columns\r\n            this.deferrable = options.args.deferrable\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Build Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Builds some depend unique constraint properties.\r\n     * Must be called after all entity metadata's properties map, columns and relations are built.\r\n     */\r\n    build(namingStrategy: NamingStrategyInterface): this {\r\n        const map: { [key: string]: number } = {}\r\n\r\n        // if columns already an array of string then simply return it\r\n        if (this.givenColumnNames) {\r\n            let columnPropertyPaths: string[] = []\r\n            if (Array.isArray(this.givenColumnNames)) {\r\n                columnPropertyPaths = this.givenColumnNames.map(\r\n                    (columnName) => {\r\n                        if (this.embeddedMetadata)\r\n                            return (\r\n                                this.embeddedMetadata.propertyPath +\r\n                                \".\" +\r\n                                columnName\r\n                            )\r\n\r\n                        return columnName.trim()\r\n                    },\r\n                )\r\n                columnPropertyPaths.forEach(\r\n                    (propertyPath) => (map[propertyPath] = 1),\r\n                )\r\n            } else {\r\n                // if columns is a function that returns array of field names then execute it and get columns names from it\r\n                const columnsFnResult = this.givenColumnNames(\r\n                    this.entityMetadata.propertiesMap,\r\n                )\r\n                if (Array.isArray(columnsFnResult)) {\r\n                    columnPropertyPaths = columnsFnResult.map((i: any) =>\r\n                        String(i),\r\n                    )\r\n                    columnPropertyPaths.forEach((name) => (map[name] = 1))\r\n                } else {\r\n                    columnPropertyPaths = Object.keys(columnsFnResult).map(\r\n                        (i: any) => String(i),\r\n                    )\r\n                    Object.keys(columnsFnResult).forEach(\r\n                        (columnName) =>\r\n                            (map[columnName] = columnsFnResult[columnName]),\r\n                    )\r\n                }\r\n            }\r\n\r\n            this.columns = columnPropertyPaths\r\n                .map((propertyName) => {\r\n                    const columnWithSameName = this.entityMetadata.columns.find(\r\n                        (column) => column.propertyPath === propertyName,\r\n                    )\r\n                    if (columnWithSameName) {\r\n                        return [columnWithSameName]\r\n                    }\r\n                    const relationWithSameName =\r\n                        this.entityMetadata.relations.find(\r\n                            (relation) =>\r\n                                relation.isWithJoinColumn &&\r\n                                relation.propertyName === propertyName,\r\n                        )\r\n                    if (relationWithSameName) {\r\n                        return relationWithSameName.joinColumns\r\n                    }\r\n                    const indexName = this.givenName\r\n                        ? '\"' + this.givenName + '\" '\r\n                        : \"\"\r\n                    const entityName = this.entityMetadata.targetName\r\n                    throw new TypeORMError(\r\n                        `Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` +\r\n                            propertyName,\r\n                    )\r\n                })\r\n                .reduce((a, b) => a.concat(b))\r\n        }\r\n\r\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce(\r\n            (updatedMap, key) => {\r\n                const column = this.entityMetadata.columns.find(\r\n                    (column) => column.propertyPath === key,\r\n                )\r\n                if (column) updatedMap[column.databasePath] = map[key]\r\n\r\n                return updatedMap\r\n            },\r\n            {} as { [key: string]: number },\r\n        )\r\n\r\n        this.name = this.givenName\r\n            ? this.givenName\r\n            : namingStrategy.uniqueConstraintName(\r\n                  this.entityMetadata.tableName,\r\n                  this.columns.map((column) => column.databaseName),\r\n              )\r\n        return this\r\n    }\r\n}\r\n"],"sourceRoot":".."}
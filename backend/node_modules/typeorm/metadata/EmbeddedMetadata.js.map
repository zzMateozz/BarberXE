{"version":3,"sources":["../../src/metadata/EmbeddedMetadata.ts"],"names":[],"mappings":"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","file":"EmbeddedMetadata.js","sourcesContent":["import { ColumnMetadata } from \"./ColumnMetadata\"\r\nimport { RelationMetadata } from \"./RelationMetadata\"\r\nimport { EntityMetadata } from \"./EntityMetadata\"\r\nimport { EmbeddedMetadataArgs } from \"../metadata-args/EmbeddedMetadataArgs\"\r\nimport { RelationIdMetadata } from \"./RelationIdMetadata\"\r\nimport { RelationCountMetadata } from \"./RelationCountMetadata\"\r\nimport { DataSource } from \"../data-source/DataSource\"\r\nimport { EntityListenerMetadata } from \"./EntityListenerMetadata\"\r\nimport { IndexMetadata } from \"./IndexMetadata\"\r\nimport { UniqueMetadata } from \"./UniqueMetadata\"\r\nimport { TypeORMError } from \"../error\"\r\n\r\n/**\r\n * Contains all information about entity's embedded property.\r\n */\r\nexport class EmbeddedMetadata {\r\n    // ---------------------------------------------------------------------\r\n    // Public Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata where this embedded is.\r\n     */\r\n    entityMetadata: EntityMetadata\r\n\r\n    /**\r\n     * Parent embedded in the case if this embedded inside other embedded.\r\n     */\r\n    parentEmbeddedMetadata?: EmbeddedMetadata\r\n\r\n    /**\r\n     * Embedded target type.\r\n     */\r\n    type: Function | string\r\n\r\n    /**\r\n     * Property name on which this embedded is attached.\r\n     */\r\n    propertyName: string\r\n\r\n    /**\r\n     * Gets full path to this embedded property (including embedded property name).\r\n     * Full path is relevant when embedded is used inside other embeds (one or multiple nested).\r\n     * For example it will return \"counters.subcounters\".\r\n     */\r\n    propertyPath: string\r\n\r\n    /**\r\n     * Columns inside this embed.\r\n     */\r\n    columns: ColumnMetadata[] = []\r\n\r\n    /**\r\n     * Relations inside this embed.\r\n     */\r\n    relations: RelationMetadata[] = []\r\n\r\n    /**\r\n     * Entity listeners inside this embed.\r\n     */\r\n    listeners: EntityListenerMetadata[] = []\r\n\r\n    /**\r\n     * Indices applied to the embed columns.\r\n     */\r\n    indices: IndexMetadata[] = []\r\n\r\n    /**\r\n     * Uniques applied to the embed columns.\r\n     */\r\n    uniques: UniqueMetadata[] = []\r\n\r\n    /**\r\n     * Relation ids inside this embed.\r\n     */\r\n    relationIds: RelationIdMetadata[] = []\r\n\r\n    /**\r\n     * Relation counts inside this embed.\r\n     */\r\n    relationCounts: RelationCountMetadata[] = []\r\n\r\n    /**\r\n     * Nested embeddable in this embeddable (which has current embedded as parent embedded).\r\n     */\r\n    embeddeds: EmbeddedMetadata[] = []\r\n\r\n    /**\r\n     * Indicates if the entity should be instantiated using the constructor\r\n     * or via allocating a new object via `Object.create()`.\r\n     */\r\n    isAlwaysUsingConstructor: boolean = true\r\n\r\n    /**\r\n     * Indicates if this embedded is in array mode.\r\n     *\r\n     * This option works only in mongodb.\r\n     */\r\n    isArray: boolean = false\r\n\r\n    /**\r\n     * Prefix of the embedded, used instead of propertyName.\r\n     * If set to empty string or false, then prefix is not set at all.\r\n     */\r\n    customPrefix: string | boolean | undefined\r\n\r\n    /**\r\n     * Gets the prefix of the columns.\r\n     * By default its a property name of the class where this prefix is.\r\n     * But if custom prefix is set then it takes its value as a prefix.\r\n     * However if custom prefix is set to empty string or false, then prefix to column is not applied at all.\r\n     */\r\n    prefix: string\r\n\r\n    /**\r\n     * Returns array of property names of current embed and all its parent embeds.\r\n     *\r\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\r\n     * we need to get value of \"id\" column from the post real entity object.\r\n     * this method will return [\"data\", \"information\", \"counters\"]\r\n     */\r\n    parentPropertyNames: string[] = []\r\n\r\n    /**\r\n     * Returns array of prefixes of current embed and all its parent embeds.\r\n     */\r\n    parentPrefixes: string[] = []\r\n\r\n    /**\r\n     * Returns embed metadatas from all levels of the parent tree.\r\n     *\r\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\r\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\r\n     */\r\n    embeddedMetadataTree: EmbeddedMetadata[] = []\r\n\r\n    /**\r\n     * Embed metadatas from all levels of the parent tree.\r\n     *\r\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\r\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\r\n     */\r\n    columnsFromTree: ColumnMetadata[] = []\r\n\r\n    /**\r\n     * Relations of this embed and all relations from its child embeds.\r\n     */\r\n    relationsFromTree: RelationMetadata[] = []\r\n\r\n    /**\r\n     * Relations of this embed and all relations from its child embeds.\r\n     */\r\n    listenersFromTree: EntityListenerMetadata[] = []\r\n\r\n    /**\r\n     * Indices of this embed and all indices from its child embeds.\r\n     */\r\n    indicesFromTree: IndexMetadata[] = []\r\n\r\n    /**\r\n     * Uniques of this embed and all uniques from its child embeds.\r\n     */\r\n    uniquesFromTree: UniqueMetadata[] = []\r\n\r\n    /**\r\n     * Relation ids of this embed and all relation ids from its child embeds.\r\n     */\r\n    relationIdsFromTree: RelationIdMetadata[] = []\r\n\r\n    /**\r\n     * Relation counts of this embed and all relation counts from its child embeds.\r\n     */\r\n    relationCountsFromTree: RelationCountMetadata[] = []\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata\r\n        args: EmbeddedMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata\r\n        this.type = options.args.type()\r\n        this.propertyName = options.args.propertyName\r\n        this.customPrefix = options.args.prefix\r\n        this.isArray = options.args.isArray\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new embedded object.\r\n     */\r\n    create(options?: { fromDeserializer?: boolean }): any {\r\n        if (!(typeof this.type === \"function\")) {\r\n            return {}\r\n        }\r\n\r\n        if (options?.fromDeserializer || !this.isAlwaysUsingConstructor) {\r\n            return Object.create(this.type.prototype)\r\n        } else {\r\n            return new (this.type as any)()\r\n        }\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Builder Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    build(connection: DataSource): this {\r\n        this.embeddeds.forEach((embedded) => embedded.build(connection))\r\n        this.prefix = this.buildPrefix(connection)\r\n        this.parentPropertyNames = this.buildParentPropertyNames()\r\n        this.parentPrefixes = this.buildParentPrefixes()\r\n        this.propertyPath = this.parentPropertyNames.join(\".\")\r\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree()\r\n        this.columnsFromTree = this.buildColumnsFromTree()\r\n        this.relationsFromTree = this.buildRelationsFromTree()\r\n        this.listenersFromTree = this.buildListenersFromTree()\r\n        this.indicesFromTree = this.buildIndicesFromTree()\r\n        this.uniquesFromTree = this.buildUniquesFromTree()\r\n        this.relationIdsFromTree = this.buildRelationIdsFromTree()\r\n        this.relationCountsFromTree = this.buildRelationCountsFromTree()\r\n\r\n        if (connection.options.entitySkipConstructor) {\r\n            this.isAlwaysUsingConstructor =\r\n                !connection.options.entitySkipConstructor\r\n        }\r\n\r\n        return this\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Protected Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    protected buildPartialPrefix(): string[] {\r\n        // if prefix option was not set or explicitly set to true - default prefix\r\n        if (this.customPrefix === undefined || this.customPrefix === true) {\r\n            return [this.propertyName]\r\n        }\r\n\r\n        // if prefix option was set to empty string or explicity set to false - disable prefix\r\n        if (this.customPrefix === \"\" || this.customPrefix === false) {\r\n            return []\r\n        }\r\n\r\n        // use custom prefix\r\n        if (typeof this.customPrefix === \"string\") {\r\n            return [this.customPrefix]\r\n        }\r\n\r\n        throw new TypeORMError(\r\n            `Invalid prefix option given for ${this.entityMetadata.targetName}#${this.propertyName}`,\r\n        )\r\n    }\r\n\r\n    protected buildPrefix(connection: DataSource): string {\r\n        if (connection.driver.options.type === \"mongodb\")\r\n            return this.propertyName\r\n\r\n        let prefixes: string[] = []\r\n        if (this.parentEmbeddedMetadata)\r\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection))\r\n\r\n        prefixes.push(...this.buildPartialPrefix())\r\n\r\n        return prefixes.join(\"_\") // todo: use naming strategy instead of \"_\"  !!!\r\n    }\r\n\r\n    protected buildParentPropertyNames(): string[] {\r\n        return this.parentEmbeddedMetadata\r\n            ? this.parentEmbeddedMetadata\r\n                  .buildParentPropertyNames()\r\n                  .concat(this.propertyName)\r\n            : [this.propertyName]\r\n    }\r\n\r\n    protected buildParentPrefixes(): string[] {\r\n        return this.parentEmbeddedMetadata\r\n            ? this.parentEmbeddedMetadata\r\n                  .buildParentPrefixes()\r\n                  .concat(this.buildPartialPrefix())\r\n            : this.buildPartialPrefix()\r\n    }\r\n\r\n    protected buildEmbeddedMetadataTree(): EmbeddedMetadata[] {\r\n        return this.parentEmbeddedMetadata\r\n            ? this.parentEmbeddedMetadata\r\n                  .buildEmbeddedMetadataTree()\r\n                  .concat(this)\r\n            : [this]\r\n    }\r\n\r\n    protected buildColumnsFromTree(): ColumnMetadata[] {\r\n        return this.embeddeds.reduce(\r\n            (columns, embedded) =>\r\n                columns.concat(embedded.buildColumnsFromTree()),\r\n            this.columns,\r\n        )\r\n    }\r\n\r\n    protected buildRelationsFromTree(): RelationMetadata[] {\r\n        return this.embeddeds.reduce(\r\n            (relations, embedded) =>\r\n                relations.concat(embedded.buildRelationsFromTree()),\r\n            this.relations,\r\n        )\r\n    }\r\n\r\n    protected buildListenersFromTree(): EntityListenerMetadata[] {\r\n        return this.embeddeds.reduce(\r\n            (relations, embedded) =>\r\n                relations.concat(embedded.buildListenersFromTree()),\r\n            this.listeners,\r\n        )\r\n    }\r\n\r\n    protected buildIndicesFromTree(): IndexMetadata[] {\r\n        return this.embeddeds.reduce(\r\n            (relations, embedded) =>\r\n                relations.concat(embedded.buildIndicesFromTree()),\r\n            this.indices,\r\n        )\r\n    }\r\n\r\n    protected buildUniquesFromTree(): UniqueMetadata[] {\r\n        return this.embeddeds.reduce(\r\n            (relations, embedded) =>\r\n                relations.concat(embedded.buildUniquesFromTree()),\r\n            this.uniques,\r\n        )\r\n    }\r\n\r\n    protected buildRelationIdsFromTree(): RelationIdMetadata[] {\r\n        return this.embeddeds.reduce(\r\n            (relations, embedded) =>\r\n                relations.concat(embedded.buildRelationIdsFromTree()),\r\n            this.relationIds,\r\n        )\r\n    }\r\n\r\n    protected buildRelationCountsFromTree(): RelationCountMetadata[] {\r\n        return this.embeddeds.reduce(\r\n            (relations, embedded) =>\r\n                relations.concat(embedded.buildRelationCountsFromTree()),\r\n            this.relationCounts,\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":".."}
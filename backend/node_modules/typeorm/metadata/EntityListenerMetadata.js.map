{"version":3,"sources":["../../src/metadata/EntityListenerMetadata.ts"],"names":[],"mappings":";;;AAMA;;GAEG;AACH,MAAa,sBAAsB;IA+B/B,wEAAwE;IACxE,cAAc;IACd,wEAAwE;IAExE,YAAY,OAIX;QACG,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAA;QAC5C,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAA;QAChD,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAA;QACjC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAA;QAC7C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAA;IACjC,CAAC;IAED,wEAAwE;IACxE,iBAAiB;IACjB,wEAAwE;IAExE;;OAEG;IACH,SAAS,CAAC,MAAqB;QAC3B,2DAA2D;QAC3D,OAAO,CACH,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,MAAM,CAAC,WAAW,IAAI,oIAAoI;YACzL,CAAC,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,UAAU;gBAC7C,MAAM,CAAC,WAAW,CAAC,SAAS;oBACxB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CACtC,CAAA,CAAC,yDAAyD;IAC/D,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,MAAqB;QACzB,IAAI,CAAC,IAAI,CAAC,gBAAgB;YAAE,OAAO,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAA;QAE9D,IAAI,CAAC,wBAAwB,CACzB,MAAM,EACN,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAChD,CAAA;IACL,CAAC;IAED,wEAAwE;IACxE,oBAAoB;IACpB,wEAAwE;IAExE;;OAEG;IACO,wBAAwB,CAC9B,MAAqB,EACrB,aAAuB;QAEvB,MAAM,YAAY,GAAG,aAAa,CAAC,KAAK,EAAE,CAAA;QAC1C,IAAI,CAAC,YAAY,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;YAAE,OAAM;QAElD,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC;gBACtC,MAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,QAAuB,EAAE,EAAE,CACjD,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAChC,CAAA;YACL,CAAC;iBAAM,CAAC;gBACJ,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAA;YAC7C,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,IAAI,MAAM,CAAC,YAAY,CAAC;gBACpB,IAAI,CAAC,wBAAwB,CACzB,MAAM,CAAC,YAAY,CAAC,EACpB,aAAa,CAChB,CAAA;QACT,CAAC;IACL,CAAC;CACJ;AA1GD,wDA0GC","file":"EntityListenerMetadata.js","sourcesContent":["import { EventListenerType } from \"./types/EventListenerTypes\"\r\nimport { EntityListenerMetadataArgs } from \"../metadata-args/EntityListenerMetadataArgs\"\r\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\r\nimport { EntityMetadata } from \"./EntityMetadata\"\r\nimport { EmbeddedMetadata } from \"./EmbeddedMetadata\"\r\n\r\n/**\r\n * This metadata contains all information about entity's listeners.\r\n */\r\nexport class EntityListenerMetadata {\r\n    // ---------------------------------------------------------------------\r\n    // Properties\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Entity metadata of the listener.\r\n     */\r\n    entityMetadata: EntityMetadata\r\n\r\n    /**\r\n     * Embedded metadata of the listener, in the case if listener is in embedded.\r\n     */\r\n    embeddedMetadata?: EmbeddedMetadata\r\n\r\n    /**\r\n     * Target class to which metadata is applied.\r\n     * This can be different then entityMetadata.target in the case if listener is in the embedded.\r\n     */\r\n    target: Function | string\r\n\r\n    /**\r\n     * Target's property name to which this metadata is applied.\r\n     */\r\n    propertyName: string\r\n\r\n    /**\r\n     * The type of the listener.\r\n     */\r\n    type: EventListenerType\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Constructor\r\n    // ---------------------------------------------------------------------\r\n\r\n    constructor(options: {\r\n        entityMetadata: EntityMetadata\r\n        embeddedMetadata?: EmbeddedMetadata\r\n        args: EntityListenerMetadataArgs\r\n    }) {\r\n        this.entityMetadata = options.entityMetadata\r\n        this.embeddedMetadata = options.embeddedMetadata\r\n        this.target = options.args.target\r\n        this.propertyName = options.args.propertyName\r\n        this.type = options.args.type\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Public Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Checks if entity listener is allowed to be executed on the given entity.\r\n     */\r\n    isAllowed(entity: ObjectLiteral) {\r\n        // todo: create in entity metadata method like isInherited?\r\n        return (\r\n            this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\r\n            (typeof this.entityMetadata.target === \"function\" &&\r\n                entity.constructor.prototype instanceof\r\n                    this.entityMetadata.target)\r\n        ) // todo: also need to implement entity schema inheritance\r\n    }\r\n\r\n    /**\r\n     * Executes listener method of the given entity.\r\n     */\r\n    execute(entity: ObjectLiteral) {\r\n        if (!this.embeddedMetadata) return entity[this.propertyName]()\r\n\r\n        this.callEntityEmbeddedMethod(\r\n            entity,\r\n            this.embeddedMetadata.propertyPath.split(\".\"),\r\n        )\r\n    }\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Protected Methods\r\n    // ---------------------------------------------------------------------\r\n\r\n    /**\r\n     * Calls embedded entity listener method no matter how nested it is.\r\n     */\r\n    protected callEntityEmbeddedMethod(\r\n        entity: ObjectLiteral,\r\n        propertyPaths: string[],\r\n    ): void {\r\n        const propertyPath = propertyPaths.shift()\r\n        if (!propertyPath || !entity[propertyPath]) return\r\n\r\n        if (propertyPaths.length === 0) {\r\n            if (Array.isArray(entity[propertyPath])) {\r\n                entity[propertyPath].map((embedded: ObjectLiteral) =>\r\n                    embedded[this.propertyName](),\r\n                )\r\n            } else {\r\n                entity[propertyPath][this.propertyName]()\r\n            }\r\n        } else {\r\n            if (entity[propertyPath])\r\n                this.callEntityEmbeddedMethod(\r\n                    entity[propertyPath],\r\n                    propertyPaths,\r\n                )\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":".."}